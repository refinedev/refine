{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "layout-01",
  "type": "registry:block",
  "title": "Layout 01",
  "author": "Refine <info@refine.dev>",
  "description": "A complete layout system with sidebar, header, and main content area for Refine applications",
  "dependencies": ["@refinedev/core", "lucide-react"],
  "registryDependencies": [
    "sidebar",
    "avatar",
    "button",
    "separator",
    "dropdown-menu",
    "collapsible",
    "https://ui.refine.dev/r/theme-provider.json"
  ],
  "files": [
    {
      "path": "registry/new-york/refine-ui/layout/layout-01/layout.tsx",
      "content": "\"use client\";\n\nimport type { PropsWithChildren } from \"react\";\nimport { SidebarProvider, SidebarInset } from \"@/registry/new-york/ui/sidebar\";\nimport { Sidebar } from \"@/registry/new-york/refine-ui/layout/layout-01/sidebar\";\nimport { Header } from \"@/registry/new-york/refine-ui/layout/layout-01/header\";\nimport { ThemeProvider } from \"@/registry/new-york/refine-ui/theme/theme-provider\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Layout({ children }: PropsWithChildren) {\n  return (\n    <ThemeProvider>\n      <SidebarProvider>\n        <Sidebar />\n        <SidebarInset>\n          <Header />\n          <main\n            className={cn(\n              \"@container/main\",\n              \"container\",\n              \"mx-auto\",\n              \"relative\",\n              \"w-full\",\n              \"flex\",\n              \"flex-col\",\n              \"flex-1\",\n              \"px-2\",\n              \"pt-4\",\n              \"md:p-4\",\n              \"lg:px-6\",\n              \"lg:pt-6\",\n            )}\n          >\n            {children}\n          </main>\n        </SidebarInset>\n      </SidebarProvider>\n    </ThemeProvider>\n  );\n}\n\nLayout.displayName = \"Layout\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/layout/layout.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/layout/layout-01/header.tsx",
      "content": "import {\n  useRefineOptions,\n  useActiveAuthProvider,\n  useLogout,\n} from \"@refinedev/core\";\nimport {\n  DropdownMenu,\n  DropdownMenuItem,\n  DropdownMenuContent,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { DropdownMenuTrigger } from \"@/registry/new-york/ui/dropdown-menu\";\nimport { ThemeToggle } from \"@/registry/new-york/refine-ui/theme/theme-toggle\";\nimport { UserAvatar } from \"@/registry/new-york/refine-ui/user/user-avatar\";\nimport { useSidebar, SidebarTrigger } from \"@/registry/new-york/ui/sidebar\";\nimport { LogOutIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport const Header = () => {\n  const { isMobile } = useSidebar();\n\n  return <>{isMobile ? <MobileHeader /> : <DesktopHeader />}</>;\n};\n\nfunction DesktopHeader() {\n  return (\n    <header\n      className={cn(\n        \"sticky\",\n        \"top-0\",\n        \"flex\",\n        \"h-16\",\n        \"shrink-0\",\n        \"items-center\",\n        \"gap-4\",\n        \"border-b\",\n        \"border-border\",\n        \"bg-sidebar\",\n        \"pr-3\",\n        \"justify-end\",\n        \"z-40\",\n      )}\n    >\n      <ThemeToggle />\n      <UserDropdown />\n    </header>\n  );\n}\n\nfunction MobileHeader() {\n  const { open, isMobile } = useSidebar();\n\n  const { title } = useRefineOptions();\n\n  return (\n    <header\n      className={cn(\n        \"sticky\",\n        \"top-0\",\n        \"flex\",\n        \"h-12\",\n        \"shrink-0\",\n        \"items-center\",\n        \"gap-2\",\n        \"border-b\",\n        \"border-border\",\n        \"bg-sidebar\",\n        \"pr-3\",\n        \"justify-between\",\n        \"z-40\",\n      )}\n    >\n      <SidebarTrigger\n        className={cn(\"text-muted-foreground\", \"rotate-180\", \"ml-1\", {\n          \"opacity-0\": open,\n          \"opacity-100\": !open || isMobile,\n          \"pointer-events-auto\": !open || isMobile,\n          \"pointer-events-none\": open && !isMobile,\n        })}\n      />\n\n      <div\n        className={cn(\n          \"whitespace-nowrap\",\n          \"flex\",\n          \"flex-row\",\n          \"h-full\",\n          \"items-center\",\n          \"justify-start\",\n          \"gap-2\",\n          \"transition-discrete\",\n          \"duration-200\",\n          {\n            \"pl-3\": !open,\n            \"pl-5\": open,\n          },\n        )}\n      >\n        <div>{title.icon}</div>\n        <h2\n          className={cn(\n            \"text-sm\",\n            \"font-bold\",\n            \"transition-opacity\",\n            \"duration-200\",\n            {\n              \"opacity-0\": !open,\n              \"opacity-100\": open,\n            },\n          )}\n        >\n          {title.text}\n        </h2>\n      </div>\n\n      <ThemeToggle className={cn(\"h-8\", \"w-8\")} />\n    </header>\n  );\n}\n\nconst UserDropdown = () => {\n  const { mutate: logout, isPending: isLoggingOut } = useLogout();\n\n  const authProvider = useActiveAuthProvider();\n\n  if (!authProvider?.getIdentity) {\n    return null;\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger>\n        <UserAvatar />\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem\n          onClick={() => {\n            logout();\n          }}\n        >\n          <LogOutIcon\n            className={cn(\"text-destructive\", \"hover:text-destructive\")}\n          />\n          <span className={cn(\"text-destructive\", \"hover:text-destructive\")}>\n            {isLoggingOut ? \"Logging out...\" : \"Logout\"}\n          </span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nHeader.displayName = \"Header\";\nMobileHeader.displayName = \"MobileHeader\";\nDesktopHeader.displayName = \"DesktopHeader\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/layout/header.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/layout/layout-01/sidebar.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  useMenu,\n  useLink,\n  useRefineOptions,\n  type TreeMenuItem,\n} from \"@refinedev/core\";\nimport {\n  SidebarRail as ShadcnSidebarRail,\n  Sidebar as ShadcnSidebar,\n  SidebarContent as ShadcnSidebarContent,\n  SidebarHeader as ShadcnSidebarHeader,\n  useSidebar as useShadcnSidebar,\n  SidebarTrigger as ShadcnSidebarTrigger,\n} from \"@/registry/new-york/ui/sidebar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/registry/new-york/ui/collapsible\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { ChevronRight, ListIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const { open } = useShadcnSidebar();\n  const { menuItems, selectedKey } = useMenu();\n\n  return (\n    <ShadcnSidebar collapsible=\"icon\" className={cn(\"border-none\")}>\n      <ShadcnSidebarRail />\n      <SidebarHeader />\n      <ShadcnSidebarContent\n        className={cn(\n          \"transition-discrete\",\n          \"duration-200\",\n          \"flex\",\n          \"flex-col\",\n          \"gap-2\",\n          \"pt-2\",\n          \"pb-2\",\n          \"border-r\",\n          \"border-border\",\n          {\n            \"px-3\": open,\n            \"px-1\": !open,\n          },\n        )}\n      >\n        {menuItems.map((item: TreeMenuItem) => (\n          <SidebarItem\n            key={item.key || item.name}\n            item={item}\n            selectedKey={selectedKey}\n          />\n        ))}\n      </ShadcnSidebarContent>\n    </ShadcnSidebar>\n  );\n}\n\ntype MenuItemProps = {\n  item: TreeMenuItem;\n  selectedKey?: string;\n};\n\nfunction SidebarItem({ item, selectedKey }: MenuItemProps) {\n  const { open } = useShadcnSidebar();\n\n  if (item.meta?.group) {\n    return <SidebarItemGroup item={item} selectedKey={selectedKey} />;\n  }\n\n  if (item.children && item.children.length > 0) {\n    if (open) {\n      return <SidebarItemCollapsible item={item} selectedKey={selectedKey} />;\n    }\n    return <SidebarItemDropdown item={item} selectedKey={selectedKey} />;\n  }\n\n  return <SidebarItemLink item={item} selectedKey={selectedKey} />;\n}\n\nfunction SidebarItemGroup({ item, selectedKey }: MenuItemProps) {\n  const { children } = item;\n  const { open } = useShadcnSidebar();\n\n  return (\n    <div className={cn(\"border-t\", \"border-sidebar-border\", \"pt-4\")}>\n      <span\n        className={cn(\n          \"ml-3\",\n          \"block\",\n          \"text-xs\",\n          \"font-semibold\",\n          \"uppercase\",\n          \"text-muted-foreground\",\n          \"transition-all\",\n          \"duration-200\",\n          {\n            \"h-8\": open,\n            \"h-0\": !open,\n            \"opacity-0\": !open,\n            \"opacity-100\": open,\n            \"pointer-events-none\": !open,\n            \"pointer-events-auto\": open,\n          },\n        )}\n      >\n        {getDisplayName(item)}\n      </span>\n      {children && children.length > 0 && (\n        <div className={cn(\"flex\", \"flex-col\")}>\n          {children.map((child: TreeMenuItem) => (\n            <SidebarItem\n              key={child.key || child.name}\n              item={child}\n              selectedKey={selectedKey}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction SidebarItemCollapsible({ item, selectedKey }: MenuItemProps) {\n  const { name, children } = item;\n\n  const chevronIcon = (\n    <ChevronRight\n      className={cn(\n        \"h-4\",\n        \"w-4\",\n        \"shrink-0\",\n        \"text-muted-foreground\",\n        \"transition-transform\",\n        \"duration-200\",\n        \"group-data-[state=open]:rotate-90\",\n      )}\n    />\n  );\n\n  return (\n    <Collapsible key={`collapsible-${name}`} className={cn(\"w-full\", \"group\")}>\n      <CollapsibleTrigger asChild>\n        <SidebarButton item={item} rightIcon={chevronIcon} />\n      </CollapsibleTrigger>\n      <CollapsibleContent className={cn(\"ml-6\", \"flex\", \"flex-col\", \"gap-2\")}>\n        {children?.map((child: TreeMenuItem) => (\n          <SidebarItem\n            key={child.key || child.name}\n            item={child}\n            selectedKey={selectedKey}\n          />\n        ))}\n      </CollapsibleContent>\n    </Collapsible>\n  );\n}\n\nfunction SidebarItemDropdown({ item, selectedKey }: MenuItemProps) {\n  const { children } = item;\n  const Link = useLink();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <SidebarButton item={item} />\n      </DropdownMenuTrigger>\n      <DropdownMenuContent side=\"right\" align=\"start\">\n        {children?.map((child: TreeMenuItem) => {\n          const { key: childKey } = child;\n          const isSelected = childKey === selectedKey;\n\n          return (\n            <DropdownMenuItem key={childKey || child.name} asChild>\n              <Link\n                to={child.route || \"\"}\n                className={cn(\"flex w-full items-center gap-2\", {\n                  \"bg-accent text-accent-foreground\": isSelected,\n                })}\n              >\n                <ItemIcon\n                  icon={child.meta?.icon ?? child.icon}\n                  isSelected={isSelected}\n                />\n                <span>{getDisplayName(child)}</span>\n              </Link>\n            </DropdownMenuItem>\n          );\n        })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nfunction SidebarItemLink({ item, selectedKey }: MenuItemProps) {\n  const isSelected = item.key === selectedKey;\n\n  return <SidebarButton item={item} isSelected={isSelected} asLink={true} />;\n}\n\nfunction SidebarHeader() {\n  const { title } = useRefineOptions();\n  const { open, isMobile } = useShadcnSidebar();\n\n  return (\n    <ShadcnSidebarHeader\n      className={cn(\n        \"p-0\",\n        \"h-16\",\n        \"border-b\",\n        \"border-border\",\n        \"flex-row\",\n        \"items-center\",\n        \"justify-between\",\n        \"overflow-hidden\",\n      )}\n    >\n      <div\n        className={cn(\n          \"whitespace-nowrap\",\n          \"flex\",\n          \"flex-row\",\n          \"h-full\",\n          \"items-center\",\n          \"justify-start\",\n          \"gap-2\",\n          \"transition-discrete\",\n          \"duration-200\",\n          {\n            \"pl-3\": !open,\n            \"pl-5\": open,\n          },\n        )}\n      >\n        <div>{title.icon}</div>\n        <h2\n          className={cn(\n            \"text-sm\",\n            \"font-bold\",\n            \"transition-opacity\",\n            \"duration-200\",\n            {\n              \"opacity-0\": !open,\n              \"opacity-100\": open,\n            },\n          )}\n        >\n          {title.text}\n        </h2>\n      </div>\n\n      <ShadcnSidebarTrigger\n        className={cn(\"text-muted-foreground\", \"mr-1.5\", {\n          \"opacity-0\": !open,\n          \"opacity-100\": open || isMobile,\n          \"pointer-events-auto\": open || isMobile,\n          \"pointer-events-none\": !open && !isMobile,\n        })}\n      />\n    </ShadcnSidebarHeader>\n  );\n}\n\nfunction getDisplayName(item: TreeMenuItem) {\n  return item.meta?.label ?? item.label ?? item.name;\n}\n\ntype IconProps = {\n  icon: React.ReactNode;\n  isSelected?: boolean;\n};\n\nfunction ItemIcon({ icon, isSelected }: IconProps) {\n  return (\n    <div\n      className={cn(\"w-4\", {\n        \"text-muted-foreground\": !isSelected,\n        \"text-sidebar-primary-foreground\": isSelected,\n      })}\n    >\n      {icon ?? <ListIcon />}\n    </div>\n  );\n}\n\ntype SidebarButtonProps = React.ComponentProps<typeof Button> & {\n  item: TreeMenuItem;\n  isSelected?: boolean;\n  rightIcon?: React.ReactNode;\n  asLink?: boolean;\n  onClick?: () => void;\n};\n\nfunction SidebarButton({\n  item,\n  isSelected = false,\n  rightIcon,\n  asLink = false,\n  className,\n  onClick,\n  ...props\n}: SidebarButtonProps) {\n  const Link = useLink();\n\n  const buttonContent = (\n    <>\n      <ItemIcon icon={item.meta?.icon ?? item.icon} isSelected={isSelected} />\n      <span\n        className={cn(\"tracking-[-0.00875rem]\", {\n          \"flex-1\": rightIcon,\n          \"text-left\": rightIcon,\n          \"line-clamp-1\": !rightIcon,\n          truncate: !rightIcon,\n          \"font-normal\": !isSelected,\n          \"font-semibold\": isSelected,\n          \"text-sidebar-primary-foreground\": isSelected,\n          \"text-foreground\": !isSelected,\n        })}\n      >\n        {getDisplayName(item)}\n      </span>\n      {rightIcon}\n    </>\n  );\n\n  return (\n    <Button\n      asChild={!!(asLink && item.route)}\n      variant=\"ghost\"\n      size=\"lg\"\n      className={cn(\n        \"flex w-full items-center justify-start gap-2 py-2 !px-3 text-sm\",\n        {\n          \"bg-sidebar-primary\": isSelected,\n          \"hover:!bg-sidebar-primary/90\": isSelected,\n          \"text-sidebar-primary-foreground\": isSelected,\n          \"hover:text-sidebar-primary-foreground\": isSelected,\n        },\n        className,\n      )}\n      onClick={onClick}\n      {...props}\n    >\n      {asLink && item.route ? (\n        <Link to={item.route} className={cn(\"flex w-full items-center gap-2\")}>\n          {buttonContent}\n        </Link>\n      ) : (\n        buttonContent\n      )}\n    </Button>\n  );\n}\n\nSidebar.displayName = \"Sidebar\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/layout/sidebar.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/user/user-avatar.tsx",
      "content": "import { useGetIdentity } from \"@refinedev/core\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york/ui/avatar\";\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\";\nimport { cn } from \"@/lib/utils\";\n\ntype User = {\n  id: number;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  email: string;\n  avatar?: string;\n};\n\nexport function UserAvatar() {\n  const { data: user, isLoading: userIsLoading } = useGetIdentity<User>();\n\n  if (userIsLoading || !user) {\n    return <Skeleton className={cn(\"h-10\", \"w-10\", \"rounded-full\")} />;\n  }\n\n  const { fullName, avatar } = user;\n\n  return (\n    <Avatar className={cn(\"h-10\", \"w-10\")}>\n      {avatar && <AvatarImage src={avatar} alt={fullName} />}\n      <AvatarFallback>{getInitials(fullName)}</AvatarFallback>\n    </Avatar>\n  );\n}\n\nconst getInitials = (name = \"\") => {\n  const names = name.split(\" \");\n  let initials = names[0].substring(0, 1).toUpperCase();\n\n  if (names.length > 1) {\n    initials += names[names.length - 1].substring(0, 1).toUpperCase();\n  }\n  return initials;\n};\n\nUserAvatar.displayName = \"UserAvatar\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/layout/user-avatar.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/user/user-info.tsx",
      "content": "import { useGetIdentity } from \"@refinedev/core\";\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\";\nimport { UserAvatar } from \"@/registry/new-york/refine-ui/user/user-avatar\";\nimport { cn } from \"@/lib/utils\";\n\ntype User = {\n  id: number;\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  email: string;\n  avatar?: string;\n};\n\nexport function UserInfo() {\n  const { data: user, isLoading: userIsLoading } = useGetIdentity<User>();\n\n  if (userIsLoading || !user) {\n    return (\n      <div className={cn(\"flex\", \"items-center\", \"gap-x-2\")}>\n        <Skeleton className={cn(\"h-10\", \"w-10\", \"rounded-full\")} />\n        <div className={cn(\"flex\", \"flex-col\", \"justify-between\", \"h-10\")}>\n          <Skeleton className={cn(\"h-4\", \"w-32\")} />\n          <Skeleton className={cn(\"h-4\", \"w-24\")} />\n        </div>\n      </div>\n    );\n  }\n\n  const { firstName, lastName, email } = user;\n\n  return (\n    <div className={cn(\"flex\", \"items-center\", \"gap-x-2\")}>\n      <UserAvatar />\n      <div\n        className={cn(\n          \"flex\",\n          \"flex-col\",\n          \"justify-between\",\n          \"h-10\",\n          \"text-left\",\n        )}\n      >\n        <span className={cn(\"text-sm\", \"font-medium\", \"text-muted-foreground\")}>\n          {firstName} {lastName}\n        </span>\n        <span className={cn(\"text-xs\", \"text-muted-foreground\")}>{email}</span>\n      </div>\n    </div>\n  );\n}\n\nUserInfo.displayName = \"UserInfo\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/layout/user-info.tsx"
    }
  ],
  "docs": "https://github.com/refinedev/refine",
  "categories": ["layout", "sidebar", "navigation", "dashboard"]
}
