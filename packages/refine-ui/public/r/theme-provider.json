{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-provider",
  "type": "registry:component",
  "title": "Theme Provider & Toggle & Select",
  "author": "Refine <info@refine.dev>",
  "description": "A complete theme system with provider, toggle, and select components. Supports dark, light, and system themes with localStorage persistence.",
  "dependencies": ["lucide-react"],
  "registryDependencies": ["button", "dropdown-menu"],
  "files": [
    {
      "path": "registry/new-york/refine-ui/theme/theme-provider.tsx",
      "content": "\"use client\";\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"refine-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme,\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined) {\n    console.error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return context;\n}\n\nThemeProvider.displayName = \"ThemeProvider\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/theme/theme-provider.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/theme/theme-toggle.tsx",
      "content": "\"use client\";\n\nimport { useTheme } from \"@/registry/new-york/refine-ui/theme/theme-provider\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Moon, Sun, Monitor } from \"lucide-react\";\n\ntype ThemeToggleProps = {\n  className?: string;\n};\n\nexport function ThemeToggle({ className }: ThemeToggleProps) {\n  const { theme, setTheme } = useTheme();\n\n  const cycleTheme = () => {\n    switch (theme) {\n      case \"light\":\n        setTheme(\"dark\");\n        break;\n      case \"dark\":\n        setTheme(\"system\");\n        break;\n      case \"system\":\n        setTheme(\"light\");\n        break;\n      default:\n        setTheme(\"light\");\n    }\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      onClick={cycleTheme}\n      className={cn(\n        \"rounded-full\",\n        \"border-sidebar-border\",\n        \"bg-transparent\",\n        className,\n        \"h-10\",\n        \"w-10\",\n      )}\n    >\n      <Sun\n        className={cn(\n          \"h-[1.2rem]\",\n          \"w-[1.2rem]\",\n          \"rotate-0\",\n          \"scale-100\",\n          \"transition-all\",\n          \"duration-200\",\n          {\n            \"-rotate-90 scale-0\": theme === \"dark\" || theme === \"system\",\n          },\n        )}\n      />\n      <Moon\n        className={cn(\n          \"absolute\",\n          \"h-[1.2rem]\",\n          \"w-[1.2rem]\",\n          \"rotate-90\",\n          \"scale-0\",\n          \"transition-all\",\n          \"duration-200\",\n          {\n            \"rotate-0 scale-100\": theme === \"dark\",\n            \"rotate-90 scale-0\": theme === \"light\" || theme === \"system\",\n          },\n        )}\n      />\n      <Monitor\n        className={cn(\n          \"absolute\",\n          \"h-[1.2rem]\",\n          \"w-[1.2rem]\",\n          \"rotate-0\",\n          \"scale-0\",\n          \"transition-all\",\n          \"duration-200\",\n          {\n            \"scale-100\": theme === \"system\",\n            \"scale-0\": theme === \"light\" || theme === \"dark\",\n          },\n        )}\n      />\n      <span className=\"sr-only\">Toggle theme (Light → Dark → System)</span>\n    </Button>\n  );\n}\n\nThemeToggle.displayName = \"ThemeToggle\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/theme/theme-toggle.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/theme/theme-select.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { useTheme } from \"./theme-provider\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Moon, Sun, Monitor, ChevronDown, Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype ThemeOption = {\n  value: \"light\" | \"dark\" | \"system\";\n  label: string;\n  icon: React.ReactNode;\n};\n\nconst themeOptions: ThemeOption[] = [\n  {\n    value: \"light\",\n    label: \"Light\",\n    icon: <Sun className=\"h-4 w-4\" />,\n  },\n  {\n    value: \"dark\",\n    label: \"Dark\",\n    icon: <Moon className=\"h-4 w-4\" />,\n  },\n  {\n    value: \"system\",\n    label: \"System\",\n    icon: <Monitor className=\"h-4 w-4\" />,\n  },\n];\n\nexport function ThemeSelect() {\n  const { theme, setTheme } = useTheme();\n\n  const currentTheme = themeOptions.find((option) => option.value === theme);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"lg\"\n          className={cn(\n            \"w-full\",\n            \"justify-between\",\n            \"px-3\",\n            \"text-left\",\n            \"text-sm\",\n            \"font-normal\",\n            \"text-foreground\",\n            \"hover:bg-accent\",\n            \"hover:text-accent-foreground\",\n            \"focus-visible:outline-none\",\n            \"focus-visible:ring-2\",\n            \"focus-visible:ring-ring\",\n          )}\n        >\n          <div className=\"flex items-center gap-2\">\n            {currentTheme?.icon}\n            <span>{currentTheme?.label}</span>\n          </div>\n          <ChevronDown className=\"h-4 w-4 opacity-50\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"min-w-40 space-y-1\">\n        {themeOptions.map((option) => {\n          const isSelected = theme === option.value;\n\n          return (\n            <DropdownMenuItem\n              key={option.value}\n              onClick={() => setTheme(option.value)}\n              className={cn(\n                \"flex items-center gap-2 cursor-pointer relative pr-8\",\n                {\n                  \"bg-accent text-accent-foreground\": isSelected,\n                },\n              )}\n            >\n              {option.icon}\n              <span>{option.label}</span>\n              {isSelected && (\n                <Check className=\"h-4 w-4 absolute right-2 text-primary\" />\n              )}\n            </DropdownMenuItem>\n          );\n        })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nThemeSelect.displayName = \"ThemeSelect\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/theme/theme-select.tsx"
    }
  ],
  "docs": "https://github.com/refinedev/refine",
  "categories": ["theme", "dark-mode", "toggle", "select", "provider"]
}
