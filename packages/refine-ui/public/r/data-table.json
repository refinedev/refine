{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "author": "Refine <info@refine.dev>",
  "description": "A comprehensive data table component for Refine with sorting, filtering, pagination, and advanced features",
  "dependencies": [
    "@refinedev/core",
    "@refinedev/react-table",
    "@tanstack/react-table",
    "react-day-picker",
    "lucide-react"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "badge",
    "popover",
    "command",
    "separator",
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "registry/new-york/refine-ui/data-table/data-table.tsx",
      "content": "\"use client\";\n\nimport type { HttpError, BaseRecord } from \"@refinedev/core\";\nimport type { UseTableReturnType } from \"@refinedev/react-table\";\nimport type { Column } from \"@tanstack/react-table\";\nimport { flexRender } from \"@tanstack/react-table\";\nimport { Loader2 } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/new-york/ui/table\";\nimport { DataTablePagination } from \"@/registry/new-york/refine-ui/data-table/data-table-pagination\";\nimport { cn } from \"@/lib/utils\";\n\ntype DataTableProps<TData extends BaseRecord> = {\n  table: UseTableReturnType<TData, HttpError>;\n};\n\nexport function DataTable<TData extends BaseRecord>({\n  table,\n}: DataTableProps<TData>) {\n  const {\n    reactTable: { getHeaderGroups, getRowModel, getAllColumns },\n    refineCore: {\n      tableQuery,\n      currentPage,\n      setCurrentPage,\n      pageCount,\n      pageSize,\n      setPageSize,\n    },\n  } = table;\n\n  const columns = getAllColumns();\n  const leafColumns = table.reactTable.getAllLeafColumns();\n  const isLoading = tableQuery.isLoading;\n\n  const tableContainerRef = useRef<HTMLDivElement>(null);\n  const tableRef = useRef<HTMLTableElement>(null);\n  const [isOverflowing, setIsOverflowing] = useState({\n    horizontal: false,\n    vertical: false,\n  });\n\n  useEffect(() => {\n    const checkOverflow = () => {\n      if (tableRef.current && tableContainerRef.current) {\n        const table = tableRef.current;\n        const container = tableContainerRef.current;\n\n        const horizontalOverflow = table.offsetWidth > container.clientWidth;\n        const verticalOverflow = table.offsetHeight > container.clientHeight;\n\n        setIsOverflowing({\n          horizontal: horizontalOverflow,\n          vertical: verticalOverflow,\n        });\n      }\n    };\n\n    checkOverflow();\n\n    // Check on window resize\n    window.addEventListener(\"resize\", checkOverflow);\n\n    // Check when table data changes\n    const timeoutId = setTimeout(checkOverflow, 100);\n\n    return () => {\n      window.removeEventListener(\"resize\", checkOverflow);\n      clearTimeout(timeoutId);\n    };\n  }, [tableQuery.data?.data, pageSize]);\n\n  return (\n    <div className={cn(\"flex\", \"flex-col\", \"flex-1\", \"gap-4\")}>\n      <div ref={tableContainerRef} className={cn(\"rounded-md\", \"border\")}>\n        <Table ref={tableRef} style={{ tableLayout: \"fixed\", width: \"100%\" }}>\n          <TableHeader>\n            {getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  const isPlaceholder = header.isPlaceholder;\n\n                  return (\n                    <TableHead\n                      key={header.id}\n                      style={{\n                        ...getCommonStyles({\n                          column: header.column,\n                          isOverflowing: isOverflowing,\n                        }),\n                      }}\n                    >\n                      {isPlaceholder ? null : (\n                        <div className={cn(\"flex\", \"items-center\", \"gap-1\")}>\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                        </div>\n                      )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody className=\"relative\">\n            {isLoading ? (\n              <>\n                {Array.from({ length: pageSize < 1 ? 1 : pageSize }).map(\n                  (_, rowIndex) => (\n                    <TableRow\n                      key={`skeleton-row-${rowIndex}`}\n                      aria-hidden=\"true\"\n                    >\n                      {leafColumns.map((column) => (\n                        <TableCell\n                          key={`skeleton-cell-${rowIndex}-${column.id}`}\n                          style={{\n                            ...getCommonStyles({\n                              column,\n                              isOverflowing: isOverflowing,\n                            }),\n                          }}\n                          className={cn(\"truncate\")}\n                        >\n                          <div className=\"h-8\" />\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ),\n                )}\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className={cn(\"absolute\", \"inset-0\", \"pointer-events-none\")}\n                  >\n                    <Loader2\n                      className={cn(\n                        \"absolute\",\n                        \"top-1/2\",\n                        \"left-1/2\",\n                        \"animate-spin\",\n                        \"text-primary\",\n                        \"h-8\",\n                        \"w-8\",\n                        \"-translate-x-1/2\",\n                        \"-translate-y-1/2\",\n                      )}\n                    />\n                  </TableCell>\n                </TableRow>\n              </>\n            ) : getRowModel().rows?.length ? (\n              getRowModel().rows.map((row) => {\n                return (\n                  <TableRow\n                    key={row.original?.id ?? row.id}\n                    data-state={row.getIsSelected() && \"selected\"}\n                  >\n                    {row.getVisibleCells().map((cell) => {\n                      return (\n                        <TableCell\n                          key={cell.id}\n                          style={{\n                            ...getCommonStyles({\n                              column: cell.column,\n                              isOverflowing: isOverflowing,\n                            }),\n                          }}\n                        >\n                          <div className=\"truncate\">\n                            {flexRender(\n                              cell.column.columnDef.cell,\n                              cell.getContext(),\n                            )}\n                          </div>\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })\n            ) : (\n              <DataTableNoData\n                isOverflowing={isOverflowing}\n                columnsLength={columns.length}\n              />\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      {!isLoading && getRowModel().rows?.length > 0 && (\n        <DataTablePagination\n          currentPage={currentPage}\n          pageCount={pageCount}\n          setCurrentPage={setCurrentPage}\n          pageSize={pageSize}\n          setPageSize={setPageSize}\n          total={tableQuery.data?.total}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction DataTableNoData({\n  isOverflowing,\n  columnsLength,\n}: {\n  isOverflowing: { horizontal: boolean; vertical: boolean };\n  columnsLength: number;\n}) {\n  return (\n    <TableRow className=\"hover:bg-transparent\">\n      <TableCell\n        colSpan={columnsLength}\n        className={cn(\"relative\", \"text-center\")}\n        style={{ height: \"490px\" }}\n      >\n        <div\n          className={cn(\n            \"absolute\",\n            \"inset-0\",\n            \"flex\",\n            \"flex-col\",\n            \"items-center\",\n            \"justify-center\",\n            \"gap-2\",\n            \"bg-background\",\n          )}\n          style={{\n            position: isOverflowing.horizontal ? \"sticky\" : \"absolute\",\n            left: isOverflowing.horizontal ? \"50%\" : \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: isOverflowing.horizontal ? 2 : 1,\n            width: isOverflowing.horizontal ? \"fit-content\" : \"100%\",\n            minWidth: \"300px\",\n          }}\n        >\n          <div className={cn(\"text-lg\", \"font-semibold\", \"text-foreground\")}>\n            No data to display\n          </div>\n          <div className={cn(\"text-sm\", \"text-muted-foreground\")}>\n            This table is empty for the time being.\n          </div>\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nexport function getCommonStyles<TData>({\n  column,\n  isOverflowing,\n}: {\n  column: Column<TData>;\n  isOverflowing: {\n    horizontal: boolean;\n    vertical: boolean;\n  };\n}): React.CSSProperties {\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinnedColumn =\n    isPinned === \"left\" && column.getIsLastColumn(\"left\");\n  const isFirstRightPinnedColumn =\n    isPinned === \"right\" && column.getIsFirstColumn(\"right\");\n\n  return {\n    boxShadow:\n      isOverflowing.horizontal && isLastLeftPinnedColumn\n        ? \"-4px 0 4px -4px var(--border) inset\"\n        : isOverflowing.horizontal && isFirstRightPinnedColumn\n          ? \"4px 0 4px -4px var(--border) inset\"\n          : undefined,\n    left:\n      isOverflowing.horizontal && isPinned === \"left\"\n        ? `${column.getStart(\"left\")}px`\n        : undefined,\n    right:\n      isOverflowing.horizontal && isPinned === \"right\"\n        ? `${column.getAfter(\"right\")}px`\n        : undefined,\n    opacity: 1,\n    position: isOverflowing.horizontal && isPinned ? \"sticky\" : \"relative\",\n    background: isOverflowing.horizontal && isPinned ? \"var(--background)\" : \"\",\n    borderTopRightRadius:\n      isOverflowing.horizontal && isPinned === \"right\"\n        ? \"var(--radius)\"\n        : undefined,\n    borderBottomRightRadius:\n      isOverflowing.horizontal && isPinned === \"right\"\n        ? \"var(--radius)\"\n        : undefined,\n    borderTopLeftRadius:\n      isOverflowing.horizontal && isPinned === \"left\"\n        ? \"var(--radius)\"\n        : undefined,\n    borderBottomLeftRadius:\n      isOverflowing.horizontal && isPinned === \"left\"\n        ? \"var(--radius)\"\n        : undefined,\n    width: column.getSize(),\n    zIndex: isOverflowing.horizontal && isPinned ? 1 : 0,\n  };\n}\n\nDataTable.displayName = \"DataTable\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/data-table/data-table.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/data-table/data-table-filter.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useTranslate, type CrudOperators } from \"@refinedev/core\";\nimport type { Column, Table as ReactTable } from \"@tanstack/react-table\";\nimport type { DateRange } from \"react-day-picker\";\nimport { Check, ChevronsUpDown, ListFilter, X } from \"lucide-react\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york/ui/command\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { Calendar } from \"@/registry/new-york/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\n\nexport type DataTableFilterDropdownProps<TData> = {\n  column: Column<TData>;\n  contentClassName?: string;\n  triggerClassName?: string;\n  children: (args: {\n    isOpen: boolean;\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  }) => React.ReactNode;\n};\n\nexport function DataTableFilterDropdown<TData>({\n  column,\n  triggerClassName,\n  contentClassName,\n  children,\n}: DataTableFilterDropdownProps<TData>) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isFiltered = column.getIsFiltered();\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          onClick={() => setIsOpen(true)}\n          variant=\"ghost\"\n          size=\"icon\"\n          className={cn(\n            \"data-[state=open]:bg-accent\",\n            \"w-5 h-5\",\n            {\n              \"text-primary\": isFiltered,\n              \"text-muted-foreground\": !isFiltered,\n            },\n            triggerClassName,\n          )}\n        >\n          <ListFilter className={cn(\"!h-3\", \"!w-3\")} />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        className={cn(\"w-full\", \"shadow-sm\", contentClassName)}\n      >\n        {children({ isOpen, setIsOpen })}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ntype DataTableFilterDropdownActionsProps = {\n  className?: string;\n  isClearDisabled?: boolean;\n  isApplyDisabled?: boolean;\n  onClear: () => void;\n  onApply: () => void;\n};\n\nexport function DataTableFilterDropdownActions({\n  className,\n  isClearDisabled,\n  isApplyDisabled,\n  onClear,\n  onApply,\n}: DataTableFilterDropdownActionsProps) {\n  const t = useTranslate();\n\n  return (\n    <div\n      className={cn(\n        \"flex\",\n        \"items-center\",\n        \"justify-between\",\n        \"w-full\",\n        \"gap-2\",\n        className,\n      )}\n    >\n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        disabled={isClearDisabled}\n        className={cn(\n          \"rounded-sm\",\n          \"text-xs\",\n          \"font-semibold\",\n          \"text-muted-foreground\",\n        )}\n        onClick={() => {\n          onClear();\n        }}\n      >\n        <X className={cn(\"w-3.5\", \"h-3.5\", \"text-muted-foreground\")} />\n        {t(\"buttons.clear\", \"Clear\")}\n      </Button>\n\n      <Button\n        size=\"sm\"\n        disabled={isApplyDisabled}\n        className={cn(\"rounded-sm\", \"text-xs\", \"font-semibold\")}\n        onClick={() => {\n          onApply();\n        }}\n      >\n        {t(\"buttons.apply\", \"Apply\")}\n      </Button>\n    </div>\n  );\n}\n\nexport type DataTableFilterDropdownTextProps<TData> = {\n  column: Column<TData>;\n  table: ReactTable<TData>;\n  defaultOperator?: CrudOperators;\n  operators?: CrudOperators[];\n  placeholder?: string;\n};\n\nexport function DataTableFilterDropdownText<TData>({\n  column,\n  table,\n  operators = [\n    \"eq\",\n    \"ne\",\n    \"contains\",\n    \"ncontains\",\n    \"containss\",\n    \"ncontainss\",\n    \"startswith\",\n    \"nstartswith\",\n    \"startswiths\",\n    \"nstartswiths\",\n    \"endswith\",\n    \"nendswith\",\n    \"endswiths\",\n    \"nendswiths\",\n    \"in\",\n    \"nin\",\n    \"ina\",\n    \"nina\",\n  ],\n  defaultOperator = \"eq\",\n  placeholder,\n}: DataTableFilterDropdownTextProps<TData>) {\n  const t = useTranslate();\n\n  return (\n    <DataTableFilterInput\n      column={column}\n      table={table}\n      operators={operators}\n      defaultOperator={defaultOperator}\n      renderInput={({ value, onChange }) => (\n        <Input\n          type=\"text\"\n          placeholder={\n            placeholder ?? t(\"table.filter.text.placeholder\", \"Filter by...\")\n          }\n          value={value}\n          onChange={(event) => {\n            onChange(event.target.value);\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport type DataTableFilterDropdownNumericProps<TData> = {\n  column: Column<TData>;\n  table: ReactTable<TData>;\n  defaultOperator?: CrudOperators;\n  operators?: CrudOperators[];\n  placeholder?: string;\n};\n\nexport function DataTableFilterDropdownNumeric<TData>({\n  column,\n  table,\n  operators = [\"eq\", \"ne\", \"gt\", \"lt\", \"gte\", \"lte\"],\n  defaultOperator = \"eq\",\n  placeholder,\n}: DataTableFilterDropdownNumericProps<TData>) {\n  const t = useTranslate();\n\n  return (\n    <DataTableFilterInput\n      column={column}\n      table={table}\n      operators={operators}\n      defaultOperator={defaultOperator}\n      renderInput={({ value, onChange }) => (\n        <Input\n          type=\"number\"\n          placeholder={\n            placeholder ?? t(\"table.filter.numeric.placeholder\", \"Filter by...\")\n          }\n          value={value}\n          onChange={(event) => {\n            onChange(event.target.value);\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport type DataTableFilterComboboxProps<TData> = {\n  column: Column<TData>;\n  table?: ReactTable<TData>;\n  options: { label: string; value: string }[];\n  defaultOperator?: CrudOperators;\n  operators?: CrudOperators[];\n  placeholder?: string;\n  noResultsText?: string;\n  multiple?: boolean;\n};\n\nexport function DataTableFilterCombobox<TData>({\n  column,\n  table,\n  options,\n  defaultOperator = \"eq\",\n  operators = [\"eq\", \"ne\", \"in\", \"nin\"],\n  placeholder,\n  noResultsText,\n  multiple = false,\n}: DataTableFilterComboboxProps<TData>) {\n  const t = useTranslate();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <DataTableFilterInput\n      column={column}\n      table={table}\n      operators={operators}\n      defaultOperator={defaultOperator}\n      renderInput={({ value, onChange }) => {\n        const currentValues = multiple\n          ? Array.isArray(value)\n            ? value\n            : value && typeof value === \"string\"\n              ? [value]\n              : []\n          : value && typeof value === \"string\"\n            ? [value]\n            : [];\n\n        const handleSelect = (optionValue: string) => {\n          if (multiple) {\n            const newValues = currentValues.includes(optionValue)\n              ? currentValues.filter((v) => v !== optionValue)\n              : [...currentValues, optionValue];\n            onChange(newValues);\n          } else {\n            onChange(optionValue);\n            setIsOpen(false);\n          }\n        };\n\n        const handleRemove = (optionValue: string) => {\n          if (multiple) {\n            const newValues = currentValues.filter((v) => v !== optionValue);\n            onChange(newValues);\n          }\n        };\n\n        const getDisplayText = () => {\n          if (currentValues.length === 0) {\n            return (\n              placeholder ?? t(\"table.filter.combobox.placeholder\", \"Select...\")\n            );\n          }\n\n          if (multiple) {\n            return `${currentValues.length} selected`;\n          }\n\n          const selectedOption = options.find(\n            (option) => option.value === currentValues[0],\n          );\n          return selectedOption ? selectedOption.label : currentValues[0];\n        };\n\n        const getSelectedLabels = () => {\n          return currentValues.map((val) => {\n            const option = options.find((opt) => opt.value === val);\n            return { label: option ? option.label : val, value: val };\n          });\n        };\n\n        return (\n          <Popover open={isOpen} onOpenChange={setIsOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={isOpen}\n                className={cn(\n                  \"w-full\",\n                  \"min-w-48\",\n                  \"max-w-80\",\n                  \"justify-start\",\n                  \"h-auto\",\n                  \"min-h-9\",\n                )}\n              >\n                <div className={cn(\"flex\", \"gap-2\", \"w-full\")}>\n                  {multiple && currentValues.length > 0 ? (\n                    <div className={cn(\"flex\", \"flex-wrap\", \"gap-1\", \"flex-1\")}>\n                      {getSelectedLabels()\n                        .slice(0, 3)\n                        .map(({ label, value: val }) => (\n                          <Badge\n                            key={val}\n                            variant=\"outline\"\n                            className={cn(\n                              \"inline-flex\",\n                              \"items-center\",\n                              \"gap-0\",\n                              \"h-4\",\n                              \"pr-0.5\",\n                              \"rounded-sm\",\n                            )}\n                          >\n                            <span className={cn(\"text-[10px]\", \"leading-4\")}>\n                              {label}\n                            </span>\n                            <span\n                              className={cn(\n                                \"inline-flex\",\n                                \"items-center\",\n                                \"justify-center\",\n                                \"p-0\",\n                                \"w-4\",\n                                \"h-full\",\n                                \"text-muted-foreground\",\n                                \"hover:text-destructive\",\n                                \"rounded-sm\",\n                                \"cursor-pointer\",\n                                \"transition-colors\",\n                              )}\n                              onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                handleRemove(val);\n                              }}\n                            >\n                              <X className={cn(\"!h-2\", \"!w-2\")} />\n                            </span>\n                          </Badge>\n                        ))}\n                      {currentValues.length > 3 && (\n                        <span\n                          className={cn(\n                            \"text-xs\",\n                            \"text-muted-foreground\",\n                            \"px-1\",\n                          )}\n                        >\n                          +{currentValues.length - 3} more\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span\n                      className={cn(\n                        \"truncate\",\n                        \"flex-1\",\n                        \"text-start\",\n                        \"text-xs\",\n                        currentValues.length === 0 && \"text-muted-foreground\",\n                      )}\n                    >\n                      {getDisplayText()}\n                    </span>\n                  )}\n\n                  <ChevronsUpDown\n                    className={cn(\"h-4\", \"w-4\", \"shrink-0\", \"opacity-50\")}\n                  />\n                </div>\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className={cn(\"w-[200px]\", \"p-0\")} align=\"start\">\n              <Command>\n                <CommandInput\n                  placeholder={t(\"table.filter.combobox.search\", \"Search...\")}\n                />\n                <CommandList>\n                  <CommandEmpty>\n                    {noResultsText ??\n                      t(\n                        \"table.filter.combobox.noResults\",\n                        \"Results not found.\",\n                      )}\n                  </CommandEmpty>\n                  <CommandGroup>\n                    {options.map((option) => (\n                      <CommandItem\n                        key={option.value}\n                        value={option.value}\n                        onSelect={() => handleSelect(option.value)}\n                        keywords={option.label?.split(\" \") ?? []}\n                      >\n                        {option.label}\n                        <Check\n                          className={cn(\n                            \"ml-auto\",\n                            \"h-4\",\n                            \"w-4\",\n                            currentValues.includes(option.value)\n                              ? \"opacity-100\"\n                              : \"opacity-0\",\n                          )}\n                        />\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        );\n      }}\n    />\n  );\n}\n\nexport type DataTableFilterDropdownDateSinglePickerProps<TData> = {\n  column: Column<TData>;\n  defaultOperator?: CrudOperators;\n  formatDate?: (date: Date | undefined) => string | undefined;\n};\n\nexport function DataTableFilterDropdownDateSinglePicker<TData>({\n  column,\n  defaultOperator = \"eq\",\n  formatDate,\n}: DataTableFilterDropdownDateSinglePickerProps<TData>) {\n  const columnFilterValue = column.getFilterValue() as string;\n\n  const parseDate = (value: string | undefined): Date | undefined => {\n    if (!value) return undefined;\n\n    const date = new Date(value);\n\n    if (Number.isNaN(date.getTime())) return undefined;\n    return date;\n  };\n\n  const [filterValue, setFilterValue] = useState<Date | undefined>(() =>\n    parseDate(columnFilterValue),\n  );\n\n  useEffect(() => {\n    column.columnDef.meta = {\n      ...column.columnDef.meta,\n      filterOperator: defaultOperator,\n    };\n  }, [defaultOperator, column]);\n\n  useEffect(() => {\n    setFilterValue(parseDate(columnFilterValue));\n  }, [columnFilterValue]);\n\n  const hasDate = !!filterValue;\n\n  const handleApply = () => {\n    if (!filterValue) return;\n\n    const value = formatDate?.(filterValue) ?? filterValue.toISOString();\n    column.setFilterValue(value);\n  };\n\n  return (\n    <DataTableFilterDropdown\n      column={column}\n      contentClassName={cn(\"w-fit\", \"p-0\")}\n    >\n      {({ setIsOpen }) => {\n        return (\n          <div\n            className={cn(\"flex\", \"flex-col\", \"items-center\")}\n            onKeyDown={(event) => {\n              if (!hasDate) return;\n              if (event.key === \"Enter\") {\n                handleApply();\n                setIsOpen(false);\n              }\n            }}\n          >\n            <Calendar\n              mode=\"single\"\n              selected={filterValue}\n              onSelect={(date) => {\n                setFilterValue(date);\n              }}\n            />\n\n            <div className={cn(\"w-full\")}>\n              <Separator />\n            </div>\n\n            <DataTableFilterDropdownActions\n              className={cn(\"p-4\")}\n              isApplyDisabled={!hasDate}\n              onClear={() => {\n                column.setFilterValue(undefined);\n                setFilterValue(undefined);\n                setIsOpen(false);\n              }}\n              onApply={() => {\n                handleApply();\n                setIsOpen(false);\n              }}\n            />\n          </div>\n        );\n      }}\n    </DataTableFilterDropdown>\n  );\n}\n\nexport type DataTableFilterDropdownDateRangePickerProps<TData> = {\n  column: Column<TData>;\n  defaultOperator?: CrudOperators;\n  formatDateRange?: (dateRange: DateRange | undefined) => string[] | undefined;\n};\n\nexport function DataTableFilterDropdownDateRangePicker<TData>({\n  column,\n  defaultOperator = \"between\",\n  formatDateRange,\n}: DataTableFilterDropdownDateRangePickerProps<TData>) {\n  const columnFilterValue = column.getFilterValue() as string[];\n\n  const parseDateRange = (\n    value: string[] | undefined,\n  ): DateRange | undefined => {\n    if (!value || !Array.isArray(value) || value.length !== 2) return undefined;\n\n    const from = value[0] ? new Date(value[0]) : undefined;\n    const to = value[1] ? new Date(value[1]) : undefined;\n\n    if (\n      !from ||\n      !to ||\n      Number.isNaN(from.getTime()) ||\n      Number.isNaN(to.getTime())\n    )\n      return undefined;\n    return { from, to };\n  };\n\n  const [filterValue, setFilterValue] = useState<DateRange | undefined>(() =>\n    parseDateRange(columnFilterValue),\n  );\n\n  useEffect(() => {\n    column.columnDef.meta = {\n      ...column.columnDef.meta,\n      filterOperator: defaultOperator,\n    };\n  }, [defaultOperator, column]);\n\n  useEffect(() => {\n    setFilterValue(parseDateRange(columnFilterValue));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- objects are always different\n  }, [JSON.stringify(columnFilterValue)]);\n\n  const hasDateRange = filterValue?.from && filterValue?.to;\n\n  const handleApply = () => {\n    if (!filterValue?.from || !filterValue?.to) return;\n\n    const values = formatDateRange?.(filterValue) ?? [\n      filterValue.from.toISOString(),\n      filterValue.to.toISOString(),\n    ];\n    column.setFilterValue(values);\n  };\n\n  return (\n    <DataTableFilterDropdown\n      column={column}\n      contentClassName={cn(\"w-fit\", \"p-0\")}\n    >\n      {({ setIsOpen }) => {\n        return (\n          <div\n            className={cn(\"flex\", \"flex-col\", \"items-center\")}\n            onKeyDown={(event) => {\n              if (!hasDateRange) return;\n              if (event.key === \"Enter\") {\n                handleApply();\n                setIsOpen(false);\n              }\n            }}\n          >\n            <Calendar\n              mode=\"range\"\n              numberOfMonths={2}\n              selected={filterValue}\n              onSelect={(date) => {\n                setFilterValue({\n                  from: date?.from,\n                  to: date?.to,\n                });\n              }}\n            />\n\n            <div className={cn(\"w-full\")}>\n              <Separator />\n            </div>\n\n            <DataTableFilterDropdownActions\n              className={cn(\"p-4\")}\n              isApplyDisabled={!hasDateRange}\n              onClear={() => {\n                column.setFilterValue(undefined);\n                setFilterValue(undefined);\n                setIsOpen(false);\n              }}\n              onApply={() => {\n                handleApply();\n                setIsOpen(false);\n              }}\n            />\n          </div>\n        );\n      }}\n    </DataTableFilterDropdown>\n  );\n}\n\nexport type DataTableFilterInputProps<TData> = {\n  column: Column<TData>;\n  table?: ReactTable<TData>;\n  defaultOperator?: CrudOperators;\n  operators?: CrudOperators[];\n  renderInput: (props: {\n    value: string | string[];\n    onChange: (value: string | string[]) => void;\n  }) => React.ReactNode;\n};\n\nexport function DataTableFilterInput<TData>({\n  column: columnFromProps,\n  table: tableFromProps,\n  operators: operatorsFromProps,\n  defaultOperator: defaultOperatorFromProps,\n  renderInput,\n}: DataTableFilterInputProps<TData>) {\n  const [filterValue, setFilterValue] = useState(\n    (columnFromProps.getFilterValue() as string | string[]) || \"\",\n  );\n\n  const [operator, setOperator] = useState<CrudOperators>(() => {\n    if (!tableFromProps) {\n      return defaultOperatorFromProps || \"eq\";\n    }\n\n    const columnFilter = tableFromProps\n      .getState()\n      .columnFilters.find((filter) => {\n        return filter.id === columnFromProps.id;\n      });\n\n    if (columnFilter && \"operator\" in columnFilter) {\n      return columnFilter.operator as CrudOperators;\n    }\n\n    return defaultOperatorFromProps || \"eq\";\n  });\n\n  const handleApply = () => {\n    columnFromProps.setFilterValue(filterValue);\n  };\n\n  const handleClear = () => {\n    columnFromProps.setFilterValue(undefined);\n    setFilterValue(\"\");\n  };\n\n  const handleOperatorChange = (value: CrudOperators) => {\n    setOperator(value);\n    columnFromProps.columnDef.meta = {\n      ...columnFromProps.columnDef.meta,\n      filterOperator: value,\n    };\n  };\n\n  return (\n    <DataTableFilterDropdown column={columnFromProps}>\n      {({ setIsOpen }) => {\n        return (\n          <div\n            className={cn(\n              \"flex\",\n              \"flex-col\",\n              \"items-center\",\n              \"gap-4\",\n              \"w-full\",\n            )}\n            onKeyDown={(event) => {\n              if (event.key === \"Enter\") {\n                handleApply();\n                setIsOpen(false);\n              }\n            }}\n          >\n            <div\n              className={cn(\"grid\", \"grid-cols-1\", \"md:grid-cols-2\", \"gap-2\")}\n            >\n              {operatorsFromProps && operatorsFromProps.length > 1 && (\n                <DataTableFilterOperatorSelect\n                  value={operator}\n                  operators={operatorsFromProps}\n                  onValueChange={handleOperatorChange}\n                />\n              )}\n              {renderInput({\n                value: filterValue,\n                onChange: setFilterValue,\n              })}\n            </div>\n            <div className={cn(\"w-full\")}>\n              <Separator />\n            </div>\n            <DataTableFilterDropdownActions\n              onClear={() => {\n                handleClear();\n                setIsOpen(false);\n              }}\n              onApply={() => {\n                handleApply();\n                setIsOpen(false);\n              }}\n            />\n          </div>\n        );\n      }}\n    </DataTableFilterDropdown>\n  );\n}\n\nconst CRUD_OPERATOR_LABELS: Record<\n  Exclude<CrudOperators, \"or\" | \"and\">,\n  { i18nKey: string; defaultLabel: string }\n> = {\n  eq: { i18nKey: \"table.filter.operator.eq\", defaultLabel: \"Equals\" },\n  ne: { i18nKey: \"table.filter.operator.ne\", defaultLabel: \"Not equals\" },\n  lt: { i18nKey: \"table.filter.operator.lt\", defaultLabel: \"Less than\" },\n  gt: { i18nKey: \"table.filter.operator.gt\", defaultLabel: \"Greater than\" },\n  lte: {\n    i18nKey: \"table.filter.operator.lte\",\n    defaultLabel: \"Less than or equal\",\n  },\n  gte: {\n    i18nKey: \"table.filter.operator.gte\",\n    defaultLabel: \"Greater than or equal\",\n  },\n  in: {\n    i18nKey: \"table.filter.operator.in\",\n    defaultLabel: \"Includes in an array\",\n  },\n  nin: {\n    i18nKey: \"table.filter.operator.nin\",\n    defaultLabel: \"Not includes in an array\",\n  },\n  ina: {\n    i18nKey: \"table.filter.operator.ina\",\n    defaultLabel: \"Includes in an array (case sensitive)\",\n  },\n  nina: {\n    i18nKey: \"table.filter.operator.nina\",\n    defaultLabel: \"Not includes in an array (case sensitive)\",\n  },\n  contains: {\n    i18nKey: \"table.filter.operator.contains\",\n    defaultLabel: \"Contains\",\n  },\n  ncontains: {\n    i18nKey: \"table.filter.operator.ncontains\",\n    defaultLabel: \"Not contains\",\n  },\n  containss: {\n    i18nKey: \"table.filter.operator.containss\",\n    defaultLabel: \"Contains (case sensitive)\",\n  },\n  ncontainss: {\n    i18nKey: \"table.filter.operator.ncontainss\",\n    defaultLabel: \"Not contains (case sensitive)\",\n  },\n  between: {\n    i18nKey: \"table.filter.operator.between\",\n    defaultLabel: \"Between\",\n  },\n  nbetween: {\n    i18nKey: \"table.filter.operator.nbetween\",\n    defaultLabel: \"Not between\",\n  },\n  null: { i18nKey: \"table.filter.operator.null\", defaultLabel: \"Is null\" },\n  nnull: {\n    i18nKey: \"table.filter.operator.nnull\",\n    defaultLabel: \"Is not null\",\n  },\n  startswith: {\n    i18nKey: \"table.filter.operator.startswith\",\n    defaultLabel: \"Starts with\",\n  },\n  nstartswith: {\n    i18nKey: \"table.filter.operator.nstartswith\",\n    defaultLabel: \"Not starts with\",\n  },\n  startswiths: {\n    i18nKey: \"table.filter.operator.startswiths\",\n    defaultLabel: \"Starts with (case sensitive)\",\n  },\n  nstartswiths: {\n    i18nKey: \"table.filter.operator.nstartswiths\",\n    defaultLabel: \"Not starts with (case sensitive)\",\n  },\n  endswith: {\n    i18nKey: \"table.filter.operator.endswith\",\n    defaultLabel: \"Ends with\",\n  },\n  nendswith: {\n    i18nKey: \"table.filter.operator.nendswith\",\n    defaultLabel: \"Not ends with\",\n  },\n  endswiths: {\n    i18nKey: \"table.filter.operator.endswiths\",\n    defaultLabel: \"Ends with (case sensitive)\",\n  },\n  nendswiths: {\n    i18nKey: \"table.filter.operator.nendswiths\",\n    defaultLabel: \"Not ends with (case sensitive)\",\n  },\n};\n\nexport type DataTableFilterOperatorSelectProps = {\n  value: CrudOperators;\n  onValueChange: (value: CrudOperators) => void;\n  operators?: CrudOperators[];\n  placeholder?: string;\n  triggerClassName?: string;\n  contentClassName?: string;\n};\n\nexport function DataTableFilterOperatorSelect({\n  value,\n  onValueChange,\n  operators: operatorsFromProps,\n  placeholder,\n  triggerClassName,\n  contentClassName,\n}: DataTableFilterOperatorSelectProps) {\n  const t = useTranslate();\n\n  const [open, setOpen] = useState(false);\n\n  const operators = useMemo(() => {\n    return Object.entries(CRUD_OPERATOR_LABELS).filter(([operator]) =>\n      operatorsFromProps?.includes(operator as CrudOperators),\n    );\n  }, [operatorsFromProps]);\n\n  const selectedLabel = t(\n    CRUD_OPERATOR_LABELS[value as Exclude<CrudOperators, \"or\" | \"and\">].i18nKey,\n    CRUD_OPERATOR_LABELS[value as Exclude<CrudOperators, \"or\" | \"and\">]\n      .defaultLabel,\n  );\n  const placeholderText =\n    placeholder ?? t(\"table.filter.operator.placeholder\", \"Search operator...\");\n  const noResultsText = t(\n    \"table.filter.operator.noResults\",\n    \"No operator found.\",\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"w-full\",\n            \"justify-between\",\n            \"truncate\",\n            triggerClassName,\n          )}\n        >\n          <div className={cn(\"truncate\")}>\n            {selectedLabel ?? placeholderText}\n          </div>\n          <ChevronsUpDown\n            className={cn(\"ml-2\", \"h-4\", \"w-4\", \"shrink-0\", \"opacity-50\")}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className={cn(\"p-0\", contentClassName)} forceMount>\n        <Command>\n          <CommandInput placeholder={placeholderText} />\n          <CommandList>\n            <CommandEmpty>{noResultsText}</CommandEmpty>\n            <CommandGroup>\n              {operators.map(([op, { i18nKey, defaultLabel }]) => (\n                <CommandItem\n                  key={op}\n                  value={op}\n                  onSelect={() => {\n                    onValueChange(op as CrudOperators);\n                    setOpen(false);\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2\",\n                      \"h-4\",\n                      \"w-4\",\n                      value === op ? \"opacity-100\" : \"opacity-0\",\n                    )}\n                  />\n                  {t(i18nKey, defaultLabel)}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nDataTableFilterDropdown.displayName = \"DataTableFilterDropdown\";\nDataTableFilterDropdownText.displayName = \"DataTableFilterDropdownText\";\nDataTableFilterCombobox.displayName = \"DataTableFilterCombobox\";\nDataTableFilterDropdownDateRangePicker.displayName =\n  \"DataTableFilterDropdownDateRangePicker\";\nDataTableFilterOperatorSelect.displayName = \"DataTableFilterOperatorSelect\";\nDataTableFilterDropdownActions.displayName = \"DataTableFilterDropdownActions\";\nDataTableFilterDropdownNumeric.displayName = \"DataTableFilterDropdownNumeric\";\nDataTableFilterInput.displayName = \"DataTableFilterInput\";\nDataTableFilterOperatorSelect.displayName = \"DataTableFilterOperatorSelect\";\nDataTableFilterDropdownDateSinglePicker.displayName =\n  \"DataTableFilterDropdownDateSinglePicker\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/data-table/data-table-filter.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/data-table/data-table-sorter.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport { ArrowDown, ArrowUp, ChevronsUpDown } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nexport type DataTableSorterProps<TData> = {\n  column: Column<TData>;\n} & React.ComponentProps<typeof Button>;\n\nexport function DataTableSorter<TData>({\n  column,\n  className,\n  ...props\n}: DataTableSorterProps<TData>) {\n  const title =\n    column.getIsSorted() === \"desc\"\n      ? `Sort by ${column.id} as descending`\n      : column.getIsSorted() === \"asc\"\n        ? `Sort by ${column.id} as ascending`\n        : `Sort by ${column.id}`;\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => column.toggleSorting(undefined, true)}\n      title={title}\n      aria-label={title}\n      {...props}\n      className={cn(\"data-[state=open]:bg-accent\", \"w-5 h-5\", className)}\n    >\n      {column.getIsSorted() === \"desc\" ? (\n        <ArrowDown className={cn(\"text-primary\", \"!w-3\", \"!h-3\")} />\n      ) : column.getIsSorted() === \"asc\" ? (\n        <ArrowUp className={cn(\"text-primary\", \"!w-3\", \"!h-3\")} />\n      ) : (\n        <ChevronsUpDown\n          className={cn(\"text-muted-foreground\", \"!w-3\", \"!h-3\")}\n        />\n      )}\n    </Button>\n  );\n}\n\nDataTableSorter.displayName = \"DataTableSorter\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/data-table/data-table-sorter.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/data-table/data-table-pagination.tsx",
      "content": "\"use client\";\n\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\nimport { useMemo } from \"react\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ntype DataTablePaginationProps = {\n  currentPage: number;\n  pageCount: number;\n  setCurrentPage: (page: number) => void;\n  pageSize: number;\n  setPageSize: (size: number) => void;\n  total?: number;\n};\n\nexport function DataTablePagination({\n  currentPage,\n  pageCount,\n  setCurrentPage,\n  pageSize,\n  setPageSize,\n  total,\n}: DataTablePaginationProps) {\n  const pageSizeOptions = useMemo(() => {\n    const baseOptions = [10, 20, 30, 40, 50];\n    const optionsSet = new Set(baseOptions);\n\n    if (!optionsSet.has(pageSize)) {\n      optionsSet.add(pageSize);\n    }\n\n    return Array.from(optionsSet).sort((a, b) => a - b);\n  }, [pageSize]);\n\n  return (\n    <div\n      className={cn(\n        \"flex\",\n        \"items-center\",\n        \"justify-between\",\n        \"flex-wrap\",\n        \"px-2\",\n        \"w-full\",\n        \"gap-2\",\n      )}\n    >\n      <div\n        className={cn(\n          \"flex-1\",\n          \"text-sm\",\n          \"text-muted-foreground\",\n          \"whitespace-nowrap\",\n        )}\n      >\n        {typeof total === \"number\" ? `${total} row(s)` : null}\n      </div>\n      <div className={cn(\"flex\", \"items-center\", \"flex-wrap\", \"gap-2\")}>\n        <div className={cn(\"flex\", \"items-center\", \"gap-2\")}>\n          <span className={cn(\"text-sm\", \"font-medium\")}>Rows per page</span>\n          <Select\n            value={`${pageSize}`}\n            onValueChange={(v) => setPageSize(Number(v))}\n          >\n            <SelectTrigger className={cn(\"h-8\", \"w-[70px]\")}>\n              <SelectValue placeholder={pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((size) => (\n                <SelectItem key={size} value={`${size}`}>\n                  {size}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className={cn(\"flex\", \"items-center\", \"flex-wrap\", \"gap-2\")}>\n          <div\n            className={cn(\n              \"flex\",\n              \"items-center\",\n              \"justify-center\",\n              \"text-sm\",\n              \"font-medium\",\n            )}\n          >\n            Page {currentPage} of {pageCount}\n          </div>\n          <div className={cn(\"flex\", \"items-center\", \"gap-2\")}>\n            <Button\n              variant=\"outline\"\n              className={cn(\"hidden\", \"h-8\", \"w-8\", \"p-0\", \"lg:flex\")}\n              onClick={() => setCurrentPage(1)}\n              disabled={currentPage === 1}\n              aria-label=\"Go to first page\"\n            >\n              <ChevronsLeft />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className={cn(\"h-8\", \"w-8\", \"p-0\")}\n              onClick={() => setCurrentPage(currentPage - 1)}\n              disabled={currentPage === 1}\n              aria-label=\"Go to previous page\"\n            >\n              <ChevronLeft />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className={cn(\"h-8\", \"w-8\", \"p-0\")}\n              onClick={() => setCurrentPage(currentPage + 1)}\n              disabled={currentPage === pageCount}\n              aria-label=\"Go to next page\"\n            >\n              <ChevronRight />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className={cn(\"hidden\", \"h-8\", \"w-8\", \"p-0\", \"lg:flex\")}\n              onClick={() => setCurrentPage(pageCount)}\n              disabled={currentPage === pageCount}\n              aria-label=\"Go to last page\"\n            >\n              <ChevronsRight />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDataTablePagination.displayName = \"DataTablePagination\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/data-table/data-table-pagination.tsx"
    }
  ],
  "docs": "https://github.com/refinedev/refine",
  "categories": ["data", "table", "pagination", "sorting", "filtering"]
}
