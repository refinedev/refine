{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "buttons",
  "type": "registry:component",
  "title": "Refine Buttons",
  "author": "Refine <info@refine.dev>",
  "description": "A comprehensive set of action buttons for Refine applications including create, edit, delete, show, clone, list, and refresh buttons",
  "dependencies": ["@refinedev/core", "lucide-react"],
  "registryDependencies": ["button", "popover"],
  "files": [
    {
      "path": "registry/new-york/refine-ui/buttons/create.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useCreateButton } from \"@refinedev/core\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\ntype CreateButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const CreateButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  CreateButtonProps\n>(({ resource, accessControl, meta, children, onClick, ...rest }, ref) => {\n  const { hidden, disabled, LinkComponent, to, label } = useCreateButton({\n    resource,\n    accessControl,\n    meta,\n  });\n\n  const isDisabled = disabled || rest.disabled;\n  const isHidden = hidden || rest.hidden;\n\n  if (isHidden) return null;\n\n  return (\n    <Button {...rest} ref={ref} disabled={isDisabled} asChild>\n      <LinkComponent\n        to={to}\n        replace={false}\n        onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n          if (isDisabled) {\n            e.preventDefault();\n            return;\n          }\n          if (onClick) {\n            e.preventDefault();\n            onClick(e);\n          }\n        }}\n      >\n        {children ?? (\n          <div className=\"flex items-center gap-2 font-semibold\">\n            <Plus className=\"w-4 h-4\" />\n            <span>{label ?? \"Create\"}</span>\n          </div>\n        )}\n      </LinkComponent>\n    </Button>\n  );\n});\n\nCreateButton.displayName = \"CreateButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/create.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/edit.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useEditButton } from \"@refinedev/core\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Pencil } from \"lucide-react\";\n\ntype EditButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: string;\n  /**\n   * Data item identifier for the actions with the API\n   * @default Reads `:id` from the URL\n   */\n  recordItemId?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const EditButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  EditButtonProps\n>(\n  (\n    { resource, recordItemId, accessControl, meta, children, onClick, ...rest },\n    ref,\n  ) => {\n    const { hidden, disabled, LinkComponent, to, label } = useEditButton({\n      resource,\n      id: recordItemId,\n      accessControl,\n      meta,\n    });\n\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n\n    if (isHidden) return null;\n\n    return (\n      <Button {...rest} ref={ref} disabled={isDisabled} asChild>\n        <LinkComponent\n          to={to}\n          replace={false}\n          onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n            if (isDisabled) {\n              e.preventDefault();\n              return;\n            }\n            if (onClick) {\n              e.preventDefault();\n              onClick(e);\n            }\n          }}\n        >\n          {children ?? (\n            <div className=\"flex items-center gap-2 font-semibold\">\n              <Pencil className=\"h-4 w-4\" />\n              <span>{label}</span>\n            </div>\n          )}\n        </LinkComponent>\n      </Button>\n    );\n  },\n);\n\nEditButton.displayName = \"EditButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/edit.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/show.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useShowButton } from \"@refinedev/core\";\nimport { Eye } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\ntype ShowButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: string;\n  /**\n   * Data item identifier for the actions with the API\n   * @default Reads `:id` from the URL\n   */\n  recordItemId?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const ShowButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  ShowButtonProps\n>(\n  (\n    { resource, recordItemId, accessControl, meta, children, onClick, ...rest },\n    ref,\n  ) => {\n    const { hidden, disabled, LinkComponent, to, label } = useShowButton({\n      resource,\n      id: recordItemId,\n      accessControl,\n      meta,\n    });\n\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n\n    if (isHidden) return null;\n\n    return (\n      <Button {...rest} ref={ref} disabled={isDisabled} asChild>\n        <LinkComponent\n          to={to}\n          replace={false}\n          onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n            if (isDisabled) {\n              e.preventDefault();\n              return;\n            }\n            if (onClick) {\n              e.preventDefault();\n              onClick(e);\n            }\n          }}\n        >\n          {children ?? (\n            <div className=\"flex items-center gap-2 font-semibold\">\n              <Eye className=\"h-4 w-4\" />\n              <span>{label}</span>\n            </div>\n          )}\n        </LinkComponent>\n      </Button>\n    );\n  },\n);\n\nShowButton.displayName = \"ShowButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/show.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/delete.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useDeleteButton } from \"@refinedev/core\";\nimport { Loader2, Trash } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\n\ntype DeleteButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: string;\n  /**\n   * Data item identifier for the actions with the API\n   * @default Reads `:id` from the URL\n   */\n  recordItemId?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const DeleteButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  DeleteButtonProps\n>(({ resource, recordItemId, accessControl, meta, children, ...rest }, ref) => {\n  const {\n    hidden,\n    disabled,\n    loading,\n    onConfirm,\n    label,\n    confirmTitle: defaultConfirmTitle,\n    confirmOkLabel: defaultConfirmOkLabel,\n    cancelLabel: defaultCancelLabel,\n  } = useDeleteButton({\n    resource,\n    id: recordItemId,\n    accessControl,\n    meta,\n  });\n  const [open, setOpen] = React.useState(false);\n\n  const isDisabled = disabled || rest.disabled || loading;\n  const isHidden = hidden || rest.hidden;\n\n  if (isHidden) return null;\n\n  const confirmCancelText = defaultCancelLabel;\n  const confirmOkText = defaultConfirmOkLabel;\n  const confirmTitle = defaultConfirmTitle;\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <span>\n          <Button\n            variant=\"destructive\"\n            {...rest}\n            ref={ref}\n            disabled={isDisabled}\n          >\n            {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {children ?? (\n              <div className=\"flex items-center gap-2 font-semibold\">\n                <Trash className=\"h-4 w-4\" />\n                <span>{label}</span>\n              </div>\n            )}\n          </Button>\n        </span>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto\" align=\"start\">\n        <div className=\"flex flex-col gap-2\">\n          <p className=\"text-sm\">{confirmTitle}</p>\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setOpen(false)}>\n              {confirmCancelText}\n            </Button>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              disabled={loading}\n              onClick={() => {\n                if (typeof onConfirm === \"function\") {\n                  onConfirm();\n                }\n                setOpen(false);\n              }}\n            >\n              {confirmOkText}\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n});\n\nDeleteButton.displayName = \"DeleteButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/delete.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/clone.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useCloneButton } from \"@refinedev/core\";\nimport { Copy } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\ntype CloneButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: string;\n  /**\n   * Data item identifier for the actions with the API\n   * @default Reads `:id` from the URL\n   */\n  recordItemId?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const CloneButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  CloneButtonProps\n>(\n  (\n    { resource, recordItemId, accessControl, meta, children, onClick, ...rest },\n    ref,\n  ) => {\n    const { hidden, disabled, LinkComponent, to, label } = useCloneButton({\n      accessControl,\n      resource,\n      id: recordItemId,\n      meta,\n    });\n\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n\n    if (isHidden) return null;\n\n    return (\n      <Button {...rest} ref={ref} disabled={isDisabled} asChild>\n        <LinkComponent\n          to={to}\n          replace={false}\n          onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n            if (isDisabled) {\n              e.preventDefault();\n              return;\n            }\n            if (onClick) {\n              e.preventDefault();\n              onClick(e);\n            }\n          }}\n        >\n          {children ?? (\n            <div className=\"flex items-center gap-2 font-semibold\">\n              <Copy className=\"h-4 w-4\" />\n              <span>{label}</span>\n            </div>\n          )}\n        </LinkComponent>\n      </Button>\n    );\n  },\n);\n\nCloneButton.displayName = \"CloneButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/clone.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useListButton } from \"@refinedev/core\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { List } from \"lucide-react\";\n\ntype ListButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: BaseKey;\n  /**\n   * Access Control configuration for the button\n   * @default `{ enabled: true, hideIfUnauthorized: false }`\n   */\n  accessControl?: {\n    enabled?: boolean;\n    hideIfUnauthorized?: boolean;\n  };\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const ListButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  ListButtonProps\n>(({ resource, accessControl, meta, children, onClick, ...rest }, ref) => {\n  const { hidden, disabled, LinkComponent, to, label } = useListButton({\n    resource,\n    accessControl,\n    meta,\n  });\n\n  const isDisabled = disabled || rest.disabled;\n  const isHidden = hidden || rest.hidden;\n\n  if (isHidden) return null;\n\n  return (\n    <Button {...rest} ref={ref} disabled={isDisabled} asChild>\n      <LinkComponent\n        to={to}\n        replace={false}\n        onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n          if (isDisabled) {\n            e.preventDefault();\n            return;\n          }\n          if (onClick) {\n            e.preventDefault();\n            onClick(e);\n          }\n        }}\n      >\n        {children ?? (\n          <div className=\"flex items-center gap-2 font-semibold\">\n            <List className=\"w-4 h-4\" />\n            <span>{label}</span>\n          </div>\n        )}\n      </LinkComponent>\n    </Button>\n  );\n});\n\nListButton.displayName = \"ListButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/list.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/buttons/refresh.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { type BaseKey, useRefreshButton } from \"@refinedev/core\";\nimport { RefreshCcw } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ntype RefreshButtonProps = {\n  /**\n   * Resource name for API data interactions. `identifier` of the resource can be used instead of the `name` of the resource.\n   * @default Inferred resource name from the route\n   */\n  resource?: string;\n  /**\n   * Data item identifier for the actions with the API\n   * @default Reads `:id` from the URL\n   */\n  recordItemId?: BaseKey;\n  /**\n   * Target data provider name for API call to be made\n   * @default `\"default\"`\n   */\n  dataProviderName?: string;\n  /**\n   * `meta` property is used when creating the URL for the related action and path.\n   */\n  meta?: Record<string, unknown>;\n} & React.ComponentProps<typeof Button>;\n\nexport const RefreshButton = React.forwardRef<\n  React.ComponentRef<typeof Button>,\n  RefreshButtonProps\n>(\n  (\n    { resource, recordItemId, dataProviderName, meta, children, ...rest },\n    ref,\n  ) => {\n    const {\n      onClick: refresh,\n      loading,\n      label,\n    } = useRefreshButton({\n      resource,\n      id: recordItemId,\n      dataProviderName,\n      meta,\n    });\n\n    const isDisabled = rest.disabled || loading;\n\n    return (\n      <Button\n        onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n          if (isDisabled) {\n            e.preventDefault();\n            return;\n          }\n          refresh();\n        }}\n        {...rest}\n        ref={ref}\n        disabled={isDisabled}\n      >\n        {children ?? (\n          <div className=\"flex items-center gap-2\">\n            <RefreshCcw\n              className={cn(\"h-4 w-4\", {\n                \"animate-spin\": loading,\n              })}\n            />\n            <span>{label ?? \"Refresh\"}</span>\n          </div>\n        )}\n      </Button>\n    );\n  },\n);\n\nRefreshButton.displayName = \"RefreshButton\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/buttons/refresh.tsx"
    }
  ],
  "docs": "https://github.com/refinedev/refine",
  "categories": ["buttons", "actions", "crud", "navigation"]
}
