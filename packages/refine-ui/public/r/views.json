{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "views",
  "type": "registry:component",
  "title": "Refine Views",
  "author": "Refine <info@refine.dev>",
  "description": "A comprehensive set of view components for Refine applications including create, edit, show, and list views with headers and content areas. These components are designed to be used as page templates for CRUD operations.",
  "dependencies": ["@refinedev/core", "lucide-react"],
  "registryDependencies": [
    "separator",
    "https://ui.refine.dev/r/buttons.json",
    "https://ui.refine.dev/r/breadcrumb.json",
    "https://ui.refine.dev/r/loading-overlay.json"
  ],
  "files": [
    {
      "path": "registry/new-york/refine-ui/views/create-view.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  useBack,\n  useResourceParams,\n  useUserFriendlyName,\n} from \"@refinedev/core\";\nimport type { PropsWithChildren } from \"react\";\nimport { Breadcrumb } from \"@/registry/new-york/refine-ui/layout/breadcrumb\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { ArrowLeftIcon } from \"lucide-react\";\n\ntype CreateViewProps = PropsWithChildren<{\n  className?: string;\n}>;\n\nexport function CreateView({ children, className }: CreateViewProps) {\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", className)}>{children}</div>\n  );\n}\n\ntype CreateHeaderProps = PropsWithChildren<{\n  resource?: string;\n  title?: string;\n  wrapperClassName?: string;\n  headerClassName?: string;\n}>;\n\nexport const CreateViewHeader = ({\n  resource: resourceFromProps,\n  title: titleFromProps,\n  wrapperClassName,\n  headerClassName,\n}: CreateHeaderProps) => {\n  const back = useBack();\n\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const { resource, identifier } = useResourceParams({\n    resource: resourceFromProps,\n  });\n\n  const title =\n    titleFromProps ??\n    getUserFriendlyName(\n      resource?.meta?.label ?? identifier ?? resource?.name,\n      \"plural\",\n    );\n\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", wrapperClassName)}>\n      <div className=\"flex items-center relative gap-2\">\n        <div className=\"bg-background z-[2] pr-4\">\n          <Breadcrumb />\n        </div>\n        <Separator className={cn(\"absolute\", \"left-0\", \"right-0\", \"z-[1]\")} />\n      </div>\n      <div\n        className={cn(\n          \"flex\",\n          \"gap-1\",\n          \"items-center\",\n          \"-ml-2.5\",\n          headerClassName,\n        )}\n      >\n        <Button variant=\"ghost\" size=\"icon\" onClick={back}>\n          <ArrowLeftIcon className=\"h-4 w-4\" />\n        </Button>\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n      </div>\n    </div>\n  );\n};\n\nCreateView.displayName = \"CreateView\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/views/create-view.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/views/edit-view.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  useBack,\n  useResourceParams,\n  useUserFriendlyName,\n} from \"@refinedev/core\";\nimport type { PropsWithChildren } from \"react\";\nimport { Breadcrumb } from \"@/registry/new-york/refine-ui/layout/breadcrumb\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { RefreshButton } from \"@/registry/new-york/refine-ui/buttons/refresh\";\nimport { ArrowLeftIcon } from \"lucide-react\";\n\ntype EditViewProps = PropsWithChildren<{\n  className?: string;\n}>;\n\nexport function EditView({ children, className }: EditViewProps) {\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", className)}>{children}</div>\n  );\n}\n\ntype EditViewHeaderProps = PropsWithChildren<{\n  resource?: string;\n  title?: string;\n  wrapperClassName?: string;\n  headerClassName?: string;\n  actionsSlot?: React.ReactNode;\n}>;\n\nexport const EditViewHeader = ({\n  resource: resourceFromProps,\n  title: titleFromProps,\n  actionsSlot,\n  wrapperClassName,\n  headerClassName,\n}: EditViewHeaderProps) => {\n  const back = useBack();\n\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const { resource, identifier } = useResourceParams({\n    resource: resourceFromProps,\n  });\n  const { id: recordItemId } = useResourceParams();\n\n  const resourceName = resource?.name ?? identifier;\n\n  const title =\n    titleFromProps ??\n    getUserFriendlyName(\n      resource?.meta?.label ?? identifier ?? resource?.name,\n      \"plural\",\n    );\n\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", wrapperClassName)}>\n      <div className=\"flex items-center relative gap-2\">\n        <div className=\"bg-background z-[2] pr-4\">\n          <Breadcrumb />\n        </div>\n        <Separator className={cn(\"absolute\", \"left-0\", \"right-0\", \"z-[1]\")} />\n      </div>\n      <div\n        className={cn(\n          \"flex\",\n          \"gap-1\",\n          \"items-center\",\n          \"justify-between\",\n          \"-ml-2.5\",\n          headerClassName,\n        )}\n      >\n        <div className=\"flex items-center gap-1\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={back}>\n            <ArrowLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <h2 className=\"text-2xl font-bold\">{title}</h2>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {actionsSlot}\n          <RefreshButton\n            variant=\"outline\"\n            recordItemId={recordItemId}\n            resource={resourceName}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nEditView.displayName = \"EditView\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/views/edit-view.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/views/show-view.tsx",
      "content": "\"use client\";\n\nimport type { PropsWithChildren } from \"react\";\n\nimport { ArrowLeftIcon } from \"lucide-react\";\nimport {\n  useBack,\n  useResourceParams,\n  useUserFriendlyName,\n} from \"@refinedev/core\";\nimport { Breadcrumb } from \"@/registry/new-york/refine-ui/layout/breadcrumb\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { RefreshButton } from \"@/registry/new-york/refine-ui/buttons/refresh\";\nimport { cn } from \"@/lib/utils\";\nimport { EditButton } from \"../buttons/edit\";\n\ntype ShowViewProps = PropsWithChildren<{\n  className?: string;\n}>;\n\nexport function ShowView({ children, className }: ShowViewProps) {\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", className)}>{children}</div>\n  );\n}\n\ntype ShowViewHeaderProps = PropsWithChildren<{\n  resource?: string;\n  title?: string;\n  wrapperClassName?: string;\n  headerClassName?: string;\n}>;\n\nexport const ShowViewHeader = ({\n  resource: resourceFromProps,\n  title: titleFromProps,\n  wrapperClassName,\n  headerClassName,\n}: ShowViewHeaderProps) => {\n  const back = useBack();\n\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const { resource, identifier } = useResourceParams({\n    resource: resourceFromProps,\n  });\n  const { id: recordItemId } = useResourceParams();\n\n  const resourceName = resource?.name ?? identifier;\n\n  const title =\n    titleFromProps ??\n    getUserFriendlyName(\n      resource?.meta?.label ?? identifier ?? resource?.name,\n      \"singular\",\n    );\n\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", wrapperClassName)}>\n      <div className=\"flex items-center relative gap-2\">\n        <div className=\"bg-background z-[2] pr-4\">\n          <Breadcrumb />\n        </div>\n        <Separator className={cn(\"absolute\", \"left-0\", \"right-0\", \"z-[1]\")} />\n      </div>\n      <div\n        className={cn(\n          \"flex\",\n          \"gap-1\",\n          \"items-center\",\n          \"justify-between\",\n          \"-ml-2.5\",\n          headerClassName,\n        )}\n      >\n        <div className=\"flex items-center gap-1\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={back}>\n            <ArrowLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <h2 className=\"text-2xl font-bold\">{title}</h2>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <RefreshButton\n            variant=\"outline\"\n            recordItemId={recordItemId}\n            resource={resourceName}\n          />\n          <EditButton\n            variant=\"outline\"\n            recordItemId={recordItemId}\n            resource={resourceName}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nShowView.displayName = \"ShowView\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/views/show-view.tsx"
    },
    {
      "path": "registry/new-york/refine-ui/views/list-view.tsx",
      "content": "\"use client\";\n\nimport type { PropsWithChildren } from \"react\";\n\nimport { useResourceParams, useUserFriendlyName } from \"@refinedev/core\";\nimport { Breadcrumb } from \"@/registry/new-york/refine-ui/layout/breadcrumb\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { CreateButton } from \"@/registry/new-york/refine-ui/buttons/create\";\nimport { cn } from \"@/lib/utils\";\n\ntype ListViewProps = PropsWithChildren<{\n  className?: string;\n}>;\n\nexport function ListView({ children, className }: ListViewProps) {\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", className)}>{children}</div>\n  );\n}\n\ntype ListHeaderProps = PropsWithChildren<{\n  resource?: string;\n  title?: string;\n  canCreate?: boolean;\n  headerClassName?: string;\n  wrapperClassName?: string;\n}>;\n\nexport const ListViewHeader = ({\n  canCreate,\n  resource: resourceFromProps,\n  title: titleFromProps,\n  wrapperClassName,\n  headerClassName,\n}: ListHeaderProps) => {\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const { resource, identifier } = useResourceParams({\n    resource: resourceFromProps,\n  });\n  const resourceName = identifier ?? resource?.name;\n\n  const isCreateButtonVisible = canCreate ?? !!resource?.create;\n\n  const title =\n    titleFromProps ??\n    getUserFriendlyName(\n      resource?.meta?.label ?? identifier ?? resource?.name,\n      \"plural\",\n    );\n\n  return (\n    <div className={cn(\"flex flex-col\", \"gap-4\", wrapperClassName)}>\n      <div className=\"flex items-center relative gap-2\">\n        <div className=\"bg-background z-[2] pr-4\">\n          <Breadcrumb />\n        </div>\n        <Separator className={cn(\"absolute\", \"left-0\", \"right-0\", \"z-[1]\")} />\n      </div>\n      <div className={cn(\"flex\", \"justify-between\", \"gap-4\", headerClassName)}>\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n        {isCreateButtonVisible && (\n          <div className=\"flex items-center gap-2\">\n            <CreateButton resource={resourceName} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nListView.displayName = \"ListView\";\n",
      "type": "registry:component",
      "target": "src/components/refine-ui/views/list-view.tsx"
    }
  ],
  "docs": "https://github.com/refinedev/refine",
  "categories": ["views", "layout", "crud", "pages"]
}
