"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[74362],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var a=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),g=r,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||o;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},94076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});t(37953);var a=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the Refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using Refine and React95 UI.",slug:"awesome-react-windows95-ui-with-refine",authors:"melih",tags:["refine","react","supabase","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/social.jpg",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/awesome-react-windows95-ui-with-refine",source:"@site/blog/2022-03-22-refine-with-react95.md",title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the Refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using Refine and React95 UI.",date:"2022-03-22T00:00:00.000Z",formattedDate:"March 22, 2022",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"react",permalink:"/blog/tags/react"},{label:"supabase",permalink:"/blog/tags/supabase"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:18.485,hasTruncateMarker:!1,authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],frontMatter:{title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the Refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using Refine and React95 UI.",slug:"awesome-react-windows95-ui-with-refine",authors:"melih",tags:["refine","react","supabase","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/social.jpg",hide_table_of_contents:!1},prevItem:{title:"How to Multipart File Upload Using FormData with React Hook Form",permalink:"/blog/how-to-multipart-file-upload-with-react-hook-form"},nextItem:{title:"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application",permalink:"/blog/best-internal-tool-react-frameworks"},relatedPosts:[{title:"Beginner's Guide to React useId Hook",description:"We'll explore the React useId hook, its use cases, and how it can improve our development process.",permalink:"/blog/react-useid",formattedDate:"May 14, 2024",authors:[{name:"Necati \xd6zmen",title:"Head of Growth at Refine",url:"https://github.com/necatiozmen",description:"Feeling Irie",github:"https://github.com/necatiozmen",twitter:"https://twitter.com/necatiozmen3",linkedin:"https://www.linkedin.com/in/necatiozmen/",imageURL:"https://github.com/necatiozmen.png",key:"necati"}],readingTime:7.41,date:"2024-05-14T00:00:00.000Z"},{title:"How to use Zustand",description:"We'll learn how to use Zustand in our React project.",permalink:"/blog/zustand-react-state",formattedDate:"July 31, 2024",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:18.35,date:"2024-07-31T00:00:00.000Z"},{title:"Introduction to Mantine UI",description:"Let's explore Mantine UI React Component Library.",permalink:"/blog/mantine-ui-react",formattedDate:"September 9, 2024",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:18.305,date:"2024-09-09T00:00:00.000Z"}],authorPosts:[{title:"How to Multipart File Upload Using FormData with HTML",description:"In this guide, I'm going to show you how to multipart files upload with using HTML and JavaScript",permalink:"/blog/how-to-multipart-upload",formattedDate:"December 27, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:2.515,date:"2021-12-27T00:00:00.000Z"},{title:"refine vs React-Admin Which is Better for Your Project?",description:"We will compare the features of Refine and react-admin",permalink:"/blog/refine-vs-react-admin",formattedDate:"November 26, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:14.425,date:"2021-11-26T00:00:00.000Z"},{title:"How to Multipart File Upload Using FormData with React Hook Form",description:"In this guide, I'm going to show you how to multipart files upload with using React Hook Form",permalink:"/blog/how-to-multipart-file-upload-with-react-hook-form",formattedDate:"March 29, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:7.06,date:"2022-03-29T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Create a new Refine app",id:"create-a-new-refine-app",level:2},{value:"Overview of the created project",id:"overview-of-the-created-project",level:2},{value:"Supabase Client",id:"supabase-client",level:3},{value:"AuthProvider",id:"authprovider",level:3},{value:"Root component: <code>App.tsx</code>",id:"root-component-apptsx",level:3},{value:"React95 Setup",id:"react95-setup",level:2},{value:"Login Page",id:"login-page",level:2},{value:"Adding a Layout",id:"adding-a-layout",level:2},{value:"Create Post CRUD Pages",id:"create-post-crud-pages",level:2},{value:"List Page",id:"list-page",level:3},{value:"Create Page and Edit Page",id:"create-page-and-edit-page",level:3},{value:"Project Overview",id:"project-overview",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c},g="wrapper";function m(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(g,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Refine")," allows you to include any UI in your project and take full advantage of all its features without worrying about compatibility. To create a project with a vintage ",(0,a.yg)("inlineCode",{parentName:"p"},"Windows95")," style using ",(0,a.yg)("a",{parentName:"p",href:"https://react95.io/"},"React95")," UI components, we can use the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," because it is ",(0,a.yg)("strong",{parentName:"p"},"headless"),"."),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"In this tutorial, we will use ",(0,a.yg)("a",{parentName:"p",href:"https://supabase.com/"},"Supabase")," as the backend of our project. Our goal with this is to create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Windows95"),"-style admin panel using ",(0,a.yg)("strong",{parentName:"p"},"Refine")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/examples/data-provider/supabase/"},"Supabase Data Provider")," features."),(0,a.yg)("h2",{id:"create-a-new-refine-app"},"Create a new Refine app"),(0,a.yg)("p",null,"Let's start by creating our ",(0,a.yg)("strong",{parentName:"p"},"Refine")," project. We'll use the ",(0,a.yg)("inlineCode",{parentName:"p"},"npm create refine-app")," command to interactively initialize the project."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm create refine-app@latest refine-with-react95\n")),(0,a.yg)("p",null,"Select the following options when prompted:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"\u2714 Choose a project template \xb7 refine-vite\n\u2714 What would you like to name your project?: \xb7 refine-with-react95\n\u2714 Choose your backend service to connect: \xb7 Supabase\n\u2714 Do you want to use a UI Framework?: \xb7 Headless\n\u2714 Do you want to add example pages?: \xb7 No\n\u2714 Do you need i18n (Internationalization) support?: \xb7 No\n\u2714 Choose a package manager: \xb7 npm\n")),(0,a.yg)("p",null,"That's it! After the installation process is finished, our ",(0,a.yg)("strong",{parentName:"p"},"Refine")," project is ready. Before we start editing our project, we need to install the ",(0,a.yg)("inlineCode",{parentName:"p"},"react95")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"styled-components")," packages."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm i react95 styled-components\n")),(0,a.yg)("p",null,"Also, we need to install the types for typescript support."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm i -D @types/styled-components\n")),(0,a.yg)("p",null,"Once the installation is complete, we can start editing our project."),(0,a.yg)("h2",{id:"overview-of-the-created-project"},"Overview of the created project"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Refine")," provides us with a ready-to-use project according to the options we choose during the installation process. Let's take a look at the files and folders created by ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"."),(0,a.yg)("h3",{id:"supabase-client"},"Supabase Client"),(0,a.yg)("p",null,"By default, ",(0,a.yg)("strong",{parentName:"p"},"Refine")," creates a ",(0,a.yg)("inlineCode",{parentName:"p"},"supabaseClient")," for you in the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/utility/supabaseClient.ts")," file. You can see the default code below."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/utility/supabaseClient.ts"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/supabaseClient.ts"',title:'"src/utility/supabaseClient.ts"'},'import { createClient } from "@refinedev/supabase";\n\n// use env variables in production\nconst SUPABASE_URL = "https://iwdfzvfqbtokqetmbmbp.supabase.co";\nconst SUPABASE_KEY =\n  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYzMDU2NzAxMCwiZXhwIjoxOTQ2MTQzMDEwfQ._gr6kXGkQBi9BM9dx5vKaNKYj_DJN1xlkarprGpM_fU";\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\n  db: {\n    schema: "public",\n  },\n  auth: {\n    persistSession: true,\n  },\n});\n'))),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"supabaseClient")," will be used by the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/supabase")," package to create a ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," for us."),(0,a.yg)("p",null,"You can learn more about the it in the ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},"Data Provider")," section."),(0,a.yg)("h3",{id:"authprovider"},"AuthProvider"),(0,a.yg)("p",null,"By default, ",(0,a.yg)("strong",{parentName:"p"},"Refine")," also creates an ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," for you in the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/authProvider.ts")," file. You can see the default code below."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/authProvider.ts"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nimport { supabaseClient } from "utility";\n\nconst authProvider: AuthProvider = {\n  login: async ({ email, password, providerName }) => {\n    // sign in with oauth\n    try {\n      if (providerName) {\n        const { data, error } = await supabaseClient.auth.signInWithOAuth({\n          provider: providerName,\n        });\n\n        if (error) {\n          return {\n            success: false,\n            error,\n          };\n        }\n\n        if (data?.url) {\n          return {\n            success: true,\n            redirectTo: "/",\n          };\n        }\n      }\n\n      // sign in with email and password\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        };\n      }\n\n      if (data?.user) {\n        return {\n          success: true,\n          redirectTo: "/",\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: false,\n      error: {\n        message: "Login failed",\n        name: "Invalid email or password",\n      },\n    };\n  },\n  register: async ({ email, password }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        };\n      }\n\n      if (data) {\n        return {\n          success: true,\n          redirectTo: "/",\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: false,\n      error: {\n        message: "Register failed",\n        name: "Invalid email or password",\n      },\n    };\n  },\n  forgotPassword: async ({ email }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n        email,\n        {\n          redirectTo: `${window.location.origin}/update-password`,\n        },\n      );\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        };\n      }\n\n      if (data) {\n        return {\n          success: true,\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: false,\n      error: {\n        message: "Forgot password failed",\n        name: "Invalid email",\n      },\n    };\n  },\n  updatePassword: async ({ password }) => {\n    try {\n      const { data, error } = await supabaseClient.auth.updateUser({\n        password,\n      });\n\n      if (error) {\n        return {\n          success: false,\n          error,\n        };\n      }\n\n      if (data) {\n        return {\n          success: true,\n          redirectTo: "/",\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n    return {\n      success: false,\n      error: {\n        message: "Update password failed",\n        name: "Invalid password",\n      },\n    };\n  },\n  logout: async () => {\n    const { error } = await supabaseClient.auth.signOut();\n\n    if (error) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  check: async () => {\n    try {\n      const { data } = await supabaseClient.auth.getSession();\n      const { session } = data;\n\n      if (!session) {\n        return {\n          authenticated: false,\n          error: {\n            message: "Check failed",\n            name: "Session not found",\n          },\n          logout: true,\n          redirectTo: "/login",\n        };\n      }\n    } catch (error: any) {\n      return {\n        authenticated: false,\n        error: error || {\n          message: "Check failed",\n          name: "Not authenticated",\n        },\n        logout: true,\n        redirectTo: "/login",\n      };\n    }\n\n    return {\n      authenticated: true,\n    };\n  },\n  getPermissions: async () => {\n    const user = await supabaseClient.auth.getUser();\n\n    if (user) {\n      return user.data.user?.role;\n    }\n\n    return null;\n  },\n  getIdentity: async () => {\n    const { data } = await supabaseClient.auth.getUser();\n\n    if (data?.user) {\n      return {\n        ...data.user,\n        name: data.user.email,\n      };\n    }\n\n    return null;\n  },\n};\n\nexport default authProvider;\n'))),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," is a simple object that contains all the functions that are used to handle authentication."),(0,a.yg)("p",null,"You can learn more about the it in the ",(0,a.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},"Auth Provider")," section."),(0,a.yg)("h3",{id:"root-component-apptsx"},"Root component: ",(0,a.yg)("inlineCode",{parentName:"h3"},"App.tsx")),(0,a.yg)("p",null,"Before we start, let's take a look at the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file. This is the root component of our application. It contains the ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,a.yg)("inlineCode",{parentName:"a"},"<Refine />"))," component. This component is the main component of ",(0,a.yg)("strong",{parentName:"p"},"Refine"),". It is used to configure the application and to provide the context to all the other components."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/App.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine, WelcomePage } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\nimport { dataProvider, liveProvider } from "@refinedev/supabase";\nimport routerBindings, {\n  UnsavedChangesNotifier,\n  DocumentTitleHandler,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport { supabaseClient } from "./utility";\nimport authProvider from "./authProvider";\n\nimport "./App.css";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          routerProvider={routerBindings}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route index element={<WelcomePage />} />\n          </Routes>\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.yg)("p",null,"In this component, ",(0,a.yg)("strong",{parentName:"p"},"Refine")," provides ready-to-use features with which you can easily create a CRUD application. You can find detailed information about all of them in ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/"},(0,a.yg)("strong",{parentName:"a"},"Refine"))," documentation."),(0,a.yg)("h2",{id:"react95-setup"},"React95 Setup"),(0,a.yg)("p",null,"Now that we have our application ready, let's start setting up the React95 theme."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/App.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\n\n//highlight-start\nimport original from "react95/dist/themes/original";\nimport { ThemeProvider } from "styled-components";\n//highlight-end\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        {/*highlight-next-line*/}\n        <ThemeProvider theme={original}>\n          <Refine\n          // ...\n          >\n            {/* ... */}\n          </Refine>\n        </ThemeProvider>\n        {/*highlight-next-line*/}\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.yg)("p",null,"We import the ",(0,a.yg)("inlineCode",{parentName:"p"},"original")," theme from the ",(0,a.yg)("inlineCode",{parentName:"p"},"react95")," package and wrap our application with the ",(0,a.yg)("inlineCode",{parentName:"p"},"ThemeProvider")," component from ",(0,a.yg)("inlineCode",{parentName:"p"},"styled-components")," to provide the theme to all the components."),(0,a.yg)("h2",{id:"login-page"},"Login Page"),(0,a.yg)("p",null,"We will create a simple login page to demonstrate the authentication flow. We will use the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/hooks/authentication/useLogin/"},(0,a.yg)("inlineCode",{parentName:"a"},"useLogin"))," hook to handle the login process. This hook will call the ",(0,a.yg)("inlineCode",{parentName:"p"},"login")," function that is defined in the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider"),"."),(0,a.yg)("p",null,"Let's create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<LoginPage />")," component in the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/login/index.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Login Page"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/login/index.tsx"',title:'"src/pages/login/index.tsx"'},'import { useState } from "react";\nimport { useLogin } from "@refinedev/core";\n\nimport {\n  Window,\n  WindowHeader,\n  WindowContent,\n  TextInput,\n  Button,\n} from "react95";\n\ninterface ILoginForm {\n  email: string;\n  password: string;\n}\n\nexport const LoginPage = () => {\n  const [email, setemail] = useState("info@refine.dev");\n  const [password, setPassword] = useState("refine-supabase");\n\n  const { mutate: login } = useLogin<ILoginForm>();\n\n  return (\n    <div\n      style={{\n        display: "flex",\n        flexDirection: "column",\n        justifyContent: "center",\n        alignItems: "center",\n        textAlign: "center",\n        minHeight: "100vh",\n        backgroundColor: "rgb(0, 128, 128)",\n      }}\n    >\n      <Window>\n        <WindowHeader active={true} className="window-header">\n          <span> Refine Login</span>\n        </WindowHeader>\n        <div style={{ marginTop: 8 }}>\n          <img\n            src="https://raw.githubusercontent.com/refinedev/refine/main/logo.png"\n            alt="refine-logo"\n            width={100}\n          />\n        </div>\n        <WindowContent>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              login({ email, password });\n            }}\n          >\n            <div style={{ width: 500 }}>\n              <div style={{ display: "flex" }}>\n                <TextInput\n                  placeholder="User Name"\n                  fullWidth\n                  value={email}\n                  onChange={(e) => {\n                    setemail(e.target.value);\n                  }}\n                />\n              </div>\n              <br />\n              <TextInput\n                placeholder="Password"\n                fullWidth\n                type="password"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n                }}\n              />\n              <br />\n              <Button type="submit" value="login">\n                Sign in\n              </Button>\n            </div>\n          </form>\n        </WindowContent>\n      </Window>\n    </div>\n  );\n};\n'))),(0,a.yg)("p",null,"Now that we've created our Login page, but we need to add it as a route to our application. Let's add it in the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/App.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'// ...\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport { NavigateToResource } from "@refinedev/react-router-v6";\nimport { Outlet, Route, Routes } from "react-router-dom";\n\n//highlight-next-line\nimport { LoginPage } from "./pages/login";\n\nfunction App() {\n    return (\n        {/* ... */}\n        <Refine\n        // ...\n        >\n            <Routes>\n                {/*highlight-start*/}\n                <Route\n                    element={\n                        <Authenticated fallback={<Outlet />}>\n                            <NavigateToResource />\n                        </Authenticated>\n                    }\n                >\n                    <Route path="/login" element={<LoginPage />} />\n                </Route>\n                {/*highlight-end*/}\n            </Routes>\n            {/* ... */}\n        </Refine>\n        {/* ... */}\n    );\n}\n\nexport default App;\n'))),(0,a.yg)("p",null,"We added the ",(0,a.yg)("inlineCode",{parentName:"p"},"/login")," route to our application. If the user is not logged in, we will show the ",(0,a.yg)("inlineCode",{parentName:"p"},"LoginPage")," component. Otherwise, the ",(0,a.yg)("inlineCode",{parentName:"p"},"<NavigateToResource />")," component will redirect the user to the first resource' ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," path in the ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," array. Currently, we don't have any resources, so we will add them in the next steps."),(0,a.yg)("p",null,"Now, we can access our Login page at ",(0,a.yg)("inlineCode",{parentName:"p"},"/login")," path and log in to our Supabase database."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/login-page.jpeg",alt:"Refine Login Page",className:"border border-gray-200 rounded"}),(0,a.yg)("h2",{id:"adding-a-layout"},"Adding a Layout"),(0,a.yg)("p",null,"Before we start adding resources which means adding CRUD pages, we will create a layout to wrap these pages. We will create a simple layout with a header and a footer."),(0,a.yg)("p",null,"First, let's create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Footer />")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/components/footer/index.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Footer component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/footer/index.tsx"',title:'"src/components/footer/index.tsx"'},'import React, { useState } from "react";\nimport { useLogout, useNavigation } from "@refinedev/core";\nimport { AppBar, Toolbar, Button, MenuList, MenuListItem } from "react95";\n\nexport const Footer: React.FC = () => {\n  const [open, setOpen] = useState(false);\n\n  const { mutate: logout } = useLogout();\n  const { push } = useNavigation();\n\n  return (\n    <AppBar style={{ top: "unset", bottom: 0 }}>\n      <Toolbar style={{ justifyContent: "space-between" }}>\n        <div style={{ position: "relative", display: "inline-block" }}>\n          <Button\n            onClick={() => setOpen(!open)}\n            active={open}\n            style={{ fontWeight: "bold" }}\n          >\n            <img\n              src="https://raw.githubusercontent.com/refinedev/refine/main/logo.png"\n              alt="refine logo"\n              style={{ height: "20px", marginRight: 4 }}\n            />\n          </Button>\n          {open && (\n            <MenuList\n              style={{\n                position: "absolute",\n                left: "0",\n                bottom: "100%",\n              }}\n              onClick={() => setOpen(false)}\n            >\n              <MenuListItem\n                onClick={() => {\n                  push("posts");\n                }}\n              >\n                Posts\n              </MenuListItem>\n              <MenuListItem\n                onClick={() => {\n                  logout();\n                }}\n              >\n                <span role="img" aria-label="\ud83d\udd19">\n                  \ud83d\udd19\n                </span>\n                Logout\n              </MenuListItem>\n            </MenuList>\n          )}\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n'))),(0,a.yg)("p",null,"Next, we will create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Header />")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/components/header/index.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Header component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header/index.tsx"',title:'"src/components/header/index.tsx"'},'import { useState } from "react";\nimport { useNavigation, useParsed } from "@refinedev/core";\nimport { AppBar, Toolbar, Button, MenuList, MenuListItem } from "react95";\n\nexport const Header = () => {\n    const [open, setOpen] = useState(false);\n    const { goBack, create } = useNavigation();\n    const { action, resource } = useParsed();\n\n    return (\n        <AppBar style={{ zIndex: 1 }}>\n            <Toolbar>\n                <Button\n                    variant="menu"\n                    onClick={() => setOpen(!open)}\n                    active={open}\n                >\n                    File\n                </Button>\n                <Button variant="menu" disabled>\n                    Edit\n                </Button>\n                <Button variant="menu" disabled>\n                    View\n                </Button>\n                <Button variant="menu" disabled>\n                    Format\n                </Button>\n                <Button variant="menu" disabled>\n                    Tools\n                </Button>\n                <Button variant="menu" disabled>\n                    Table\n                </Button>\n                <Button variant="menu" disabled>\n                    Window\n                </Button>\n                <Button variant="menu" disabled>\n                    Help\n                </Button>\n                {open && (\n                    <MenuList\n                        style={{\n                            position: "absolute",\n                            left: "0",\n                            top: "100%",\n                        }}\n                        onClick={() => setOpen(false)}\n                    >\n                        {action !== "list" && (\n                            <MenuListItem\n                                onClick={() => {\n                                    goBack();\n                                }}\n                            >\n                                Back to {resource?.name}\n                            </MenuListItem>\n                        )}\n                        {action === "list" && (\n                            <MenuListItem\n                                onClick={() => {\n                                    create(resource?.name ?? ""));\n                                }}\n                            >\n                                Create {resource?.name}\n                            </MenuListItem>\n                        )}\n                    </MenuList>\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n};\n'))),(0,a.yg)("p",null,"Now, we can create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Layout />")," component using the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Header />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<Footer />")," components we created above. Update a ",(0,a.yg)("inlineCode",{parentName:"p"},"src/components/layout/index.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Layout component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/layout/index.tsx"',title:'"src/components/layout/index.tsx"'},'import { PropsWithChildren } from "react";\n\nimport { Footer } from "../footer";\nimport { Header } from "../header";\n\nexport const Layout: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <div>\n      <Header />\n      <div\n        style={{\n          padding: "72px 24px 24px 24px",\n          backgroundColor: "rgb(0, 128, 128)",\n          minHeight: "calc(100vh - 48px - 72px - 24px)",\n        }}\n      >\n        {children}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n'))),(0,a.yg)("p",null,"Finally, we can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Layout />")," component when we add routes to our application."),(0,a.yg)("p",null,"Let's create dummy CRUD pages for our ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," resource. Create a ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts")," directory and create the following files:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/pages/posts/list.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},"post;\n"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/pages/posts/create.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import { Window, WindowHeader, WindowContent } from "react95";\n\nexport const PostCreate = () => {\n  return (\n    <Window style={{ width: "100%" }}>\n      <WindowHeader>Posts</WindowHeader>\n      <WindowContent>Create Page</WindowContent>\n    </Window>\n  );\n};\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/pages/posts/edit.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import { Window, WindowHeader, WindowContent } from "react95";\n\nexport const PostEdit = () => {\n  return (\n    <Window style={{ width: "100%" }}>\n      <WindowHeader>Posts</WindowHeader>\n      <WindowContent>Edit Page</WindowContent>\n    </Window>\n  );\n};\n'))),(0,a.yg)("p",null,"And finally, we can add these pages to our application. Update the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"src/App.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\n// highlight-next-line\nimport { Layout } from "./components/layout";\n\nimport { LoginPage } from "./pages/login";\n// highlight-start\nimport { PostList } from "./pages/posts/list";\nimport { PostCreate } from "./pages/posts/create";\nimport { PostEdit } from "./pages/posts/edit";\n// highlight-end\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <ThemeProvider theme={original}>\n          <Refine\n            // ...\n            // highlight-start\n            resources={[\n              {\n                name: "posts",\n                list: "/posts",\n                create: "/posts/create",\n                edit: "/posts/edit/:id",\n              },\n            ]}\n            // highlight-end\n          >\n            <Routes>\n              {/* highlight-start */}\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <Layout>\n                      <Outlet />\n                    </Layout>\n                  </Authenticated>\n                }\n              >\n                <Route\n                  index\n                  element={<NavigateToResource resource="posts" />}\n                />\n\n                <Route path="/posts">\n                  <Route index element={<PostList />} />\n                  <Route path="create" element={<PostCreate />} />\n                  <Route path="edit/:id" element={<PostEdit />} />\n                </Route>\n              </Route>\n              {/* highlight-end */}\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                <Route path="/login" element={<LoginPage />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </ThemeProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/layout-with-dummy-pages.gif",alt:"Refine95 Menu",className:"border border-gray-200 rounded"}),(0,a.yg)("h2",{id:"create-post-crud-pages"},"Create Post CRUD Pages"),(0,a.yg)("h3",{id:"list-page"},"List Page"),(0,a.yg)("p",null,"After our login process, we'll get the posts from our supabase and display them in the table. We will use React95 components for the UI portion of our table, as well as ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/react-table"))," package to handle pagination, sorting, and filtering. You can use all the features of ",(0,a.yg)("a",{parentName:"p",href:"https://react-table.tanstack.com/"},"TanStack Table")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-table")," adapter."),(0,a.yg)("p",null,"So, let's install the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-table")," and dependencies."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm i @refinedev/react-table @tanstack/react-table\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"In next steps, we'll assume that you have the following interfaces in ",(0,a.yg)("inlineCode",{parentName:"strong"},"src/interfaces/index.d.ts")," file.")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"You can find all interfaces in the following code snippet."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface IPost {\n  id: string;\n  title: string;\n  categories: ICategory[];\n}\n\nexport interface ICategory {\n  id: string;\n  title: string;\n}\n\nexport interface ICsvPost {\n  title: string;\n  content: string;\n  categoryId: string;\n}\n"))),(0,a.yg)("p",null,"Let's update a ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList />")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts/list.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show PostList component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { useDelete, useNavigation } from "@refinedev/core";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport {\n  Table,\n  TableBody,\n  TableHead,\n  TableRow,\n  TableHeadCell,\n  TableDataCell,\n  Window,\n  WindowHeader,\n  WindowContent,\n  Button,\n  Select,\n  NumberInput,\n  Hourglass,\n  ScrollView,\n} from "react95";\n\nimport { IPost } from "../../interfaces";\n\nexport const PostList = () => {\n  const { edit } = useNavigation();\n\n  const { mutate: deletePost } = useDelete<IPost>();\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n      },\n      {\n        id: "categoryId",\n        header: "Category",\n        accessorKey: "categories.title",\n      },\n      {\n        id: "action",\n        header: "Action",\n        accessorKey: "id",\n        cell: function render({ getValue }) {\n          return (\n            <div\n              style={{\n                display: "flex",\n                justifyContent: "center",\n                gap: 16,\n              }}\n            >\n              <Button\n                size="sm"\n                onClick={() => edit("posts", getValue() as number)}\n              >\n                Edit\n              </Button>\n              <Button\n                size="sm"\n                onClick={() => {\n                  const id = getValue() as number;\n\n                  const result = window.confirm(\n                    "Are you sure you want to delete this post?",\n                  );\n\n                  if (result) {\n                    deletePost({\n                      resource: "posts",\n                      id,\n                    });\n                  }\n                }}\n              >\n                Delete\n              </Button>\n            </div>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    options: { pageCount },\n    getState,\n    setPageIndex,\n    setPageSize,\n    refineCore: {\n      tableQuery: { isLoading },\n    },\n  } = useTable<IPost>({\n    columns,\n    refineCoreProps: {\n      meta: {\n        select: "*, categories(*)",\n      },\n    },\n  });\n\n  return (\n    <>\n      <Window style={{ width: "100%" }}>\n        <WindowHeader>Posts</WindowHeader>\n        <WindowContent>\n          <ScrollView style={{ width: "100%", height: "410px" }}>\n            <Table>\n              <TableHead>\n                {getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => (\n                      <TableHeadCell\n                        key={header.id}\n                        colSpan={header.colSpan}\n                        onClick={header.column.getToggleSortingHandler()}\n                      >\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext(),\n                        )}\n                      </TableHeadCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {getRowModel().rows.map((row) => {\n                  return (\n                    <TableRow key={row.id}>\n                      {row.getVisibleCells().map((cell) => {\n                        return (\n                          <TableDataCell key={cell.id}>\n                            {flexRender(\n                              cell.column.columnDef.cell,\n                              cell.getContext(),\n                            )}\n                          </TableDataCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            {isLoading && (\n              <div\n                style={{\n                  display: "flex",\n                  justifyContent: "center",\n                  alignItems: "center",\n                  height: "350px",\n                }}\n              >\n                <Hourglass size={32} />\n              </div>\n            )}\n          </ScrollView>\n        </WindowContent>\n        <div\n          style={{\n            display: "flex",\n            justifyContent: "flex-end",\n            marginBottom: 8,\n            marginTop: 8,\n            alignItems: "flex-end",\n          }}\n        >\n          <Select<number>\n            style={{ marginLeft: 8 }}\n            value={getState().pagination.pageSize}\n            onChange={(option) => {\n              setPageSize(option.value);\n            }}\n            options={pageSizeOptions}\n            defaultValue={10}\n          ></Select>\n          <span style={{ marginLeft: 8 }}>\n            Page{" "}\n            <strong>\n              {getState().pagination.pageIndex + 1} of {pageCount}\n            </strong>\n            <span style={{ marginLeft: 8 }}>\n              Go to page:\n              <NumberInput\n                style={{ marginLeft: 8 }}\n                min={1}\n                defaultValue={getState().pagination.pageIndex + 1}\n                width={130}\n                onChange={(value) => {\n                  const page = value ? Number(value) - 1 : 0;\n                  setPageIndex(page);\n                }}\n              />\n            </span>\n          </span>\n        </div>\n      </Window>\n    </>\n  );\n};\n\nconst pageSizeOptions = [\n  { value: 10, label: "10" },\n  { value: 20, label: "20" },\n  { value: 30, label: "30" },\n  { value: 40, label: "40" },\n];\n'))),(0,a.yg)("p",null,"We used the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable")," hook to fetch the data for the table. It makes a request to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/posts")," endpoint with the query parameters. The query parameters are used to filter, sort, and paginate the posts. Since we defined the posts resource in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/App.tsx"),", the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable")," hook knows which endpoint to use for fetching the data."),(0,a.yg)("p",null,"After fetching the data, we used the React95 table components to render the data. We also added delete button and edit button to each row. When the user clicks the delete button, we call the ",(0,a.yg)("inlineCode",{parentName:"p"},"deletePost")," function with the ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," parameters. The ",(0,a.yg)("inlineCode",{parentName:"p"},"deletePost")," function is provided by the ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,a.yg)("inlineCode",{parentName:"a"},"useDelete"))," hook. When the user clicks the edit button, we call the ",(0,a.yg)("inlineCode",{parentName:"p"},"edit"),' function with the "posts" resource and the post id to navigate to the edit page.'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/list-page.gif",alt:"Refine List Page",className:"border border-gray-200 rounded"}),(0,a.yg)("h3",{id:"create-page-and-edit-page"},"Create Page and Edit Page"),(0,a.yg)("p",null,"We have created our post list page. Now we will create page where we can create posts. ",(0,a.yg)("strong",{parentName:"p"},"Refine")," provides a ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," adapter that you can use all the features of ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form")," with ",(0,a.yg)("strong",{parentName:"p"},"Refine"),". We will use this to manage our form state."),(0,a.yg)("p",null,"So, let's install the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," and dependencies."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm i @refinedev/react-hook-form react-hook-form\n")),(0,a.yg)("p",null,"Let's update a ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostCreate />")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts/create.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show PostCreate component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\nimport {\n  Select,\n  GroupBox,\n  Button,\n  TextInput,\n  Window,\n  WindowHeader,\n  WindowContent,\n} from "react95";\nimport { Controller } from "react-hook-form";\n\nexport const PostCreate: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { options } = useSelect({\n    resource: "categories",\n  });\n\n  return (\n    <Window style={{ width: "100%", height: "100%" }}>\n      <WindowHeader>\n        <span>Create Post</span>\n      </WindowHeader>\n      <WindowContent>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <label>Title: </label>\n          <br />\n          <br />\n          <TextInput\n            {...register("title", { required: true })}\n            placeholder="Type here..."\n          />\n          {errors.title && <span>This field is required</span>}\n          <br />\n          <br />\n\n          <Controller\n            name="categoryId"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <GroupBox label={"Category"}>\n                <Select\n                  options={options}\n                  menuMaxHeight={160}\n                  width={160}\n                  variant="flat"\n                  onChange={(option) => onChange(option.value)}\n                  value={value}\n                />\n              </GroupBox>\n            )}\n          />\n          {errors.category && <span>This field is required</span>}\n          <br />\n          <label>Content: </label>\n          <br />\n          <TextInput\n            {...register("content", { required: true })}\n            multiline\n            rows={10}\n            cols={50}\n          />\n\n          {errors.content && <span>This field is required</span>}\n          <br />\n          <Button type="submit" value="Submit">\n            Submit\n          </Button>\n          {formLoading && <p>Loading</p>}\n        </form>\n      </WindowContent>\n    </Window>\n  );\n};\n'))),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/create-page.gif",alt:"Refine Create Page",className:"border border-gray-200 rounded"}),(0,a.yg)("p",null,"Now, let's update a ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostEdit />")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts/edit.tsx")," directory with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show PostEdit Component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\nimport {\n  Select,\n  GroupBox,\n  Button,\n  TextInput,\n  Window,\n  WindowHeader,\n  WindowContent,\n} from "react95";\nimport { Controller } from "react-hook-form";\n\nexport const PostEdit: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { options } = useSelect({\n    resource: "categories",\n  });\n\n  return (\n    <Window style={{ width: "100%", height: "100%" }}>\n      <WindowHeader active={true} className="window-header">\n        <span>Edit Post</span>\n      </WindowHeader>\n      <WindowContent>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <label>Title: </label>\n          <br />\n          <TextInput\n            {...register("title", { required: true })}\n            placeholder="Type here..."\n          />\n          {errors.title && <span>This field is required</span>}\n          <br />\n          <br />\n\n          <Controller\n            name="categoryId"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <GroupBox label={"Category"}>\n                <Select\n                  options={options}\n                  menuMaxHeight={160}\n                  width={160}\n                  variant="flat"\n                  onChange={(option) => onChange(option.value)}\n                  value={value}\n                />\n              </GroupBox>\n            )}\n          />\n          {errors.category && <span>This field is required</span>}\n          <br />\n          <label>Content: </label>\n          <br />\n          <TextInput\n            {...register("content", { required: true })}\n            multiline\n            rows={10}\n            cols={50}\n          />\n\n          {errors.content && <span>This field is required</span>}\n          <br />\n          <Button type="submit" value="Submit">\n            Submit\n          </Button>\n          {formLoading && <p>Loading</p>}\n        </form>\n      </WindowContent>\n    </Window>\n  );\n};\n'))),(0,a.yg)("p",null,"Edit and create pages almost look the same. We can use the same form for both pages. ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," hook knows which action we are performing. For example, if we are on the edit page, it will automatically fetch the post data and fill the form with it."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/edit-page.gif",alt:"Refine Edit Page",className:"border border-gray-200 rounded"}),(0,a.yg)("h2",{id:"project-overview"},"Project Overview"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/overview.gif",alt:"Refine Project Overview"}),(0,a.yg)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,a.yg)("iframe",{src:"https://codesandbox.io/embed/refine-react95-example-beie0q?autoresize=1&fontsize=14&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-react95-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Refine")," is a very powerful and flexible internal tool development framework. The features it provides will greatly reduce your development time. In this example, we have shown step-by-step how a development can be quick and easy using a custom UI and refine-core features. ",(0,a.yg)("strong",{parentName:"p"},"Refine")," does not restrict you, and it delivers almost all of your project's requirements via the hooks it provides, regardless of the UI."))}m.isMDXComponent=!0}}]);