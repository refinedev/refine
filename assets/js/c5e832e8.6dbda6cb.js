"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[16172],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=m(t),c=o,h=p["".concat(l,".").concat(c)]||p[c]||u[c]||i;return t?r.createElement(h,a(a({ref:n},d),{},{components:t})):r.createElement(h,a({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var m=2;m<i;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},53515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>m,toc:()=>p});t(37953);var r=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={title:"Theming"},l=void 0,m={unversionedId:"ui-integrations/material-ui/theming/index",id:"ui-integrations/material-ui/theming/index",title:"Theming",description:"Theme specifies the color of the components, the darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc. You can either create your own Theme or use Themes that provide from Refine. Theme provides a way to your app's design to meet them.",source:"@site/docs/ui-integrations/material-ui/theming/index.md",sourceDirName:"ui-integrations/material-ui/theming",slug:"/ui-integrations/material-ui/theming/",permalink:"/docs/ui-integrations/material-ui/theming/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/material-ui/theming/index.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756449505,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{title:"Theming"},sidebar:"mainSidebar",previous:{title:"Storybook",permalink:"/docs/examples/storybook/material-ui-storybook"},next:{title:"Material UI v5 to v6",permalink:"/docs/ui-integrations/material-ui/migration-guide/material-ui-v5-to-v6"}},d={},p=[{value:"Predefined Themes",id:"predefined-themes",level:2},{value:"Theme Provider",id:"theme-provider",level:2},{value:"Passing the Theme to ThemeProvider",id:"passing-the-theme-to-themeprovider",level:2},{value:"Overriding Variables",id:"overriding-variables",level:2},{value:"Create Custom Theme",id:"create-custom-theme",level:2},{value:"Create Theme with Custom Variables",id:"create-theme-with-custom-variables",level:3},{value:"Dark Mode",id:"dark-mode",level:2},{value:"System Preference",id:"system-preference",level:3},{value:"Dark Mode Toggle",id:"dark-mode-toggle",level:3},{value:"Notification Snackbars compatible with Theme",id:"notification-snackbars-compatible-with-theme",level:2}],u=(c="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var c;const h={toc:p},g="wrapper";function f(e){var{components:n}=e,t=a(e,["components"]);return(0,r.yg)(g,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},h,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Theme specifies the color of the components, the darkness of the surfaces, level of shadow, appropriate opacity of ink elements, etc. You can either create your own Theme or use Themes that provide from Refine. Theme provides a way to your app's design to meet them."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/"},"Material UI documentation ","\u2192"))),(0,r.yg)("h2",{id:"predefined-themes"},"Predefined Themes"),(0,r.yg)(u,{id:"predefined-themes",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you don't want to use the default Mantine theme, ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/packages/mui/src/theme/palette/refinePalette.ts"},(0,r.yg)("inlineCode",{parentName:"a"},"RefineThemes"))," has predefined themes for you. You can import predefined themes from the ",(0,r.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"// light themes\nconst { Blue, Purple, Magenta, Red, Orange, Yellow } = RefineThemes;\n\n// dark themes\nconst { BlueDark, PurpleDark, MagentaDark, RedDark, OrangeDark, YellowDark } =\n  RefineThemes;\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport { ThemedLayout, RefineThemes } from "@refinedev/mui";\n\nimport { ThemeProvider } from "@mui/material/styles";\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={RefineThemes.Blue}>\n      <Refine\n      /* ... */\n      >\n        <ThemedLayout>{/* ... */}</ThemedLayout>\n      </Refine>\n    </ThemeProvider>\n  );\n};\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/examples/themes/refine-themes-mui/"},"You can see how themes change the look of the application in this example."))),(0,r.yg)("h2",{id:"theme-provider"},"Theme Provider"),(0,r.yg)(u,{id:"theme-provider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#theme-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"ThemeProvider"))," component is a simple wrapper around React's Context API that allows you to inject a Theme object into your application. By default, Material UI components come with a default Theme. In addition, you can also use the ThemeProvider component to inject a custom theme that you have created yourself. This is a feature that allows for great flexibility in how you design your application."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx',title:'"src/App.tsx'},'import { Refine } from "@refinedev/core";\nimport { ThemedLayout, ErrorComponent } from "@refinedev/mui";\n// highlight-next-line\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\n\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { PostsList, PostCreate, PostEdit } from "pages/posts";\n\nconst App: React.FC = () => {\n  return (\n    // highlight-next-line\n    <ThemeProvider theme={YOUR_THEME_OBJECT}>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n      // highlight-next-line\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n')),(0,r.yg)("p",null,"We recommend using ",(0,r.yg)("a",{parentName:"p",href:"/docs/getting-started/quickstart"},(0,r.yg)("inlineCode",{parentName:"a"},"create refine-app"))," to initialize your Refine projects. It configures the project according to your needs including SSR and Theme with Next.js.")),(0,r.yg)("h2",{id:"passing-the-theme-to-themeprovider"},"Passing the Theme to ThemeProvider"),(0,r.yg)(u,{id:"passing-the-theme-to-themeprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"In order to use the theme in your app, you just have one choice: pass it on!"),(0,r.yg)("p",null,"If you don't wrap your app with ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#theme-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"ThemeProvider"))," and theme, it looks like this when using the Material UI default:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly disableScroll",live:!0,previewOnly:!0,disableScroll:!0},'import { Refine } from "@refinedev/core";\nimport { ThemedLayout, ErrorComponent } from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { SampleList, SampleCreate, SampleEdit } from "pages/samples";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "samples",\n              list: "/samples",\n              create: "/samples/create",\n              edit: "/samples/edit/:id",\n            },\n          ]}\n        >\n          <Routes>\n            <Route index element={<NavigateToResource />} />\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="samples">\n                <Route index element={<SampleList />} />\n                <Route path="create" element={<SampleCreate />} />\n                <Route path="edit/:id" element={<SampleEdit />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n    </>\n  );\n};\n\nrender(<App />);\n')),(0,r.yg)("p",null,"In our example, we will be using ",(0,r.yg)("inlineCode",{parentName:"p"},"RefineThemes"),"."),(0,r.yg)("p",null,"The design will change to match the ",(0,r.yg)("inlineCode",{parentName:"p"},"RefineThemes.Blue"),", so you can enjoy these amazing interfaces without any hassle!"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'setInitialRoutes(["/samples"]);\n// visible-block-start\nimport { Refine } from "@refinedev/core";\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  // highlight-next-line\n  RefineThemes,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { SampleList, SampleCreate, SampleEdit } from "pages/samples";\n\nconst App: React.FC = () => {\n  return (\n    // highlight-next-line\n    <ThemeProvider theme={RefineThemes.Blue}>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "samples",\n              list: "/samples",\n              create: "/samples/create",\n              edit: "/samples/edit/:id",\n              show: "/samples/show/:id",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="samples">\n                <Route index element={<SampleList />} />\n                <Route path="create" element={<SampleCreate />} />\n                <Route path="edit/:id" element={<SampleEdit />} />\n                <Route path="show/:id" element={<SampleShow />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n'))),(0,r.yg)("h2",{id:"overriding-variables"},"Overriding Variables"),(0,r.yg)(u,{id:"overriding-variables",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The best way to customize your theme is by changing the configuration variables. These sections cover some of those most important options, like ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/palette/"},(0,r.yg)("inlineCode",{parentName:"a"},"palette"))," and ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/typography/"},(0,r.yg)("inlineCode",{parentName:"a"},"typography")),"!"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { RefineThemes } from "@refinedev/mui";\nimport { createTheme } from "@mui/material/styles";\n\nconst overriddenLightTheme = createTheme({\n  ...RefineThemes.Blue,\n  // highlight-start\n  palette: {\n    ...RefineThemes.Blue.palette,\n    primary: {\n      main: "#44d0c7",\n    },\n    secondary: {\n      main: "#2f82f1",\n    },\n  },\n  // highlight-end\n});\n')),(0,r.yg)("p",null,"Get a designer's opinion anyway - you'll be happy with the end result!"),(0,r.yg)("p",null,"When we easy-override our ",(0,r.yg)("inlineCode",{parentName:"p"},"RefineThemes"),", it's going to look like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly disableScroll",live:!0,previewOnly:!0,disableScroll:!0},'setInitialRoutes(["/samples"]);\n// visible-block-start\nimport { Refine } from "@refinedev/core";\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  // highlight-next-line\n  RefineThemes,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { SampleList } from "./pages/samples";\n\nconst overriddenLightTheme = {\n  ...RefineThemes.Blue,\n  // highlight-start\n  palette: {\n    ...RefineThemes.Blue.palette,\n    primary: {\n      main: "#44d0c7",\n    },\n    secondary: {\n      main: "#2f82f1",\n    },\n  },\n  // highlight-end\n};\n\nconst App: React.FC = () => {\n  return (\n    // highlight-next-line\n    <ThemeProvider theme={overriddenLightTheme}>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "samples",\n              list: "/samples",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="samples">\n                <Route index element={<SampleList />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,r.yg)("p",null,"You can also change the Default Font Family."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { RefineThemes } from "@refinedev/mui";\nimport { TypographyVariantsOptions, createTheme } from "@mui/material/styles";\n\nconst typography: TypographyVariantsOptions = {\n  fontFamily: [\n    "Montserrat",\n    "-apple-system",\n    "BlinkMacSystemFont",\n    \'"Segoe UI"\',\n    "Roboto",\n    \'"Helvetica Neue"\',\n    "Arial",\n    "sans-serif",\n    \'"Apple Color Emoji"\',\n    \'"Segoe UI Emoji"\',\n    \'"Segoe UI Symbol"\',\n  ].join(","),\n};\n\nconst overriddenLightTheme = createTheme({\n  ...RefineThemes.Blue,\n  typography: {\n    ...typographyOptions,\n  },\n});\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/"},"Material UI documentation for more information about Material UI Theme Configuration Variables. ","\u2192"))),(0,r.yg)("p",null,"If you are overriding the ",(0,r.yg)("inlineCode",{parentName:"p"},"fontFamily")," in typography, you can add the ",(0,r.yg)("inlineCode",{parentName:"p"},"<link>")," tags in your ",(0,r.yg)("inlineCode",{parentName:"p"},"index.html")," like the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    // highlight-start\n    <link\n      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap"\n      rel="stylesheet"\n    />\n    // highlight-end\n    <title>Refine adding font family example</title>\n  </head>\n\n  <body>\n    ...\n  </body>\n</html>\n'))),(0,r.yg)("h2",{id:"create-custom-theme"},"Create Custom Theme"),(0,r.yg)(u,{id:"create-custom-theme",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"With the help of Refine's themes, you can customize your site in a matter of minutes. Alternatively, there is also an option to create a custom theme with the ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#createtheme-options-args-theme"},(0,r.yg)("inlineCode",{parentName:"a"},"createTheme()"))," method so you can create a custom theme with the configuration variables and use it in the whole application."),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"responsiveFontSizes()")," helper to make Typography font sizes in your theme automated."),(0,r.yg)("p",null,"For more information, you can review ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/typography/#responsive-font-sizes"},(0,r.yg)("inlineCode",{parentName:"a"},"responsiveFontSizes()"))," in the mui document."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'setInitialRoutes(["/samples"]);\n// visible-block-start\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayout, ErrorComponent } from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\n// highlight-next-line\nimport { createTheme, responsiveFontSizes } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { SampleList } from "./pages/samples";\n\n// highlight-start\nlet customTheme = createTheme({\n  palette: {\n    primary: {\n      main: "#330f49",\n    },\n    secondary: {\n      main: "#45d0c8",\n    },\n  },\n});\n// highlight-end\n\n// highlight-start\ncustomTheme = responsiveFontSizes(customTheme);\n// highlight-end\n\nconst App: React.FC = () => {\n  return (\n    // highlight-next-line\n    <ThemeProvider theme={customTheme}>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "samples",\n              list: "/samples",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="samples">\n                <Route index element={<SampleList />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n'))),(0,r.yg)("h3",{id:"create-theme-with-custom-variables"},"Create Theme with Custom Variables"),(0,r.yg)(u,{id:"create-theme-with-custom-variables",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Creating a theme with default variables is easy and we can see it in the example above. You can also create your theme with custom variables, you can check it out our example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'const customTheme = createTheme({\n  customVariable: {\n    custom: "#330f49",\n  },\n});\n')),(0,r.yg)("p",null,"You need to use ",(0,r.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"},(0,r.yg)("inlineCode",{parentName:"a"},"module augmentation"))," for the theme to accept your custom values."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/theme.d.ts"',title:'"src/interfaces/theme.d.ts"'},'import "@refinedev/mui";\n\nexport interface CustomTheme {\n  customVariable: {\n    custom: string;\n  };\n}\n\ndeclare module "@mui/material/styles" {\n  interface Theme extends import("@mui/material/styles").Theme, CustomTheme {}\n  interface ThemeOptions\n    extends import("@mui/material/styles").ThemeOptions,\n      CustomTheme {}\n}\n')),(0,r.yg)("p",null,"You can see an example of how to ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/examples/finefoods-material-ui/src/theme.ts"},(0,r.yg)("inlineCode",{parentName:"a"},"create your own theme with custom variables"))," and its ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/examples/finefoods-material-ui/src/interfaces/theme.d.ts"},(0,r.yg)("inlineCode",{parentName:"a"},"interface"))," by accessing the links.")),(0,r.yg)("h2",{id:"dark-mode"},"Dark Mode"),(0,r.yg)(u,{id:"dark-mode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You might prefer to use dark mode in your applications. If you want to add dark mode to your application, you can easily use ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-use-media-query/"},(0,r.yg)("inlineCode",{parentName:"a"},"useMediaQuery"))," to set your color mode or dynamic toggle to switch your mode by using a context. This will help you maintain a consistent look and feel throughout your app.")),(0,r.yg)("h3",{id:"system-preference"},"System Preference"),(0,r.yg)(u,{id:"system-preference",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"With the ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-use-media-query/"},(0,r.yg)("inlineCode",{parentName:"a"},"useMediaQuery"))," hook, you can query a user's preference for light or dark mode and then adjust your site accordingly. This will make things easier on those who prefer darker colors as it simplifies their experience by eliminating any confusion about what browser they are using!\nFor example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { ThemedLayout, ErrorComponent, RefineThemes } from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles, ThemeProvider } from "@mui/material";\n// highlight-next-line\nimport { useMediaQuery } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport {\n  SampleList,\n  SampleCreate,\n  SampleEdit,\n  SampleShow,\n} from "pages/samples";\n\nconst App: React.FC = () => {\n  // highlight-next-line\n  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");\n\n  return (\n    // highlight-next-line\n    <ThemeProvider\n      theme={prefersDarkMode ? RefineThemes.BlueDark : RefineThemes.Blue}\n    >\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      <BrowserRouter>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "samples",\n              list: "/samples",\n              create: "/samples/create",\n              edit: "/samples/edit/:id",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="samples">\n                <Route index element={<SampleList />} />\n                <Route path="create" element={<SampleCreate />} />\n                <Route path="edit/:id" element={<SampleEdit />} />\n                <Route path="show/:id" element={<SampleShow />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n'))),(0,r.yg)("h3",{id:"dark-mode-toggle"},"Dark Mode Toggle"),(0,r.yg)(u,{id:"dark-mode-toggle",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Control the Dark Mode with just one click! We prepared an example that shows how you can manage to toggle Dark Mode with help of a context in your Header component, which is given as a prop to Refine."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Dark Mode Toggle Code Example"),(0,r.yg)("div",null,(0,r.yg)("details",null,(0,r.yg)("summary",null,"ColorModeContext"),(0,r.yg)("p",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/contexts/index.tsx"',title:'"src/contexts/index.tsx"'},'import React, {\n  PropsWithChildren,\n  createContext,\n  useEffect,\n  useState,\n} from "react";\nimport { ThemeProvider } from "@mui/material";\nimport { RefineThemes } from "@refinedev/mui";\n\ntype ColorModeContextType = {\n  mode: string;\n  setMode: () => void;\n};\n\nexport const ColorModeContext = createContext<ColorModeContextType>(\n  {} as ColorModeContextType,\n);\n\nexport const ColorModeContextProvider: React.FC<PropsWithChildren> = ({\n  children,\n}) => {\n  const colorModeFromLocalStorage = localStorage.getItem("colorMode");\n  const isSystemPreferenceDark = window?.matchMedia(\n    "(prefers-color-scheme: dark)",\n  ).matches;\n\n  const systemPreference = isSystemPreferenceDark ? "dark" : "light";\n  const [mode, setMode] = useState(\n    colorModeFromLocalStorage || systemPreference,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem("colorMode", mode);\n  }, [mode]);\n\n  const setColorMode = () => {\n    if (mode === "light") {\n      setMode("dark");\n    } else {\n      setMode("light");\n    }\n  };\n\n  return (\n    <ColorModeContext.Provider\n      value={{\n        setMode: setColorMode,\n        mode,\n      }}\n    >\n      <ThemeProvider\n        theme={mode === "light" ? RefineThemes.Blue : RefineThemes.BlueDark}\n      >\n        {children}\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};\n')))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"App.tsx"),(0,r.yg)("p",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineSnackbarProvider,\n  useNotificationProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, AppBar, IconButton, Box, Stack } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { LightModeOutlined, DarkModeOutlined } from "@mui/icons-material";\n\nimport {\n  SampleList,\n  SampleCreate,\n  SampleEdit,\n  SampleShow,\n} from "pages/samples";\n\nimport { ColorModeContextProvider, ColorModeContext } from "./contexts";\n\nconst Header = () => {\n  const { mode, setMode } = useContext(ColorModeContext);\n  return (\n    <AppBar color="default" position="sticky">\n      <Stack width="100%" direction="row" justifyContent="end">\n        <Box marginRight="20px">\n          <IconButton\n            onClick={() => {\n              setMode();\n            }}\n          >\n            {mode === "dark" ? <LightModeOutlined /> : <DarkModeOutlined />}\n          </IconButton>\n        </Box>\n      </Stack>\n    </AppBar>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <ColorModeContextProvider>\n      <CssBaseline />\n      <RefineSnackbarProvider>\n        <BrowserRouter>\n          <Refine\n            notificationProvider={useNotificationProvider}\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n              {\n                name: "samples",\n                list: "/samples",\n                create: "/samples/create",\n                edit: "/samples/edit/:id",\n              },\n            ]}\n          >\n            <Routes>\n              <Route\n                element={\n                  // highlight-next-line\n                  <ThemedLayout Header={Header}>\n                    <Outlet />\n                  </ThemedLayout>\n                }\n              >\n                <Route path="samples">\n                  <Route index element={<SampleList />} />\n                  <Route path="create" element={<SampleCreate />} />\n                  <Route path="edit/:id" element={<SampleEdit />} />\n                  <Route path="show/:id" element={<SampleShow />} />\n                </Route>\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </BrowserRouter>\n      </RefineSnackbarProvider>\n    </ColorModeContextProvider>\n  );\n};\n\nexport default App;\n')))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://codesandbox.io/embed/github/refinedev/refine/tree/main/examples/customization-theme-material-ui/?view=preview&theme=dark&codemirror=1"},"You can use this CodeSandbox link to access this example ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly previewHeight=450px disableScroll",live:!0,previewOnly:!0,previewHeight:"450px",disableScroll:!0},'setInitialRoutes(["/samples"]);\n// visible-block-start\nimport { Refine } from "@refinedev/core";\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineSnackbarProvider,\n  useNotificationProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, AppBar, IconButton, Box, Stack } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { LightModeOutlined, DarkModeOutlined } from "@mui/icons-material";\n\nimport {\n  SampleList,\n  SampleCreate,\n  SampleEdit,\n  SampleShow,\n} from "pages/samples";\n\nimport { ColorModeContextProvider, ColorModeContext } from "./contexts";\n\nconst Header = () => {\n  const { mode, setMode } = useContext(ColorModeContext);\n  return (\n    <AppBar position="sticky">\n      <Stack width="100%" direction="row" justifyContent="end">\n        <Box marginRight="20px" sx={{ display: "flex", alignItems: "center" }}>\n          <div style={{ fontSize: "12px" }}>click to toggle the theme \u2192</div>\n          <IconButton\n            onClick={() => {\n              setMode();\n            }}\n          >\n            {mode === "dark" ? <LightModeOutlined /> : <DarkModeOutlined />}\n          </IconButton>\n        </Box>\n      </Stack>\n    </AppBar>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <ColorModeContextProvider>\n      <CssBaseline />\n      <RefineSnackbarProvider>\n        <BrowserRouter>\n          <Refine\n            notificationProvider={useNotificationProvider}\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n              {\n                name: "samples",\n                list: "/samples",\n                create: "/samples/create",\n                edit: "/samples/edit/:id",\n              },\n            ]}\n          >\n            <Routes>\n              <Route\n                element={\n                  <ThemedLayout Header={Header}>\n                    <Outlet />\n                  </ThemedLayout>\n                }\n              >\n                <Route path="samples">\n                  <Route index element={<SampleList />} />\n                  <Route path="create" element={<SampleCreate />} />\n                  <Route path="edit/:id" element={<SampleEdit />} />\n                  <Route path="show/:id" element={<SampleShow />} />\n                </Route>\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </BrowserRouter>\n      </RefineSnackbarProvider>\n    </ColorModeContextProvider>\n  );\n};\n// visible-block-end\nrender(<App />);\n'))),(0,r.yg)("h2",{id:"notification-snackbars-compatible-with-theme"},"Notification Snackbars compatible with Theme"),(0,r.yg)(u,{id:"notification-snackbars-compatible-with-theme",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We use the ",(0,r.yg)("a",{parentName:"p",href:"https://iamhosseindhv.com/notistack"},(0,r.yg)("inlineCode",{parentName:"a"},"notistack"))," library for notifications in our Material UI package provides an elegant way to engage with your users.\nThe main motivation for us to use the Notistack was that while the Notistack provider ( ",(0,r.yg)("inlineCode",{parentName:"p"},"<SnackbarProvider>")," ) is a child of our ThemeProvider, it works in harmony with the theme."),(0,r.yg)("p",null,"We provide ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/packages/mui/src/providers/refineSnackbarProvider/index.tsx"},(0,r.yg)("inlineCode",{parentName:"a"},"<RefineSnackbarProvider>"))," that extended ",(0,r.yg)("inlineCode",{parentName:"p"},"<SnackbarProvider>")," with theme style. You have to wrap ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," with ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/packages/mui/src/providers/refineSnackbarProvider/index.tsx"},(0,r.yg)("inlineCode",{parentName:"a"},"<RefineSnackbarProvider>"))," and also pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"notificationProvider")," as props."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'setInitialRoutes(["/samples"]);\n// visible-block-start\nimport { Refine } from "@refinedev/core";\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  // highlight-start\n  RefineSnackbarProvider,\n  useNotificationProvider,\n  // highlight-end\n} from "@refinedev/mui";\nimport { ThemeProvider, CssBaseline, GlobalStyles } from "@mui/material";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport {\n  SampleList,\n  SampleCreate,\n  SampleEdit,\n  SampleShow,\n} from "pages/samples";\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={RefineThemes.Blue}>\n      <CssBaseline />\n      <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n      {/* highlight-next-line */}\n      <RefineSnackbarProvider>\n        <BrowserRouter>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "samples",\n                list: "/samples",\n                create: "/samples/create",\n                edit: "/samples/edit/:id",\n              },\n            ]}\n          >\n            <Routes>\n              <Route\n                element={\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                }\n              >\n                <Route path="samples">\n                  <Route index element={<SampleList />} />\n                  <Route path="create" element={<SampleCreate />} />\n                  <Route path="edit/:id" element={<SampleEdit />} />\n                </Route>\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </BrowserRouter>\n        {/* highlight-next-line */}\n      </RefineSnackbarProvider>\n    </ThemeProvider>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,r.yg)("p",null,"If you want to use ",(0,r.yg)("inlineCode",{parentName:"p"},"notistack")," snackbars with the default style, simply wrap ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"<SnackbarProvider>"),"."),(0,r.yg)("p",null,"If you want to customize the default layout elements provided with ",(0,r.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package, check out the ",(0,r.yg)("a",{parentName:"p",href:"/docs/advanced-tutorials/custom-layout"},"Custom ThemedLayout")," tutorial."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import React, {\n  PropsWithChildren,\n  createContext,\n  useEffect,\n  useState,\n} from "react";\nimport {\n  Create,\n  useDataGrid,\n  EditButton,\n  ShowButton,\n  DeleteButton,\n  List,\n  MarkdownField,\n  Show,\n  DateField,\n  NumberField,\n  TextFieldComponent,\n  Edit,\n  useAutocomplete,\n} from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\nimport { Typography, TextField, Autocomplete } from "@mui/material";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nimport { useMany, useShow, useOne } from "@refinedev/core";\n\ntype ColorModeContextType = {\n  mode: string;\n  setMode: () => void;\n};\n\nconst ColorModeContext = createContext<ColorModeContextType>(\n  {} as ColorModeContextType,\n);\n\nconst ColorModeContextProvider: React.FC<PropsWithChildren> = ({\n  children,\n}) => {\n  const colorModeFromLocalStorage = localStorage.getItem("colorMode");\n  const isSystemPreferenceDark = window?.matchMedia(\n    "(prefers-color-scheme: dark)",\n  ).matches;\n\n  const systemPreference = isSystemPreferenceDark ? "dark" : "light";\n  const [mode, setMode] = useState(\n    colorModeFromLocalStorage || systemPreference,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem("colorMode", mode);\n  }, [mode]);\n\n  const setColorMode = () => {\n    if (mode === "light") {\n      setMode("dark");\n    } else {\n      setMode("light");\n    }\n  };\n\n  return (\n    <ColorModeContext.Provider\n      value={{\n        setMode: setColorMode,\n        mode,\n      }}\n    >\n      <MuiMaterial.ThemeProvider\n        theme={\n          mode === "light"\n            ? RefineMui.RefineThemes.Blue\n            : RefineMui.RefineThemes.BlueDark\n        }\n      >\n        {children}\n      </MuiMaterial.ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};\n\nconst SampleList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const {\n    result: categoryData,\n    query: { isLoading: categoryIsLoading },\n  } = useMany({\n    resource: "categories",\n    ids: dataGridProps?.rows?.map((item: any) => item?.category?.id) ?? [],\n    queryOptions: {\n      enabled: !!dataGridProps?.rows,\n    },\n  });\n\n  const columns = React.useMemo<GridColDef<any>[]>(\n    () => [\n      {\n        field: "id",\n        headerName: "Id",\n        type: "number",\n        minWidth: 50,\n      },\n      {\n        field: "title",\n        headerName: "Title",\n        minWidth: 200,\n      },\n      {\n        field: "category",\n        headerName: "Category",\n        valueGetter: ({ row }) => {\n          const value = row?.category?.id;\n\n          return value;\n        },\n        minWidth: 300,\n        display: "flex",\n        renderCell: function render({ value }) {\n          return categoryIsLoading ? (\n            <>Loading...</>\n          ) : (\n            categoryData?.data?.find((item) => item.id === value)?.title\n          );\n        },\n      },\n      {\n        field: "createdAt",\n        headerName: "Created At",\n        minWidth: 250,\n        display: "flex",\n        renderCell: function render({ value }) {\n          return <DateField value={value} />;\n        },\n      },\n      {\n        field: "actions",\n        headerName: "Actions",\n        display: "flex",\n        renderCell: function render({ row }) {\n          return (\n            <>\n              <EditButton hideText recordItemId={row.id} />\n              <ShowButton hideText recordItemId={row.id} />\n            </>\n          );\n        },\n        align: "center",\n        headerAlign: "center",\n        minWidth: 80,\n      },\n    ],\n    [categoryData?.data],\n  );\n\n  return (\n    <List>\n      <DataGrid {...dataGridProps} columns={columns} />\n    </List>\n  );\n};\n\nconst SampleShow = () => {\n  const { result: record, query } = useShow();\n  const { isLoading } = query;\n\n  const {\n    result: category,\n    query: { isLoading: categoryIsLoading },\n  } = useOne({\n    resource: "categories",\n    id: record?.category?.id || "",\n    queryOptions: {\n      enabled: !!record,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <MuiMaterial.Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n          Id\n        </Typography>\n        <NumberField value={record?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n          Title\n        </Typography>\n        <TextFieldComponent value={record?.title} />\n        <Typography variant="body1" fontWeight="bold">\n          Content\n        </Typography>\n        <MarkdownField value={record?.content} />\n        <Typography variant="body1" fontWeight="bold">\n          Category\n        </Typography>\n        {categoryIsLoading ? <>Loading...</> : <>{category?.title}</>}\n        <Typography variant="body1" fontWeight="bold">\n          Created At\n        </Typography>\n        <DateField value={record?.createdAt} />\n      </MuiMaterial.Stack>\n    </Show>\n  );\n};\n\nconst SampleEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const samplesData = query?.data?.data;\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: "categories",\n    defaultValue: samplesData?.category?.id,\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <MuiMaterial.Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          {...register("id", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.id}\n          helperText={(errors as any)?.id?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="number"\n          label="Id"\n          name="id"\n          disabled\n        />\n        <TextField\n          {...register("title", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="text"\n          label="Title"\n          name="title"\n        />\n        <TextField\n          {...register("content", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.content}\n          helperText={(errors as any)?.content?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          multiline\n          label="Content"\n          name="content"\n        />\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ""\n                );\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </MuiMaterial.Box>\n    </Edit>\n  );\n};\n\nconst SampleCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { formLoading },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: "categories",\n  });\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <MuiMaterial.Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          {...register("title", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="text"\n          label="Title"\n          name="title"\n        />\n        <TextField\n          {...register("content", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.content}\n          helperText={(errors as any)?.content?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          multiline\n          label="Content"\n          name="content"\n        />\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ""\n                );\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </MuiMaterial.Box>\n    </Create>\n  );\n};\n'))))}f.isMDXComponent=!0}}]);