"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[31465],{58860:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>p});n(37953);var a=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={title:"Material UI button in React",description:"A complete guide on using Material UI button in a React app",slug:"mui-button-in-react",authors:"doro_onome",tags:["material-ui","react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/social.png",hide_table_of_contents:!1},u=void 0,s={permalink:"/blog/mui-button-in-react",source:"@site/blog/2024-12-10-mui-button.md",title:"Material UI button in React",description:"A complete guide on using Material UI button in a React app",date:"2024-12-10T00:00:00.000Z",formattedDate:"December 10, 2024",tags:[{label:"material-ui",permalink:"/blog/tags/material-ui"},{label:"react",permalink:"/blog/tags/react"}],readingTime:11.355,hasTruncateMarker:!1,authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],frontMatter:{title:"Material UI button in React",description:"A complete guide on using Material UI button in a React app",slug:"mui-button-in-react",authors:"doro_onome",tags:["material-ui","react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/social.png",hide_table_of_contents:!1},prevItem:{title:"How to use the useParams hook in React Router",permalink:"/blog/react-router-useparams"},nextItem:{title:"Next.js environment variables",permalink:"/blog/next-js-environment-variables"},relatedPosts:[{title:"Creating testable React applications with Playwright",description:"We'll take a look at how to create testable React applications with Playwright.",permalink:"/blog/playwright-react",formattedDate:"June 4, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:9.29,date:"2024-06-04T00:00:00.000Z"},{title:"How to use React Fragments?",description:"We'll cover what React Fragments are, differences between React Fragments and Div elements.",permalink:"/blog/how-react-fragments-is-works",formattedDate:"June 26, 2024",authors:[{name:"Clara Ekekenta",title:"Software Engineer",imageURL:"/img/generic-profile.png",key:"clara_ekekenta"}],readingTime:9.085,date:"2024-06-26T00:00:00.000Z"},{title:"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II",description:"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.",permalink:"/blog/refine-invoice-generator",formattedDate:"March 1, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:13.395,date:"2022-03-01T00:00:00.000Z"}],authorPosts:[{title:"How to use Material UI Modal",description:"We'll learn how to use Material UI Modal to create a popup window that can display important information or facilitate user input.",permalink:"/blog/material-ui-modal",formattedDate:"December 30, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:14.315,date:"2024-12-30T00:00:00.000Z"},{title:"How to use Material UI Tooltip",description:"We'll discover the Material UI Tooltip component with examples",permalink:"/blog/material-ui-tooltip-component",formattedDate:"November 29, 2022",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:8.54,date:"2022-11-29T00:00:00.000Z"},{title:"How to use Material UI Card Component",description:"We'll discover the Material UI Card component with examples",permalink:"/blog/material-ui-card",formattedDate:"December 26, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:13.84,date:"2024-12-26T00:00:00.000Z"}]},c={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"What is Material UI",id:"what-is-material-ui",level:2},{value:"Getting Started with the Material UI Button component",id:"getting-started-with-the-material-ui-button-component",level:2},{value:"Material UI Button Colors",id:"material-ui-button-colors",level:3},{value:"Material UI Button Sizes",id:"material-ui-button-sizes",level:3},{value:"How to use Material UI Button Component in your React project",id:"how-to-use-material-ui-button-component-in-your-react-project",level:2},{value:"Text Button",id:"text-button",level:3},{value:"Contained Button",id:"contained-button",level:3},{value:"Outlined Button",id:"outlined-button",level:3},{value:"IconButton",id:"iconbutton",level:3},{value:"Loading Button",id:"loading-button",level:3},{value:"Icon and Label Buttons",id:"icon-and-label-buttons",level:3},{value:"Performance Optimization for Material UI Buttons",id:"performance-optimization-for-material-ui-buttons",level:3},{value:"Import Only What You Need",id:"import-only-what-you-need",level:3},{value:"Use React.memo",id:"use-reactmemo",level:3},{value:"Lazy Loading",id:"lazy-loading",level:3},{value:"Creating a Calculator UI with light and dark mode using React Material UI Button Component",id:"creating-a-calculator-ui-with-light-and-dark-mode-using-react-material-ui-button-component",level:2},{value:"The Navbar Component",id:"the-navbar-component",level:3},{value:"Advance Material UI Buttons",id:"advance-material-ui-buttons",level:2},{value:"Accessibility (Making Buttons More User-Friendly)",id:"accessibility-making-buttons-more-user-friendly",level:3},{value:"Button Animations",id:"button-animations",level:3},{value:"The Main Component",id:"the-main-component",level:3},{value:"Conclusion",id:"conclusion",level:2}],m={toc:p},d="wrapper";function g(e){var{components:t}=e,n=r(e,["components"]);return(0,a.yg)(d,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on December 10, 2024, to include new sections on Accessibility, Button Animations, and Performance Optimization for Material UI Buttons.")),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"TL DR:"),(0,a.yg)("p",null,"Briefly, the Material Button is one of the keys in the Material UI user interface through which a React library will allow users or any end user to perform particular actions or make such decisions just with taps or clicks. The variants are available mainly in three forms:\n\u2022 Text Button: A low-emphasis button for actions like \u201cCancel.\u201d\n\u2022 Contained Button: A high-emphasis button with a filled background. It is used for the most important actions, such as those labeled \u201cSubmit.\u201d\n\u2022 Outlined Button: A medium-emphasis button with a border; this is often used for secondary actions."),(0,a.yg)("p",null,"Material-UI provides a customizable button with various color and size options, icons, and even loading indicators for asynchronous actions."),(0,a.yg)("p",null,"Material UI is a dynamic React library because it provides numerous component infrastructures for responsive web design. One such essential component is the ",(0,a.yg)("inlineCode",{parentName:"p"},"Button"),"."),(0,a.yg)("p",null,"In this article, we will deeply explore the Material UI ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," component, its variants, and the different ways it can be used in a React application."),(0,a.yg)("p",null,"Steps we'll cover:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#what-is-material-ui"},"What is Material UI")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#getting-started-with-the-material-ui-button-component"},"Getting Started with the Material UI Button component")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#how-to-use-material-ui-button-component-in-your-react-project"},"How to use Material UI Button Component in your React project")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#creating-a-calculator-ui-with-light-and-dark-mode-using-react-material-ui-button-component"},"Creating a Calculator UI with light and dark mode using React Material UI Button Component"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#the-navbar-component"},"The Navbar Component")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#advance-material-ui-buttons"},"Advance Material UI Buttons"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#accessibility-making-buttons-more-user-friendly"},"Accessibility (Making Buttons More User-Friendly)")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#button-animations"},"Button Animations")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#the-main-component"},"The Main Component"))))),(0,a.yg)("h2",{id:"what-is-material-ui"},"What is Material UI"),(0,a.yg)("p",null,"Material UI is a React component library that is open source and based on Google's Material Design. It includes a comprehensive set of UI tools to assist developers in building and maintaining React applications, as well as effectively importing components into various parts of their projects. More developers have incorporated Material UI into their projects over the years because it makes the web design process much easier and faster."),(0,a.yg)("p",null,"The categories of components that Material UI can provide you include Layout components, Navigation components, Input components, and Data Display components. The ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," is enlisted among the ",(0,a.yg)("inlineCode",{parentName:"p"},"Input")," components."),(0,a.yg)("p",null,"Install the Material UI library into your project as part of your ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json")," dependencies with the following command:"),(0,a.yg)("p",null,"Use npm\n",(0,a.yg)("inlineCode",{parentName:"p"},"npm install @mui/material @emotion/react @emotion/styled")),(0,a.yg)("p",null,"Use yarn\n",(0,a.yg)("inlineCode",{parentName:"p"},"npm install @mui/material @emotion/react @emotion/styled")),(0,a.yg)("h2",{id:"getting-started-with-the-material-ui-button-component"},"Getting Started with the Material UI Button component"),(0,a.yg)("p",null,"The Material UI ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," component provides developers with the tools that are needed to allow users perform actions and make decisions with a single tap/click. Buttons represent actions that users can take.\nThey are typically placed throughout your user interface in forms, navigation bars, cards, modal popups e.t.c."),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"Material UI Button")," component typically comes in three variants:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Text Button(The default variant)"),(0,a.yg)("li",{parentName:"ul"},"Contained Button"),(0,a.yg)("li",{parentName:"ul"},"Outlined Button")),(0,a.yg)("p",null,"Here\u2019s an illustration of how you can apply these Material UI Button variants in your React application:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Stack from "@mui/material/Stack";\nimport Button from "@mui/material/Button";\n\nconst BasicButtons = () => {\n  return (\n    <div>\n      <Stack spacing={2} direction="row">\n        <Button variant="text">Text</Button>\n        <Button variant="contained">Contained</Button>\n        <Button variant="outlined">Outlined</Button>\n      </Stack>\n    </div>\n  );\n};\n\nexport default BasicButtons;\n')),(0,a.yg)("p",null,"Here\u2019s what they look like:"),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/button1.png",alt:"button1"}),(0,a.yg)("h3",{id:"material-ui-button-colors"},"Material UI Button Colors"),(0,a.yg)("p",null,"You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"color")," prop to apply a color to Material UI buttons from the theme palette."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Button color="secondary">Secondary color theme</Button>\n<Button variant="contained" color="success">\n    Success color theme\n</Button>\n<Button variant="outlined" color="error">\n    Error color theme\n</Button>\n')),(0,a.yg)("h3",{id:"material-ui-button-sizes"},"Material UI Button Sizes"),(0,a.yg)("p",null,"You can customize the size of Material UI buttons with the ",(0,a.yg)("inlineCode",{parentName:"p"},"size")," prop:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Box from "@mui/material/Box";\nimport Button from "@mui/material/Button";\n\nconst ButtonSizes = () => {\n  return (\n    <Box sx={{ "& button": { m: 1 } }}>\n      <div>\n        <Button size="small">Small Text Button</Button>\n        <Button size="medium">Medium Text Button</Button>\n        <Button size="large">Large Text Button</Button>\n      </div>\n      <div>\n        <Button variant="outlined" size="small">\n          Small Outlined Button\n        </Button>\n        <Button variant="outlined" size="medium">\n          Medium Outlined Button\n        </Button>\n        <Button variant="outlined" size="large">\n          Large Outlined Button\n        </Button>\n      </div>\n      <div>\n        <Button variant="contained" size="small">\n          Small Contained Button\n        </Button>\n        <Button variant="contained" size="medium">\n          Medium Contained Button\n        </Button>\n        <Button variant="contained" size="large">\n          Large Contained Button\n        </Button>\n      </div>\n    </Box>\n  );\n};\n\nexport default ButtonSizes;\n')),(0,a.yg)("p",null,"Here\u2019s the result:"),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/buttonSize.png",alt:"buttonSize"}),(0,a.yg)("h2",{id:"how-to-use-material-ui-button-component-in-your-react-project"},"How to use Material UI Button Component in your React project"),(0,a.yg)("h3",{id:"text-button"},"Text Button"),(0,a.yg)("p",null,"Text buttons are typically used for less visible actions, such as those found in dialogs and cards. Text buttons in cards help to keep the focus on the card content."),(0,a.yg)("p",null,"Here\u2019s a simple illustration of the Material UI Text Button"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Button>Primary</Button>\n<Button disabled>Disabled Text</Button>\n<Button href="#text-buttons">Link Button</Button>\n')),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/textButton.png",alt:"textButton"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"This is the default state for the ",(0,a.yg)("strong",{parentName:"p"},"Material UI Button")," component so you do not necessarily have to define this particular variant prop when calling the ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," component."),(0,a.yg)("h3",{id:"contained-button"},"Contained Button"),(0,a.yg)("p",null,"Contained Buttons are high-emphasis buttons that can be identified by their elevation and fill. They indicate the primary actions of your apps. To use a contained button, you need to set the variant ",(0,a.yg)("inlineCode",{parentName:"p"},"contained")," when calling the Material UI ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," component."),(0,a.yg)("p",null,"Here\u2019s an example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Button variant="contained">Contained Button</Button>\n<Button variant="contained" disabled>\n    Disabled Contained Button\n</Button>\n<Button variant="contained" href="#contained-buttons">\n    Link Contained Button\n</Button>\n')),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/containedButton.png",alt:"containedButton"}),(0,a.yg)("h3",{id:"outlined-button"},"Outlined Button"),(0,a.yg)("p",null,"Outlined buttons are medium-emphasis buttons that contain actions that are crucial but not the primary action in your app. Additionally, outlined buttons can be used as a higher emphasis alternative to text buttons or a lower emphasis alternative to contained buttons."),(0,a.yg)("p",null,"You can use Outlined ",(0,a.yg)("strong",{parentName:"p"},"Material UI button")," by specifying the ",(0,a.yg)("inlineCode",{parentName:"p"},"outlined")," prop when calling the ",(0,a.yg)("inlineCode",{parentName:"p"},"Button")," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Button variant="outlined">Primary Outlined Button</Button>\n<Button variant="outlined" disabled>\n    Disabled Outlined Button\n</Button>\n<Button variant="outlined" href="#outlined-buttons">\n    Link Outlined Button\n</Button>\n')),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/outlinedButton.png",alt:"outlinedButton"}),(0,a.yg)("h3",{id:"iconbutton"},"IconButton"),(0,a.yg)("p",null,"An Icon button is a button represented by an icon set to perform a particular action. Icon buttons are typically found in app bars and toolbars. Icons are also appropriate for toggle buttons that allow for the selection or deselection of a single option, such as adding or removing a star from an item."),(0,a.yg)("p",null,"To include an icon button in your React app, import and use the ",(0,a.yg)("inlineCode",{parentName:"p"},"IconButton")," component. Then you can use whatever icon you want from Material UI."),(0,a.yg)("p",null,"Here\u2019s a simple illustration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport IconButton from "@mui/material/IconButton";\nimport Stack from "@mui/material/Stack";\nimport CameraIcon from "@mui/icons-material/Camera";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport CancelIcon from "@mui/icons-material/Cancel";\nimport AttachEmailIcon from "@mui/icons-material/AttachEmail";\n\nconst IconButtons = () => {\n  return (\n    <Stack direction="row" spacing={1}>\n      <IconButton aria-label="camera">\n        <CameraIcon />\n      </IconButton>\n      <IconButton aria-label="delete" disabled color="primary">\n        <DeleteIcon />\n      </IconButton>\n      <IconButton color="secondary" aria-label="cancel">\n        <CancelIcon />\n      </IconButton>\n      <IconButton color="primary" aria-label="attach email">\n        <AttachEmailIcon />\n      </IconButton>\n    </Stack>\n  );\n};\n\nexport default IconButtons;\n')),(0,a.yg)("p",null,"Here\u2019s the result:"),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/IconButton.png",alt:"IconButton"}),(0,a.yg)("h3",{id:"loading-button"},"Loading Button"),(0,a.yg)("p",null,"Loading buttons are buttons that can display the loading status of actions in your React apps and disable interactions. To use the ",(0,a.yg)("inlineCode",{parentName:"p"},"LoadingButton")," component, you have to first install the Material UI ",(0,a.yg)("inlineCode",{parentName:"p"},"lab")," dependency with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm i @mui/lab\n")),(0,a.yg)("p",null,"Now, you can import the ",(0,a.yg)("inlineCode",{parentName:"p"},"LoadingButton")," component from the Material UI ",(0,a.yg)("inlineCode",{parentName:"p"},"lab")," dependency and use it in whatever manner you please. You can customize your ",(0,a.yg)("inlineCode",{parentName:"p"},"LoadingButton")," components by adding a ",(0,a.yg)("inlineCode",{parentName:"p"},"loading")," prop which shows that the button is loading in your app\u2019s UI. You can also set a ",(0,a.yg)("inlineCode",{parentName:"p"},"loadingIndicator")," prop as well."),(0,a.yg)("p",null,"Here\u2019s a simple illustration of how to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"LoadingButton")," component in your React app:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport LoadingButton from "@mui/lab/LoadingButton";\nimport SaveIcon from "@mui/icons-material/Save";\nimport Stack from "@mui/material/Stack";\n\nconst LoadingButtons = () => {\n  return (\n    <Stack direction="row" spacing={2}>\n      <LoadingButton loading variant="outlined">\n        Submit\n      </LoadingButton>\n      <LoadingButton loading loadingIndicator="Loading\u2026" variant="outlined">\n        Fetch data\n      </LoadingButton>\n      <LoadingButton\n        loading\n        loadingPosition="start"\n        startIcon={<SaveIcon />}\n        variant="outlined"\n      >\n        Save\n      </LoadingButton>\n    </Stack>\n  );\n};\n\nexport default LoadingButtons;\n')),(0,a.yg)("p",null,"Here\u2019s the result:"),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/loadingButton.gif",alt:"loadingButton"}),(0,a.yg)("h3",{id:"icon-and-label-buttons"},"Icon and Label Buttons"),(0,a.yg)("p",null,"Since we are more likely to recognize logos than plain text, you might occasionally want to add icons to certain buttons to improve the user experience of the application. When the ",(0,a.yg)("inlineCode",{parentName:"p"},"icon")," component is assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"startIcon")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"endIcon")," props, the icon is aligned to the label's left or right."),(0,a.yg)("p",null,"Here\u2019s a simple illustration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Button from "@mui/material/Button";\nimport AddIcon from "@mui/icons-material/Add";\nimport DeleteIcon from "@mui/icons-material/Delete";\nimport Stack from "@mui/material/Stack";\n\nconst IconLabelButtons = () => {\n  return (\n    <Stack direction="row" spacing={2}>\n      <Button variant="outlined" startIcon={<AddIcon />}>\n        Add\n      </Button>\n      <Button variant="contained" endIcon={<DeleteIcon />}>\n        Remove\n      </Button>\n    </Stack>\n  );\n};\nexport default IconLabelButtons;\n')),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/labelButton.png",alt:"labelButton"}),(0,a.yg)("h3",{id:"performance-optimization-for-material-ui-buttons"},"Performance Optimization for Material UI Buttons"),(0,a.yg)("p",null,"Performance optimization is essential for larger applications to ensure smooth and responsive user experiences. Material UI provides several strategies to reduce app load and improve speed."),(0,a.yg)("h3",{id:"import-only-what-you-need"},"Import Only What You Need"),(0,a.yg)("p",null,"Instead of importing the entire Material UI library, import only the specific components you use. This minimizes the bundle size."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'// Import only the Button component\nimport Button from "@mui/material/Button";\n')),(0,a.yg)("h3",{id:"use-reactmemo"},"Use React.memo"),(0,a.yg)("p",null,"Prevent unnecessary re-renders by wrapping your button components with React.memo. This ensures that the button re-renders only when its props change."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import React from "react";\n\nconst MyButton = React.memo(({ onClick, label }) => {\n  return <Button onClick={onClick}>{label}</Button>;\n});\n\nexport default MyButton;\n')),(0,a.yg)("h3",{id:"lazy-loading"},"Lazy Loading"),(0,a.yg)("p",null,"For larger applications, load components only when they are needed using React\u2019s lazy feature. This helps reduce the initial load time."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import React, { Suspense } from "react";\n\nconst LazyButton = React.lazy(() => import("@mui/material/Button"));\n\nconst App = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <LazyButton>Click Me</LazyButton>\n  </Suspense>\n);\n')),(0,a.yg)("p",null,"Benefits:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Reduced Bundle Size: Importing only required components lowers the size of your application."),(0,a.yg)("li",{parentName:"ul"},"Improved Rendering Efficiency: Using React.memo prevents unnecessary updates, keeping the UI responsive."),(0,a.yg)("li",{parentName:"ul"},"Faster Load Times: Lazy loading ensures that components are loaded on-demand, optimizing resource usage.")),(0,a.yg)("h2",{id:"creating-a-calculator-ui-with-light-and-dark-mode-using-react-material-ui-button-component"},"Creating a Calculator UI with light and dark mode using React Material UI Button Component"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Material UI Buttons")," can be used for a variety of purposes in your React application. You can use them to take actions, switch directories and execute specific commands in your app. We can showcase some of their uses and function in a Calculator UI with light and dark mode toggling features."),(0,a.yg)("p",null,"The app will have two components:\nThe Navbar component\nThe Main component"),(0,a.yg)("h3",{id:"the-navbar-component"},"The Navbar Component"),(0,a.yg)("p",null,"This component simply holds the light and dark mode toggler. To achieve this, we will make use of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ToggleOn")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ToggleOff")," icon buttons."),(0,a.yg)("p",null,"Here\u2019s the code for the Navbar component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport IconButton from "@mui/material/IconButton";\nimport ToggleOnIcon from "@mui/icons-material/ToggleOn";\nimport ToggleOffIcon from "@mui/icons-material/ToggleOff";\n\nconst Navbar = () => {\n  return (\n    <>\n      <nav>\n        <p>Light</p>\n        <div>\n          {darkMode ? (\n            <IconButton>\n              <ToggleOnIcon\n                sx={{ fontSize: 50 }}\n                onClick={handleToggle}\n                className={darkMode ? "toggle-light" : "toggle-dark"}\n              />\n            </IconButton>\n          ) : (\n            <IconButton>\n              <ToggleOffIcon\n                sx={{ fontSize: 50 }}\n                onClick={handleToggle}\n                className={darkMode ? "toggle-light" : "toggle-dark"}\n              />\n            </IconButton>\n          )}\n        </div>\n        <p>Dark</p>\n      </nav>\n    </>\n  );\n};\n\nexport default Navbar;\n')),(0,a.yg)("p",null,"The code above showcases the use of Material UI toggle buttons to create an adequate light and dark mode toggle theme."),(0,a.yg)("p",null,"Here\u2019s the result:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/navbar.gif",alt:"navbar"}),(0,a.yg)("h2",{id:"advance-material-ui-buttons"},"Advance Material UI Buttons"),(0,a.yg)("h3",{id:"accessibility-making-buttons-more-user-friendly"},"Accessibility (Making Buttons More User-Friendly)"),(0,a.yg)("p",null,"Accessibility is key to creating inclusive and user-friendly applications. Material UI buttons can be made more accessible by using props such as ",(0,a.yg)("inlineCode",{parentName:"p"},"aria-label"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"aria-hidden"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"role"),". These attributes make sure proper functionality for screen readers and keyboard navigation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'<Button aria-label="Save File">Save</Button>\n<Button aria-hidden="true">Hidden Button</Button>\n')),(0,a.yg)("p",null,"Adding these small details makes your application usable for everyone, including users with disabilities."),(0,a.yg)("h3",{id:"button-animations"},"Button Animations"),(0,a.yg)("p",null,"Animations can enhance the interactivity of buttons and improve the overall user experience. Material UI allows you to easily implement animations for hover, focus, or click effects."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'<Button\n  variant="contained"\n  sx={{\n    "&:hover": {\n      transform: "scale(1.1)",\n      transition: "all 0.2s ease-in-out",\n    },\n  }}\n>\n  Hover Me\n</Button>\n')),(0,a.yg)("p",null,"This example adds a smooth zoom effect when the button is hovered over. For more advanced animations, you can use Material UI\u2019s built-in Fade or Grow components."),(0,a.yg)("p",null,"Example with Fade:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"<Fade in={true}>\n  <Button>Animated Button</Button>\n</Fade>\n")),(0,a.yg)("p",null,"These features make your buttons more engaging and visually appealing."),(0,a.yg)("h3",{id:"the-main-component"},"The Main Component"),(0,a.yg)("p",null,"This component houses the Calculator\u2019s grid system with all its buttons imported from Material UI."),(0,a.yg)("p",null,"Here\u2019s the code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport Button from "@mui/material/Button";\n\nconst Main = () => {\n  const buttonTexts = [\n    "DEL",\n    "\xf7",\n    1,\n    2,\n    3,\n    "*",\n    4,\n    5,\n    6,\n    "+",\n    7,\n    8,\n    9,\n    "-",\n    ".",\n    0,\n  ];\n\n  return (\n    <main>\n      <div class="calculator-grid">\n        <div class="output">\n          <div data-previous-operand class="previous-operand"></div>\n          <div data-current-operand class="current-operand"></div>\n        </div>\n        <Button class="span-two" variant="contained">\n          AC\n        </Button>\n        {buttonTexts.map((buttonText) => (\n          <Button variant="contained">{buttonText}</Button>\n        ))}\n        <Button variant="contained" class="span-two">\n          =\n        </Button>\n      </div>\n    </main>\n  );\n};\n\nexport default Main;\n')),(0,a.yg)("p",null,"Here\u2019s the result:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/mainComponent.png",alt:"mainComponent"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"You can toggle light and dark mode in the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.js")," like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import "./App.css";\nimport React, { useState } from "react";\nimport Navbar from "./Components/Navbar";\nimport Main from "./Components/Main";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState("false");\n\n  const handleToggle = () => {\n    setDarkMode((prevDarkMode) => !prevDarkMode);\n  };\n\n  return (\n    <div className={darkMode ? "dark" : "App"}>\n      <Navbar handleToggle={handleToggle} darkMode={darkMode} />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"Here\u2019s what our final app looks like:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-05-mui-button/final.gif",alt:"final"}),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"This article covered ",(0,a.yg)("strong",{parentName:"p"},"Material UI Buttons")," and their applications in different areas of a React application. We also explored a possible use case in a calculator user interface with light and dark mode themes. You can access the source code on my ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Nomzy-kush/Calculator-UI-with-Light-and-Dark-mode-React-MUI"},"GitHub Repo"),".\nYou can also see the deployed application ",(0,a.yg)("a",{parentName:"p",href:"https://calculator-ui-with-light-and-dark-mode-react-mui.vercel.app/"},"here"),"."))}g.isMDXComponent=!0}}]);