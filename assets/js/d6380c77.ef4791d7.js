"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[44033],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var o=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,y=d["".concat(l,".").concat(g)]||d[g]||u[g]||r;return n?o.createElement(y,a(a({ref:t},p),{},{components:n})):o.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},69612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>d});n(37953);var o=n(58860);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={title:"Notification Provider",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/notification/use-notification-provider.tsx"},l="Notification Provider",c={unversionedId:"ui-integrations/shadcn/components/notification-provider/index",id:"ui-integrations/shadcn/components/notification-provider/index",title:"Notification Provider",description:"Admin dashboards need to show feedback when users perform actions - whether it's successfully saving data, handling errors, or allowing users to undo operations. The notification provider gives you a complete toast notification system that integrates seamlessly with Refine's data operations.",source:"@site/docs/ui-integrations/shadcn/components/notification-provider/index.md",sourceDirName:"ui-integrations/shadcn/components/notification-provider",slug:"/ui-integrations/shadcn/components/notification-provider/",permalink:"/docs/ui-integrations/shadcn/components/notification-provider/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/shadcn/components/notification-provider/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1758111044,formattedLastUpdatedAt:"Sep 17, 2025",frontMatter:{title:"Notification Provider",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/notification/use-notification-provider.tsx"},sidebar:"mainSidebar",previous:{title:"<AutoSaveIndicator />",permalink:"/docs/ui-integrations/shadcn/components/auto-save-indicator/"},next:{title:"Introduction",permalink:"/docs/ui-integrations/ant-design/introduction/"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Manual Notifications",id:"manual-notifications",level:2},{value:"Undoable Actions",id:"undoable-actions",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"useNotificationProvider",id:"usenotificationprovider",level:3},{value:"Toaster",id:"toaster",level:3},{value:"Notification Options",id:"notification-options",level:3}],u=(g="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",e)});var g;const y={toc:d},m="wrapper";function f(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(m,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){i(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"notification-provider"},"Notification Provider"),(0,o.yg)("p",null,"Admin dashboards need to show feedback when users perform actions - whether it's successfully saving data, handling errors, or allowing users to undo operations. The notification provider gives you a complete toast notification system that integrates seamlessly with Refine's data operations."),(0,o.yg)("p",null,"Built on ",(0,o.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/sonner"},"Sonner"),", it automatically handles notifications for CRUD operations and supports undoable actions where users can reverse operations like deletions."),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)(u,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Add the notification system to your project:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest add https://ui.refine.dev/r/notification-provider.json\n")),(0,o.yg)("p",null,"This installs the notification provider with the ",(0,o.yg)("inlineCode",{parentName:"p"},"sonner")," toast library.")),(0,o.yg)("h2",{id:"setup"},"Setup"),(0,o.yg)(u,{id:"setup",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Configure the notification provider in your app root:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport { useNotificationProvider } from "@/components/refine-ui/notification/use-notification-provider";\nimport { Toaster } from "@/components/refine-ui/notification/toaster";\n\nfunction App() {\n  return (\n    <>\n      <Refine\n        notificationProvider={useNotificationProvider}\n        // ... other props\n      >\n        {/* Your app content */}\n      </Refine>\n      <Toaster />\n    </>\n  );\n}\n')),(0,o.yg)("p",null,"That's it! Refine will now automatically show notifications when users create, update, or delete data. You'll see success messages when operations complete and error messages when something goes wrong.")),(0,o.yg)("h2",{id:"manual-notifications"},"Manual Notifications"),(0,o.yg)(u,{id:"manual-notifications",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can also trigger notifications manually in your components:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useNotification } from "@refinedev/core";\n\nexport function MyComponent() {\n  const { open } = useNotification();\n\n  const handleCustomAction = () => {\n    // Show success notification\n    open?.({\n      type: "success",\n      message: "Profile updated",\n      description: "Your profile changes have been saved successfully",\n    });\n  };\n\n  const handleError = () => {\n    // Show error notification\n    open?.({\n      type: "error",\n      message: "Upload failed",\n      description: "The file could not be uploaded. Please try again.",\n    });\n  };\n\n  return (\n    <div>\n      <button onClick={handleCustomAction}>Update Profile</button>\n      <button onClick={handleError}>Simulate Error</button>\n    </div>\n  );\n}\n'))),(0,o.yg)("h2",{id:"undoable-actions"},"Undoable Actions"),(0,o.yg)(u,{id:"undoable-actions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"For destructive actions like deletions, you can show notifications that allow users to undo the operation:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const handleDelete = (id: string) => {\n  open?.({\n    type: "progress",\n    message: "Post deleted",\n    description: "The post has been moved to trash",\n    undoableTimeout: 5, // Show undo button for 5 seconds\n    cancelMutation: () => {\n      // This runs if user clicks undo\n      console.log("Restoring post...");\n    },\n  });\n};\n')),(0,o.yg)("p",null,"This is particularly useful for delete operations where you want to give users a chance to recover their data.")),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"usenotificationprovider"},"useNotificationProvider"),(0,o.yg)(u,{id:"usenotificationprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Returns notification functions for the Refine context.")),(0,o.yg)("h3",{id:"toaster"},"Toaster"),(0,o.yg)(u,{id:"toaster",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The toast container component that displays notifications."),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Prop"),(0,o.yg)("th",{parentName:"tr",align:null},"Type"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"position")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"ToasterPosition")),(0,o.yg)("td",{parentName:"tr",align:null},'Position of toasts on screen (default: "top-right")')),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"theme")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},'"light" \\| "dark" \\| "system"')),(0,o.yg)("td",{parentName:"tr",align:null},"Theme for toast styling"))))),(0,o.yg)("h3",{id:"notification-options"},"Notification Options"),(0,o.yg)(u,{id:"notification-options",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Prop"),(0,o.yg)("th",{parentName:"tr",align:null},"Type"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"type")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},'"success" \\| "error" \\| "progress"')),(0,o.yg)("td",{parentName:"tr",align:null},"Type of notification")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"message")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"string")),(0,o.yg)("td",{parentName:"tr",align:null},"Main notification message")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"description")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"string")),(0,o.yg)("td",{parentName:"tr",align:null},"Additional details")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"undoableTimeout")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"number")),(0,o.yg)("td",{parentName:"tr",align:null},"Seconds to show undo button (progress type only)")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"cancelMutation")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"() => void")),(0,o.yg)("td",{parentName:"tr",align:null},"Function to call when undo is clicked"))))))}f.isMDXComponent=!0}}]);