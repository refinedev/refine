"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[65420],{58860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>c});var r=t(37953);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,c=d["".concat(l,".").concat(g)]||d[g]||m[g]||o;return t?r.createElement(c,i(i({ref:n},u),{},{components:t})):r.createElement(c,i({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},25232:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>N,frontMatter:()=>s,metadata:()=>p,toc:()=>d});t(37953);var r=t(58860);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={title:"useStepsForm"},l=void 0,p={unversionedId:"ui-integrations/ant-design/hooks/use-steps-form/index",id:"version-4.xx.xx/ui-integrations/ant-design/hooks/use-steps-form/index",title:"useStepsForm",description:"The useStepsForm hook allows you to split your form under an Ant Design based Steps component and provides you with a few useful functionalities that will help you manage your form.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/hooks/use-steps-form/index.md",sourceDirName:"ui-integrations/ant-design/hooks/use-steps-form",slug:"/ui-integrations/ant-design/hooks/use-steps-form/",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-steps-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/hooks/use-steps-form/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useStepsForm"},sidebar:"mainSidebar",previous:{title:"useModalForm",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-modal-form/"},next:{title:"useSelect",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-select/"}},u={},d=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"defaultCurrent",id:"defaultcurrent",level:3},{value:"total",id:"total",level:3},{value:"isBackValidate",id:"isbackvalidate",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"onFinish",id:"onfinish",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"defaultFormValues",id:"defaultformvalues",level:3},{value:"Return Values",id:"return-values",level:2},{value:"stepsProps",id:"stepsprops",level:3},{value:"current",id:"current",level:4},{value:"onChange",id:"onchange",level:4},{value:"current",id:"current-1",level:3},{value:"gotoStep",id:"gotostep",level:3},{value:"submit",id:"submit",level:3},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"defaultFormValuesLoading",id:"defaultformvaluesloading",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},g=m("DocThumbsUpDownFeedbackWidget"),c=m("Tabs"),y=m("TabItem"),f=m("PropsTable"),h=m("CodeSandboxExample"),b={toc:d},v="wrapper";function N(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(v,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){a(e,n,t[n])}))}return e}({},b,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { useMany } from "@refinedev/core";\n\nimport {\n  Create as AntdCreate,\n  Edit as AntdEdit,\n  EditButton,\n  List,\n  SaveButton as AntdSaveButton,\n  TextField,\n  useSelect as useSelectAntd,\n  useStepsForm as useStepsFormAntd,\n  useTable,\n} from "@refinedev/antd";\nimport {\n  Button as AntdButton,\n  Form as AntdForm,\n  Input as AntdInput,\n  Select as AntdSelect,\n  Space,\n  Steps as AntdSteps,\n  Table,\n} from "antd";\n\nconst PostList = () => {\n  const { tableProps } = useTable<IPost>();\n\n  const categoryIds =\n    tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          dataIndex={["category", "id"]}\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return (\n              <TextField\n                value={data?.data.find((item) => item.id === value)?.title}\n              />\n            );\n          }}\n        />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n\nconst PostEdit = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsFormAntd();\n\n  const { selectProps: categorySelectProps } = useSelectAntd({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <AntdForm.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect {...categorySelectProps} />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </AntdForm.Item>\n    </>,\n    <>\n      <AntdForm.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput.TextArea />\n      </AntdForm.Item>\n    </>,\n  ];\n\n  return (\n    <AntdEdit\n      footerButtons={\n        <>\n          {current > 0 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </AntdButton>\n          )}\n          {current < formList.length - 1 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </AntdButton>\n          )}\n          {current === formList.length - 1 && (\n            <AntdSaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <AntdSteps {...stepsProps}>\n        <AntdSteps.Step title="About Post" />\n        <AntdSteps.Step title="Content" />\n      </AntdSteps>\n\n      <AntdForm {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </AntdForm>\n    </AntdEdit>\n  );\n};\n\nconst PostCreate = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsFormAntd();\n\n  const { selectProps: categorySelectProps } = useSelectAntd({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <AntdForm.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect {...categorySelectProps} />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </AntdForm.Item>\n    </>,\n    <>\n      <AntdForm.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput.TextArea />\n      </AntdForm.Item>\n    </>,\n  ];\n\n  return (\n    <AntdCreate\n      footerButtons={\n        <>\n          {current > 0 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </AntdButton>\n          )}\n          {current < formList.length - 1 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </AntdButton>\n          )}\n          {current === formList.length - 1 && (\n            <AntdSaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <AntdSteps {...stepsProps}>\n        <AntdSteps.Step title="About Post" />\n        <AntdSteps.Step title="Content" />\n      </AntdSteps>\n\n      <AntdForm {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </AntdForm>\n    </AntdCreate>\n  );\n};\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook allows you to split your form under an Ant Design based ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/steps/"},"Steps")," component and provides you with a few useful functionalities that will help you manage your form."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook is extended from ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," under the hood. This means that you can use all the functionalities of ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," in your ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),"."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(g,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We will show two examples, one for creating a post and one for editing it. Let's see how ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,r.yg)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,r.yg)(y,{value:"create",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\nimport React from "react";\n\nimport { Create, SaveButton, useSelect, useStepsForm } from "@refinedev/antd";\nimport { Button, Form, Input, Select, Steps } from "antd";\n\nconst { Step } = Steps;\n\nconst PostCreatePage: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n      <Form.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input.TextArea />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n\n      <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </Form>\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreatePage,\n      edit: PostEdit,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,r.yg)(y,{value:"edit",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\nimport React from "react";\n\nimport { Edit, SaveButton, useSelect, useStepsForm } from "@refinedev/antd";\nimport { Button, Form, Input, Select, Steps } from "antd";\n\nconst { Step } = Steps;\n\nconst PostEditPage: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps, query } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const postData = query?.data?.data;\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n    defaultValue: postData?.category.id,\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n      <Form.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input.TextArea />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Edit\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </Form>\n    </Edit>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreate,\n      edit: PostEditPage,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n')))),(0,r.yg)("p",null,"For the sake of simplicity, in this example we're going to build a Post ",(0,r.yg)("inlineCode",{parentName:"p"},'"create"')," form that consists of only a ",(0,r.yg)("inlineCode",{parentName:"p"},"title")," and a relational ",(0,r.yg)("inlineCode",{parentName:"p"},"category")," field."),(0,r.yg)("p",null,"To split your form items under a ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component, first import and use ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import { useStepsForm } from "@refinedev/antd";\nimport { HttpError } from "@refinedev/core";\nimport React from "react";\n\nexport const PostCreate: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps, query } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  return null;\n};\n\ninterface ICategory {\n  id: number;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is a generic over the type form data to help you type check your code."),(0,r.yg)("p",null,"This hook returns a set of useful values to render steps form. Given ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," value, you should have a way to render your form items conditionally with this index value. You can use an array to achieve this."),(0,r.yg)("p",null,"Here, each item of ",(0,r.yg)("inlineCode",{parentName:"p"},"formList")," corresponds to one step in form:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import { useSelect, useStepsForm } from "@refinedev/antd";\nimport { HttpError } from "@refinedev/core";\nimport { Form, Input, Select } from "antd";\nimport React from "react";\n\nexport const PostCreate: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  // highlight-start\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n  // highlight-end\n\n  return null;\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("admonition",{title:"Relational Data",type:"simple"},(0,r.yg)("p",{parentName:"admonition"},"Since ",(0,r.yg)("inlineCode",{parentName:"p"},"category")," is a relational data, we use ",(0,r.yg)("inlineCode",{parentName:"p"},"useSelect")," to fetch its data."),(0,r.yg)("p",{parentName:"admonition"},"Refer to ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-select"},(0,r.yg)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage. ","\u2192"))),(0,r.yg)("br",null),(0,r.yg)("p",null,"You should use ",(0,r.yg)("inlineCode",{parentName:"p"},"stepsProps")," on ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component, ",(0,r.yg)("inlineCode",{parentName:"p"},"formProps")," on the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Form>")," component. And as the last step, you should render the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component besides the form like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import { Create, useSelect, useStepsForm } from "@refinedev/antd";\nimport { HttpError } from "@refinedev/core";\nimport {\n  Form,\n  Input,\n  Select,\n  // highlight-next-line\n  Steps,\n} from "antd";\nimport React from "react";\n\nexport const PostCreate: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps, query } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      // highlight-start\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical">\n        {formList[current]}\n      </Form>\n      // highlight-end\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,r.yg)("p",{parentName:"admonition"},"Make sure to add as much ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps.Step>")," components as the number of steps in the ",(0,r.yg)("inlineCode",{parentName:"p"},"formList")," array.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"To help users navigate between steps in the form, you can use the action buttons. Your navigation buttons should use the ",(0,r.yg)("inlineCode",{parentName:"p"},"gotoStep")," function that was previously returned from the ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import {\n  Create,\n  // highlight-next-line\n  SaveButton,\n  useSelect,\n  useStepsForm,\n} from "@refinedev/antd";\nimport { HttpError } from "@refinedev/core";\nimport { Button, Form, Input, Select, Steps } from "antd";\nimport React from "react";\n\nexport const PostCreate: React.FC = () => {\n  const {\n    current,\n    gotoStep,\n    stepsProps,\n    formProps,\n    saveButtonProps,\n    query,\n    submit,\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create\n      // highlight-start\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton\n              {...saveButtonProps}\n              style={{ marginRight: 10 }}\n              onClick={() => submit()}\n            />\n          )}\n        </>\n      }\n      // highlight-end\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical">\n        {formList[current]}\n      </Form>\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)(g,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"All of the ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," props are also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#properties"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm")," documentation"),".")),(0,r.yg)("h3",{id:"defaultcurrent"},"defaultCurrent"),(0,r.yg)(g,{id:"defaultcurrent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"defaultCurrent")," sets the default starting step number. Counting starts from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  defaultCurrent: 2,\n});\n"))),(0,r.yg)("h3",{id:"total"},"total"),(0,r.yg)(g,{id:"total",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"total")," is the maximum number of steps. ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," cannot go beyond this number."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  total: 3,\n});\n"))),(0,r.yg)("h3",{id:"isbackvalidate"},"isBackValidate"),(0,r.yg)(g,{id:"isbackvalidate",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When ",(0,r.yg)("inlineCode",{parentName:"p"},"isBackValidate")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", it validates a form fields when the user navigates to a previous step. It is ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  isBackValidate: true,\n});\n")),(0,r.yg)("br",null)),(0,r.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,r.yg)(g,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want loading overtime for the request, you can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,r.yg)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,r.yg)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,r.yg)("p",null,"Return the ",(0,r.yg)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,r.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useStepsForm({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n"))),(0,r.yg)("h3",{id:"autosave"},"autoSave"),(0,r.yg)(g,{id:"autosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,r.yg)("p",null,"By default the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," prop to invalidate queries upon unmount."),(0,r.yg)("p",null,"It also supports ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,r.yg)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,r.yg)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed.")),(0,r.yg)("h4",{id:"enabled"},"enabled"),(0,r.yg)(g,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To enable the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,r.yg)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),". By default, it is ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  autoSave: {\n    enabled: true,\n  },\n});\n"))),(0,r.yg)("h4",{id:"debounce"},"debounce"),(0,r.yg)(g,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Set the debounce time for the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," prop. By default, it is ",(0,r.yg)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  autoSave: {\n    enabled: true,\n    // highlight-next-line\n    debounce: 2000,\n  },\n});\n"))),(0,r.yg)("h4",{id:"onfinish"},"onFinish"),(0,r.yg)(g,{id:"onfinish",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useStepsForm({\n  autoSave: {\n    enabled: true,\n    // highlight-start\n    onFinish: (values) => {\n      return {\n        foo: "bar",\n        ...values,\n      };\n    },\n    // highlight-end\n  },\n});\n'))),(0,r.yg)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,r.yg)(g,{id:"invalidateonunmount",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,r.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,r.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default, it is ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  autoSave: {\n    enabled: true,\n    // highlight-next-line\n    invalidateOnUnmount: true,\n  },\n});\n"))),(0,r.yg)("h3",{id:"defaultformvalues"},"defaultFormValues"),(0,r.yg)(g,{id:"defaultformvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  defaultFormValues: {\n    title: "Hello World",\n  },\n});\n')),(0,r.yg)("p",null,"Also, it can be provided as an async function to fetch the default values. The loading state can be tracked using the ",(0,r.yg)("a",{parentName:"p",href:"#defaultformvaluesloading"},(0,r.yg)("inlineCode",{parentName:"a"},"defaultFormValuesLoading"))," state returned from the hook."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"\ud83d\udea8 When ",(0,r.yg)("inlineCode",{parentName:"p"},"action"),' is "edit" or "clone" a race condition with ',(0,r.yg)("inlineCode",{parentName:"p"},"async defaultFormValues")," may occur. In this case, the form values will be the result of the last completed operation.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const { defaultFormValuesLoading } = useForm({\n  defaultFormValues: async () => {\n    const response = await fetch("https://my-api.com/posts/1");\n    const data = await response.json();\n    return data;\n  },\n});\n'))),(0,r.yg)("h2",{id:"return-values"},"Return Values"),(0,r.yg)(g,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"All ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#return-values"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,r.yg)("h3",{id:"stepsprops"},"stepsProps"),(0,r.yg)(g,{id:"stepsprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"stepsProps")," is the props needed by the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component.")),(0,r.yg)("h4",{id:"current"},"current"),(0,r.yg)(g,{id:"current",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"current")," is the current step, counting from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("h4",{id:"onchange"},"onChange"),(0,r.yg)(g,{id:"onchange",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Callback function that is triggered when the current step of the form changes. The function takes in one argument, ",(0,r.yg)("inlineCode",{parentName:"p"},"currentStep"),", which is a number representing the index of the current step.")),(0,r.yg)("h3",{id:"current-1"},"current"),(0,r.yg)(g,{id:"current-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The Current step, counting from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("h3",{id:"gotostep"},"gotoStep"),(0,r.yg)(g,{id:"gotostep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"gotoStep")," is a function that allows you to programmatically change the current step of a form.\nIt takes in one argument, step, which is a number representing the index of the step you want to navigate to.")),(0,r.yg)("h3",{id:"submit"},"submit"),(0,r.yg)(g,{id:"submit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually.")),(0,r.yg)("h3",{id:"overtime"},"overtime"),(0,r.yg)(g,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,r.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useStepsForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n"))),(0,r.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,r.yg)(g,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,r.yg)("inlineCode",{parentName:"p"},"data"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"error"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"status")," properties from mutation.")),(0,r.yg)("h3",{id:"defaultformvaluesloading"},"defaultFormValuesLoading"),(0,r.yg)(g,{id:"defaultformvaluesloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If ",(0,r.yg)("a",{parentName:"p",href:"#defaultformvalues"},(0,r.yg)("inlineCode",{parentName:"a"},"defaultFormValues"))," is an async function, ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultFormValuesLoading")," will be ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," until the function is resolved.")),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,r.yg)(g,{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Here is an example where we modify the form data before submit:"),(0,r.yg)("p",null,"We need to send the values we received from the user in two separate inputs, ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,r.yg)("inlineCode",{parentName:"p"},"fullName"),". We can do this by overriding the ",(0,r.yg)("inlineCode",{parentName:"p"},"submit")," function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { useStepsForm } from "@refinedev/antd";\n// ...\nconst { current, gotoStep, stepsProps, formProps, saveButtonProps, onFinish } =\n  useStepsForm<IPost>({\n    submit: (values) => {\n      // highlight-start\n      const data = {\n        fullName: `${formValues.name} ${formValues.surname}`,\n        age: formValues.age,\n        city: formValues.city,\n      };\n      onFinish(data as any);\n      // highlight-end\n    },\n  });\n// ...\n')),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(g,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(f,{module:"@refinedev/antd/useStepsForm",mdxType:"PropsTable"})),(0,r.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.yg)(g,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,r.yg)("td",{parentName:"tr",align:null},"Values for params."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,r.yg)("h3",{id:"return-values-1"},"Return Values"),(0,r.yg)(g,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Key"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"stepsProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design steps props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://ant.design/components/steps/#API"},(0,r.yg)("inlineCode",{parentName:"a"},"StepsProps")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"current"),(0,r.yg)("td",{parentName:"tr",align:null},"Current step, counting from 0."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"gotoStep"),(0,r.yg)("td",{parentName:"tr",align:null},"Go to the target step"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(step: number) => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"formProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-form#formprops"},(0,r.yg)("inlineCode",{parentName:"a"},"FormProps")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"form"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,r.yg)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"submit"),(0,r.yg)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"overtime"),(0,r.yg)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto save props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},'"success" }'))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,r.yg)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(g,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(h,{path:"form-antd-use-steps-form",mdxType:"CodeSandboxExample"})))}N.isMDXComponent=!0}}]);