"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[27143],{58860:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var a=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,u=c["".concat(l,".").concat(m)]||c[m]||g[m]||r;return t?a.createElement(u,i(i({ref:n},p),{},{components:t})):a.createElement(u,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2230:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>s,metadata:()=>d,toc:()=>c});t(37953);var a=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={title:"How to create React draggable components with react-dnd",description:"We'll be using the react-dnd library to create draggable components in React.",slug:"react-draggable-components-with-react-dnd",authors:"david_omotayo",tags:["react","refine","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/social-2.png",hide_table_of_contents:!1},l=void 0,d={permalink:"/blog/react-draggable-components-with-react-dnd",source:"@site/blog/2024-12-24-react-dnd.md",title:"How to create React draggable components with react-dnd",description:"We'll be using the react-dnd library to create draggable components in React.",date:"2024-12-24T00:00:00.000Z",formattedDate:"December 24, 2024",tags:[{label:"react",permalink:"/blog/tags/react"},{label:"refine",permalink:"/blog/tags/refine"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:23.51,hasTruncateMarker:!1,authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],frontMatter:{title:"How to create React draggable components with react-dnd",description:"We'll be using the react-dnd library to create draggable components in React.",slug:"react-draggable-components-with-react-dnd",authors:"david_omotayo",tags:["react","refine","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/social-2.png",hide_table_of_contents:!1},prevItem:{title:"How to use Material UI Checkbox",permalink:"/blog/material-ui-checkbox-component"},nextItem:{title:"How to Create Dynamic Forms in React CRUD app with Ant Design",permalink:"/blog/react-crud-app-with-dynamic-form-ant-design"},relatedPosts:[{title:"refine vs RedwoodJS",description:"We will compare two open source React frameworks, that can be used to build CRUD applications",permalink:"/blog/refine-vs-redwood-js",formattedDate:"January 23, 2023",authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],readingTime:26.61,date:"2023-01-23T00:00:00.000Z"},{title:"React Memo Guide with Examples",description:"Improve app performance with React.memo().",permalink:"/blog/react-memo-guide",formattedDate:"September 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:18.645,date:"2024-09-19T00:00:00.000Z"},{title:"A Complete Human Resources (HR) App Built with Refine",description:"The Refine HR App showcases how to build efficient, enterprise-grade HR management solutions using Refine.js and modern technologies.",permalink:"/blog/human-resources-application",formattedDate:"November 21, 2024",authors:[{name:"Necati \xd6zmen",title:"Head of Growth at Refine",url:"https://github.com/necatiozmen",description:"Feeling Irie",github:"https://github.com/necatiozmen",twitter:"https://twitter.com/necatiozmen3",linkedin:"https://www.linkedin.com/in/necatiozmen/",imageURL:"https://github.com/necatiozmen.png",key:"necati"}],readingTime:2.9,date:"2024-11-21T00:00:00.000Z"}],authorPosts:[{title:"How to Create Dynamic Forms in React CRUD app with Ant Design",description:"Easy way to creating dynamic forms in React CRUD apps with Ant Design",permalink:"/blog/react-crud-app-with-dynamic-form-ant-design",formattedDate:"December 20, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:26.34,date:"2024-12-20T00:00:00.000Z"},{title:"Dynamic Forms with React Hook Form",description:"How to build dynamic forms with React hook form in React CRUD apps.",permalink:"/blog/dynamic-forms-in-react-hook-form",formattedDate:"December 23, 2022",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:21.955,date:"2022-12-23T00:00:00.000Z"},{title:"Creating responsive tooltips in React with react-tooltip",description:"We'll explore how to create a custom tooltip component in a React application, as well as integrating the react-tooltip library.",permalink:"/blog/react-tooltip",formattedDate:"August 4, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:16.24,date:"2024-08-04T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Why Refine?",id:"why-refine",level:2},{value:"What is React DND?",id:"what-is-react-dnd",level:2},{value:"useDrag",id:"usedrag",level:2},{value:"useDrop",id:"usedrop",level:2},{value:"Getting started with Refine",id:"getting-started-with-refine",level:2},{value:"Setting up the dashboard page",id:"setting-up-the-dashboard-page",level:2},{value:"Integrating React-dnd",id:"integrating-react-dnd",level:2},{value:"Board composition",id:"board-composition",level:2},{value:"Rendering the cards",id:"rendering-the-cards",level:2},{value:"Using the useDrag hook",id:"using-the-usedrag-hook",level:2},{value:"Using the useDrop hook",id:"using-the-usedrop-hook",level:2},{value:"Optimizing Performance with React-DND",id:"optimizing-performance-with-react-dnd",level:2},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2}],g=(m="CodeSandboxExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var m;const u={toc:c},h="wrapper";function y(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(h,r(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on December 24, 2024, to include advanced techniques for optimizing React-DND performance, such as avoiding unnecessary re-renders, virtualizing large lists, and supporting mobile devices with the Touch Backend, along with simplified explanations for better clarity.")),(0,a.yg)("br",null),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/final-min.gif",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"The HTML Drag-and-Drop API is a pioneering feature of the web, whose introduction has inspired developers to find innovative ways of using it to enhance the user experience on their websites."),(0,a.yg)("p",null,"However, utilizing this API can be challenging, as the implementation demands a significant amount of boilerplate code, which might prove difficult, especially for beginners. Fortunately, libraries like React-Beautiful-DND and React-DND simplify the process."),(0,a.yg)("p",null,"This article will examine the process of implementing drag-and-drop functionality into a React project using the React-DND library."),(0,a.yg)("h2",{id:"why-refine"},"Why Refine?"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"Refine")," is a headless React-based framework that helps you quickly build CRUD applications such as admin panels, dashboards, and internal tools. The framework provides a collection of helper hooks, components, and data providers that give you full control over your application's user interface."),(0,a.yg)("p",null,"Refine is a headless framework, meaning it does not come with any pre-designed components or UI elements. Instead, it is designed to integrate seamlessly with any custom designs or UI libraries, such as Ant design, Mantine, and Material design, giving you full control over the appearance of your application's user interface. This allows you to easily tailor your application to match your organization's branding and design standards."),(0,a.yg)("p",null,"Using Refine in your applications offers many benefits, including:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A UI-agnostic design that allows for seamless integration with different UI frameworks and custom designs."),(0,a.yg)("li",{parentName:"ul"},"An easy learning curve."),(0,a.yg)("li",{parentName:"ul"},"Backend agnostic, with support for a wide range of backend technologies."),(0,a.yg)("li",{parentName:"ul"},"Built-in support for authentication, state management, data fetching, and routing."),(0,a.yg)("li",{parentName:"ul"},"Open-source, so you don't have to worry about constraints.")),(0,a.yg)("p",null,"Overall, Refine is a powerful and meta framework for building CRUD applications with React."),(0,a.yg)("h2",{id:"what-is-react-dnd"},"What is React DND?"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/react-dnd/react-dnd"},"React-dnd")," is a library for implementing complex drag-and-drop functionalities in React. It uses the HTML5 drag-and-drop API and provides a set of hooks that you can use to build drag-and-drop interfaces, with support for both mouse and touch events. With React DnD, you can create complex drag-and-drop interfaces while keeping your components and the overall application architecture highly maintainable."),(0,a.yg)("p",null,"React-dnd provides a lower-level solution for implementing drag-and-drop functionality in React. Unlike its counterparts that provide pre-made components, React DnD wraps your existing components and injects props into them. This allows it to focus on the core functionality of the react drag-and-drop interface while you concentrate on the visual aspects of the application."),(0,a.yg)("p",null,"The library is made up of two main hooks: ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop"),". These are functions that enable drag-and-drop behavior in a React application. They allow you to create draggable elements and drop targets that accept and handle dropped items."),(0,a.yg)("h2",{id:"usedrag"},"useDrag"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook is a function that allows us to create draggable elements that can be moved around the screen. It accepts an object containing the specification of the type of draggable being generated, the item object representing the drag source, what props to collect and more."),(0,a.yg)("p",null,"Here's an example of how you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const [{ isDragging }, dragRef] = useDrag({\n  item: { type: "item", item: myitem },\n  begin: () => {\n    console.log("drag began");\n  },\n  end: (dropResult) => {\n    console.log("drag end");\n  },\n  collect: (monitor) => ({\n    isDragging: monitor.isDragging(),\n  }),\n});\n')),(0,a.yg)("p",null,"In this example, ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," is returning two variable, the first one is an object containing the current state of the drag, and the second one is a ref to the draggable element."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"item")," prop, allows you to define the data that you want to be available during the drag operation, it's recommended to include a ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," property, to match it with the ",(0,a.yg)("inlineCode",{parentName:"p"},"accept")," property in ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"collect")," prop is a callback function that allows you to access the drag-and-drop monitor, which provides information about the current state of the drag. In this case, it collects a single property ",(0,a.yg)("inlineCode",{parentName:"p"},"isDragging")," which is a boolean indicating whether an item is currently being dragged."),(0,a.yg)("p",null,"Lastly, the ",(0,a.yg)("inlineCode",{parentName:"p"},"begin")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"end")," props are callback functions that are invoked when the drag starts and ends, respectively."),(0,a.yg)("h2",{id:"usedrop"},"useDrop"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook is a function used in conjunction with the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook, it allows you to create drop targets that can accept items that are being dragged by the users on the screen. It also accepts an object containing the specification of the type of data items the drop-target will accept, what props to collect, and more."),(0,a.yg)("p",null,"Here's an example of how to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const [{ isOver, canDrop }, dropRef] = useDrop({\n  accept: "item",\n  drop: (item, monitor) => {\n    console.log(`Dropped item: ${JSON.stringify(item)}`);\n  },\n  collect: (monitor) => ({\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n  }),\n});\n')),(0,a.yg)("p",null,"In this example, the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook is being used to create a drop target that will accept items of type ",(0,a.yg)("inlineCode",{parentName:"p"},"item"),"."),(0,a.yg)("p",null,"When an item is dragged over the target, the ",(0,a.yg)("inlineCode",{parentName:"p"},"isOver")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"canDrop")," properties of the object returned by the hook will be true, and when the item is dropped, the ",(0,a.yg)("inlineCode",{parentName:"p"},"drop")," function will be called. In the drop function a log is printed showing the dropped item."),(0,a.yg)("p",null,"As you can see, the accepted property of the options object passed to the useDrop hook is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"item"),", which corresponds to the type of item that the drop target will accept."),(0,a.yg)("h2",{id:"getting-started-with-refine"},"Getting started with Refine"),(0,a.yg)("p",null,"To set up the example project for this article, we'll use superplate, a command line tool for quickly setting up a React and Refine project, to create a Refine project with pre-defined CRUD pages. This will allow us to set up the project more efficiently and save time, compared to starting from scratch."),(0,a.yg)("p",null,"To begin, open your computer's command line tool. Navigate to the desired folder or create a new one using the ",(0,a.yg)("inlineCode",{parentName:"p"},"cd")," command. Then, run the following command to install Refine:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm create refine-app@latest\n")),(0,a.yg)("p",null,"The command will prompt you to select your preferences for the project. Refer to the options below as a guide."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"\u2714 Choose a project template \xb7 Refine(Next.js)\n\u2714 What would you like to name your project?: \xb7 refine-dnd\n\u2714 Choose your backend service to connect: \xb7 REST API\n\u2714 Do you want to use a UI Framework?: \xb7 Ant Design\n\u2714 Do you want to add example pages?: \xb7 Yes\n\u2714 Do you need any Authentication logic?: \xb7 No\n\u2714 Do you need i18n (Internationalization) support?: \xb7 No\n\u2714 Choose a package manager: \xb7 npm\n")),(0,a.yg)("br",null),(0,a.yg)("p",null,"Once the installation is finished, navigate to the newly created project folder using the ",(0,a.yg)("inlineCode",{parentName:"p"},"cd")," command and run the following command to install react-dnd and its required packages."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install react-dnd react-dnd-html5-backend\n")),(0,a.yg)("p",null,"To start the development server for the project, type and run ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run dev")," in the terminal. This will automatically open a preview of the app in your default browser. If the preview does not appear automatically, you can manually navigate to it by entering the URL ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000")," in your browser."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/list.png",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"If everything goes well, you should see a similar page rendered to the browser."),(0,a.yg)("h2",{id:"setting-up-the-dashboard-page"},"Setting up the dashboard page"),(0,a.yg)("p",null,"The boilerplate project we bootstrapped does not include a dashboard page as a standard feature, so we need to set one up before integrating React DnD."),(0,a.yg)("p",null,"To begin, navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," folder and create a new ",(0,a.yg)("inlineCode",{parentName:"p"},"dashBoardPage.tsx")," file:"),(0,a.yg)("p",null,"You can add the following placeholder code to prevent typescript from throwing an error:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboardPage.tsx"',title:'"src/pages/dashboardPage.tsx"'},'import { Typography } from "antd";\n\nfunction DashBoardPage() {\n  return <Typography>This is the Dashboard page</Typography>;\n}\n\nexport default DashBoardPage;\n')),(0,a.yg)("p",null,"Next, open the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file and import the newly created ",(0,a.yg)("inlineCode",{parentName:"p"},"dashBoardPage.tsx")," file. Then, add a ",(0,a.yg)("inlineCode",{parentName:"p"},"DashboardPage")," component to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route />")," as a element. After that add ",(0,a.yg)("inlineCode",{parentName:"p"},"dashboard")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," array in the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show App.tsx code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport {\n  ErrorComponent,\n  useNotificationProvider,\n  ThemedLayoutV2,\n  ThemedSiderV2,\n} from "@refinedev/antd";\nimport "@refinedev/antd/dist/reset.css";\n\nimport routerBindings, {\n  DocumentTitleHandler,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\nimport { Header } from "./components/header";\nimport { ColorModeContextProvider } from "./contexts/color-mode";\nimport {\n  BlogPostCreate,\n  BlogPostEdit,\n  BlogPostList,\n  BlogPostShow,\n} from "./pages/blog-posts";\nimport {\n  CategoryCreate,\n  CategoryEdit,\n  CategoryList,\n  CategoryShow,\n} from "./pages/categories";\n// highlight-next-line\nimport DashBoardPage from "./pages/dashboardPage";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <ColorModeContextProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={useNotificationProvider}\n            routerProvider={routerBindings}\n            resources={[\n              // highlight-start\n              {\n                name: "dashboard",\n                list: "/",\n              },\n              // highlight-end\n              {\n                name: "blog_posts",\n                list: "/blog-posts",\n                create: "/blog-posts/create",\n                edit: "/blog-posts/edit/:id",\n                show: "/blog-posts/show/:id",\n                meta: {\n                  canDelete: true,\n                },\n              },\n              {\n                name: "categories",\n                list: "/categories",\n                create: "/categories/create",\n                edit: "/categories/edit/:id",\n                show: "/categories/show/:id",\n                meta: {\n                  canDelete: true,\n                },\n              },\n            ]}\n            options={{\n              syncWithLocation: true,\n              warnWhenUnsavedChanges: true,\n            }}\n          >\n            <Routes>\n              <Route\n                element={\n                  <ThemedLayoutV2\n                    Header={() => <Header sticky />}\n                    Sider={(props) => <ThemedSiderV2 {...props} fixed />}\n                  >\n                    <Outlet />\n                  </ThemedLayoutV2>\n                }\n              >\n                {/* highlight-next-line */}\n                <Route index element={<DashBoardPage />} />\n                <Route path="/blog-posts">\n                  <Route index element={<BlogPostList />} />\n                  <Route path="create" element={<BlogPostCreate />} />\n                  <Route path="edit/:id" element={<BlogPostEdit />} />\n                  <Route path="show/:id" element={<BlogPostShow />} />\n                </Route>\n                <Route path="/categories">\n                  <Route index element={<CategoryList />} />\n                  <Route path="create" element={<CategoryCreate />} />\n                  <Route path="edit/:id" element={<CategoryEdit />} />\n                  <Route path="show/:id" element={<CategoryShow />} />\n                </Route>\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n\n            <RefineKbar />\n            <UnsavedChangesNotifier />\n            <DocumentTitleHandler />\n          </Refine>\n        </ColorModeContextProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')))),(0,a.yg)("p",null,"Refer to the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/components/refine-config/"},"documentation")," to learn about the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.yg)("p",null,"Lastly, return to the browser and click the ",(0,a.yg)("inlineCode",{parentName:"p"},"Dashboard")," button in the sidebar. The application should take you to the dashboard page."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/dashboard-min.png",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Now that our project is set up and working as expected, we can go ahead and integrate react-dnd into the project."),(0,a.yg)("h2",{id:"integrating-react-dnd"},"Integrating React-dnd"),(0,a.yg)("p",null,"To use react-dnd in our project, we must first wrap the application's root component with the ",(0,a.yg)("inlineCode",{parentName:"p"},"DndProvider"),"."),(0,a.yg)("p",null,"To do this, go back to the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file and import the ",(0,a.yg)("inlineCode",{parentName:"p"},"<DndProvider />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"HTML5Backend")," from the ",(0,a.yg)("inlineCode",{parentName:"p"},"react-dnd")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"react-dnd-html5-backend")," packages, respectively."),(0,a.yg)("p",null,"The import statement will look like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { DndProvider } from  "react-dnd";\nimport { HTML5Backend } from  "react-dnd-html5-backend";\\\n')),(0,a.yg)("p",null,"react-dnd provides individual backends for creating drag-and-drop interfaces for both touch and non-touch devices. The HTML5 backend package we installed alongside the React-dnd earlier is responsible for handling the latter. It is built on the HTML5 drag-and-drop API, which means it is subject to the same browser limitations and inconsistencies. However, It works fine on most modern browsers and is the most straightforward backend."),(0,a.yg)("p",null,"Next, wrap the Refine component inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file with ",(0,a.yg)("inlineCode",{parentName:"p"},"<DndProvider />")," and pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"HTML5Backend")," backend as a prop, like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nimport { Refine } from  "@refinedev/core";\nimport { DndProvider } from  "react-dnd";\nimport { HTML5Backend } from  "react-dnd-html5-backend";\n\nfunction  App() {\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Refine\n             ...\n            />\n        </DndProvider>\n    );\n}\n\nexport  default  App;\n')),(0,a.yg)("p",null,"With that, we've successfully integration react-dnd into our project. Next, we'll move on to creating an example of a kanban board project."),(0,a.yg)("p",null,"A kanban board is a visual management tool that allows for the efficient organization and management of tasks through the use of draggable items. If you have experience with tools like Trello and Jira, you should be familiar with the concept of a kanban board."),(0,a.yg)("p",null,"Before implementing the drag-and-drop functionality in our project, we must set up the necessary components and files. These include a ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," component and a ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," component to create the draggable items and droppable elements. We also need a ",(0,a.yg)("inlineCode",{parentName:"p"},"useData")," hook, ",(0,a.yg)("inlineCode",{parentName:"p"},"enums"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"models")," files, which we'll use to fetch and modify data, define the types of columns and items, and declare the interfaces for the item models, respectively."),(0,a.yg)("p",null,'To begin, create a folder named "component" within the "src" folder, then add the specified files and folders as shown in the image below. This includes adding the "column.tsx" and "card.tsx" components, as well as a "constants" folder containing "useData.ts", "enums.ts", and "models.ts" files.'),(0,a.yg)("p",null,"It is logical to populate the files within the ",(0,a.yg)("inlineCode",{parentName:"p"},"constant")," folder first, as they will contain constant codes that will not change throughout this article."),(0,a.yg)("p",null,"As a first step, open the ",(0,a.yg)("inlineCode",{parentName:"p"},"enums.ts")," file and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/component/constants/enums.ts"',title:'"src/component/constants/enums.ts"'},'export enum ColumnTypes {\n  ORDERS = "Orders",\n  IN_PROGRESS = "In Progress",\n  DELIVERED = "Delivered",\n  RETURNED = "Returned",\n}\n\nexport enum cardType {\n  ORDER = "Order",\n}\n')),(0,a.yg)("p",null,"Here, we created two enums, one for column types and the other for item types. The data in the ",(0,a.yg)("inlineCode",{parentName:"p"},"enums")," file indicates that the kanban board will have four columns for available orders, orders in progress, delivered orders, and returned orders. Each column will have a droppable zone that accepts draggable items of type ",(0,a.yg)("inlineCode",{parentName:"p"},"Order"),"."),(0,a.yg)("p",null,"Next, go to the ",(0,a.yg)("inlineCode",{parentName:"p"},"models.ts")," file and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/component/constants/models.ts"',title:'"src/component/constants/models.ts"'},'import { ColumnTypes } from "./enums";\n\nexport interface OrderProps {\n  id: number;\n  title: string;\n  desc: string;\n  column: ColumnTypes;\n}\n\nexport interface dragItem {\n  index: number;\n  id: OrderProps["id"];\n}\n\nexport interface IProduct {\n  id: number;\n  name: string;\n  material: string;\n  column?: ColumnTypes.ORDERS;\n}\n')),(0,a.yg)("p",null,"In this code, we created two interfaces: one for the properties of each order and their types and the other for the item being dragged."),(0,a.yg)("p",null,"Lastly, navigate back to the ",(0,a.yg)("inlineCode",{parentName:"p"},"useData.ts")," hook and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/component/constants/data.ts"',title:'"src/component/constants/data.ts"'},'import React from "react";\nimport { ColumnTypes } from "./enums";\nimport { IProduct } from "components/constants/models";\nimport { useList } from "@refinedev/core";\n\nfunction useData() {\n  //Fetching data from the products endpoint\n  //using Refine\'s useList hook\n  const { data } = useList<IProduct>({\n    config: {\n      pagination: {\n        current: 2,\n      },\n    },\n    resource: "products",\n  });\n\n  //modifying fetched data and adding column property\n\n  const newArr = data?.data.map((i: IProduct) => {\n    return {\n      ...i,\n      column: ColumnTypes.ORDERS,\n    };\n  });\n\n  return [newArr, data?.data];\n}\n\nexport default useData;\n')),(0,a.yg)("p",null,"Here, we are using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useList")," hook from ",(0,a.yg)("strong",{parentName:"p"},"Refine"),' to retrieve data from the "products" endpoint of a fake REST API, which has been assigned to the ',(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," property on the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/component/constants/data.ts"',title:'"src/component/constants/data.ts"'},'const { data } = useList<IProduct>({\n  config: {\n    pagination: {\n      current: 2,\n    },\n  },\n  resource: "products",\n});\n')),(0,a.yg)("p",null,"This is basically the same as doing the following, but with the ",(0,a.yg)("inlineCode",{parentName:"p"},"getItem")," query function from the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'fetch("https://api.fake-rest.refine.dev/products");\n')),(0,a.yg)("p",null,"Then we're modifying the returned ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," array using the ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," method and adding a ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," property to each object in the array."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/component/constants/data.ts"',title:'"src/component/constants/data.ts"'},'import { IProduct } from "./constants/models";\n\nconst newArr = data?.data.map((i: IProduct) => {\n  return {\n    ...i,\n    column: ColumnTypes.ORDERS,\n  };\n});\n')),(0,a.yg)("p",null,"The column property will determine which column an item is a child of. Right now, we're giving every item on the list a column value of ",(0,a.yg)("inlineCode",{parentName:"p"},"Order"),", which means they'll all be children of the \"Orders\" column. We'll learn about this in the subsequent sections."),(0,a.yg)("p",null,"Finally, we're returning the new and old array of data:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"return [newArr, data?.data];\n")),(0,a.yg)("p",null,"That's it for the constants, the next step is to populate both the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," components with the necessary codes for visualizing the board and its columns."),(0,a.yg)("h2",{id:"board-composition"},"Board composition"),(0,a.yg)("p",null,"As previously stated, the board will consist of four columns for ",(0,a.yg)("inlineCode",{parentName:"p"},"Orders"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"In_progress"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Delivered"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"Rejected"),". To achieve this, we'll compose the column component to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," prop and the order cards as ",(0,a.yg)("inlineCode",{parentName:"p"},"children"),". This allows for the reusability of the component in rendering other columns to the board."),(0,a.yg)("p",null,"To begin, navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," file and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/column.tsx"',title:'"src/components/column.tsx"'},'import React from "react";\nimport { Row, Col } from "antd";\n\nfunction Column({ children, name }: { children: any; name: string }) {\n  return (\n    <Row gutter={30}>\n      <Col\n        style={{\n          backgroundColor: "#e3e7ee",\n          width: "270px",\n          padding: "15px",\n          minHeight: "170px",\n          maxHeight: "690px",\n          borderRadius: "5px",\n          overflowY: "scroll",\n        }}\n      >\n        <div\n          style={{\n            fontSize: "17px",\n            marginLeft: "10px",\n            marginBottom: "15px",\n            color: "#84878c",\n          }}\n        >\n          {name}\n        </div>\n        <div\n          style={{\n            width: "100%",\n            height: "75%",\n            padding: "4px",\n          }}\n        >\n          {children}\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Column;\n')),(0,a.yg)("p",null,"This is a simple component that accepts two props: ",(0,a.yg)("inlineCode",{parentName:"p"},"children")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"name"),", and renders them declaratively using Ant design's ",(0,a.yg)("inlineCode",{parentName:"p"},"Row")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Col")," components."),(0,a.yg)("p",null,"Next, import the ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," component into the ",(0,a.yg)("inlineCode",{parentName:"p"},"DashboardPage")," page and render it multiple times with the column types passed to the ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," prop like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title=" pages/dashBoardPage.tsx"',title:'"','pages/dashBoardPage.tsx"':!0},'import React from "react";\nimport Column from "../components/column";\nimport { ColumnTypes } from "../components/constants/enums";\nimport { Space } from "antd";\n\nfunction DashboardPage() {\n  const { ORDERS, IN_PROGRESS, DELIVERED, RETURNED } = ColumnTypes;\n\n  return (\n    <div>\n      <Space\n        direction="horizontal"\n        align="baseline"\n        size={109}\n        style={{\n          display: "flex",\n          justifyContent: "center",\n          marginTop: "20px",\n        }}\n      >\n        <Column name={ORDERS}>{}</Column>\n        <Column name={IN_PROGRESS}>{}</Column>\n        <Column name={DELIVERED}>{}</Column>\n        <Column name={RETURNED}>{}</Column>\n      </Space>\n    </div>\n  );\n}\n\nexport default DashboardPage;\n')),(0,a.yg)("p",null,"Now, if you save your progress and go back to the browser, you should see a similar output to the image provided below."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/board-composition.png",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"rendering-the-cards"},"Rendering the cards"),(0,a.yg)("p",null,"To render the cards, we'll create a state using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," hook, with the data from the ",(0,a.yg)("inlineCode",{parentName:"p"},"useData")," hook passed to it as its initial value. Then, we'll map through to retrieve the ",(0,a.yg)("inlineCode",{parentName:"p"},"name"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"material"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," values of each object, which will be passed as props to the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," components."),(0,a.yg)("p",null,"To begin, import the ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," hook, ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," component, and ",(0,a.yg)("inlineCode",{parentName:"p"},"useData")," hook inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"DashboardPage")," file with the following statement:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title=" pages/dashBoardPage.tsx"',title:'"','pages/dashBoardPage.tsx"':!0},"import React, { useEffect, useState } from 'react'\nimport { Space } from 'antd'\nimport Column from '../components/column'\nimport { ColumnTypes } from '../components/constants/enums'\nimport useData from '../components/constants/data'\n\nfunction  DashboardPage() {\n\n  const [newArr, products] = useData();\n  const [orders, setOrders] = useState<any[] | undefined>([]);\n\n  //creating side effects based on the data's response.\n  useEffect(() => {\n    setOrders(newArr);\n  }, [products]);\n\n    ...\n}\n\nexport  default  DashboardPage;\n")),(0,a.yg)("p",null,"Next, create a function called ",(0,a.yg)("inlineCode",{parentName:"p"},"columnItem")," below the useState declaration and nest the following code within it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title=" pages/dashBoardPage.tsx"',title:'"','pages/dashBoardPage.tsx"':!0},'import Cards from "../components/cards";\n\n// ...\n\nconst columnItem = (columnName: string) => {\n  return (\n    orders &&\n    orders\n      .filter((order) => order.column === columnName)\n      .map((order, index) => (\n        <Cards\n          key={order.id}\n          name={order.name}\n          material={order.material}\n          setOrders={setOrders}\n          index={index}\n        />\n      ))\n  );\n};\n')),(0,a.yg)("p",null,"The code above performs a simple task: it iterates through the state data, passing the relevant properties to the cards component as props."),(0,a.yg)("p",null,"However, you'll notice the ",(0,a.yg)("inlineCode",{parentName:"p"},"columnItem")," function takes a ",(0,a.yg)("inlineCode",{parentName:"p"},"columnName")," parameter, and the state data is filtered before being iterated. This is because we want the cards to be rendered on a single column (Order column) instead of every column on the board."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/dashBoardPage.tsx"',title:'"pages/dashBoardPage.tsx"'},"  const columnItem = (columnName: string) => {\n    return (\n      orders &&\n      orders\n        .filter((order) => order.column === columnName)\n\n    // ...\n\n")),(0,a.yg)("p",null,'The filter method checks for the column type of each card and renders them to their corresponding columns. As every object in the data array has its "column" property set to ',(0,a.yg)("inlineCode",{parentName:"p"},"Order"),", the cards will be rendered on the ",(0,a.yg)("inlineCode",{parentName:"p"},"Order")," column."),(0,a.yg)("p",null,"Right now, we can't see the cards, that's because we're yet to set up the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," component."),(0,a.yg)("p",null,"To do so, head over to the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards.tsx")," file and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/cards.tsx"',title:'"src/components/cards.tsx"'},'import React from "react";\nimport { Card } from "antd";\n\nfunction Cards({\n  name,\n  material,\n  setOrders,\n}: {\n  name: string;\n  material: string;\n  setOrders: any;\n  index: number;\n}) {\n  return (\n    <Card\n      title={name}\n      className="card"\n      style={{\n        marginBottom: "15px",\n        boxShadow: "1px 4px 11px -2px rgba(135,135,135,0.75)",\n      }}\n    >\n      {material}\n    </Card>\n  );\n}\n\nexport default Cards;\n')),(0,a.yg)("p",null,"Likewise the code inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," component, this is also a simple component that accepts the properties being passed to it from the column component and rendering them using Ant design's ",(0,a.yg)("inlineCode",{parentName:"p"},"card")," component."),(0,a.yg)("p",null,"Lastly, go back to the ",(0,a.yg)("inlineCode",{parentName:"p"},"DashboardPage")," file and pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"columnItem")," function as children of each columns declared, with their respective column type passed to it as an argument:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/dashBoardPage.tsx"',title:'"pages/dashBoardPage.tsx"'},'import Column from "../components/column";\n\n// ...\n\n<div className="App">\n    <Space ... >\n        <Column name={ORDERS}>{columnItem(ORDERS)}</Column>\n        <Column name={IN_PROGRESS}>{columnItem(IN_PROGRESS)}</Column>\n        <Column name={DELIVERED}>{columnItem(DELIVERED)}</Column>\n        <Column name={RETURNED}>{columnItem(RETURNED)}</Column>\n    </Space>\n</div>;\n')),(0,a.yg)("p",null,"Now, if you save your project go back to the browser, you should see the cards rendered within the ",(0,a.yg)("inlineCode",{parentName:"p"},"orders")," column like so:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/rendering-cards.png",alt:"react draggable"}),(0,a.yg)("h2",{id:"using-the-usedrag-hook"},"Using the useDrag hook"),(0,a.yg)("p",null,"To make our cards draggable, we'll declare the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards")," component, give it a ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," and item ",(0,a.yg)("inlineCode",{parentName:"p"},"value"),", and then pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"dragRef")," variable to the card component using the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/cards.tsx"',title:'"src/components/cards.tsx"'},'import React from "react";\nimport { Card } from "antd";\nimport { cardType } from "./constants/enums";\nimport { useDrag } from "react-dnd";\n\nfunction Cards({\n  name,\n  material,\n  setOrders,\n}: {\n  name: string;\n  material: string;\n  setOrders: any;\n  index: number;\n}) {\n  const [{ isDragging }, drag] = useDrag({\n    type: cardType.ORDER,\n    item: { name },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <Card\n      ref={drag}\n      title={name}\n      className="card"\n      style={{\n        opacity: isDragging ? "0.5" : "1",\n        marginBottom: "15px",\n        boxShadow: "1px 4px 11px -2px rgba(135,135,135,0.75)",\n      }}\n    >\n      {material}\n    </Card>\n  );\n}\n\nexport default Cards;\n')),(0,a.yg)("p",null,"Here, the ",(0,a.yg)("inlineCode",{parentName:"p"},"cardType")," enum is utilized to provide the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook with an ",(0,a.yg)("inlineCode",{parentName:"p"},"order")," type, while the ",(0,a.yg)("inlineCode",{parentName:"p"},"collect")," callback function instantiates the ",(0,a.yg)("inlineCode",{parentName:"p"},"monitor")," method which is used to determine if a card is being dragged. The card's opacity is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"0.5")," during the drag, or to ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," if otherwise."),(0,a.yg)("p",null,"The steps required to make the cards draggable have been completed. When you return to the browser, you should find that you can now drag each card."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/drag-hook-min.gif",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Next, we'll examine how to use the useDrop hook to create a droppable area within each columns for cards."),(0,a.yg)("h2",{id:"using-the-usedrop-hook"},"Using the useDrop hook"),(0,a.yg)("p",null,"Since droppable zones will be created on each column, it makes sense to declare the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook within the ",(0,a.yg)("inlineCode",{parentName:"p"},"columns.tsx")," file."),(0,a.yg)("p",null,"To begin, open the ",(0,a.yg)("inlineCode",{parentName:"p"},"columns.tsx")," file and add the following declaration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/colums.tsx"',title:'"src/components/colums.tsx"'},'import React from "react";\nimport { Row, Col } from "antd";\nimport { useDrop } from "react-dnd";\nimport { cardType } from "./constants/enums";\n\nfunction Column({ children, name }: { children: any; name: string }) {\n  const [{ canDrop, isOver }, dropref] = useDrop({\n    accept: cardType.ORDER,\n    drop: () => ({\n      name,\n    }),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  });\n\n  return (\n    <Row gutter={30}>\n      <Col\n        style={{\n          backgroundColor: "#e3e7ee",\n          width: "270px",\n          padding: "15px",\n          minHeight: "170px",\n          maxHeight: "690px",\n          borderRadius: "5px",\n          overflowY: "scroll",\n        }}\n      >\n        <div\n          style={{\n            fontSize: "17px",\n            marginLeft: "10px",\n            marginBottom: "15px",\n            color: "#84878c",\n          }}\n        >\n          {name}\n        </div>\n        <div\n          ref={dropref}\n          style={{\n            width: "100%",\n            height: "75%",\n            padding: "4px",\n            border: isOver ? "dashed 1px black" : "  ",\n          }}\n        >\n          {children}\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Column;\n')),(0,a.yg)("p",null,"This declaration is likewise straightforward, all we're doing is passing the ",(0,a.yg)("inlineCode",{parentName:"p"},"Order")," value to the ",(0,a.yg)("inlineCode",{parentName:"p"},"accept")," property via the ",(0,a.yg)("inlineCode",{parentName:"p"},"cardType")," enum, and passing an object with each card name to the drop property."),(0,a.yg)("p",null,"As explained earlier, the useDrop hook needs to accept a type for the draggable element, in this case, the ",(0,a.yg)("inlineCode",{parentName:"p"},"Order")," type. If we log the ",(0,a.yg)("inlineCode",{parentName:"p"},"isOver")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"canDrop")," variables to the console and try to drop the cards on the adjacent columns, we'll get the following results:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/using-usedrop-min.gif",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Note that both methods returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," when the card is hovering over a drop zone, this is because the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hooks share the same types. This highlights why the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," hook must accept the same value as the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," hook's type."),(0,a.yg)("p",null,"As seen, dropping cards on the columns is not possible yet. An ordering function must be created to reorder each card and change the column type when dropped on a specific column."),(0,a.yg)("p",null,"To do this, go back to the ",(0,a.yg)("inlineCode",{parentName:"p"},"cards.tsx")," file and add the following function above the useDrag declaration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/cards.tsx"',title:'"src/components/cards.tsx"'},"// ..\n\nconst orderColumnChange = (CurrentOrder: any, columnName: string) => {\n  setOrders((prevState: string[]) => {\n    return prevState.map((item: any) => {\n      return {\n        ...item,\n        column: item.name === CurrentOrder.name ? columnName : item.column,\n      };\n    });\n  });\n};\n")),(0,a.yg)("p",null,"Here, we are looping through the previous state and altering the column name of the currently dragged order to that of the column it will be dropped on, making it a child of that column."),(0,a.yg)("p",null,"Next, we'll create a ",(0,a.yg)("inlineCode",{parentName:"p"},"switch")," statement that checks which column a card is dropped on and passes its name to the ",(0,a.yg)("inlineCode",{parentName:"p"},"orderColumnChange")," function created earlier. To accomplish this, scroll down to the ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," declaration and add an ",(0,a.yg)("inlineCode",{parentName:"p"},"end")," object with the following callback function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/cards.tsx"',title:'"src/components/cards.tsx"'},'import { ColumnTypes, cardType } from "./constants/enums";\nimport { useDrag } from "react-dnd";\nimport { IProduct } from "./constants/models";\n\n// ...\n\nconst [{ isDragging }, drag] = useDrag({\n  type: cardType.ORDER,\n  item: { name },\n  end: (order, monitor) => {\n    const dropResult = monitor.getDropResult<IProduct>();\n\n    if (dropResult) {\n      const { name } = dropResult;\n      const { ORDERS, IN_PROGRESS, DELIVERED, RETURNED } = ColumnTypes;\n      switch (name) {\n        case ORDERS:\n          orderColumnChange(order, ColumnTypes.ORDERS);\n          break;\n        case IN_PROGRESS:\n          orderColumnChange(order, ColumnTypes.IN_PROGRESS);\n          break;\n        case DELIVERED:\n          orderColumnChange(order, ColumnTypes.DELIVERED);\n          break;\n        case RETURNED:\n          orderColumnChange(order, ColumnTypes.RETURNED);\n          break;\n        default:\n          break;\n      }\n    }\n  },\n  collect: (monitor) => ({\n    isDragging: monitor.isDragging(),\n  }),\n});\n')),(0,a.yg)("p",null,"If you save your progress and revisit the browser, you should now be able to drag and drop each card onto any column on the board."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-07-react-dnd/final-min.gif",alt:"react draggable"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"That's all. We have successfully created a kanban board with draggable cards and columns with drop zones. You can enhance the appearance by adding designs based on the state of each card and column."),(0,a.yg)("h2",{id:"optimizing-performance-with-react-dnd"},"Optimizing Performance with React-DND"),(0,a.yg)("p",null,"Performance can become an issue when working with React-DND, especially with a large number of draggable items. Below are some tips to keep things running efficiently:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Avoid Unnecessary Re-Renders")),(0,a.yg)("p",null,"Utilize ",(0,a.yg)("inlineCode",{parentName:"p"},"React.memo")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"useMemo")," to avoid unnecessary re-renders. For instance, if your draggable items remain unchanged, memoizing them can save a lot of processing time."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Batch State Updates")),(0,a.yg)("p",null,"When updating multiple items after a drop, batch those updates instead of triggering multiple state changes. This minimizes React\u2019s render cycles."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Minimize the ",(0,a.yg)("inlineCode",{parentName:"strong"},"collect")," Function\u2019s Scope")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"collect")," function in ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrag")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrop")," is powerful, but adding excessive logic can degrade performance. Only gather data that\u2019s absolutely necessary."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Virtualize Large Lists")),(0,a.yg)("p",null,"For hundreds of draggable items, consider using libraries like ",(0,a.yg)("inlineCode",{parentName:"p"},"react-window")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"react-virtualized"),". These libraries render only the visible items, reducing React\u2019s workload."),(0,a.yg)("p",null,"By applying these strategies, you\u2019ll achieve a drag-and-drop experience that is both fast and functional."),(0,a.yg)("h2",{id:"error-handling-and-debugging"},"Error Handling and Debugging"),(0,a.yg)("p",null,"React-DND is a robust library, but you might encounter some common issues. Here\u2019s how to resolve them:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Missing ",(0,a.yg)("inlineCode",{parentName:"strong"},"DndProvider"))),(0,a.yg)("p",null,"If you forget to wrap your app with ",(0,a.yg)("inlineCode",{parentName:"p"},"DndProvider"),", nothing will work. Ensure your root component includes it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import { DndProvider } from "react-dnd";\nimport { HTML5Backend } from "react-dnd-html5-backend";\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <YourApp />\n    </DndProvider>\n  );\n}\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Type Mismatches Between useDrag and useDrop")),(0,a.yg)("p",null,"The type property in useDrag must match the accept property in useDrop. Otherwise, the drop zone won\u2019t recognize the dragged item:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const [{ isDragging }, dragRef] = useDrag({ type: "item" });\nconst [{ isOver }, dropRef] = useDrop({ accept: "item" });\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Monitor Data Not Updating")),(0,a.yg)("p",null,"If collect isn\u2019t providing accurate data, ensure you\u2019re returning the correct values from the monitor:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"collect: (monitor) => ({ isDragging: monitor.isDragging() });\n")),(0,a.yg)("p",null,"Debugging these small issues can save significant time. Always refer to the documentation and browser console for detailed error messages."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Mobile Device Support")),(0,a.yg)("p",null,"React-DND\u2019s default backend (HTML5Backend) works well on desktop browsers but struggles on mobile devices. Here\u2019s how to enable drag-and-drop for touchscreens:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Use the Touch Backend")),(0,a.yg)("p",null,"Install the react-dnd-touch-backend package designed for touch devices:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install react-dnd-touch-backend\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Set Up the Touch Backend")),(0,a.yg)("p",null,"Replace HTML5Backend with TouchBackend in your app\u2019s DndProvider:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DndProvider } from "react-dnd";\nimport { TouchBackend } from "react-dnd-touch-backend";\n\nfunction App() {\n  return (\n    <DndProvider backend={TouchBackend}>\n      <YourApp />\n    </DndProvider>\n  );\n}\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Customize Touch Behavior")),(0,a.yg)("p",null,"You can tweak the touch backend\u2019s settings for better performance, such as adjusting the drag delay:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const backendOptions = {\n  enableMouseEvents: true,\n  delay: 100,\n};\n\n<DndProvider backend={TouchBackend} options={backendOptions}>\n  <YourApp />\n</DndProvider>;\n")),(0,a.yg)("p",null,"With these adjustments, your drag-and-drop features will work seamlessly across both desktop and mobile devices."),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"This article introduced Refine and React-DND, detailing the process of setting up a Refine project with predefined CRUD pages via the Superplate CLI and integrating React-DND. It also covered the creation of a dashboard page featuring a kanban board that utilizes the useDrag and useDrop hooks from React-DND for its drag-and-drop functionality."),(0,a.yg)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,a.yg)(g,{path:"blog-react-dnd",mdxType:"CodeSandboxExample"}),(0,a.yg)("hr",null))}y.isMDXComponent=!0}}]);