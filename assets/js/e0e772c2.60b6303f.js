"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1928],{58860:(e,n,r)=>{r.d(n,{xA:()=>l,yg:()=>m});var t=r(37953);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=d(r),h=o,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||a;return r?t.createElement(m,i(i({ref:n},l),{},{components:r})):t.createElement(m,i({ref:n},l))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var d=2;d<a;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},11714:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>p,metadata:()=>d,toc:()=>c});r(37953);var t=r(58860);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})),e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const p={id:"show",title:"Show",swizzle:!0},s=void 0,d={unversionedId:"api-reference/chakra-ui/components/basic-views/show",id:"version-3.xx.xx/api-reference/chakra-ui/components/basic-views/show",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/components/basic-views/show.md",sourceDirName:"api-reference/chakra-ui/components/basic-views",slug:"/api-reference/chakra-ui/components/basic-views/show",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/basic-views/show",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/components/basic-views/show.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710247743,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{id:"show",title:"Show",swizzle:!0},sidebar:"someSidebar",previous:{title:"List",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/basic-views/list"},next:{title:"Breadcrumb",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/breadcrumb"}},l={},c=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>canDelete</code> and <code>canEdit</code>",id:"candelete-and-canedit",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.yg)("div",n)},h=u("DocThumbsUpDownFeedbackWidget"),m=u("PropsTable"),g={toc:c},f="wrapper";function y(e){var{components:n}=e,r=i(e,["components"]);return(0,t.yg)(f,a(function(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),t.forEach((function(n){o(e,n,r[n])}))}return e}({},g,r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const { default: simpleRest } = RefineSimpleRest;\nsetRefineProps({\n  dataProvider: simpleRest("https://api.fake-rest.refine.dev"),\n  Layout: RefineChakra.Layout,\n  Sider: () => null,\n});\n\nconst Wrapper = ({ children }) => {\n  return (\n    <RefineChakra.ChakraProvider theme={RefineChakra.refineTheme}>\n      {children}\n    </RefineChakra.ChakraProvider>\n  );\n};\n\nconst DummyListPage = () => (\n  <RefineChakra.VStack alignItems="flex-start">\n    <RefineChakra.Text>This page is empty.</RefineChakra.Text>\n    <ShowButton colorScheme="black" recordItemId="123">\n      Show Item 123\n    </ShowButton>\n  </RefineChakra.VStack>\n);\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page."),(0,t.yg)("p",null,"We will show what ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { useShow, useOne } from "@pankod/refine-core";\nimport {\n  Show,\n  Heading,\n  Text,\n  MarkdownField,\n  Spacer,\n} from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC<IResourceComponentsProps> = () => {\n  const { queryResult } = useShow<IPost>();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  const { data: categoryData } = useOne<ICategory>({\n    resource: "categories",\n    id: record?.category.id || "",\n    queryOptions: {\n      enabled: !!record?.category.id,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <Heading as="h5" size="sm">\n        Id\n      </Heading>\n      <Text mt={2}>{record?.id}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Title\n      </Heading>\n      <Text mt={2}>{record?.title}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Status\n      </Heading>\n      <Text mt={2}>{record?.status}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Category\n      </Heading>\n      <Text mt={2}>{categoryData?.data?.title}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Content\n      </Heading>\n      <Spacer mt={2} />\n      <MarkdownField value={record?.content} />\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      notificationProvider={RefineChakra.notificationProvider()}\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,t.yg)("admonition",{title:"Swizzle",type:"info-tip"},(0,t.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/cli"},(0,t.yg)("strong",{parentName:"a"},"refine CLI")))),(0,t.yg)("h2",{id:"properties"},"Properties"),(0,t.yg)("h3",{id:"title"},(0,t.yg)("inlineCode",{parentName:"h3"},"title")),(0,t.yg)(h,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"It allows adding a title for the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show>"),' component. if you don\'t pass title props it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Show post".'),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Heading } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show title={<Heading size="lg">Custom Title</Heading>}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"resource"},(0,t.yg)("inlineCode",{parentName:"h3"},"resource")),(0,t.yg)(h,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,t.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," component in a custom page, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"resource")," property."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/custom/123 previewHeight=280px",live:!0,url:"http://localhost:3000/custom/123",previewHeight:"280px"},'setInitialRoutes(["/custom/123"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport { Layout, Show } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource="categories">\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: "/custom/:id",\n          },\n        ],\n        // highlight-end\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[{ name: "posts" }]}\n    />\n  );\n};\n// visible-block-end\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"candelete-and-canedit"},(0,t.yg)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,t.yg)("inlineCode",{parentName:"h3"},"canEdit")),(0,t.yg)(h,{id:"candelete-and-canedit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," component. If the resource has ",(0,t.yg)("inlineCode",{parentName:"p"},"canDelete")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"canEdit")," property refine adds the buttons by default."),(0,t.yg)("p",null,"When clicked on, delete button executes the ",(0,t.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/data-provider"},(0,t.yg)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,t.yg)("p",null,"Refer to the ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/buttons/delete-button"},(0,t.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," and the ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/buttons/edit-button"},(0,t.yg)("inlineCode",{parentName:"a"},"<EditButton>"))," documentation for detailed usage."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\nimport { usePermissions } from "@pankod/refine-core";\n\nconst PostShow: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      canEdit={permissionsData?.includes("admin")}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  const simpleRestDataProvider = dataProvider(\n    "https://api.fake-rest.refine.dev",\n  );\n\n  const customDataProvider = {\n    ...simpleRestDataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n      return {\n        data: {},\n      };\n    },\n  };\n\n  const authProvider = {\n    login: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve("admin"),\n    getUserIdentity: () => Promise.resolve(),\n  };\n\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={customDataProvider}\n      authProvider={authProvider}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192"))),(0,t.yg)("h3",{id:"recorditemid"},(0,t.yg)("inlineCode",{parentName:"h3"},"recordItemId")),(0,t.yg)(h,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,t.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,t.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=350px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"350px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { useModalForm } from "@pankod/refine-react-hook-form";\nimport {\n  Show,\n  Modal,\n  Button,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  ModalBody,\n} from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  const {\n    modal: { visible, close, show },\n    id,\n  } = useModalForm({\n    refineCoreProps: { action: "show" },\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal isOpen={visible} onClose={close} size="xl">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Show</ModalHeader>\n\n          <ModalBody>\n            {/* highlight-next-line */}\n            <Show recordItemId={id}>\n              <p>Rest of your page here</p>\n            </Show>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"The ",(0,t.yg)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,t.yg)("inlineCode",{parentName:"p"},"id")," information for the ",(0,t.yg)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly."))),(0,t.yg)("h3",{id:"dataprovidername"},(0,t.yg)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,t.yg)(h,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@pankod/refine-core";\nimport { Show } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-start\nconst PostShow = () => {\n  return <Show dataProviderName="other">...</Show>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n      resources={[{ name: "posts", show: PostShow }]}\n    />\n  );\n};\n'))),(0,t.yg)("h3",{id:"goback"},(0,t.yg)("inlineCode",{parentName:"h3"},"goBack")),(0,t.yg)(h,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,t.yg)("inlineCode",{parentName:"p"},"false")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst IconMoodSmile = (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-mood-smile"\n    width={24}\n    height={24}\n    viewBox="0 0 24 24"\n    strokeWidth="2"\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <circle cx={12} cy={12} r={9}></circle>\n    <line x1={9} y1={10} x2="9.01" y2={10}></line>\n    <line x1={15} y1={10} x2="15.01" y2={10}></line>\n    <path d="M9.5 15a3.5 3.5 0 0 0 5 0"></path>\n  </svg>\n);\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\n/* highlight-next-line */\nimport { IconMoodSmile } from "@tabler/icons";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show goBack={IconMoodSmile}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"isloading"},(0,t.yg)("inlineCode",{parentName:"h3"},"isLoading")),(0,t.yg)(h,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"To toggle the loading state of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show isLoading={true}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"breadcrumb"},(0,t.yg)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,t.yg)(h,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,t.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,t.yg)("inlineCode",{parentName:"p"},"@pankod/refine-chakra-ui")," package."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/breadcrumb"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,t.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Box, Breadcrumb } from "@pankod/refine-chakra-ui";\n\nconst CustomBreadcrumb: React.FC = () => {\n  return (\n    <Box borderColor="blue" borderStyle="dashed" borderWidth="2px">\n      <Breadcrumb />\n    </Box>\n  );\n};\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      breadcrumb={<CustomBreadcrumb />}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"wrapperprops"},(0,t.yg)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,t.yg)(h,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"If you want to customize the wrapper of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,t.yg)("inlineCode",{parentName:"p"},"@pankod/refine-chakra-ui")," wrapper element is ",(0,t.yg)("inlineCode",{parentName:"p"},"<Box>"),"s and ",(0,t.yg)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,t.yg)("inlineCode",{parentName:"p"},"<Card>")," can get."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      wrapperProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"headerprops"},(0,t.yg)("inlineCode",{parentName:"h3"},"headerProps")),(0,t.yg)(h,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"If you want to customize the header of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"contentprops"},(0,t.yg)("inlineCode",{parentName:"h3"},"contentProps")),(0,t.yg)(h,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"If you want to customize the content of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      contentProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"headerbuttons"},(0,t.yg)("inlineCode",{parentName:"h3"},"headerButtons")),(0,t.yg)(h,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"You can customize the buttons at the header by using the ",(0,t.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,t.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,t.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Button, HStack, Box } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <HStack>\n          {defaultButtons}\n          <Button colorScheme="red">Custom Button</Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"headerbuttonprops"},(0,t.yg)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,t.yg)(h,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,t.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Button } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtonProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n      headerButtons={\n        <Button variant="outline" colorScheme="green">\n          Custom Button\n        </Button>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"footerbuttons"},(0,t.yg)("inlineCode",{parentName:"h3"},"footerButtons")),(0,t.yg)(h,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,t.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,t.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,t.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Button, HStack } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <HStack borderColor="blue" borderStyle="dashed" borderWidth="2px" p="2">\n          {defaultButtons}\n          <Button colorScheme="red" variant="solid">\n            Custom Button\n          </Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h3",{id:"footerbuttonprops"},(0,t.yg)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,t.yg)(h,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,t.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,t.yg)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { ShowButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Show, Button } from "@pankod/refine-chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          float: "right",\n          borderColor: "blue",\n          borderStyle: "dashed",\n          borderWidth: "2px",\n          padding: "8px",\n        },\n      }}\n      // highlight-end\n      footerButtons={<Button colorScheme="green">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,t.yg)("h2",{id:"api-reference"},"API Reference"),(0,t.yg)("h3",{id:"props"},"Props"),(0,t.yg)(h,{id:"props",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,t.yg)(m,{module:"@pankod/refine-chakra-ui/Show","title-default":"<Title order={3}>Show {resource.name}</Title>",mdxType:"PropsTable"})))}y.isMDXComponent=!0}}]);