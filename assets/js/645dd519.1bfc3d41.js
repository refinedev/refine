"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3129],{88123:(e,n,t)=>{t.d(n,{O:()=>m});var r=t(68835),o=t(37953),a=t(86743),i=t(59451),s=t(62201);const l=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function d(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){d(e,n,t[n])}))}return e}function u(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const m=e=>"nextjs"===(null==e?void 0:e.template)?o.createElement(f,e):o.createElement(g,e),g=e=>{var n,t,d,m,g,h,{startRoute:f,showNavigator:v,showLineNumbers:b,showOpenInCodeSandbox:w,initialPercentage:P=50,dependencies:R,showReadOnly:A,options:T={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.A)("h-full","!gap-0"),"sp-console-header-button":(0,r.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:C="react-ts",customSetup:x,files:I,previewOnly:N,layout:O,height:E=420,wrapperClassName:S,className:F,showFiles:k=!1,showConsole:L=!1,hidePreview:D=!1}=e,B=p(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[U,j]=o.useState(!1);o.useEffect((()=>{j(!0)}),[]);const{colorMode:W}=(0,s.G)();var M,z;null!=T||(T={}),null!==(M=(g=T).resizablePanels)&&void 0!==M||(g.resizablePanels=!0),null!==(z=(h=T).editorWidthPercentage)&&void 0!==z||(h.editorWidthPercentage=null!=P?P:50);const q={showTabs:T.showTabs,showLineNumbers:T.showLineNumbers,showInlineErrors:T.showInlineErrors,wrapContent:T.wrapContent,closableTabs:T.closableTabs,initMode:T.initMode,extensions:null===(n=T.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=T.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:T.readOnly,showReadOnly:null!=A?A:T.showReadOnly,additionalLanguages:null===(d=T.codeEditor)||void 0===d?void 0:d.additionalLanguages},_={activeFile:T.activeFile,visibleFiles:T.visibleFiles,recompileMode:T.recompileMode,recompileDelay:T.recompileDelay,autorun:T.autorun,autoReload:T.autoReload,bundlerURL:T.bundlerURL,startRoute:T.startRoute,skipEval:T.skipEval,fileResolver:T.fileResolver,initMode:T.initMode,initModeObserverOptions:T.initModeObserverOptions,externalResources:T.externalResources,logLevel:T.logLevel,classes:T.classes},[$,V]=o.useState(!1),{onHandleMouseDown:H,horizontalSize:G}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);t(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:T.editorWidthPercentage}),X=!N&&!(null==O?void 0:O.includes("col"));var J,K,Y,Z,Q;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.A)("pb-6","refine-sandpack-wrapper",S)},o.createElement("div",{className:(0,r.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",F)},o.createElement(i.l5,c({key:`${C}-${W}-${U}`,customSetup:c({dependencies:R},x),files:I,options:u(c({},_),{classes:u(c({},_.classes),{"sp-layout":(0,r.A)(null===(m=_.classes)||void 0===m?void 0:m["sp-layout"],L&&"!rounded-bl-none !rounded-br-none")})}),template:C,theme:"light"===W?u(c({},a.Zw),{colors:u(c({},a.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):u(c({},a.hc),{colors:u(c({},a.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},B),o.createElement(i.am,{className:(0,r.A)("col"===O&&"!flex-col","col-reverse"===O&&"!flex-col-reverse")},k&&o.createElement(i.Lm,{autoHiddenFiles:!0,style:{height:null!==(J=T.editorHeight)&&void 0!==J?J:E}}),!N&&o.createElement(i.cW,u(c({},q),{showLineNumbers:b,closableTabs:k,initMode:"lazy",style:u(c({height:null!==(K=T.editorHeight)&&void 0!==K?K:E},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:G,flexShrink:G,flexBasis:0}),{overflow:"hidden"})})),X?o.createElement(l,{onMouseDown:H,horizontalSize:G}):null,D?null:o.createElement(o.Fragment,null,o.createElement(i.G5,{showOpenInCodeSandbox:w,startRoute:f,showNavigator:null!=v?v:T.showNavigator,showRefreshButton:T.showRefreshButton,style:u(c({display:D?"none":"flex"},(null==O?void 0:O.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-G,flexShrink:100-G,flexBasis:0,width:N?"100%":100-G+"%"}),{gap:0,height:null!==(Y=T.editorHeight)&&void 0!==Y?Y:E})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.A)("w-12","h-12","rounded-full")}))))),L?o.createElement(i.X2,{style:u(c({height:200},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:G,flexShrink:G,flexBasis:0}),{overflow:"hidden"})}):null)),o.createElement("div",{className:(0,r.A)(""),style:{height:Number(null!==(Z=T.editorHeight)&&void 0!==Z?Z:E)+2}}),o.createElement("div",{className:(0,r.A)((null==O?void 0:O.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Q=T.editorHeight)&&void 0!==Q?Q:E)+2}}),o.createElement("div",{className:(0,r.A)(L?"block":"hidden","h-[200px]")})),o.createElement(y,{files:I,dependencies:R}))},y=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("h6",null,"Code Example"),t.map((n=>o.createElement("div",{"data-filename":n,key:n},o.createElement("pre",null,`// file: ${n} \n`,h(e[n]))))))},h=e=>"string"==typeof e?e:"code"in e?e.code:"",f=e=>{const n={hidePreview:!0,showConsole:!1};return o.createElement(g,u(c({},n,e),{template:"react-ts"}))}},83458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>g,default:()=>x,frontMatter:()=>m,metadata:()=>y,toc:()=>f});var r=t(37953),o=t(58860),a=t(88123);function i(){return r.createElement(a.O,{hidePreview:!0,showFiles:!0,showOpenInCodeSandbox:!1,template:"react-ts",dependencies:{"@refinedev/core":"latest","@refinedev/appwrite":"latest"},files:{"src/appwrite.ts":{active:!0,code:s},"src/auth-provider.ts":{code:l},"App.tsx":{code:d}}})}const s='\nimport { Appwrite, Account, Storage } from "@refinedev/appwrite";\n\nconst APPWRITE_URL = "<APPWRITE_ENDPOINT>";\nconst APPWRITE_PROJECT = "<APPWRITE_PROJECT_ID>";\n\n/**\n * We\'ll use the `appwriteClient` instance\n * in our `dataProvider`, `liveProvider` and `authProvider`.\n */\nconst appwriteClient = new Appwrite();\n\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\n// for authentication\nconst account = new Account(appwriteClient);\n// for file upload\nconst storage = new Storage(appwriteClient);\n\nexport { appwriteClient, account, storage };\n'.trim(),l='\nimport { AuthProvider } from "@refinedev/core";\n\nimport { account } from "./appwriteClient";\n\n/**\n * We\'ll use the `account` instance to handle authentication.\n * This will be in sync with our appwrite client.\n */\n\nconst authProvider: AuthProvider = {\n  login: async ({ email, password }) => {\n    try {\n      await account.createEmailSession(email, password);\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    } catch (e) {\n      const { type, message, code } = e as AppwriteException;\n      return {\n        success: false,\n        error: {\n          message,\n          name: `${code} - ${type}`,\n        },\n      };\n    }\n  },\n  logout: async () => {\n    try {\n      await account.deleteSession("current");\n    } catch (error: any) {\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  check: async () => {\n    try {\n      const session = await account.get();\n\n      if (session) {\n        return {\n          authenticated: true,\n        };\n      }\n    } catch (error: any) {\n      return {\n        authenticated: false,\n        error: error,\n        logout: true,\n        redirectTo: "/login",\n      };\n    }\n\n    return {\n      authenticated: false,\n      error: {\n        message: "Check failed",\n        name: "Session not found",\n      },\n      logout: true,\n      redirectTo: "/login",\n    };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => {\n    const user = await account.get();\n\n    if (user) {\n      return user;\n    }\n\n    return null;\n  },\n};\n'.trim(),d='\nimport { Refine } from "@refinedev/core";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\n\nimport { appwriteClient, account } from "src/appwrite";\nimport authProvider from "src/auth-provider";\n\nconst App: React.FC = () => {\n  return (\n      <Refine\n        // `appwriteClient` is passed to the `dataProvider` and `liveProvider`\n        dataProvider={dataProvider(appwriteClient, {\n          databaseId: "default",\n        })}\n        // If you want to use the realtime features of Refine, you can pass the `liveProvider` prop.\n        liveProvider={liveProvider(appwriteClient, {\n          databaseId: "default",\n        })}\n        options={{ liveMode: "auto" }}\n        authProvider={authProvider}\n      >\n        {/* ... */}\n      </Refine>\n  );\n};\n'.trim();function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const m={title:"Appwrite",source:"https://github.com/refinedev/refine/tree/main/packages/appwrite",swizzle:!0},g=void 0,y={unversionedId:"data/packages/appwrite/index",id:"data/packages/appwrite/index",title:"Appwrite",description:"Refine provides a data provider for Appwrite, a backend as a service platform, to build CRUD applications.",source:"@site/docs/data/packages/appwrite/index.md",sourceDirName:"data/packages/appwrite",slug:"/data/packages/appwrite/",permalink:"/docs/data/packages/appwrite/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/data/packages/appwrite/index.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756449505,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{title:"Appwrite",source:"https://github.com/refinedev/refine/tree/main/packages/appwrite",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Airtable",permalink:"/docs/data/packages/airtable/"},next:{title:"GraphQL",permalink:"/docs/data/packages/graphql/"}},h={},f=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Create Collections",id:"create-collections",level:2},{value:"Permissions",id:"permissions",level:3},{value:"Login page\u200b",id:"login-page",level:2},{value:"List Page",id:"list-page",level:2},{value:"Create Page",id:"create-page",level:2},{value:"Edit Page",id:"edit-page",level:2},{value:"Example",id:"example",level:2}],v=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},b=v("DocThumbsUpDownFeedbackWidget"),w=v("InstallPackagesCommand"),P=v("Tabs"),R=v("TabItem"),A=v("CodeSandboxExample"),T={toc:f},C="wrapper";function x(e){var{components:n}=e,t=p(e,["components"]);return(0,o.yg)(C,u(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){c(e,n,t[n])}))}return e}({},T,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { Appwrite } from "@refinedev/appwrite";\nconst APPWRITE_URL = "https://refine.appwrite.org/v1";\nconst APPWRITE_PROJECT = "61c4368b4e349";\nconst appwriteClient = new Appwrite();\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\nwindow.__refineAuthStatus = false;\n\nconst authProvider = {\n  login: () => {\n    window.__refineAuthStatus = true;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    window.__refineAuthStatus = false;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: async () => {\n    return {\n      authenticated: window.__refineAuthStatus ? true : false,\n      redirectTo: window.__refineAuthStatus ? undefined : "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => null,\n};\n\nimport {\n  useMany as CoreUseMany,\n  useShow as RefineCoreUseShow,\n  useOne as RefineCoreUseOne,\n} from "@refinedev/core";\nimport {\n  List as RefineAntdList,\n  TextField as RefineAntdTextField,\n  useTable as RefineAntdUseTable,\n  EditButton as RefineAntdEditButton,\n  ShowButton as RefineAntdShowButton,\n  getDefaultSortOrder as RefineAntdGetDefaultSortOrder,\n  useForm as RefineAntdUseForm,\n  useSelect as RefineAntdUseSelect,\n  Create as RefineAntdCreate,\n  Show as RefineAntdShow,\n} from "@refinedev/antd";\nimport {\n  Table as AntdTable,\n  Space as AntdSpace,\n  Form as AntdForm,\n  Select as AntdSelect,\n  Input as AntdInput,\n  Typography as AntdTypography,\n} from "antd";\n\nconst PostList: React.FC = () => {\n  const { result, tableProps, sorter } = RefineAntdUseTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "$id",\n          order: "asc",\n        },\n      ],\n    },\n  });\n\n  const categoryIds = result?.data?.map((item) => item.categoryId) ?? [];\n  const {\n    result,\n    query: { isLoading },\n  } = CoreUseMany<ICategory>({\n    resource: "61c43adc284ac",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <RefineAntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column\n          dataIndex="id"\n          title="ID"\n          sorter\n          defaultSortOrder={RefineAntdGetDefaultSortOrder("id", sorter)}\n        />\n        <AntdTable.Column dataIndex="title" title="Title" sorter />\n        <AntdTable.Column\n          dataIndex="categoryId"\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <RefineAntdTextField value="Loading..." />;\n            }\n\n            return (\n              <RefineAntdTextField\n                value={result?.data.find((item) => item.id === value)?.title}\n              />\n            );\n          }}\n        />\n        <AntdTable.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <RefineAntdEditButton\n                hideText\n                size="small"\n                recordItemId={record.id}\n              />\n              <RefineAntdShowButton\n                hideText\n                size="small"\n                recordItemId={record.id}\n              />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </RefineAntdList>\n  );\n};\n\nconst PostCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = RefineAntdUseForm<IPost>();\n\n  const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <RefineAntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdSelect {...categorySelectProps} />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput.TextArea />\n        </AntdForm.Item>\n      </AntdForm>\n    </RefineAntdCreate>\n  );\n};\n\nconst PostEdit: React.FC = () => {\n  const { formProps, saveButtonProps, query } = RefineAntdUseForm<IPost>();\n\n  const postData = query?.data?.data;\n  const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>({\n    defaultValue: postData?.categoryId,\n    resource: "61c43adc284ac",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <RefineAntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdSelect {...categorySelectProps} />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput.TextArea />\n        </AntdForm.Item>\n      </AntdForm>\n    </RefineAntdCreate>\n  );\n};\n\nconst PostShow: React.FC = () => {\n  const { query, result: post } = RefineCoreUseShow<IPost>();\n  const { isLoading } = query;\n\n  const {\n    result: category,\n    query: { isLoading: categoryIsLoading },\n  } = RefineCoreUseOne<ICategory>({\n    resource: "categories",\n    id: post?.category?.id || "",\n    queryOptions: {\n      enabled: !!post,\n    },\n  });\n\n  return (\n    <RefineAntdShow isLoading={isLoading}>\n      <AntdTypography.Title level={5}>Id</AntdTypography.Title>\n      <AntdTypography.Text>{post?.id}</AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>\n        AntdTypography.Title\n      </AntdTypography.Title>\n      <AntdTypography.Text>{post?.title}</AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>Category</AntdTypography.Title>\n      <AntdTypography.Text>\n        {categoryIsLoading ? "Loading..." : category?.title}\n      </AntdTypography.Text>\n\n      <AntdTypography.Title level={5}>Content</AntdTypography.Title>\n      <AntdTypography.Text>{post?.content}</AntdTypography.Text>\n    </RefineAntdShow>\n  );\n};\n')),(0,o.yg)("p",null,"Refine provides a data provider for ",(0,o.yg)("a",{parentName:"p",href:"https://appwrite.io/"},"Appwrite"),", a backend as a service platform, to build CRUD applications."),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"@refinedev/appwrite")," requires Appwrite version >= 1.0"),(0,o.yg)("li",{parentName:"ul"},"To learn more about data fetching in Refine, check out the ",(0,o.yg)("a",{parentName:"li",href:"/docs/guides-concepts/data-fetching"},"Data Fetching")," guide."),(0,o.yg)("li",{parentName:"ul"},"To learn more about realtime features of Refine, check out the ",(0,o.yg)("a",{parentName:"li",href:"/docs/guides-concepts/realtime"},"Realtime")," guide."),(0,o.yg)("li",{parentName:"ul"},"Example below uses ",(0,o.yg)("inlineCode",{parentName:"li"},"@refinedev/antd")," as the UI library but Refine is UI agnostic and you can use any UI library you want."))),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)(b,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(w,{args:"@refinedev/appwrite",mdxType:"InstallPackagesCommand"})),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)(b,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"First, we'll create our Appwrite client and use it in our ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProvider"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"liveProvider"),"."),(0,o.yg)(i,{mdxType:"Usage"})),(0,o.yg)("h2",{id:"create-collections"},"Create Collections"),(0,o.yg)(b,{id:"create-collections",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"We created two collections on Appwrite Database as ",(0,o.yg)("inlineCode",{parentName:"p"},"posts")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"categories")," and added a relation between them."),(0,o.yg)(P,{mdxType:"Tabs"},(0,o.yg)(R,{value:"category",label:"Category Collection",mdxType:"TabItem"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Category Collection"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Title: text")),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/category.png",alt:"category"})),(0,o.yg)(R,{value:"post",label:"Post Collection",mdxType:"TabItem"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Post Collection"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Title: text"),(0,o.yg)("li",{parentName:"ul"},"CategoryId: text"),(0,o.yg)("li",{parentName:"ul"},"Content: text"),(0,o.yg)("li",{parentName:"ul"},"Images: wildcard")),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/posts.png",alt:"posts"})),(0,o.yg)(R,{value:"auth",label:"Authentication",mdxType:"TabItem"},(0,o.yg)("p",null,"Then we need to create an appwrite user to be able to login with Refine."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/user.png",alt:"user"})))),(0,o.yg)("h3",{id:"permissions"},"Permissions"),(0,o.yg)(b,{id:"permissions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In order to list posts and categories, you need to give read and write permission by Appwrite."),(0,o.yg)("p",null,"Example: ",(0,o.yg)("inlineCode",{parentName:"p"},"Post Collection Permissions")),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/permission.png",alt:"permission"}),(0,o.yg)("br",null),(0,o.yg)("p",null,'We indicate that the read and write permission is open to everyone by giving the "',"*",'" parameter.'),(0,o.yg)("admonition",{title:"Related resources",type:"simple"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"Check out Appwrite's ",(0,o.yg)("a",{parentName:"li",href:"https://appwrite.io/docs/permissions"},"Permissions")," documentation for detailed information."),(0,o.yg)("li",{parentName:"ul"},"Check out how you can use permissions when ",(0,o.yg)("a",{parentName:"li",href:"#create-page"},"creating posts")," with Refine")))),(0,o.yg)("h2",{id:"login-page"},"Login page\u200b"),(0,o.yg)(b,{id:"login-page",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Before creating CRUD pages, let's create a login page. For this we use the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/auth-page"},(0,o.yg)("inlineCode",{parentName:"a"},"AuthPage"))," component. This component returns ready-to-use authentication pages for ",(0,o.yg)("inlineCode",{parentName:"p"},"login"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"register"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"forgot password")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"update password")," actions."),(0,o.yg)("p",null,"Below we see its implementation in the ",(0,o.yg)("inlineCode",{parentName:"p"},"App.tsx")," file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:5173",live:!0,hideCode:!0,url:"http://localhost:5173"},'setInitialRoutes(["/"]);\n// visible-block-start\n// src/App.tsx\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayout,\n  RefineThemes,\n  useNotificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={authProvider}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={useNotificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route\n                index\n                element={<NavigateToResource resource="61c43ad33b857" />}\n              />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            {/* highlight-start */}\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n            {/* highlight-end */}\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.yg)("p",null,"Now we can login with the user we created by Appwrite. We can then list, create and edit posts.")),(0,o.yg)("h2",{id:"list-page"},"List Page"),(0,o.yg)(b,{id:"list-page",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"When defining your resources, ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," must match the Appwrite Collection ID. You can change the label with the resource meta."),(0,o.yg)("pre",{parentName:"admonition"},(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'export const App = () => (\n  <Refine\n    // ...\n    resources={[\n      {\n        //highlight-start\n        name: "61bc3660648a6",\n        //highlight-end\n        meta: {\n          //highlight-start\n          label: "Post",\n          //highlight-end\n        },\n      },\n    ]}\n  />\n);\n'))),(0,o.yg)("p",null,"Now that we've created our collections, we can create and list documents. Let's list the posts and categories that we have created by Appwrite with Refine."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show Code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useMany } from "@refinedev/core";\nimport {\n  List,\n  TextField,\n  useTable,\n  EditButton,\n  ShowButton,\n  getDefaultSortOrder,\n} from "@refinedev/antd";\nimport { Table, Space } from "antd";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostsList: React.FC = () => {\n  const { result, sorter } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "$id",\n          order: "asc",\n        },\n      ],\n    },\n  });\n\n  const categoryIds = result?.data?.map((item) => item.categoryId) ?? [];\n  const {\n    result: categoryData,\n    query: { isLoading: categoryIsLoading },\n  } = useMany<ICategory>({\n    resource: "61bc4afa9ee2c",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column\n          dataIndex="id"\n          title="ID"\n          sorter\n          defaultSortOrder={getDefaultSortOrder("id", sorter)}\n        />\n        <Table.Column dataIndex="title" title="Title" sorter />\n        <Table.Column\n          dataIndex="categoryId"\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return (\n              <TextField\n                value={data?.data.find((item) => item.id === value)?.title}\n              />\n            );\n          }}\n        />\n        <Table.Column<IPost>\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n')))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayout,\n  RefineThemes,\n  useNotificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={useNotificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route\n                index\n                element={<NavigateToResource resource="61c43ad33b857" />}\n              />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n'))),(0,o.yg)("h2",{id:"create-page"},"Create Page"),(0,o.yg)(b,{id:"create-page",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"We can now create posts and set categories from our Refine UI."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show Code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\n\nimport { Create, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item\n            name="images"\n            valuePropName="fileList"\n            normalize={normalizeFile}\n            noStyle\n          >\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                try {\n                  const rcFile = file as RcFile;\n\n                  const { $id } = await storage.createFile(\n                    "default",\n                    rcFile.name,\n                    rcFile,\n                  );\n\n                  const url = storage.getFileView("default", $id);\n\n                  onSuccess?.({ url }, new XMLHttpRequest());\n                } catch (error) {\n                  onError?.(new Error("Upload Error"));\n                }\n              }}\n            >\n              <p className="ant-upload-text">\n                Drag &amp; drop a file in this area\n              </p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n')))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/posts/create"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayout,\n  RefineThemes,\n  useNotificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={useNotificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route\n                index\n                element={<NavigateToResource resource="61c43ad33b857" />}\n              />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"By default, Read Access and Write Access are public when creating documents via Refine. If you want to restrict ",(0,o.yg)("a",{parentName:"p",href:"https://appwrite.io/docs/permissions#permission-types"},"permissions")," and only allow specific users, you need to specify it in meta."),(0,o.yg)("pre",{parentName:"admonition"},(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { Permission, Role } from "@refinedev/appwrite";\nconst { formProps, saveButtonProps } = useForm<IPost>({\n  meta: {\n    writePermissions: [Permission.read(Role.any())],\n    readPermissions: [Permission.read(Role.any())],\n  },\n});\n')))),(0,o.yg)("h2",{id:"edit-page"},"Edit Page"),(0,o.yg)(b,{id:"edit-page",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can edit the posts and categories we have created update your data."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show Code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nimport { Edit, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsEdit: React.FC = () => {\n  const { formProps, saveButtonProps, query } = useForm<IPost>();\n\n  const postData = query?.data?.data;\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: "61bc4afa9ee2c",\n    defaultValue: postData?.categoryId,\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Category"\n          name="categoryId"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...categorySelectProps} />\n        </Form.Item>\n        <Form.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <MDEditor data-color-mode="light" />\n        </Form.Item>\n        <Form.Item label="Images">\n          <Form.Item\n            name="images"\n            valuePropName="fileList"\n            normalize={normalizeFile}\n            noStyle\n          >\n            <Upload.Dragger\n              name="file"\n              listType="picture"\n              multiple\n              customRequest={async ({ file, onError, onSuccess }) => {\n                try {\n                  const rcFile = file as RcFile;\n\n                  const { $id } = await storage.createFile(\n                    "default",\n                    rcFile.name,\n                    rcFile,\n                  );\n\n                  const url = storage.getFileView("default", $id);\n\n                  onSuccess?.({ url }, new XMLHttpRequest());\n                } catch (error) {\n                  onError?.(new Error("Upload Error"));\n                }\n              }}\n            >\n              <p className="ant-upload-text">\n                Drag &amp; drop a file in this area\n              </p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Edit>\n  );\n};\n')))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173",live:!0,previewOnly:!0,url:"http://localhost:5173"},'setInitialRoutes(["/posts/edit/61c4697ab9ff9"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n  ThemedLayout,\n  RefineThemes,\n  useNotificationProvider,\n  List,\n  EditButton,\n  ShowButton,\n  useTable,\n  AuthPage,\n  ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          dataProvider={dataProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          liveProvider={liveProvider(appwriteClient, {\n            databaseId: "default",\n          })}\n          authProvider={{\n            ...authProvider,\n            check: async () => ({\n              authenticated: true,\n            }),\n          }}\n          routerProvider={routerProvider}\n          resources={[\n            {\n              name: "61c43ad33b857",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                label: "Post",\n              },\n            },\n          ]}\n          notificationProvider={useNotificationProvider}\n          options={{\n            liveMode: "auto",\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route\n                index\n                element={<NavigateToResource resource="61c43ad33b857" />}\n              />\n\n              <Route path="/posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n                <Route path="show/:id" element={<PostShow />} />\n              </Route>\n            </Route>\n\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="61c43ad33b857" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={\n                  <AuthPage\n                    type="login"\n                    formProps={{\n                      initialValues: {\n                        email: "demo@refine.dev",\n                        password: "demodemo",\n                      },\n                    }}\n                  />\n                }\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\nrender(<App />);\n'))),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)(b,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("admonition",{type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"Username: ",(0,o.yg)("inlineCode",{parentName:"p"},"demo@refine.dev")),(0,o.yg)("p",{parentName:"admonition"},"Password: ",(0,o.yg)("inlineCode",{parentName:"p"},"demodemo"))),(0,o.yg)(A,{path:"data-provider-appwrite",mdxType:"CodeSandboxExample"})))}x.isMDXComponent=!0}}]);