"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[78773],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var o=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?o.createElement(h,a(a({ref:n},d),{},{components:t})):o.createElement(h,a({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},68685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>p});t(37953);var o=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={id:"sider",title:"Sider",swizzle:!0},l=void 0,c={unversionedId:"api-reference/chakra-ui/customization/sider",id:"version-3.xx.xx/api-reference/chakra-ui/customization/sider",title:"Sider",description:"There are 2 ways that will allow you to customize your `` component if you need it.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/customization/sider.md",sourceDirName:"api-reference/chakra-ui/customization",slug:"/api-reference/chakra-ui/customization/sider",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/customization/sider",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/customization/sider.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1709801030,formattedLastUpdatedAt:"Mar 7, 2024",frontMatter:{id:"sider",title:"Sider",swizzle:!0},sidebar:"someSidebar",previous:{title:"Layout",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/customization/layout"},next:{title:"Mantine API",permalink:"/docs/3.xx.xx/api-reference/mantine"}},d={},p=[{value:"Customize Sider by Using <code>render</code> property",id:"customize-sider-by-using-render-property",level:2},{value:"Recreating the Default Sider Menu",id:"recreating-the-default-sider-menu",level:2}],u=(m="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",e)});var m;const h={toc:p},f="wrapper";function g(e){var{components:n}=e,t=a(e,["components"]);return(0,o.yg)(f,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},h,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"There are 2 ways that will allow you to customize your ",(0,o.yg)("inlineCode",{parentName:"p"},"<Sider />")," component if you need it."),(0,o.yg)("p",null,"You can access the ",(0,o.yg)("inlineCode",{parentName:"p"},"logout"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"dashboard"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"items")," elements and ",(0,o.yg)("inlineCode",{parentName:"p"},"collapsed")," state that we use in our default ",(0,o.yg)("inlineCode",{parentName:"p"},"Sider")," component by using ",(0,o.yg)("inlineCode",{parentName:"p"},"render")," properties. Customize it to your needs or you can create a custom ",(0,o.yg)("inlineCode",{parentName:"p"},"<Sider />")," component and use it either by passing it to ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},(0,o.yg)("inlineCode",{parentName:"a"},"<Refine />"))," or using a ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/customization/layout"},"Custom Layout"),"."),(0,o.yg)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/cli"},(0,o.yg)("strong",{parentName:"a"},"refine CLI")))),(0,o.yg)("h2",{id:"customize-sider-by-using-render-property"},"Customize Sider by Using ",(0,o.yg)("inlineCode",{parentName:"h2"},"render")," property"),(0,o.yg)(u,{id:"customize-sider-by-using-render-property",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=420px",live:!0,url:"http://localhost:3000",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\nimport { Text, Code, Center, VStack } from "@pankod/refine-chakra-ui";\n\nconst DummyListPage = () => {\n  const params = RefineCore.useRouterContext().useParams();\n\n  return (\n    <RefineChakra.List>\n      <Text as="i" color="dimmed" fontSize="sm">\n        URL Parameters:\n      </Text>\n      <br />\n      <Code>{JSON.stringify(params)}</Code>\n    </RefineChakra.List>\n  );\n};\n\nconst CustomPage = () => {\n  const history = RefineCore.useRouterContext().useHistory();\n\n  return (\n    <VStack>\n      <Text mt="2" as="i" color="dimmed" fontSize="sm">\n        Custom Page\n      </Text>\n      <Center>\n        <RefineChakra.Button\n          size="sm"\n          variant="outline"\n          onClick={() => history.goBack()}\n        >\n          Go back\n        </RefineChakra.Button>\n      </Center>\n    </VStack>\n  );\n};\n\nconst IconMoodSmile = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-mood-smile"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <circle cx={12} cy={12} r={9}></circle>\n    <line x1={9} y1={10} x2="9.01" y2={10}></line>\n    <line x1={15} y1={10} x2="15.01" y2={10}></line>\n    <path d="M9.5 15a3.5 3.5 0 0 0 5 0"></path>\n  </svg>\n);\n\nconst IconList = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-list"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <line x1={9} y1={6} x2={20} y2={6}></line>\n    <line x1={9} y1={12} x2={20} y2={12}></line>\n    <line x1={9} y1={18} x2={20} y2={18}></line>\n    <line x1={5} y1={6} x2={5} y2="6.01"></line>\n    <line x1={5} y1={12} x2={5} y2="12.01"></line>\n    <line x1={5} y1={18} x2={5} y2="18.01"></line>\n  </svg>\n);\n\nconst IconCategory = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-category"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <path d="M4 4h6v6h-6z"></path>\n    <path d="M14 4h6v6h-6z"></path>\n    <path d="M4 14h6v6h-6z"></path>\n    <circle cx={17} cy={17} r={3}></circle>\n  </svg>\n);\n\nconst IconUsers = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-users"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <circle cx={9} cy={7} r={4}></circle>\n    <path d="M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path>\n    <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>\n    <path d="M21 21v-2a4 4 0 0 0 -3 -3.85"></path>\n  </svg>\n);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\n//highlight-next-line\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport {\n  ChakraProvider,\n  ErrorComponent,\n  Layout,\n  ReadyPage,\n  useNotificationProvider,\n  refineTheme,\n  // highlight-start\n  Sider,\n  Button,\n  // highlight-end\n} from "@pankod/refine-chakra-ui";\nimport {\n  IconList,\n  IconCategory,\n  IconUsers,\n  // highlight-next-line\n  IconMoodSmile,\n} from "@tabler/icons";\n\n//highlight-next-line\nconst { Link } = routerProvider;\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={refineTheme}>\n      <Refine\n        routerProvider={{\n          ...routerProvider,\n          routes: [{ path: "/custom-page", element: <CustomPage /> }],\n        }}\n        notificationProvider={notificationProvider()}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        Layout={Layout}\n        // highlight-start\n        Sider={() => (\n          <Sider\n            render={({ items }) => {\n              return (\n                <>\n                  <Button\n                    as={Link}\n                    to="/custom-page"\n                    variant="link"\n                    color="white"\n                    fontWeight="normal"\n                    justifyContent="flex-start"\n                    pl="6"\n                    py="2"\n                    leftIcon={<IconMoodSmile />}\n                    _active={{\n                      color: "none",\n                      fontWeight: "bold",\n                    }}\n                    _hover={{ textDecoration: "none" }}\n                  >\n                    Custom Element\n                  </Button>\n                  {items}\n                </>\n              );\n            }}\n          />\n        )}\n        // highlight-end\n        resources={[\n          {\n            name: "posts",\n            list: DummyListPage,\n          },\n          {\n            name: "categories",\n            list: DummyListPage,\n            icon: <IconCategory />,\n          },\n          {\n            name: "users",\n            list: DummyListPage,\n            icon: <IconUsers />,\n          },\n        ]}\n      />\n    </ChakraProvider>\n  );\n};\n// visible-block-end\nrender(<App />);\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Button")," component gives you an implemention ready component compatible with Sider menu items. If you want to add anything else to your ",(0,o.yg)("inlineCode",{parentName:"p"},"Sider")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"collapsed")," state to manage your component.")),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/v3/packages/chakra-ui/src/components/layout/sider/index.tsx#L68-L155"},"Refer to how the sider items are used in the default ",(0,o.yg)("inlineCode",{parentName:"a"},"Sider")," component. ","\u2192")))),(0,o.yg)("h2",{id:"recreating-the-default-sider-menu"},"Recreating the Default Sider Menu"),(0,o.yg)(u,{id:"recreating-the-default-sider-menu",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can also customize your Sider component by creating the ",(0,o.yg)("inlineCode",{parentName:"p"},"CustomSider")," component."),(0,o.yg)("p",null,"When you examine the code of the example below, you will see the same code that we used for the ",(0,o.yg)("inlineCode",{parentName:"p"},"default sider")," component. You can create a customized ",(0,o.yg)("inlineCode",{parentName:"p"},"CustomSider")," component for yourself by following this code:"),(0,o.yg)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.yg)("p",{parentName:"admonition"},"You can also run the ",(0,o.yg)("inlineCode",{parentName:"p"},"swizzle")," command to export the source code of the default sider component. Refer to ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/cli"},(0,o.yg)("strong",{parentName:"a"},"refine CLI"))," for more information.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CustomSider.tsx"',title:'"CustomSider.tsx"'},'import {\n  CanAccess,\n  ITreeMenu,\n  useIsExistAuthentication,\n  useLogout,\n  useMenu,\n  useRefineContext,\n  useRouterContext,\n  useTitle,\n  useTranslate,\n} from "@pankod/refine-core";\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Drawer,\n  DrawerContent,\n  DrawerOverlay,\n  IconButton,\n  Tooltip,\n  TooltipProps,\n  VStack,\n  Sider as DefaultSider,\n} from "@pankod/refine-chakra-ui";\nimport {\n  IconList,\n  IconChevronRight,\n  IconChevronLeft,\n  IconDashboard,\n  IconLogout,\n  IconMenu2,\n} from "@tabler/icons";\nimport { RefineLayoutSiderProps } from "@pankod/refine-ui-types";\n\nconst defaultNavIcon = <IconList size={20} />;\n\nexport const Sider: React.FC<RefineLayoutSiderProps> = ({ render }) => {\n  const [collapsed, setCollapsed] = useState(false);\n  const [opened, setOpened] = useState(false);\n\n  const { Link } = useRouterContext();\n  const { menuItems, selectedKey, defaultOpenKeys } = useMenu();\n  const Title = useTitle();\n  const isExistAuthentication = useIsExistAuthentication();\n  const t = useTranslate();\n  const { hasDashboard } = useRefineContext();\n  const { mutate: mutateLogout } = useLogout();\n\n  const RenderToTitle = Title ?? React.Fragment;\n\n  const siderWidth = () => {\n    if (collapsed) return "80px";\n    return "200px";\n  };\n\n  const commonTooltipProps: Omit<TooltipProps, "children"> = {\n    placement: "right",\n    hasArrow: true,\n    isDisabled: !collapsed || opened,\n  };\n\n  const renderTreeView = (tree: ITreeMenu[]) => {\n    return tree.map((item) => {\n      const { label, route, name, icon, children } = item;\n\n      const isSelected = route === selectedKey;\n      const isParent = children.length > 0;\n\n      const linkProps = !isParent\n        ? {\n            as: Link,\n            to: route,\n          }\n        : undefined;\n\n      return (\n        <CanAccess\n          key={route}\n          resource={name.toLowerCase()}\n          action="list"\n          params={{\n            resource: item,\n          }}\n        >\n          <Accordion\n            defaultIndex={defaultOpenKeys.includes(route || "") ? 0 : -1}\n            width="full"\n            allowToggle\n          >\n            <AccordionItem border="none">\n              <Tooltip label={label} {...commonTooltipProps}>\n                <AccordionButton\n                  pl={6}\n                  pr={4}\n                  pt={3}\n                  pb={3}\n                  as="div"\n                  width="full"\n                >\n                  <Button\n                    width="full"\n                    variant="link"\n                    color="white"\n                    fontWeight="normal"\n                    leftIcon={icon ?? (defaultNavIcon as any)}\n                    rightIcon={isParent ? <AccordionIcon /> : undefined}\n                    _active={{\n                      color: "none",\n                      fontWeight: isParent ? "normal" : "bold",\n                    }}\n                    _hover={{ textDecoration: "none" }}\n                    isActive={isSelected}\n                    {...linkProps}\n                  >\n                    {(!collapsed || opened) && (\n                      <Box flexGrow={1} textAlign="left">\n                        {label}\n                      </Box>\n                    )}\n                  </Button>\n                </AccordionButton>\n              </Tooltip>\n\n              {isParent && (\n                <AccordionPanel p={0} pl={collapsed && !opened ? 0 : 4}>\n                  <Accordion width="full" allowToggle>\n                    {renderTreeView(children)}\n                  </Accordion>\n                </AccordionPanel>\n              )}\n            </AccordionItem>\n          </Accordion>\n        </CanAccess>\n      );\n    });\n  };\n\n  const items = renderTreeView(menuItems);\n\n  const dashboard = hasDashboard ? (\n    <CanAccess resource="dashboard" action="list">\n      <Tooltip\n        label={t("dashboard.title", "Dashboard")}\n        {...commonTooltipProps}\n      >\n        <Button\n          width="full"\n          justifyContent={collapsed && !opened ? "center" : "flex-start"}\n          pl={6}\n          pr={4}\n          pt={3}\n          pb={3}\n          fontWeight="normal"\n          leftIcon={<IconDashboard size={20} />}\n          variant="link"\n          color="white"\n          isActive={selectedKey === "/"}\n          _active={{ color: "none", fontWeight: "bold" }}\n          _hover={{ textDecoration: "none" }}\n          as={Link}\n          to="/"\n        >\n          {(!collapsed || opened) && t("dashboard.title", "Dashboard")}\n        </Button>\n      </Tooltip>\n    </CanAccess>\n  ) : null;\n\n  const logout = isExistAuthentication && (\n    <Tooltip label={t("buttons.logout", "Logout")} {...commonTooltipProps}>\n      <Button\n        width="full"\n        justifyContent={collapsed && !opened ? "center" : "flex-start"}\n        pl={6}\n        pr={4}\n        pt={3}\n        pb={3}\n        fontWeight="normal"\n        leftIcon={<IconLogout size={20} />}\n        variant="link"\n        _active={{ color: "none" }}\n        _hover={{ textDecoration: "none" }}\n        color="white"\n        onClick={() => mutateLogout()}\n      >\n        {(!collapsed || opened) && t("buttons.logout", "Logout")}\n      </Button>\n    </Tooltip>\n  );\n\n  const renderSider = () => {\n    if (render) {\n      return render({\n        dashboard,\n        logout,\n        items,\n        collapsed: false,\n      });\n    }\n    return (\n      <>\n        {dashboard}\n        {items}\n        {logout}\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        position="fixed"\n        top={16}\n        left={0}\n        zIndex={1200}\n        display={["block", "block", "none", "none", "none"]}\n      >\n        <IconButton\n          borderLeftRadius={0}\n          bg="sider.background"\n          color="white"\n          _hover={{ bg: "sider.background" }}\n          _active={{\n            bg: "sider.background",\n            transform: "translateY(1px)",\n          }}\n          aria-label="Open Menu"\n          onClick={() => setOpened((prev) => !prev)}\n        >\n          <IconMenu2 />\n        </IconButton>\n      </Box>\n      <Drawer placement="left" isOpen={opened} onClose={() => setOpened(false)}>\n        <DrawerOverlay />\n        <DrawerContent w="200px" maxW="200px" bg="sider.background">\n          <Box display="flex" justifyContent="center" py={4}>\n            <RenderToTitle collapsed={false} />\n          </Box>\n          <VStack mt={2} color="white" alignItems="start" flexGrow={1}>\n            <Box width="full">{renderSider()}</Box>\n          </VStack>\n        </DrawerContent>\n      </Drawer>\n\n      <Box\n        display={["none", "none", "flex"]}\n        width={siderWidth()}\n        transition="width 200ms ease, min-width 200ms ease"\n        flexShrink={0}\n      />\n      <Box\n        bg="sider.background"\n        position="fixed"\n        width={siderWidth()}\n        top={0}\n        h="100vh"\n        display={["none", "none", "flex"]}\n        flexDirection="column"\n        transition="width 200ms ease, min-width 200ms ease"\n      >\n        <Box display="flex" justifyContent="center" py={4}>\n          <RenderToTitle collapsed={collapsed} />\n        </Box>\n        <VStack mt={2} color="white" alignItems="start" flexGrow={1}>\n          <Box width="full">{renderSider()}</Box>\n        </VStack>\n        <Button\n          onClick={() => setCollapsed((prev) => !prev)}\n          color="white"\n          bg="sider.collapseButton"\n          borderRadius={0}\n          _hover={{ bg: "sider.collapseButton" }}\n          _active={{\n            bg: "sider.collapseButton",\n            transform: "translateY(1px)",\n          }}\n        >\n          {collapsed ? <IconChevronRight /> : <IconChevronLeft />}\n        </Button>\n      </Box>\n    </>\n  );\n};\n')),(0,o.yg)("p",null,"We will override the default sider and show the custom menu we implemented in its place by passing a custom component to ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine>"),"s ",(0,o.yg)("inlineCode",{parentName:"p"},"Sider")," prop:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=420px",live:!0,url:"http://localhost:3000",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\nimport { Code, Text, Sider as CustomSider } from "@pankod/refine-chakra-ui";\n\nconst DummyListPage = () => {\n  const params = RefineCore.useRouterContext().useParams();\n\n  return (\n    <RefineChakra.List>\n      <Text as="i" color="dimmed" fontSize="sm">\n        URL Parameters:\n      </Text>\n      <br />\n      <Code>{JSON.stringify(params)}</Code>\n    </RefineChakra.List>\n  );\n};\n\nconst IconCategory = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-category"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <path d="M4 4h6v6h-6z"></path>\n    <path d="M14 4h6v6h-6z"></path>\n    <path d="M4 14h6v6h-6z"></path>\n    <circle cx={17} cy={17} r={3}></circle>\n  </svg>\n);\n\nconst IconUsers = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-users"\n    width={18}\n    height={18}\n    viewBox="0 0 24 24"\n    stroke-width={2}\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <circle cx={9} cy={7} r={4}></circle>\n    <path d="M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path>\n    <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>\n    <path d="M21 21v-2a4 4 0 0 0 -3 -3.85"></path>\n  </svg>\n);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport {\n  ChakraProvider,\n  Layout,\n  ReadyPage,\n  useNotificationProvider,\n  refineTheme,\n} from "@pankod/refine-chakra-ui";\nimport { IconCategory, IconUsers } from "@tabler/icons";\n\n//highlight-next-line\nimport { CustomSider } from "./components/customSider";\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={refineTheme}>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        notificationProvider={notificationProvider()}\n        ReadyPage={ReadyPage}\n        Layout={Layout}\n        // highlight-next-line\n        Sider={CustomSider}\n        resources={[\n          {\n            name: "posts",\n            list: DummyListPage,\n          },\n          {\n            name: "categories",\n            list: DummyListPage,\n            icon: <IconCategory />,\n          },\n          {\n            name: "users",\n            list: DummyListPage,\n            icon: <IconUsers />,\n          },\n        ]}\n      />\n    </ChakraProvider>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,o.yg)("br",null),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useMenu")," hook is used to get style agnostic menu items. We render these items in the body of the sider. We create a recursive ",(0,o.yg)("inlineCode",{parentName:"p"},"renderTreeView")," function to create menu items from the list of resources passed to ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine>"),"."),(0,o.yg)("p",null,"We get the ",(0,o.yg)("inlineCode",{parentName:"p"},"Title")," component with the ",(0,o.yg)("inlineCode",{parentName:"p"},"useTitle")," hook."),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"If you want to create a multi-level menu, you can take a look at this ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/examples/multi-level-menu"},(0,o.yg)("inlineCode",{parentName:"a"},"multi-level menu"))," example and also ",(0,o.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/multi-level-menu"},(0,o.yg)("inlineCode",{parentName:"a"},"here"))," is the guide."))))}g.isMDXComponent=!0}}]);