"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[83752],{58860:(e,n,i)=>{i.d(n,{xA:()=>g,yg:()=>h});var t=i(37953);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=t.createContext({}),d=function(e){var n=t.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},g=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=d(i),c=a,h=p["".concat(o,".").concat(c)]||p[c]||m[c]||r;return i?t.createElement(h,l(l({ref:n},g),{},{components:i})):t.createElement(h,l({ref:n},g))}));function h(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var d=2;d<r;d++)l[d]=i[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}c.displayName="MDXCreateElement"},14094:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>p});i(37953);var t=i(58860);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}(Object(n)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))})),e}function l(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}const s={title:"How to Use Two Dimensional Layouts with CSS Grid?",description:"We'll explore how to create two dimensional layouts using CSS Grid.",slug:"css-grid",authors:"abdullah_numan",tags:["css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/social-2.png",hide_table_of_contents:!1},o=void 0,d={permalink:"/blog/css-grid",source:"@site/blog/2024-07-17-css-grid.md",title:"How to Use Two Dimensional Layouts with CSS Grid?",description:"We'll explore how to create two dimensional layouts using CSS Grid.",date:"2024-07-17T00:00:00.000Z",formattedDate:"July 17, 2024",tags:[{label:"css",permalink:"/blog/tags/css"}],readingTime:41.51,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"How to Use Two Dimensional Layouts with CSS Grid?",description:"We'll explore how to create two dimensional layouts using CSS Grid.",slug:"css-grid",authors:"abdullah_numan",tags:["css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/social-2.png",hide_table_of_contents:!1},prevItem:{title:"How to use Conditional Rendering in React",permalink:"/blog/react-conditional-rendering"},nextItem:{title:"5 Best Free Platforms for Hosting Hobby Web Projects",permalink:"/blog/5-top-free-react-hosting-platforms"},relatedPosts:[{title:"A Quick Introduction to Meta's Stylex",description:"This post quickly explores how to apply statically typed, atomic CSS styles to React components with Stylex APIs in a Next.js application.",permalink:"/blog/meta-stylex",formattedDate:"September 16, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:16.035,date:"2024-09-16T00:00:00.000Z"},{title:"CSS Box Shadow with 25 Examples",description:"We'll explore the CSS `box-shadow` property.",permalink:"/blog/box-shadow-css",formattedDate:"February 28, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:18.315,date:"2024-02-28T00:00:00.000Z"},{title:"How do you wrap text content in CSS?",description:"We'll look at the CSS features that allow us to wrap overflowing text in containers.",permalink:"/blog/css-text-wrap",formattedDate:"March 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:7.6,date:"2024-03-05T00:00:00.000Z"}],authorPosts:[{title:"TypeScript Record Type with Examples",description:"We'll explore TypeScript Record type with examples.",permalink:"/blog/typescript-record-type",formattedDate:"January 6, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:8.085,date:"2025-01-06T00:00:00.000Z"},{title:"Audit Log With Refine",description:"We'll apply Refine's built-in audit logging functionality",permalink:"/blog/refine-pixels-7",formattedDate:"February 20, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:15.515,date:"2023-02-20T00:00:00.000Z"},{title:"React useReducer Hook - The Basics",description:"This post is about the useReducer() hook in React. We demonstrate with examples how to use it for action based state updates and discuss some safe practices.",permalink:"/blog/react-usereducer",formattedDate:"November 8, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:30.27,date:"2024-11-08T00:00:00.000Z"}]},g={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"What is CSS Grid ?",id:"what-is-css-grid-",level:2},{value:"CSS Grid: Essential Concepts",id:"css-grid-essential-concepts",level:2},{value:"CSS Grid: The Parent Container",id:"css-grid-the-parent-container",level:3},{value:"CSS Grid: Tracks Across Columns and Rows",id:"css-grid-tracks-across-columns-and-rows",level:3},{value:"CSS Grid: Default Tracks and The Auto Flow",id:"css-grid-default-tracks-and-the-auto-flow",level:4},{value:"CSS Grid: How to Change Grid Auto Flow",id:"css-grid-how-to-change-grid-auto-flow",level:4},{value:"CSS Grid: What is a Grid Cell ?",id:"css-grid-what-is-a-grid-cell-",level:4},{value:"CSS Grid: Grid Lines and Spans",id:"css-grid-grid-lines-and-spans",level:4},{value:"CSS Grid: Grid Items",id:"css-grid-grid-items",level:4},{value:"CSS Grid: Implicit vs Explicit Grids",id:"css-grid-implicit-vs-explicit-grids",level:3},{value:"The Implicit Grid in CSS Grid",id:"the-implicit-grid-in-css-grid",level:4},{value:"CSS Grid: Explicit Grid with Templates",id:"css-grid-explicit-grid-with-templates",level:4},{value:"CSS Grid: Placing Explicit Grid Items",id:"css-grid-placing-explicit-grid-items",level:4},{value:"CSS Grid: Gutters",id:"css-grid-gutters",level:4},{value:"CSS Grid: Aligning the Grid and Items",id:"css-grid-aligning-the-grid-and-items",level:3},{value:"CSS Grid: Aligning Grid Tracks",id:"css-grid-aligning-grid-tracks",level:4},{value:"CSS Grid: Aligning Grid Items",id:"css-grid-aligning-grid-items",level:4},{value:"Grid Formatting Context Under the Hood: How CSS Grid Works",id:"grid-formatting-context-under-the-hood-how-css-grid-works",level:3},{value:"CSS Grid Auto Layouts: Working with the Implicit Grid and Default Tracks",id:"css-grid-auto-layouts-working-with-the-implicit-grid-and-default-tracks",level:2},{value:"CSS Grid: Space Distribution in Two Dimensions",id:"css-grid-space-distribution-in-two-dimensions",level:3},{value:"CSS Grid: Repeating Tracks with <code>repeat()</code>",id:"css-grid-repeating-tracks-with-repeat",level:4},{value:"CSS Grid: Implicit Grid Takes Over When Explicit Grid is Missing",id:"css-grid-implicit-grid-takes-over-when-explicit-grid-is-missing",level:3},{value:"CSS Grid: Auto-filling and Auto-fitting Grid Tracks",id:"css-grid-auto-filling-and-auto-fitting-grid-tracks",level:3},{value:"Auto-placing Grid Items with <code>auto-fit</code>",id:"auto-placing-grid-items-with-auto-fit",level:4},{value:"CSS Grid Layouts with Column &amp; Row Templates",id:"css-grid-layouts-with-column--row-templates",level:2},{value:"CSS Grids with Numbered Lines: Using Both Columns and Rows",id:"css-grids-with-numbered-lines-using-both-columns-and-rows",level:3},{value:"CSS Grid: Explicit Row Tracks",id:"css-grid-explicit-row-tracks",level:4},{value:"Using CSS Grid Lines: Placing Items on An Explicit Grid",id:"using-css-grid-lines-placing-items-on-an-explicit-grid",level:4},{value:"CSS Grid: Item Placement Alternatives",id:"css-grid-item-placement-alternatives",level:4},{value:"CSS Grid: Using a Hybrid Grid",id:"css-grid-using-a-hybrid-grid",level:4},{value:"CSS Grid with Named Lines",id:"css-grid-with-named-lines",level:3},{value:"CSS Grid: Grid Line Naming Syntax",id:"css-grid-grid-line-naming-syntax",level:4},{value:"CSS Grid: Using Named Grid Lines in Placing Items",id:"css-grid-using-named-grid-lines-in-placing-items",level:4},{value:"CSS Grid: How to Implement a 12-column Grid with Named Lines",id:"css-grid-how-to-implement-a-12-column-grid-with-named-lines",level:2},{value:"CSS Grid: Developing a Grid Language with Line Names and <code>span</code>s",id:"css-grid-developing-a-grid-language-with-line-names-and-spans",level:3},{value:"CSS Grid: How to Use <code>span</code>s in a Grid Item",id:"css-grid-how-to-use-spans-in-a-grid-item",level:4},{value:"CSS Grid: Layouts Based on Area Templates",id:"css-grid-layouts-based-on-area-templates",level:2},{value:"CSS Grid: Working with Template Areas",id:"css-grid-working-with-template-areas",level:3},{value:"Space Distribution in CSS Grid",id:"space-distribution-in-css-grid",level:3},{value:"CSS Grid: Space Distribution on Tracks with Fractions",id:"css-grid-space-distribution-on-tracks-with-fractions",level:4},{value:"CSS Grid: Space Distribution by Placement",id:"css-grid-space-distribution-by-placement",level:4},{value:"How CSS Grid Template Areas Work",id:"how-css-grid-template-areas-work",level:3},{value:"How to Place Items in a Template Area Based Grid",id:"how-to-place-items-in-a-template-area-based-grid",level:4},{value:"CSS Grid Examples: Implementing Responsive Layouts",id:"css-grid-examples-implementing-responsive-layouts",level:2},{value:"CSS Grid: A Template Areas Based Responsive Layout",id:"css-grid-a-template-areas-based-responsive-layout",level:3},{value:"CSS Grid Responsive Layouts: Mobile First Approach",id:"css-grid-responsive-layouts-mobile-first-approach",level:4},{value:"Responsive Layout with CSS Grid: Media Queries with Minimal Overhaul",id:"responsive-layout-with-css-grid-media-queries-with-minimal-overhaul",level:4},{value:"CSS Grid: A Responsive Layout from Line Names Based 12-column Grid",id:"css-grid-a-responsive-layout-from-line-names-based-12-column-grid",level:3},{value:"CSS Grid: Best Practices",id:"css-grid-best-practices",level:2}],m={toc:p},c="wrapper";function h(e){var{components:n}=e,i=l(e,["components"]);return(0,t.yg)(c,r(function(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{},t=Object.keys(i);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(i).filter((function(e){return Object.getOwnPropertyDescriptor(i,e).enumerable})))),t.forEach((function(n){a(e,n,i[n])}))}return e}({},m,i),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"introduction"},"Introduction"),(0,t.yg)("p",null,"This post provides an in-depth guide on creating two dimensional layouts using CSS Grid. We cover grid related concepts and properties in detail, and explore how to implement common webpage layouts using implicit tracks and explicit templates."),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout"},"CSS Grid Layout")," is a two dimensional layout system that utilizes both columns and rows for placing HTML elements and setting their flow inside a container. Grid gives developers better control over layouts by helping in concretely deciding how grid elements should be placed and behave in both horizontal and vertical directions."),(0,t.yg)("p",null,"The Grid Layout became part of the CSS specs in 2017 and has since been widely adopted by modern browsers. It is designed to work alongside other CSS layout techniques, such as ",(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/float"},(0,t.yg)("inlineCode",{parentName:"a"},"float")),"s and ",(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"},"Flexbox"),"."),(0,t.yg)("p",null,"In this post, we get deeply acquainted with CSS Grid related concepts. We first make sense of the grid container, grid items and how they are laid across block and inline axes in column and row tracks inside a grid context. We get familiar with the Grid Formatting Context, which is initialized with ",(0,t.yg)("inlineCode",{parentName:"p"},"display: grid")," set on a container, and how grid items conform to grid column and row auto flows. We cover related CSS Grid properties that are set on the container, as well as on the grid items."),(0,t.yg)("p",null,"We explore different ways of defining grid layouts, such as with implicit grid tracks, column and row based templates (",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-columns")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-rows"),"), as well as with template areas (with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-areas"),"). With examples from these various types, we illustrate how CSS Grid offers line numbers and line names that are utilized to place column/row based layout items, and how area names help conveniently place items in responsive layouts. We also delve into what CSS subgrids are, how they work and how they differ from nested grids."),(0,t.yg)("p",null,"We round off all the useful concepts by building some common layouts: a partially explicit layout for a list of post items, a 12 column grid with named lines, and a webpage layout with named areas placed with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-areas"),". Finally, we demonstrate how to implement responsive webpage layouts with two break points for the grid area based grid and the 12 column grid."),(0,t.yg)("p",null,"Steps we'll cover in this post include:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#what-is-css-grid"},"Understanding CSS Grid")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#css-grid-essential-concepts"},"Essential Concepts of CSS Grid")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#css-grid-auto-layouts-working-with-the-implicit-grid-and-default-tracks"},"Working with Implicit Grid and Default Tracks")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#css-grid-layouts-with-column--row-templates"},"Creating Layouts with Column and Row Templates")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#building-responsive-webpage-layouts"},"Building Responsive Webpage Layouts"))),(0,t.yg)("h2",{id:"what-is-css-grid-"},"What is CSS Grid ?"),(0,t.yg)("p",null,"CSS Grid is a two dimensional layout system that allows developers to place and align HTML elements in both column and rows directions. It implements a Grid Formatting Context in which elements flow in ",(0,t.yg)("strong",{parentName:"p"},"block")," and ",(0,t.yg)("strong",{parentName:"p"},"inline")," axes at the same time:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-axes.png",alt:"css grid"})),(0,t.yg)("p",null,"Grid is different from Flexbox in that it implements a flow in both directions, as opposed to Flexbox in which the document flows in one direction -- either column or row. As such, CSS Grid helps divide a webpage into well placed, rearrangeable regions such as a header, navigation areas, sidebars, advertising area, main content area and footers."),(0,t.yg)("p",null,"CSS Grid places a two way grid on top of the HTML document's existing ",(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow"},"normal flow"),". In other words, a CSS grid is an abstraction layer on top of the document's ",(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"block"))," and ",(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"inline"))," axes."),(0,t.yg)("h2",{id:"css-grid-essential-concepts"},"CSS Grid: Essential Concepts"),(0,t.yg)("p",null,"A grid layer is created inside a parent container with child elements either auto placed or explicitly laid as items. The grid is composed of ",(0,t.yg)("strong",{parentName:"p"},"tracks")," of ",(0,t.yg)("strong",{parentName:"p"},"cells")," across column and row directions."),(0,t.yg)("p",null,"This section presents a conceptual overview of terminologies involved in a CSS Grid layout, along with visualizations as appropriate -- as well as related CSS properties and default behaviors. We expound on the most useful of these concepts with examples in subsequent sections throughout this post."),(0,t.yg)("h3",{id:"css-grid-the-parent-container"},"CSS Grid: The Parent Container"),(0,t.yg)("p",null,"A CSS Grid is initialized inside a parent with its display set to ",(0,t.yg)("inlineCode",{parentName:"p"},"display: grid"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<main>\n  <h1>Posts</h1>\n  <div style="display: grid;">\n    <div>ONE</div>\n    <div>TWO</div>\n    <div>THREE</div>\n    <div>FOUR</div>\n    <div>FIVE</div>\n    <div>SIX</div>\n    <div>SEVEN</div>\n    <div>EIGHT</div>\n    <div>NINE</div>\n  </div>\n</main>\n')),(0,t.yg)("h3",{id:"css-grid-tracks-across-columns-and-rows"},"CSS Grid: Tracks Across Columns and Rows"),(0,t.yg)("p",null,"After initialization, CSS Grid creates an independent Grid Formatting Context inside the container. The GFC is scoped inside the parent and produces tracks that run in both directons. Tracks are made up of cells formed at intersections of a column and a row."),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-ill.png",alt:"css grid"})),(0,t.yg)("h4",{id:"css-grid-default-tracks-and-the-auto-flow"},"CSS Grid: Default Tracks and The Auto Flow"),(0,t.yg)("p",null,"CSS Grid creates default tracks when a grid is initialized in a container."),(0,t.yg)("p",null,"For example, the grid for the above ",(0,t.yg)("inlineCode",{parentName:"p"},"<div>")," gives default tracks with one column spanning full width and arbitrary rows added automatically. Elements that are direct children of the parent occupy these track cells:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-default.png",alt:"css grid"})),(0,t.yg)("p",null,"Notice, the default track is the same as the typical block layout that is implemented in the normal flow. It is effectively the grid version of the Block Formatting Context. This track follows the grid's default ",(0,t.yg)("strong",{parentName:"p"},"auto flow")," directed by the container's Grid Formatting Context to place items on the grid. It forms the backbone of the ",(0,t.yg)("strong",{parentName:"p"},"implicit grid"),"."),(0,t.yg)("p",null,"The default auto flow of the grid is towards new ",(0,t.yg)("inlineCode",{parentName:"p"},"row"),"s across the ",(0,t.yg)("strong",{parentName:"p"},"block axis"),". In other words, for this example, items are placed automatically in new rows down the column direction."),(0,t.yg)("h4",{id:"css-grid-how-to-change-grid-auto-flow"},"CSS Grid: How to Change Grid Auto Flow"),(0,t.yg)("p",null,"The auto flow of a grid can be changed to add new columns across the ",(0,t.yg)("strong",{parentName:"p"},"inline")," axis with the ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-flow: column")," property set on the container:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<div\n  style="\n        display: grid;\n        grid-auto-flow: column;\n    "\n>\n  \x3c!-- Grid items here --\x3e\n</div>\n')),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[RELATION BETWEEN GRID AXES AND TEXT DIRECTION]"),(0,t.yg)("p",{parentName:"admonition"},"A CSS Grid's column and row axes take the document's ",(0,t.yg)("strong",{parentName:"p"},"block")," and ",(0,t.yg)("strong",{parentName:"p"},"inline")," axes respectively as their references. The block and inline axes of the document run perpendicular to each other. They, in turn, take their references from the physical ",(0,t.yg)("strong",{parentName:"p"},"text direction")," or ",(0,t.yg)("strong",{parentName:"p"},"writing mode")," of the document or the local element. Text direction/writing mode may be changed by setting the document's ",(0,t.yg)("inlineCode",{parentName:"p"},"dir")," property on the ",(0,t.yg)("inlineCode",{parentName:"p"},"<html>")," element, the local text ",(0,t.yg)("inlineCode",{parentName:"p"},"direction")," or the ",(0,t.yg)("inlineCode",{parentName:"p"},"writing-mode")," applied to an element. So, a change in the text direction alters the physical value of block and inline axes."),(0,t.yg)("p",{parentName:"admonition"},"This makes visualizing and understanding CSS Grid a bit difficult at first. So, it is important that we be aware how block and inline based normal flow changes first with changes in text direction/writing mode in a region. We can only then understand how they impact the local grid flow."),(0,t.yg)("p",{parentName:"admonition"},(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Grids_logical_values_and_writing_modes"},"This MDN guide on CSS Grid axes")," provides an in-depth explanation.")),(0,t.yg)("h4",{id:"css-grid-what-is-a-grid-cell-"},"CSS Grid: What is a Grid Cell ?"),(0,t.yg)("p",null,"A CSS Grid cell is a logical representation of an individual area unit of a grid. Cells are created along tracks by intersection of column and row lines."),(0,t.yg)("p",null,"CSS Grid cells are particularly useful for visualizing the grid. They help define item size and placements across tracks."),(0,t.yg)("h4",{id:"css-grid-grid-lines-and-spans"},"CSS Grid: Grid Lines and Spans"),(0,t.yg)("p",null,"A CSS Grid creates lines across tracks that define boundaries of their cell areas. These grid lines are generated according to default track settings and also explicit track definitions with grid templates."),(0,t.yg)("p",null,"Grid track lines are ",(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"numbered"))," by default and can be ",(0,t.yg)("strong",{parentName:"p"},(0,t.yg)("em",{parentName:"strong"},"named"))," for convenient implementation of complex grid layouts. We discuss grid lines in detail in ",(0,t.yg)("a",{parentName:"p",href:"#css-grid-with-named-lines"},"this later section"),"."),(0,t.yg)("p",null,"CSS Grid lines are used to set item areas in the grid. Item areas can also defined by ",(0,t.yg)("inlineCode",{parentName:"p"},"span"),"s that start from one line and end at another lines. ",(0,t.yg)("strong",{parentName:"p"},"Spans")," for a grid item can be set in both column and row directions."),(0,t.yg)("h4",{id:"css-grid-grid-items"},"CSS Grid: Grid Items"),(0,t.yg)("p",null,"Grid items are direct child elements of a grid container. They participate in the Grid Formatting Context for determining their width, height, placement, alignment and flow."),(0,t.yg)("p",null,"Items that are ",(0,t.yg)("strong",{parentName:"p"},"placed explicitly")," with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row"),", or ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column-*")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row-*")," CSS properties are part of the explicit grid. Items that are not explicitly placed using these properties are placed inside the implicit grid."),(0,t.yg)("h3",{id:"css-grid-implicit-vs-explicit-grids"},"CSS Grid: Implicit vs Explicit Grids"),(0,t.yg)("p",null,"The default track follows the grid ",(0,t.yg)("strong",{parentName:"p"},"auto flow")," which makes up part of the implicit grid. ",(0,t.yg)("strong",{parentName:"p"},"The implicit grid")," basically means it does not depend on a ",(0,t.yg)("strong",{parentName:"p"},"configured template")," for sizing and placing items across particular columns and rows. In contrast, an ",(0,t.yg)("strong",{parentName:"p"},"explicit grid")," uses well defined templates to configure size and placement of items across intended grid tracks."),(0,t.yg)("h4",{id:"the-implicit-grid-in-css-grid"},"The Implicit Grid in CSS Grid"),(0,t.yg)("p",null,"The implicit grid uses default grid tracks to size and place items. It houses the items ",(0,t.yg)("strong",{parentName:"p"},"not")," explicitly placed with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row"),", or ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column-*")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row-*")," properties."),(0,t.yg)("p",null,"The default / implicit grid is always out there and is never replaced by an explicit one. An explicit grid only gets added to it. While working with an explicit grid, we are in fact able to override the size of default implicit tracks with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-rows")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-columns")," properties."),(0,t.yg)("p",null,"Implicit grid items are placed according to the auto flow that is set with the ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-flow")," property."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[ONE ITEM PER CELL IN IMPLICIT GRID]"),(0,t.yg)("p",{parentName:"admonition"},"The auto flow places one item per track cell in the default track. The default track is populated with items when no explicit grid is present, or when items are not placed in an explicit grid.")),(0,t.yg)("h4",{id:"css-grid-explicit-grid-with-templates"},"CSS Grid: Explicit Grid with Templates"),(0,t.yg)("p",null,"We are able to define an explicit grid for selectively sizing and positioning items in columns and rows. An explicit grid is defined with templates that set tracks across the column, row or both directions."),(0,t.yg)("p",null,"CSS Grid offers three kinds of templates for defining grid tracks:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Column templates with ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-template-columns"),"."),(0,t.yg)("li",{parentName:"ul"},"Row templates with ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-template-rows"),"."),(0,t.yg)("li",{parentName:"ul"},"Area templates with ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-template-areas"),".")),(0,t.yg)("p",null,"Grid tracks defined with these templates are also called ",(0,t.yg)("strong",{parentName:"p"},"track lists"),". Track lists specify the number of cells, their sizes and positions in the grid relative to each other. For example, the following columns definition specifies a three column track with varying sizes positioned in sequence:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  display: grid;\n  grid-template-columns: 200px 3fr 1fr;\n}\n")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[CHOOSING APPRORPIATE GRID TEMPLATES]"),(0,t.yg)("p",{parentName:"admonition"},"Depending on use cases, column templates and row templates can be used together for concretely setting how items are laid out two dimensionally along columns and rows. And either one of these can be used without the other."),(0,t.yg)("p",{parentName:"admonition"},"For example, templates can be defined only for columns without needing to specify any rows template. In such cases, when the other axis follows its default auto track."),(0,t.yg)("p",{parentName:"admonition"},"Area templates are nifty ways of quickly setting up designs, for example while prototyping."),(0,t.yg)("p",{parentName:"admonition"},"We can combine all three types of templates into a master template with the ",(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template"},(0,t.yg)("inlineCode",{parentName:"a"},"grid-template"))," shorthand. Typically, combined templates are not preferred, as layouts are meant to make life easy for designers and developers. But here is an example anyway. It combines templates columns, rows, and areas:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template:\n    [header-left] "head head" 30px [header-right]\n    [main-left] "nav  main" 1fr [main-right]\n    [footer-left] "nav  foot" 30px [footer-right]\n    / 120px 1fr;\n}\n'))),(0,t.yg)("p",null,"We elaborate the use cases of different templates with examples in upcoming sections."),(0,t.yg)("h4",{id:"css-grid-placing-explicit-grid-items"},"CSS Grid: Placing Explicit Grid Items"),(0,t.yg)("p",null,"Placing items in an explicit grid is authored by the developer. Child elements are turned into grid items by applying on them the following CSS properties:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-area"),": can be set with line boundaries or a template area name."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-column"),": defines boundaries of the item's columns. Is set with line numbers for start and end, and their line names or ",(0,t.yg)("inlineCode",{parentName:"li"},"span"),"s"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-row"),": defines boundaries of the item's rows. Is set with line numbers for start and end, and line names or ",(0,t.yg)("inlineCode",{parentName:"li"},"span"),"s"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-column-start")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-column-end"),": explicit form of ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-column")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-row-start")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-row-end"),": explicit form of ",(0,t.yg)("inlineCode",{parentName:"li"},"grid-row"))),(0,t.yg)("p",null,"Any child element not placed with these properties are placed in the implicit grid."),(0,t.yg)("h4",{id:"css-grid-gutters"},"CSS Grid: Gutters"),(0,t.yg)("p",null,"CSS Grid gutters are set by the ",(0,t.yg)("inlineCode",{parentName:"p"},"gap")," property:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<div\n  style="\n        display: grid;\n        grid-auto-flow: column;\n        /* highlight-next-line */\n        gap: 16px;\n"\n>\n  \x3c!-- Grid items here --\x3e\n</div>\n')),(0,t.yg)("h3",{id:"css-grid-aligning-the-grid-and-items"},"CSS Grid: Aligning the Grid and Items"),(0,t.yg)("p",null,"Alignment in CSS Grid is associated with aligning the grid itself against the block-inline axes of the normal flow. It also involves aligning items relative to each other and the container. Both forms of alignment are covered by the CSS ",(0,t.yg)("a",{parentName:"p",href:"https://drafts.csswg.org/css-align/"},"Box Alignment specifications"),"."),(0,t.yg)("h4",{id:"css-grid-aligning-grid-tracks"},"CSS Grid: Aligning Grid Tracks"),(0,t.yg)("p",null,"Since CSS grid tracks take the normal flow as reference, a track must be made to align with the block and inline axes. We can use the following properties to align the grid tracks:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"justify-content"),": to align the grid across the inline axis."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"align-content"),": to align the grid across the block axis.")),(0,t.yg)("p",null,"These are the same Box alignment properties used in Flexbox."),(0,t.yg)("h4",{id:"css-grid-aligning-grid-items"},"CSS Grid: Aligning Grid Items"),(0,t.yg)("p",null,"We can align grid items relative to the container and other siblings. We can specify alignments for all items together from container with the following Box alignment properties. In other words, they are applied on the container:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"justify-items"),": aligns items with respect to the grid's inline axis."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"align-items"),": aligns items with respect to the grid's block axis.")),(0,t.yg)("p",null,"Additionally, we can align items individually by specifying within items the following properties:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"justify-self"),": aligns the item across inline axis."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"align-self"),": aligns the item across the block axis.")),(0,t.yg)("h3",{id:"grid-formatting-context-under-the-hood-how-css-grid-works"},"Grid Formatting Context Under the Hood: How CSS Grid Works"),(0,t.yg)("p",null,"CSS Grid creates a Grid Formatting Context inside the container. The context is scoped within the parent element and introduces an implicit grid with rules for laying out items across column and row tracks. These rules specify the grid's track settings -- with their numbers, sizes, alignment and the flow of items. These rules can be recomposed and mostly overridden with CSS Grid properties to implement necessary design specs."),(0,t.yg)("p",null,"The tracks are created on top of the ",(0,t.yg)("strong",{parentName:"p"},"block and inline axes")," of the document's normal flow. The container interacts with other outside items according to usual formatting context of its own parent and siblings."),(0,t.yg)("p",null,"Items inside the grid are placed with the ",(0,t.yg)("a",{parentName:"p",href:"https://drafts.csswg.org/css-grid/#auto-placement-algo"},"Grid item placement algorithm"),". They occupy the implicit grid if not designated a place in an explicit grid. If an explicit grid track is defined with a template and the items are placed in them, they are displayed inside the explicit grid."),(0,t.yg)("p",null,"As the grid is placed on underlying block and inline axes, the grid itself has to be aligned when necessary. Besides the items participating in the GFC."),(0,t.yg)("p",null,"The block and inline axes are subject to change depending on the text direction and writing mode of an element. So, the text direction and writing mode of the grid container decides which directions the block and inline axes run. And hence impacts which physical directions the column and row tracks are created by CSS Grid."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[THINK OF BLOCK AND INLINE AXES]"),(0,t.yg)("p",{parentName:"admonition"},"Text direction and writing modes are important factors in deciding the inline axis. If they change in either the HTML document or on a particular container, the physical directions of the column and row tracks in a CSS grid track also change."),(0,t.yg)("p",{parentName:"admonition"},"However, it is useful to keep in mind that the column tracks always run in the block axis and the row tracks pursue the inline axis. So, when the document language, the text direction or the writing mode is changed -- regardless of how the physical directions change -- column tracks will remain in the block axis and row tracks will still be in the inline direction."),(0,t.yg)("p",{parentName:"admonition"},(0,t.yg)("a",{parentName:"p",href:"http://localhost:5042/en-US/docs/Web/CSS/CSS_grid_layout/Grids_logical_values_and_writing_modes"},"This MDN article on Grids, logical values, and writing modes")," explains grid axes behavior in sound details.")),(0,t.yg)("p",null,"In the upcoming sections, we elaborate on the use of implicit and explicit CSS grids with examples of commonly used webpage components and layouts."),(0,t.yg)("h2",{id:"css-grid-auto-layouts-working-with-the-implicit-grid-and-default-tracks"},"CSS Grid Auto Layouts: Working with the Implicit Grid and Default Tracks"),(0,t.yg)("p",null,"In this section, we demonstrate how CSS Grid addresses the limitation of linear space distribution in Flexbox. We make some revealing inferences about Grid's two dimensional placement mechanism while styling a list of items."),(0,t.yg)("p",null,"We mostly make use of a partly explicit column grid, the implicit row grid and the auto flow. While doing so, we explore relevant CSS properties and discuss about associated grid behavior."),(0,t.yg)("p",null,"Let's first begin with the a Flexbox implementation of the list of items. The HTML for this looks like below:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show HTML code"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<main>\n  <h1 class="title">Posts</h1>\n  <div class="container">\n    <div class="item">ONE</div>\n    <div class="item">TWO</div>\n    <div class="item">THREE</div>\n    <div class="item">FOUR</div>\n    <div class="item">FIVE</div>\n    <div class="item">SIX</div>\n    <div class="item">SEVEN</div>\n    <div class="item">EIGHT</div>\n    <div class="item">NINE</div>\n  </div>\n</main>\n'))),(0,t.yg)("p",null,"The items are styled with Flexbox with each growing equally to available spaces in a new line:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"main {\n  width: 95%;\n  margin: auto;\n}\n\n.title {\n  color: rgb(16, 98, 122);\n}\n\n.container {\n  margin: auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  gap: 8px;\n}\n\n.item {\n  /* highlight-next-line */\n  flex-grow: 1;\n  padding: 8px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.6);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n}\n")),(0,t.yg)("p",null,"The resulting layout has items wrapped into new rows. When the last row doesn't have enough items, they grow to take up all remaining space. This gives an inconsistent look due to disproportionate width on the last row compared to prior rows:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-1.png",alt:"css grid"})),(0,t.yg)("p",null,"This happens because in Flexbox, space distribution of items takes place in new lines. And items are allocated their inline space afresh when a new row is occupied."),(0,t.yg)("p",null,"For practical purposes, we'd better have the items align to their side after keeping their width same as we add items to new rows. This is easily done by distributing the space more accurately in both inline and block axes with CSS Grid. In particular, with the help of a column template and the implicit grid."),(0,t.yg)("p",null,"Let's have a look."),(0,t.yg)("h3",{id:"css-grid-space-distribution-in-two-dimensions"},"CSS Grid: Space Distribution in Two Dimensions"),(0,t.yg)("p",null,"We can apply a grid container, with a column template that distributes the horizontal space equally into ",(0,t.yg)("inlineCode",{parentName:"p"},"n")," number of columns:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: auto;\n\n  /* highlight-start */\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n  gap: 8px;\n  /* highlight-end */\n}\n\n.item {\n  padding: 8px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.6);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n}\n")),(0,t.yg)("p",null,"The CSS Grid based styles above gives us a grid with items placed in seven equally wide column tracks. Item widths remain same when new rows fall short of items:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-2.png",alt:"css grid"})),(0,t.yg)("p",null,"Here, we are using a column template with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-columns")," that gives a grid with seven",(0,t.yg)("inlineCode",{parentName:"p"},"1fr")," columns in the block axis."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"The ",(0,t.yg)("inlineCode",{parentName:"p"},"fr")," unit stands for ",(0,t.yg)("em",{parentName:"p"},"fraction"),", which basically divides available space relatively into indicated fractions. So, seven ",(0,t.yg)("inlineCode",{parentName:"p"},"1fr"),"s would mean dividing any free space by into sevent fractions, calculating their actual widths and allocating each grid cell one part."),(0,t.yg)("p",{parentName:"admonition"},"We can use other units such as ",(0,t.yg)("inlineCode",{parentName:"p"},"px"),", percentage (",(0,t.yg)("inlineCode",{parentName:"p"},"%"),") and other length units for template definitions. Each unit offers convenience particular to their use cases. The ",(0,t.yg)("inlineCode",{parentName:"p"},"fr")," unit is very useful for setting dynamic widths on grid items.")),(0,t.yg)("h4",{id:"css-grid-repeating-tracks-with-repeat"},"CSS Grid: Repeating Tracks with ",(0,t.yg)("inlineCode",{parentName:"h4"},"repeat()")),(0,t.yg)("p",null,"In the above style, we repeatedly used the ",(0,t.yg)("inlineCode",{parentName:"p"},"1fr")," string. We can express it more succinctly with the ",(0,t.yg)("inlineCode",{parentName:"p"},"repeat()")," utility to get a string of 7 ",(0,t.yg)("inlineCode",{parentName:"p"},"1fr"),"s:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: auto;\n\n  display: grid;\n  /* highlight-next-line */\n  grid-template-columns: repeat(7, 1fr);\n  gap: 8px;\n}\n")),(0,t.yg)("h3",{id:"css-grid-implicit-grid-takes-over-when-explicit-grid-is-missing"},"CSS Grid: Implicit Grid Takes Over When Explicit Grid is Missing"),(0,t.yg)("p",null,"Notice, we have to two rows of items. Yet, we are not using any explicit row templates. The rows are added to the implicit grid according to default track settings. This becomes obvious when we customize the height of the default row with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-rows"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: auto;\n\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* highlight-next-line  */\n  grid-auto-rows: 200px;\n  gap: 8px;\n}\n")),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-rows")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-auto-columns")," are properties of the implicit grid. ",(0,t.yg)("a",{parentName:"p",href:"http://localhost:5042/en-US/docs/Web/CSS/grid-auto-rows"},(0,t.yg)("inlineCode",{parentName:"a"},"grid-auto-rows"))," sets the ",(0,t.yg)("strong",{parentName:"p"},"height")," of a row in the inline axis and ",(0,t.yg)("a",{parentName:"p",href:"http://localhost:5042/en-US/docs/Web/CSS/grid-auto-columns"},(0,t.yg)("inlineCode",{parentName:"a"},"grid-auto-columns"))," sets the ",(0,t.yg)("strong",{parentName:"p"},"width")," of columns in the block axis."),(0,t.yg)("p",{parentName:"admonition"},"You can find more about the usage of grid auto properties in ",(0,t.yg)("a",{parentName:"p",href:"http://localhost:5042/en-US/docs/Web/CSS/grid"},"this MDN Grid reference docs"),".")),(0,t.yg)("p",null,"Notice, the above grid is partially explicit with dynamic column widths. This gives us good flexibility in item widths, while the number of desired columns are fixed to ",(0,t.yg)("inlineCode",{parentName:"p"},"n"),"."),(0,t.yg)("p",null,"It's row tracks are implicit. This is because we have not defined any explicit grid template rows. So, the implicit row tracks take over. And the items are placed according to the auto flow."),(0,t.yg)("h3",{id:"css-grid-auto-filling-and-auto-fitting-grid-tracks"},"CSS Grid: Auto-filling and Auto-fitting Grid Tracks"),(0,t.yg)("p",null,'We can make the items behave more "flex-like" by ',(0,t.yg)("inlineCode",{parentName:"p"},"auto-fill"),"ing grid tracks. For auto filling, we ask the template to set a track count of ",(0,t.yg)("inlineCode",{parentName:"p"},"auto-fill"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: auto;\n\n  display: grid;\n  /* highlight-next-line */\n  grid-template-columns: repeat(auto-fill, 200px);\n  gap: 8px;\n}\n")),(0,t.yg)("p",null,"In the above change, we are creating arbitrarily repeating column cells that have ",(0,t.yg)("inlineCode",{parentName:"p"},"200px")," width and get filled up automatically according to their document order. Auto generation of track cells with ",(0,t.yg)("inlineCode",{parentName:"p"},"auto-fill")," like this is magical. However, using ",(0,t.yg)("inlineCode",{parentName:"p"},"auto-fill")," with fixed with comes with a downside -- because it leaves unused space at the end of the column as is:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-3.png",alt:"css grid"})),(0,t.yg)("p",null,"We can overcome this drawback easily by Box alignment properties like ",(0,t.yg)("inlineCode",{parentName:"p"},"justify-content")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"justify-items"),". However, CSS Grid offers more tools, such as the ",(0,t.yg)("inlineCode",{parentName:"p"},"auto-fit")," property."),(0,t.yg)("h4",{id:"auto-placing-grid-items-with-auto-fit"},"Auto-placing Grid Items with ",(0,t.yg)("inlineCode",{parentName:"h4"},"auto-fit")),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"auto-fit")," and with a combination of ",(0,t.yg)("inlineCode",{parentName:"p"},"minmax()"),", we can create arbitrary number of extremely flexible equally spanned track cells that fit to occupy the entire column/row track while maintaining a minimum fixed width:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: auto;\n\n  display: grid;\n  /* highlight-next-line */\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 8px;\n}\n")),(0,t.yg)("p",null,"This is actually what we'd want starting from the Flexbox example. And on top of everything, CSS Grid now makes it permanently responsive. Thanks to CSS Grid, that's just with one line of CSS. And without using any media queries:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-5-min.gif",alt:"css grid"})),(0,t.yg)("p",null,"We can now place infinite number of rows into this grid. They'll occupy the entire row. And the number of columns will change according to the screen size."),(0,t.yg)("h2",{id:"css-grid-layouts-with-column--row-templates"},"CSS Grid Layouts with Column & Row Templates"),(0,t.yg)("p",null,"In this section, we dig deeper into the quirks of using column and row templates. We consider two examples. In the first one, we explore a way of combining column and row based templates by expanding the above items example in the rows direction. In the second one, while implementing a typical webpage layout, we work with item areas in depth and examine what entails defining item areas with named lines."),(0,t.yg)("h3",{id:"css-grids-with-numbered-lines-using-both-columns-and-rows"},"CSS Grids with Numbered Lines: Using Both Columns and Rows"),(0,t.yg)("p",null,"In this example, we expand the earlier items grid in which we have an explicit column track depending on implicit row track. Here, we gradually adopt a grid which has a top heading section that spans all columns, a featured posts section that has two rows of full columns, a second heading area that spans all columns, and a bottom area that can house arbitrary number of items."),(0,t.yg)("p",null,"Basically this sub-layout:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-5.png",alt:"css grid"})),(0,t.yg)("p",null,"First, let's adjust some markup with styled classes. Update the ",(0,t.yg)("inlineCode",{parentName:"p"},"<main>")," section to this:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show updated HTML markup"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<main>\n  <div class="container">\n    <h1 class="title featured heading">Featured Posts</h1>\n    <div class="item">ONE</div>\n    <div class="item">TWO</div>\n    <div class="item">THREE</div>\n    <div class="item">FOUR</div>\n    <div class="item">FIVE</div>\n    <div class="item">SIX</div>\n    \x3c!-- highlight-start --\x3e\n    <div class="other-posts heading">\n      <h1 class="title ">Other Posts</h1>\n    </div>\n    \x3c!-- highlight-end --\x3e\n    <div class="item">SEVEN</div>\n    <div class="item">EIGHT</div>\n    <div class="item">NINE</div>\n  </div>\n</main>\n'))),(0,t.yg)("p",null,"So, we have an additional ",(0,t.yg)("inlineCode",{parentName:"p"},"<div>")," to house a row for the item with ",(0,t.yg)("inlineCode",{parentName:"p"},".other-posts.heading")," class."),(0,t.yg)("p",null,"We need to then add explicit row tracks to the container. And then allocate space to grid items individually. So, update the CSS to this:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show updated CSS with row tracks"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"main {\n  width: 95%;\n  margin: auto;\n}\n\n.title {\n  color: rgb(16, 98, 122);\n}\n\n.container {\n  margin: auto;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  /* highlight-next-line */\n  grid-template-rows: 100px 300px 300px 100px;\n  grid-auto-rows: 300px;\n  gap: 8px;\n}\n\n.item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 8px;\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.7);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n}\n\n.featured.heading {\n  /* Place item */\n  /* highlight-next-line */\n  grid-area: 1 / 1 / 2 / -1;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  padding: 16px;\n  background: rgba(130, 196, 236, 0.6);\n}\n\n.other-posts.heading {\n  /* Another syntax for placing items */\n  /* highlight-start */\n  grid-row: 4 / 5;\n  grid-column: 1 / -1;\n  /* highlight-end */\n\n  display: flex;\n  align-items: center;\n\n  padding: 16px;\n  background: rgba(130, 196, 236, 0.6);\n}\n"))),(0,t.yg)("h4",{id:"css-grid-explicit-row-tracks"},"CSS Grid: Explicit Row Tracks"),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-rows")," rule on the container, we have four explicit rows in our grid:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-template-rows: 100px 300px 300px 100px;\n")),(0,t.yg)("p",null,"With the pixel values, we set each row track to be of fixed heights. We could have written them like this as well:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-template-rows: 100px repeat(2, 300px) 100px;\n")),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[USE REPEAT UTILITY WHERE NEEDED]"),(0,t.yg)("p",{parentName:"admonition"},"The ",(0,t.yg)("inlineCode",{parentName:"p"},"repeat()")," utility is very handy in generating templates of repeating tracks on columns and rows."),(0,t.yg)("p",{parentName:"admonition"},"It is also possible to generate repeating patterns from multiple track units. For example, the following rule would produce two tracks of the ",(0,t.yg)("inlineCode",{parentName:"p"},"300px 200px")," sequence:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-template-rows: 100px repeat(2, 300px 200px) 100px;\n\n/* Produces this: grid-template-rows: 100px 300px 200px 300px 200px 100px; */\n"))),(0,t.yg)("h4",{id:"using-css-grid-lines-placing-items-on-an-explicit-grid"},"Using CSS Grid Lines: Placing Items on An Explicit Grid"),(0,t.yg)("p",null,"We are then placing a couple of our items on the explicit grid. For example, with the following ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-*-*")," rules, we are placing the ",(0,t.yg)("inlineCode",{parentName:"p"},".featured.heading")," item in the first row to span all columns:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".featured.heading {\n  grid-row-start: 1;\n  grid-column-start: 1;\n  grid-row-end: 2;\n  grid-column-end: -1;\n}\n")),(0,t.yg)("p",null,"These rule properties are pretty intuitive. ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column-*")," properties indicate the start and end lines for the columns that the item spans, while ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row-*")," properties represent the start and end lines for grid rows. In this case, we are saying the item with ",(0,t.yg)("inlineCode",{parentName:"p"},".featured.heading")," class should span from row line ",(0,t.yg)("inlineCode",{parentName:"p"},"1")," to row line ",(0,t.yg)("inlineCode",{parentName:"p"},"2")," and from column line ",(0,t.yg)("inlineCode",{parentName:"p"},"1")," to column line ",(0,t.yg)("inlineCode",{parentName:"p"},"-1"),"."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[GRID LINE NUMBERING]"),(0,t.yg)("p",{parentName:"admonition"},"Explicit grid tracks are created when we declare explicit templates. Created tracks are numbered by default. Here are some rules related to track line numbers:"),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},"For ",(0,t.yg)("inlineCode",{parentName:"li"},"n")," number of cells across a track, the generated number of lines is ",(0,t.yg)("inlineCode",{parentName:"li"},"n + 1"),"."),(0,t.yg)("li",{parentName:"ul"},"CSS Grid line numbering follows a ",(0,t.yg)("inlineCode",{parentName:"li"},"1")," index. This means lines start counting at ",(0,t.yg)("inlineCode",{parentName:"li"},"1"),"."),(0,t.yg)("li",{parentName:"ul"},"Lines can be denoted with negative numbers. Negative line numbers means counting backwards from the end.")),(0,t.yg)("p",{parentName:"admonition"},"Line numbers allow us to place items on the grid.")),(0,t.yg)("p",null,"The negative line ",(0,t.yg)("inlineCode",{parentName:"p"},"-1")," line number denotes the last line. In other words, first line counted from the end. We are able to specify grid areas entirely with negative line numbers as well. In this case, we have allocated the first row in the grid to the ",(0,t.yg)("inlineCode",{parentName:"p"},".featured.heading")," item by spanning all columns. In our HTML, the item with ",(0,t.yg)("inlineCode",{parentName:"p"},".featured.heading")," class houses the heading of the posts list."),(0,t.yg)("h4",{id:"css-grid-item-placement-alternatives"},"CSS Grid: Item Placement Alternatives"),(0,t.yg)("p",null,"We are also placing the item with ",(0,t.yg)("inlineCode",{parentName:"p"},".other-posts.heading")," class into our explicit grid. This time, we are using a couple of shorthand properties:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".other-posts.heading {\n  grid-row: 4 / 5;\n  grid-column: 1 / -1;\n\n  /* Other styles */\n}\n")),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"grid-row")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column")," are alternative syntax for specifying track boundaries for an item. For both of these properties, the first value is the start line and the second value is the end line. So, with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-row: 4 / 5;")," we want the item's height to span one row along the block axis from line ",(0,t.yg)("inlineCode",{parentName:"p"},"4")," to line ",(0,t.yg)("inlineCode",{parentName:"p"},"5"),". And with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-column: 1 / -1;")," we want its width to span all columns on the inline axis."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[GRID AREA SHORTHAND]"),(0,t.yg)("p",{parentName:"admonition"},"We can combine all four boundaries into one property by declaring the ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," with an one-liner:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-area: 1 / 1 / 2 / -1;\n")),(0,t.yg)("p",{parentName:"admonition"},"The sequence of the one-liner shorthand follows this counter-clockwise order:"),(0,t.yg)("ol",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-row-start")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-column-start")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-row-end")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("inlineCode",{parentName:"li"},"grid-column-end"))),(0,t.yg)("p",{parentName:"admonition"},"In other words, item placement with the one-liner syntax starts with the line from where the rows start, extends to the line where columns start, joins the line where its rows end and meets the line where columns end to complete the area."),(0,t.yg)("p",{parentName:"admonition"},"It is useful to remember that it follows the opposite convention of ",(0,t.yg)("inlineCode",{parentName:"p"},"margin")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"padding")," shorthand rules which are structured in clockwise direction. ",(0,t.yg)("a",{parentName:"p",href:"http://localhost:5042/en-US/docs/Web/CSS/CSS_grid_layout/Grids_logical_values_and_writing_modes#the_strange_order_of_values_in_the_grid-area_property"},"This section")," Grids, logical values, and writing modes MDN post on block and inline axes explains the underlying reasons.")),(0,t.yg)("h4",{id:"css-grid-using-a-hybrid-grid"},"CSS Grid: Using a Hybrid Grid"),(0,t.yg)("p",null,"Notice in the HTML of this example, that we have only placed the heading items. In other words, we have not explicitly placed any of the post items:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<div class="container">\n  \x3c!-- highlight-next-line --\x3e\n  <h1 class="title featured heading">Posts</h1>\n  <div class="item">ONE</div>\n  <div class="item">TWO</div>\n  <div class="item">THREE</div>\n  <div class="item">FOUR</div>\n  <div class="item">FIVE</div>\n  <div class="item">SIX</div>\n  \x3c!-- highlight-next-line --\x3e\n  <div class="other-posts heading">\n    <h1 class="title">Other Posts</h1>\n  </div>\n  <div class="item">SEVEN</div>\n  <div class="item">EIGHT</div>\n  <div class="item">NINE</div>\n</div>\n')),(0,t.yg)("p",null,"This is because, it was not necessary to place any of the post items in the explicit grid. Although we defined the explicit column and row grids, since we have not placed the post items on it, they are not part of the explicit grid. However, they were placed automatically by the Grid item placement algorithm using the default tracks and the auto flow."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[THE GRID ITEMS PLACEMENT ALGORITHM]"),(0,t.yg)("p",{parentName:"admonition"},"The ",(0,t.yg)("a",{parentName:"p",href:"https://drafts.csswg.org/css-grid/#auto-placement-algo"},"Grid items placement algorithm")," prioritizes on the explicit grid placement rules. So, they first place any item that are given a real estate on the explicit grid."),(0,t.yg)("p",{parentName:"admonition"},"It keeps a list of unplaced items and any anonymous item. It then calculates the remaining free space available, and places them in available spaces. When free space is used up, it starts placing them on the implicit tracks.")),(0,t.yg)("h3",{id:"css-grid-with-named-lines"},"CSS Grid with Named Lines"),(0,t.yg)("p",null,"CSS Grid allows giving convenient names to grid lines. We name grid lines in the template definitions. In this part, we will rework the above posts list grid with named lines."),(0,t.yg)("p",null,"An updated CSS with line names applied to row templates in the above posts list example looks like this:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show CSS with named grid lines"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"main {\n  width: 95%;\n  margin: auto;\n}\n\n.title {\n  color: rgb(16, 98, 122);\n}\n\n.container {\n  margin: auto;\n\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  /* highlight-start */\n  grid-template-rows:\n    [posts-start featured-heading-start] 100px [featured-heading-end] repeat(\n      2,\n      300px\n    )\n    [other-posts-heading-start] 100px [other-posts-heading-end posts-end];\n  /* highlight-end */\n  grid-auto-rows: 300px;\n  gap: 8px;\n}\n\n.item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 8px;\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.7);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n}\n\n.featured.heading {\n  /* highlight-next-line */\n  grid-row-start: featured-heading-start;\n  grid-column-start: 1;\n  /* highlight-next-line */\n  grid-row-end: featured-heading-end;\n  grid-column-end: -1;\n\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  padding: 16px;\n  background: rgba(130, 196, 236, 0.6);\n}\n\n.other-posts.heading {\n  background: rgba(130, 196, 236, 0.6);\n  /* highlight-next-line */\n  grid-row: other-posts-heading-start / other-posts-heading-end;\n  grid-column: 1 / -1;\n\n  display: flex;\n  align-items: center;\n  padding: 16px;\n}\n"))),(0,t.yg)("h4",{id:"css-grid-grid-line-naming-syntax"},"CSS Grid: Grid Line Naming Syntax"),(0,t.yg)("p",null,"The syntax for setting grid line names on templates looks like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"[line-start-name another-name] 200px [line-end-name] 1fr\n")),(0,t.yg)("p",null,"Grid line naming lets us set easy-to-follow names that describe our design specs. In our example, we are adding line names to the rows template:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-template-rows:\n  [posts-start featured-heading-start] 100px [featured-heading-end] repeat(\n    2,\n    300px\n  )\n  [other-posts-heading-start] 100px [other-posts-heading-end posts-end];\n")),(0,t.yg)("p",null,"Notice, we are adding descriptive names for our use case. Names can be added to the start and end of a track unit. And a line can have multiple names."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[CSS GRID LINE NAMING RULES]"),(0,t.yg)("p",{parentName:"admonition"},"The rules for naming grid lines include:"),(0,t.yg)("ol",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ol"},"Line names are enclosed in square brackets."),(0,t.yg)("li",{parentName:"ol"},"Line names can be added to both the beginning and end of a track unit."),(0,t.yg)("li",{parentName:"ol"},"Multiple names can be assigned to a line."),(0,t.yg)("li",{parentName:"ol"},"Multiple names on a line are separated by a ",(0,t.yg)("inlineCode",{parentName:"li"},"&nbsp;"),"."))),(0,t.yg)("h4",{id:"css-grid-using-named-grid-lines-in-placing-items"},"CSS Grid: Using Named Grid Lines in Placing Items"),(0,t.yg)("p",null,"Using these line names are as straight-forward as using numbers. For example, we reworked the row boundaries of a couple our grid items like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"featured.heading {\n  /* highlight-next-line */\n  grid-row-start: featured-heading-start;\n  grid-column-start: 1;\n  /* highlight-next-line */\n  grid-row-end: featured-heading-end;\n  grid-column-end: -1;\n\n  background: rgba(130, 196, 236, 0.6);\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 16px;\n}\n\n.other-posts.heading {\n  background: rgba(130, 196, 236, 0.6);\n  /* highlight-next-line */\n  grid-row: other-posts-heading-start / other-posts-heading-end;\n  grid-column: 1 / -1;\n\n  display: flex;\n  align-items: center;\n  padding: 16px;\n}\n")),(0,t.yg)("p",null,"Using named lines along with ",(0,t.yg)("inlineCode",{parentName:"p"},"span"),"s prove very sound and expressive for defining grid areas. We're going to see more line naming in the next section where we define a 12-column based grid for a webpage layout."),(0,t.yg)("h2",{id:"css-grid-how-to-implement-a-12-column-grid-with-named-lines"},"CSS Grid: How to Implement a 12-column Grid with Named Lines"),(0,t.yg)("p",null,"In this section, we employ line numbers and names in combination with ",(0,t.yg)("inlineCode",{parentName:"p"},"span"),"s to implement a grid for typical webpage layouts."),(0,t.yg)("p",null,"The layout we're aiming for looks like this:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-07-17-css-grid/css-grid-6.png",alt:"css grid"})),(0,t.yg)("p",null,"The HTML we have for this is available here:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show HTML code for webpage layout"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <link rel="stylesheet" href="./normalize.css" />\n    <link rel="stylesheet" href="./index.css" />\n    <title>CSS Grid</title>\n  </head>\n  <body class="layout">\n    <nav class="nav item">HEADER</nav>\n    <aside class="menu item">MENU</aside>\n    <div class="content item">CONTENT</div>\n    <aside class="title-list item">TITLE LIST</aside>\n    <footer class="footer item">FOOTER</footer>\n  </body>\n</html>\n'))),(0,t.yg)("p",null,"The style for this looks like this:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show 12-column grid styles"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".layout {\n  display: grid;\n  grid-template-columns: repeat(12, [col-start] 1fr);\n  gap: 16px;\n}\n\n.nav {\n  grid-column: col-start / span 12;\n  grid-row: 1 / span 2;\n}\n\n.menu {\n  grid-column: col-start / span 3;\n  grid-row: 3 / span 9;\n}\n\n.content {\n  grid-column: col-start 4 / span 6;\n  grid-row: 3 / span 9;\n}\n\n.title-list {\n  grid-column: col-start 10 / span 3;\n  grid-row: 3 / span 9;\n}\n\n.footer {\n  grid-column: col-start / span 12;\n  grid-row: 12;\n}\n\n.item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  padding: 8px;\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.7);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n}\n"))),(0,t.yg)("p",null,"For the explicit tracks, we are getting 12 ",(0,t.yg)("inlineCode",{parentName:"p"},"1fr")," column units with ",(0,t.yg)("inlineCode",{parentName:"p"},"repeat()"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".layout {\n  display: grid;\n  grid-template-columns: repeat(12, [col-start] 1fr);\n  gap: 16px;\n}\n")),(0,t.yg)("h3",{id:"css-grid-developing-a-grid-language-with-line-names-and-spans"},"CSS Grid: Developing a Grid Language with Line Names and ",(0,t.yg)("inlineCode",{parentName:"h3"},"span"),"s"),(0,t.yg)("p",null,"Notice, this time we are naming each column with ",(0,t.yg)("inlineCode",{parentName:"p"},"[col-start]")," so we can describe the start of a column when we set the grid area of an item."),(0,t.yg)("p",null,"Then we just set real estate for the items participating in the layout."),(0,t.yg)("p",null,"Here, the standalone ",(0,t.yg)("inlineCode",{parentName:"p"},"col-start")," line represents the line name of the first column. For example, we are using ",(0,t.yg)("inlineCode",{parentName:"p"},"col-start")," on ",(0,t.yg)("inlineCode",{parentName:"p"},".nav")," to start at the first column line:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".nav {\n  grid-column: col-start / span 12;\n  grid-row: 1 / span 2;\n}\n")),(0,t.yg)("p",null,"We use the initial ",(0,t.yg)("inlineCode",{parentName:"p"},"col-start")," also on ",(0,t.yg)("inlineCode",{parentName:"p"},".menu")," and ",(0,t.yg)("inlineCode",{parentName:"p"},".footer")," for them to start in the first column line. For other lines, we are appending the line number to ",(0,t.yg)("inlineCode",{parentName:"p"},"col-start"),". For example, on the ",(0,t.yg)("inlineCode",{parentName:"p"},".content")," item:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".content {\n  /* highlight-next-line */\n  grid-column: col-start 4 / span 6;\n  grid-row: 3 / span 9;\n}\n")),(0,t.yg)("p",null,"Appending numbers after a common line name like this makes area definitions both semantic and conflict-free."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[USING THE SAME NAME FOR MULTIPLE GRID LINES]"),(0,t.yg)("p",{parentName:"admonition"},"CSS Grid allows assigning the same name to multiple grid lines. Using same names is helpful in describing track or line attributes common to all columns."),(0,t.yg)("p",{parentName:"admonition"},"For example, we can describe the start of a column with ",(0,t.yg)("inlineCode",{parentName:"p"},"col-start")," and its end with ",(0,t.yg)("inlineCode",{parentName:"p"},"col-end"),". And the start of a row with ",(0,t.yg)("inlineCode",{parentName:"p"},"row-start")," and its end with ",(0,t.yg)("inlineCode",{parentName:"p"},"row-end"),". Practically, these names are assignable to all columns and rows. So, we can repeat the same name for all lines. We can then conveniently apply it to an item's grid area:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-css"},".item {\n  grid-area: col-start 4 / span 6;\n}\n"))),(0,t.yg)("p",null,"Notice, we did not need to use any explicit row templates for this layout, yet we are able to set row boundaries. We depended on implicit row track numbers for this."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[TAKE ADVANTAGE OF IMPLICIT TRACKS WHERE POSSIBLE]"),(0,t.yg)("p",{parentName:"admonition"},"It is a good practice to take advantage of the implicit grid at any point, because it is already baked in. For doing so, we should make sure that we are really aware of what goes under the hood in a CSS Grid."),(0,t.yg)("p",{parentName:"admonition"},"For effective usage of the implicit grid with the explicit one, aspects to always keep in mind are:"),(0,t.yg)("ol",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ol"},"How the block and inline axes are positioned with respect to text direction and writing mode."),(0,t.yg)("li",{parentName:"ol"},"How the explicit grid is laid out. Whether with either column or row templates only, or with both. Whether area templates are used, or all are combined together."),(0,t.yg)("li",{parentName:"ol"},"How the Grid items placement algorithm works."),(0,t.yg)("li",{parentName:"ol"},"Whether there are subgrids or not."),(0,t.yg)("li",{parentName:"ol"},"How anonymous items behave."))),(0,t.yg)("h4",{id:"css-grid-how-to-use-spans-in-a-grid-item"},"CSS Grid: How to Use ",(0,t.yg)("inlineCode",{parentName:"h4"},"span"),"s in a Grid Item"),(0,t.yg)("p",null,"Notice also that we use ",(0,t.yg)("inlineCode",{parentName:"p"},"span"),"s to set the grid item areas here:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".title-list {\n  grid-column: col-start 10 / span 3;\n  grid-row: 3 / span 9;\n}\n")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"span")," syntax takes a number after it. The number describes the number of cells after the start line the area should cover."),(0,t.yg)("p",null,"CSS Grid calculates the line numbers from this number. ",(0,t.yg)("inlineCode",{parentName:"p"},"span"),"s should not be confused with line numbers."),(0,t.yg)("h2",{id:"css-grid-layouts-based-on-area-templates"},"CSS Grid: Layouts Based on Area Templates"),(0,t.yg)("p",null,"In this section, we use grid area templates to build a similar looking layout as the above."),(0,t.yg)("p",null,"For this we have the same HTML as the above ",(0,t.yg)("a",{parentName:"p",href:"#css-grid-how-to-implement-a-12-column-grid-with-named-lines"},"12-column grid example"),". We'll need to only tamper with the grid template and item placement rules."),(0,t.yg)("p",null,"Here's the updated CSS:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show updated CSS for area template based grid"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr;\n  /* highlight-start */\n  grid-template-areas:\n    "nav nav nav"\n    "menu content title-list"\n    "footer footer footer";\n  /* highlight-end */\n  gap: 16px;\n}\n\n.nav {\n  /* highlight-next-line */\n  grid-area: nav;\n}\n\n.menu {\n  /* highlight-next-line */\n  grid-area: menu;\n}\n\n.content {\n  /* highlight-next-line */\n  grid-area: content;\n}\n\n.title-list {\n  /* highlight-next-line */\n  grid-area: title-list;\n}\n\n.footer {\n  /* highlight-next-line */\n  grid-area: footer;\n}\n\n.item {\n  padding: 8px;\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.7);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'))),(0,t.yg)("h3",{id:"css-grid-working-with-template-areas"},"CSS Grid: Working with Template Areas"),(0,t.yg)("p",null,"Notice, we have applied a template area to our grid:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr;\n  /* highlight-start */\n  grid-template-areas:\n    "nav nav nav"\n    "menu content title-list"\n    "footer footer footer";\n  /* highlight-end */\n  gap: 16px;\n}\n')),(0,t.yg)("p",null,"We can see that, we have specified strings of text on the area template values."),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[GRID TEMPLATE AREAS SYNTAX]"),(0,t.yg)("p",{parentName:"admonition"},"CSS Grid template areas offer alternate ways of positioning items on a two dimensional layout. Grid items are each assigned an area name with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," which are then placed on a template by specifying them in the positions they should appear on the layout."),(0,t.yg)("p",{parentName:"admonition"},"The syntax for defining area templates follows these rules:"),(0,t.yg)("ol",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ol"},"The template is made from strings of texts."),(0,t.yg)("li",{parentName:"ol"},"Each string represents a row."),(0,t.yg)("li",{parentName:"ol"},"Each string specifies the items placed in grid columns."),(0,t.yg)("li",{parentName:"ol"},"There can be as many strings as the number of explicit rows."),(0,t.yg)("li",{parentName:"ol"},"There can be a single string for each implicit row."),(0,t.yg)("li",{parentName:"ol"},"There can be as many items in each string as the number of explicit columns."),(0,t.yg)("li",{parentName:"ol"},"Empty cells are represented by a ",(0,t.yg)("inlineCode",{parentName:"li"},".")," (dot)."))),(0,t.yg)("p",null,"Area templates are like maps which shows where items are placed in the grid. They are also called ",(0,t.yg)("strong",{parentName:"p"},"ascii-art templates"),". It's always suggested to keep the art intuitive."),(0,t.yg)("p",null,"For example, in our layout, we want the ",(0,t.yg)("inlineCode",{parentName:"p"},".nav")," items to span across the first row in all columns. With three ",(0,t.yg)("inlineCode",{parentName:"p"},'"menu content title-list"'),", we have placed the ",(0,t.yg)("inlineCode",{parentName:"p"},".menu")," item to the start of the line, the ",(0,t.yg)("inlineCode",{parentName:"p"},".content")," in the center and ",(0,t.yg)("inlineCode",{parentName:"p"},".title-list")," to the end of the line -- all spanning three rows. And we have the ",(0,t.yg)("inlineCode",{parentName:"p"},".footer")," item in the last row spanning all three columns."),(0,t.yg)("admonition",{type:"warning"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[REMOTE AREAS BREAK THE GRID]"),(0,t.yg)("p",{parentName:"admonition"},"It is important that we don't set inconsistent regions on the area based template. For example, an item allocated multiple non-adjacent areas breaks the layout:"),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr;\n  grid-template-areas:\n        /* highlight-next-line */\n    "nav nav nav"\n    "menu content title-list"\n    /* highlight-start */\n    "menu content nav"\n    "footer footer nav";\n  /* highlight-end */\n  gap: 16px;\n}\n')),(0,t.yg)("p",{parentName:"admonition"},"In general, an item's region should be defined with adjacent areas, in order to be able to merge all allocated cells in that region.")),(0,t.yg)("h3",{id:"space-distribution-in-css-grid"},"Space Distribution in CSS Grid"),(0,t.yg)("h4",{id:"css-grid-space-distribution-on-tracks-with-fractions"},"CSS Grid: Space Distribution on Tracks with Fractions"),(0,t.yg)("p",null,"Notice also in the above template definitions, we have defined a template with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-columns"),". This column template defines an explicit track of three units:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},"grid-template-columns: 1fr 4fr 1fr;\n")),(0,t.yg)("p",null,"You can notice that we want to allocate ",(0,t.yg)("inlineCode",{parentName:"p"},"4fr"),"s to the center column. Using fractions in the template is one of the ways by which we are able to distribute amount of space on a grid."),(0,t.yg)("h4",{id:"css-grid-space-distribution-by-placement"},"CSS Grid: Space Distribution by Placement"),(0,t.yg)("p",null,"The physical space occupied by an item is also determined by how many cells we allocate to it. For example, with a sequence of 3 ",(0,t.yg)("inlineCode",{parentName:"p"},"nav"),"s, we are giving away an entire row to the nav bar that actually consists of two ",(0,t.yg)("inlineCode",{parentName:"p"},"1fr"),"s and one ",(0,t.yg)("inlineCode",{parentName:"p"},"4fr"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'grid-template-columns: 1fr 4fr 1fr;\ngrid-template-areas:\n        /* highlight-next-line */ "nav nav nav";\n')),(0,t.yg)("h3",{id:"how-css-grid-template-areas-work"},"How CSS Grid Template Areas Work"),(0,t.yg)("p",null,"Template area based grids can be built both on column and row template definitions and also on the implicit tracks. So, CSS Grid area templates can work hand in hand with explicit tracks defined with ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-columns")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-template-rows"),"."),(0,t.yg)("p",null,"If an explicit grid exists, the area template should comply to those track definitions by complying with their total column and row tracks. Otherwise, the grid breaks. Also, as in other cases, unplaced items are placed on the implicit grid."),(0,t.yg)("h4",{id:"how-to-place-items-in-a-template-area-based-grid"},"How to Place Items in a Template Area Based Grid"),(0,t.yg)("p",null,"Before we actually place items on the grid, we have to assign these area names to their items:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".nav {\n  /* highlight-next-line */\n  grid-area: nav;\n}\n\n.menu {\n  /* highlight-next-line */\n  grid-area: menu;\n}\n\n.content {\n  /* highlight-next-line */\n  grid-area: content;\n}\n\n.title-list {\n  /* highlight-next-line */\n  grid-area: title-list;\n}\n\n.footer {\n  /* highlight-next-line */\n  grid-area: footer;\n}\n")),(0,t.yg)("p",null,"So, we have set the area names of the items to their CSS ",(0,t.yg)("inlineCode",{parentName:"p"},"class"),"es with the ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," property. These assigned items will areas occupy their regions in the template when we add the classed to their markup in the HTML document."),(0,t.yg)("p",null,"Notice this time, we are using the area names as CSS entities (such as ",(0,t.yg)("inlineCode",{parentName:"p"},"content"),") to set the ",(0,t.yg)("inlineCode",{parentName:"p"},"grid-area")," value, ",(0,t.yg)("strong",{parentName:"p"},"not")," as strings. Since we defined these names on the template, they are treated as entities. And strings versions will not work."),(0,t.yg)("h2",{id:"css-grid-examples-implementing-responsive-layouts"},"CSS Grid Examples: Implementing Responsive Layouts"),(0,t.yg)("p",null,"In this section, we produce responsive layouts from the template areas based grid we just built and also from the 12-column responsive grid we defined previously."),(0,t.yg)("p",null,"The HTML document remains the same with ",(0,t.yg)("inlineCode",{parentName:"p"},".header"),", ",(0,t.yg)("inlineCode",{parentName:"p"},".menu"),", ",(0,t.yg)("inlineCode",{parentName:"p"},".content"),", ",(0,t.yg)("inlineCode",{parentName:"p"},".title-list")," and ",(0,t.yg)("inlineCode",{parentName:"p"},".footer")," sections."),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show HTML"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <link rel="stylesheet" href="./normalize.css" />\n    <link rel="stylesheet" href="./index.css" />\n    <title>CSS Grid</title>\n  </head>\n  <body class="layout">\n    <nav class="nav item">HEADER</nav>\n    <aside class="menu item">MENU</aside>\n    <div class="content item">CONTENT</div>\n    <aside class="title-list item">TITLE LIST</aside>\n    <footer class="footer item">FOOTER</footer>\n  </body>\n</html>\n'))),(0,t.yg)("h3",{id:"css-grid-a-template-areas-based-responsive-layout"},"CSS Grid: A Template Areas Based Responsive Layout"),(0,t.yg)("p",null,"We are implementing two ",(0,t.yg)("inlineCode",{parentName:"p"},"@media")," queries for three screen sizes. We apply a mobile first approach, because doing so allows us to make use of existing styles from a lower screen width on larger ones."),(0,t.yg)("p",null,"Here's the updated styles:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show responsive layout with grid template areas"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template-areas:\n    "nav"\n    "menu"\n    "title-list"\n    "content"\n    "footer";\n  gap: 16px;\n}\n\n.nav {\n  grid-area: nav;\n}\n\n.menu {\n  grid-area: menu;\n}\n\n.content {\n  grid-area: content;\n}\n\n.title-list {\n  grid-area: title-list;\n}\n\n.footer {\n  grid-area: footer;\n}\n\n.item {\n  padding: 8px;\n  border: 3px solid rgb(54, 150, 202);\n  background-color: rgba(130, 196, 236, 0.7);\n  color: rgb(255, 255, 255);\n  font-size: 24px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@media (min-width: 560px) {\n  .layout {\n    grid-template-columns: 1fr 4fr;\n    grid-template-areas:\n      "nav nav"\n      "menu menu"\n      "title-list content"\n      "title-list content"\n      "footer footer";\n    gap: 16px;\n  }\n}\n\n@media (min-width: 780px) {\n  .layout {\n    grid-template-columns: 1fr 4fr 1fr;\n    grid-template-areas:\n      "nav nav nav"\n      "menu content title-list"\n      "menu content title-list"\n      "menu content title-list"\n      "footer footer footer";\n  }\n}\n'))),(0,t.yg)("h4",{id:"css-grid-responsive-layouts-mobile-first-approach"},"CSS Grid Responsive Layouts: Mobile First Approach"),(0,t.yg)("p",null,"We start with a base template areas map which places items on one column and a row for each layout item:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'.layout {\n  display: grid;\n  grid-template-areas:\n    "nav"\n    "menu"\n    "title-list"\n    "content"\n    "footer";\n  gap: 16px;\n}\n')),(0,t.yg)("h4",{id:"responsive-layout-with-css-grid-media-queries-with-minimal-overhaul"},"Responsive Layout with CSS Grid: Media Queries with Minimal Overhaul"),(0,t.yg)("p",null,"And then in the media queries, we are introducing two and three columns at ",(0,t.yg)("inlineCode",{parentName:"p"},"560px")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"780px")," respectively:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},'@media (min-width: 560px) {\n  .layout {\n    grid-template-columns: 1fr 4fr;\n    grid-template-areas:\n            /* highlight-start */\n      "nav nav"\n      "menu menu"\n      "title-list content"\n      "title-list content"\n      "footer footer";\n    /* highlight-end */\n    gap: 16px;\n  }\n}\n\n@media (min-width: 780px) {\n  .layout {\n    grid-template-columns: 1fr 4fr 1fr;\n    grid-template-areas:\n        /* highlight-start */\n      "nav nav nav"\n      "menu content title-list"\n      "menu content title-list"\n      "menu content title-list"\n      "footer footer footer";\n    /* highlight-end */\n  }\n}\n')),(0,t.yg)("p",null,"Notice, we have changed the order of ",(0,t.yg)("inlineCode",{parentName:"p"},"title-list")," on mobile and at ",(0,t.yg)("inlineCode",{parentName:"p"},"560px"),". It's original position on the document flow is after the ",(0,t.yg)("inlineCode",{parentName:"p"},".content")," class:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<body class="layout">\n  <nav class="nav item">HEADER</nav>\n  <aside class="menu item">MENU</aside>\n  <div class="content item">CONTENT</div>\n  \x3c!-- highlight-next-line --\x3e\n  <aside class="title-list item">TITLE LIST</aside>\n  <footer class="footer item">FOOTER</footer>\n</body>\n')),(0,t.yg)("p",null,"It is generally suggested ",(0,t.yg)("strong",{parentName:"p"},"not")," to mess with the visual order of items on a grid, but here the visual order of ",(0,t.yg)("inlineCode",{parentName:"p"},"title-list")," does not bring much harm -- as we are trying to keep changes minimal."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[KEEP TAB ORDER CONSISTENT]"),(0,t.yg)("p",{parentName:"admonition"},"CSS Grid lets radically rearranging grid items. However, it is harmful to change the visual order drastically in a way that is inconsistent with the document's flow."),(0,t.yg)("p",{parentName:"admonition"},"Changing visual order harms accessibility by changing the ",(0,t.yg)("strong",{parentName:"p"},"tab order")," of grid items. So, it is important that we don't make any rearrangements that disrupts the tab order of the document."),(0,t.yg)("p",{parentName:"admonition"},"We can definitely do some reordering, if doing so has not much impact on the tab order of items. A useful way to test out the changes is by tabbing through the region and see if they remain in the same flow.")),(0,t.yg)("p",null,"Notice, we are also resorting to an explicit grid with column templates. Using an explicit track helps when we need to adopt track lengths of various sizes, which are not normally possible with the implicit tracks. Here our explicit column tracks are allocating ",(0,t.yg)("inlineCode",{parentName:"p"},"4fr")," units to the second column."),(0,t.yg)("h3",{id:"css-grid-a-responsive-layout-from-line-names-based-12-column-grid"},"CSS Grid: A Responsive Layout from Line Names Based 12-column Grid"),(0,t.yg)("p",null,"The same layout with 12-columns using named lines has this style:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show responsive layout from 12-column grid with named lines"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".layout {\n  display: grid;\n  grid-template-columns: repeat(12, [col-start] 1fr);\n  gap: 16px;\n}\n\n.nav,\n.menu,\n.content,\n.footer {\n  grid-column: col-start / span 12;\n}\n\n.title-list {\n  grid-column: col-start / span 12;\n  grid-row: 3;\n}\n\n@media (min-width: 560px) {\n  .nav {\n    grid-column: col-start / span 12;\n    grid-row: 1 / span 2;\n  }\n\n  .menu {\n    grid-column: col-start / span 12;\n    grid-row: 3;\n  }\n\n  .content {\n    grid-column: col-start / span 9;\n    grid-row: 4 / span 9;\n  }\n\n  .title-list {\n    grid-column: col-start 10 / span 3;\n    grid-row: 4 / span 9;\n  }\n\n  .footer {\n    grid-column: col-start / span 12;\n    grid-row: 13;\n  }\n}\n\n@media (min-width: 780px) {\n  .nav {\n    grid-column: col-start / span 12;\n    grid-row: 1 / span 2;\n  }\n\n  .menu {\n    grid-column: col-start / span 3;\n    grid-row: 3 / span 9;\n  }\n\n  .content {\n    grid-column: col-start 4 / span 6;\n    grid-row: 3 / span 9;\n  }\n\n  .title-list {\n    grid-column: col-start 10 / span 3;\n    grid-row: 3 / span 9;\n  }\n\n  .footer {\n    grid-column: col-start / span 12;\n    grid-row: 12;\n  }\n}\n"))),(0,t.yg)("h2",{id:"css-grid-best-practices"},"CSS Grid: Best Practices"),(0,t.yg)("p",null,"Throughout this post, as we delved into the CSS Grid concepts with examples, we have also touched extensively on most of the best practices while implementing a CSS Grid based layout. It is worth having them revisited, along with some others."),(0,t.yg)("p",null,"So, here is the list:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Think of the grid in terms of block and inline axes. This is useful because plain column and row axes are visual references which change from region to region in a document."),(0,t.yg)("li",{parentName:"ul"},"Be aware of how document language, text direction and writing mode changes. This is because they change the orientation of the block and inline axes, and hence the direction of grid column and row axes."),(0,t.yg)("li",{parentName:"ul"},"Understand how the implicit grid behaves, both on its own and on its interaction with an explicit grid. Make use of the implicit grid, when it is enough and an explicit grid can be avoided."),(0,t.yg)("li",{parentName:"ul"},"Keep in perspective how the Grid items placement algorithm works and how the auto flow places items on the implicit and the explicit grid."),(0,t.yg)("li",{parentName:"ul"},"Try to build composable templates and make reasonable tradeoffs on whether our layout best works with one template or the other."),(0,t.yg)("li",{parentName:"ul"},"Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"repeat()")," syntax to compose repeating patterns of cells in track lists."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"fr"),"s, ",(0,t.yg)("inlineCode",{parentName:"li"},"px"),"els, ",(0,t.yg)("inlineCode",{parentName:"li"},"%"),"s and ",(0,t.yg)("inlineCode",{parentName:"li"},"span"),"s all have their appropriate use cases. Feel free to combine track units that best fit our use cases."),(0,t.yg)("li",{parentName:"ul"},"Conserve the document order by changing the visual order of grid items in ways that does not distort tab order. This is especially necessary for accessibility with screen readers.")))}h.isMDXComponent=!0}}]);