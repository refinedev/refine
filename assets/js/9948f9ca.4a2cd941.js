"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[87090],{58860:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>c});var a=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(t),g=o,c=u["".concat(s,".").concat(g)]||u[g]||m[g]||r;return t?a.createElement(c,l(l({ref:n},p),{},{components:t})):a.createElement(c,l({ref:n},p))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},93288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>N,frontMatter:()=>i,metadata:()=>d,toc:()=>u});t(37953);var a=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const i={title:"useModalForm"},s=void 0,d={unversionedId:"packages/react-hook-form/use-modal-form/index",id:"packages/react-hook-form/use-modal-form/index",title:"useModalForm",description:"useModalForm hook allows you to manage a form within a modal. It provides some useful methods to handle the form modal.",source:"@site/docs/packages/react-hook-form/use-modal-form/index.md",sourceDirName:"packages/react-hook-form/use-modal-form",slug:"/packages/react-hook-form/use-modal-form/",permalink:"/docs/packages/react-hook-form/use-modal-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/packages/react-hook-form/use-modal-form/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1756388384,formattedLastUpdatedAt:"Aug 28, 2025",frontMatter:{title:"useModalForm"},sidebar:"mainSidebar",previous:{title:"useForm",permalink:"/docs/packages/react-hook-form/use-form/"},next:{title:"useStepsForm",permalink:"/docs/packages/react-hook-form/use-steps-form/"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"defaultValues",id:"defaultvalues",level:3},{value:"defaultVisible",id:"defaultvisible",level:3},{value:"autoSubmitClose",id:"autosubmitclose",level:3},{value:"autoResetForm",id:"autoresetform",level:3},{value:"autoResetFormWhenClose",id:"autoresetformwhenclose",level:3},{value:"warnWhenUnsavedChanges",id:"warnwhenunsavedchanges",level:3},{value:"syncWithLocation",id:"syncwithlocation",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"onFinish",id:"onfinish",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"invalidateOnClose",id:"invalidateonclose",level:4},{value:"Return Values",id:"return-values",level:2},{value:"visible",id:"visible",level:3},{value:"title",id:"title",level:3},{value:"close",id:"close",level:3},{value:"submit",id:"submit",level:3},{value:"show",id:"show",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"ModalReturnValues",id:"modalreturnvalues",level:4},{value:"Example",id:"example",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},g=m("DocThumbsUpDownFeedbackWidget"),c=m("Tabs"),y=m("TabItem"),h=m("PropsTable"),f=m("CodeSandboxExample"),b={toc:u},v="wrapper";function N(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(v,r(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},b,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'type ModalPropsType = {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n};\n\nconst Modal: React.FC<ModalPropsType> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  return (\n    <>\n      <div className="overlay" onClick={onClose}></div>\n      <div className="modal">\n        <div className="modal-title">\n          <button className="close-button" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className="modal-content">{children}</div>\n      </div>\n    </>\n  );\n};\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"html,\nbody {\n  background: white;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 1000;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  z-index: 1000;\n  width: 500px;\n  overflow-y: auto;\n}\n\n.modal .modal-title {\n  display: flex;\n  justify-content: flex-end;\n  padding: 4px;\n}\n\n.modal .modal-content {\n  padding: 0px 16px 16px 16px;\n}\n\n.form {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form .form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.form input,\nselect,\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," hook allows you to manage a form within a modal. It provides some useful methods to handle the form modal."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/react-hook-form"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," package. This means that you can use all the features of ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(g,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"We'll show three examples, ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"'),", ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,a.yg)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,a.yg)(y,{value:"create",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError, useTable } from "@refinedev/core";\nimport { useModalForm } from "@refinedev/react-hook-form";\n\nimport { Modal } from "@components";\n\nconst PostList = () => {\n  const { result, tableQuery } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "id",\n          order: "desc",\n        },\n      ],\n    },\n  });\n\n  // highlight-start\n  const {\n    formState: { errors },\n    refineCore: { onFinish, formLoading },\n    modal: { visible, close, show },\n    register,\n    handleSubmit,\n    saveButtonProps,\n  } = useModalForm<IPost, HttpError, IPost>({\n    refineCoreProps: { action: "create" },\n  });\n  // highlight-end\n\n  const loading = tableQuery?.isLoading;\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      {/* highlight-start */}\n      <Modal isOpen={visible} onClose={close}>\n        <form className="form" onSubmit={handleSubmit(onFinish)}>\n          <div className="form-group">\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </div>\n          <div className="form-group">\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </div>\n          <button type="submit" {...saveButtonProps}>\n            {formLoading ? "Loading" : "Save"}\n          </button>\n        </form>\n      </Modal>\n      <button onClick={() => show()}>Create Post</button>\n      {/* highlight-end */}\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Title</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {result?.data?.map((post) => (\n            <tr key={post.id}>\n              <td>{post.id}</td>\n              <td>{post.title}</td>\n              <td>{post.status}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport interface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,a.yg)(y,{value:"edit",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError, useTable } from "@refinedev/core";\nimport { useModalForm } from "@refinedev/react-hook-form";\n\nimport { Modal } from "@components";\n\nconst PostList = () => {\n  const { result, tableQuery } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "id",\n          order: "desc",\n        },\n      ],\n    },\n  });\n\n  // highlight-start\n  const {\n    formState: { errors },\n    refineCore: { onFinish, formLoading },\n    modal: { visible, close, show },\n    register,\n    handleSubmit,\n    saveButtonProps,\n  } = useModalForm<IPost, HttpError, IPost>({\n    refineCoreProps: { action: "edit" },\n  });\n  // highlight-end\n\n  const loading = tableQuery?.isLoading;\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      {/* highlight-start */}\n      <Modal isOpen={visible} onClose={close}>\n        <form className="form" onSubmit={handleSubmit(onFinish)}>\n          <div className="form-group">\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </div>\n          <div className="form-group">\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </div>\n          <button type="submit" {...saveButtonProps}>\n            {formLoading ? "Loading" : "Save"}\n          </button>\n        </form>\n      </Modal>\n      {/* highlight-end */}\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Title</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {result?.data.map((post) => (\n            <tr key={post.id}>\n              <td>{post.id}</td>\n              <td>{post.title}</td>\n              <td>{post.status}</td>\n              <td>\n                {/* highlight-start */}\n                <button onClick={() => show(post.id)}>Edit</button>\n                {/* highlight-end */}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport interface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,a.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"Refine doesn't automatically add a ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList>")," which opens edit form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.yg)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list. In that way, ",(0,a.yg)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),"."),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<td>\n  {/* highlight-start */}\n  <button onClick={() => show(post.id)}>Edit</button>\n  {/* highlight-end */}\n</td>\n")),(0,a.yg)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.yg)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,a.yg)(y,{value:"clone",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError, useTable } from "@refinedev/core";\nimport { useModalForm } from "@refinedev/react-hook-form";\n\nimport { Modal } from "@components";\n\nconst PostList = () => {\n  const { result, tableQuery } = useTable<IPost>({\n    initialSorter: [\n      {\n        field: "id",\n        order: "desc",\n      },\n    ],\n  });\n\n  // highlight-start\n  const {\n    formState: { errors },\n    refineCore: { onFinish, formLoading },\n    modal: { visible, close, show },\n    register,\n    handleSubmit,\n    saveButtonProps,\n  } = useModalForm<IPost, HttpError, IPost>({\n    refineCoreProps: { action: "clone" },\n  });\n  // highlight-end\n\n  const loading = tableQuery?.isLoading;\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      {/* highlight-start */}\n      <Modal isOpen={visible} onClose={close}>\n        <form className="form" onSubmit={handleSubmit(onFinish)}>\n          <div className="form-group">\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </div>\n          <div className="form-group">\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </div>\n          <button type="submit" {...saveButtonProps}>\n            {formLoading ? "Loading" : "Save"}\n          </button>\n        </form>\n      </Modal>\n      {/* highlight-end */}\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Title</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {result?.data.map((post) => (\n            <tr key={post.id}>\n              <td>{post.id}</td>\n              <td>{post.title}</td>\n              <td>{post.status}</td>\n              <td>\n                {/* highlight-start */}\n                <button onClick={() => show(post.id)}>Clone</button>\n                {/* highlight-end */}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport interface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,a.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"Refine doesn't automatically add a ",(0,a.yg)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList>")," which opens edit form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.yg)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.yg)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list. In that way, ",(0,a.yg)("inlineCode",{parentName:"p"},"<Clone>")," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),"."),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<td>\n  {/* highlight-start */}\n  <button onClick={() => show(post.id)}>clone</button>\n  {/* highlight-end */}\n</td>\n")),(0,a.yg)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.yg)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"See Modal component"),(0,a.yg)("div",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/Modal/index.tsx"',title:'"src/components/Modal/index.tsx"'},'type ModalPropsType = {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n};\n\nconst Modal: React.FC<ModalPropsType> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  return (\n    <>\n      <div className="overlay" onClick={onClose}></div>\n      <div className="modal">\n        <div className="modal-title">\n          <button className="close-button" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className="modal-content">{children}</div>\n      </div>\n    </>\n  );\n};\n')))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"See styles"),(0,a.yg)("div",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="src/styles.css"',title:'"src/styles.css"'},"* {\n  box-sizing: border-box;\n}\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 1000;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  z-index: 1000;\n  width: 500px;\n  overflow-y: auto;\n}\n\n.modal .modal-title {\n  display: flex;\n  justify-content: flex-end;\n  padding: 4px;\n}\n\n.modal .modal-content {\n  padding: 0px 16px 16px 16px;\n}\n\n.form {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form .form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.form input,\nselect,\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n"))))),(0,a.yg)("h2",{id:"properties"},"Properties"),(0,a.yg)(g,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," props also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#properties"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},(0,a.yg)("inlineCode",{parentName:"a"},"React Hook Form useForm"))," props also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},(0,a.yg)("inlineCode",{parentName:"a"},"React Hook Form"))," docs.")),(0,a.yg)("h3",{id:"defaultvalues"},"defaultValues"),(0,a.yg)(g,{id:"defaultvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed. This property is only available with ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"')," action."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  defaultValues: {\n    title: "Hello World",\n  },\n});\n'))),(0,a.yg)("h3",{id:"defaultvisible"},"defaultVisible"),(0,a.yg)(g,{id:"defaultvisible",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", modal will be visible by default. Defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    defaultVisible: true,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autosubmitclose"},"autoSubmitClose"),(0,a.yg)(g,{id:"autosubmitclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", modal will be closed after successful submit. Defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoSubmitClose: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autoresetform"},"autoResetForm"),(0,a.yg)(g,{id:"autoresetform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", form will be reset after successful submit. Defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoResetForm: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autoresetformwhenclose"},"autoResetFormWhenClose"),(0,a.yg)(g,{id:"autoresetformwhenclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", form will be reset when modal closes. Defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoResetFormWhenClose: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"warnwhenunsavedchanges"},"warnWhenUnsavedChanges"),(0,a.yg)(g,{id:"warnwhenunsavedchanges",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When you have unsaved changes and try to leave the current page, Refine shows a confirmation modal box. To activate this feature. By default, this feature is disabled."),(0,a.yg)("p",null,"You can also set this value in ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/refine-component#warnwhenunsavedchanges"},(0,a.yg)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  warnWhenUnsavedChanges: true,\n});\n"))),(0,a.yg)("h3",{id:"syncwithlocation"},"syncWithLocation"),(0,a.yg)(g,{id:"syncwithlocation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", the modals visibility state and the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. By default, this feature is disabled."),(0,a.yg)("p",null,"This property can also be set as an object ",(0,a.yg)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.yg)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  syncWithLocation: { key: "my-modal", syncId: true },\n});\n'))),(0,a.yg)("h3",{id:"autosave"},"autoSave"),(0,a.yg)(g,{id:"autosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.yg)("p",null,"By default the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.yg)("p",null,"It also supports ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.yg)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed.")),(0,a.yg)("h4",{id:"enabled"},"enabled"),(0,a.yg)(g,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"To enable the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.yg)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),". By default, it is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"debounce"},"debounce"),(0,a.yg)(g,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Set the debounce time for the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," prop. Default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      debounce: 2000,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"onfinish"},"onFinish"),(0,a.yg)(g,{id:"onfinish",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,a.yg)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-start\n      onFinish: (values) => {\n        return {\n          foo: "bar",\n          ...values,\n        };\n      },\n      // highlight-end\n    },\n  },\n});\n'))),(0,a.yg)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,a.yg)(g,{id:"invalidateonunmount",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default it is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnUnmount: true,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"invalidateonclose"},"invalidateOnClose"),(0,a.yg)(g,{id:"invalidateonclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the modal is closed. By default, it invalidates the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default it is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnClose: true,\n    },\n  },\n});\n"))),(0,a.yg)("h2",{id:"return-values"},"Return Values"),(0,a.yg)(g,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},(0,a.yg)("inlineCode",{parentName:"a"},"React Hook Form useForm"))," return values also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,a.yg)("h3",{id:"visible"},"visible"),(0,a.yg)(g,{id:"visible",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Current visibility state of the modal."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  defaultVisible: true,\n});\n\nconsole.log(modalForm.modal.visible); // true\n"))),(0,a.yg)("h3",{id:"title"},"title"),(0,a.yg)(g,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Title of the modal. Based on resource and action values"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  modal: { title },\n} = useModalForm({\n  refineCoreProps: {\n    resource: "posts",\n    action: "create",\n  },\n});\n\nconsole.log(title); // "Create Post"\n'))),(0,a.yg)("h3",{id:"close"},"close"),(0,a.yg)(g,{id:"close",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A function that can close the modal. It's useful when you want to close the modal manually."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  handleSubmit,\n  register,\n  modal,\n  refineCore: { onFinish },\n} = useModalForm();\n\nreturn (\n  <>\n    <button onClick={show}>Show Modal</button>\n    <Modal {...modal}>\n      <form onSubmit={handleSubmit(onFinish)}>\n        <div>\n          <label>Title: </label>\n          <input {...register("title")} />\n        </div>\n        <div>\n          <button type="submit" onClick={modal.close}>\n            Cancel\n          </button>\n          <button type="submit" onClick={modal.submit}>\n            Save\n          </button>\n        </div>\n      </form>\n    </Modal>\n  </>\n);\n'))),(0,a.yg)("h3",{id:"submit"},"submit"),(0,a.yg)(g,{id:"submit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A function that can submit the form. It's useful when you want to submit the form manually."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  handleSubmit,\n  register,\n  modal,\n  refineCore: { onFinish },\n} = useModalForm();\n\n// ---\n\nreturn (\n  <>\n    <button onClick={show}>Show Modal</button>\n    <Modal {...modal}>\n      <form onSubmit={handleSubmit(onFinish)}>\n        <div>\n          <label>Title: </label>\n          <input {...register("title")} />\n        </div>\n        <div>\n          <button type="submit" onClick={modal.submit}>\n            Save\n          </button>\n        </div>\n      </form>\n    </Modal>\n  </>\n);\n'))),(0,a.yg)("h3",{id:"show"},"show"),(0,a.yg)(g,{id:"show",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A function that can show the modal."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  saveButtonProps,\n  handleSubmit,\n  register,\n  modal,\n  refineCore: { onFinish, formLoading },\n} = useModalForm();\n\nreturn (\n  <>\n    <button onClick={show}>Show Modal</button>\n    <Modal {...modal}>\n      <form onSubmit={handleSubmit(onFinish)}>\n        <div>\n          <label>Title: </label>\n          <input {...register("title")} />\n        </div>\n        <div>\n          <button type="submit" {...saveButtonProps}>\n            Save\n          </button>\n        </div>\n      </form>\n    </Modal>\n  </>\n);\n'))),(0,a.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,a.yg)(g,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,'It contains all the props needed by the "submit" button within the modal (disabled,loading etc.). You can manually pass these props to your custom button.'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  saveButtonProps,\n  handleSubmit,\n  register,\n  modal,\n  refineCore: { onFinish, formLoading },\n} = useModalForm();\n\nreturn (\n  <>\n    <button onClick={show}>Show Modal</button>\n    <Modal {...modal}>\n      <form onSubmit={handleSubmit(onFinish)}>\n        <div>\n          <label>Title: </label>\n          <input {...register("title")} />\n        </div>\n        <div>\n          <button\n            type="submit"\n            disabled={saveButtonProps.disabled}\n            onClick={(e) => {\n              // -- your custom logic\n              saveButtonProps.onClick(e);\n            }}\n          >\n            Save\n          </button>\n        </div>\n      </form>\n    </Modal>\n  </>\n);\n'))),(0,a.yg)("h2",{id:"api-reference"},"API Reference"),(0,a.yg)("h3",{id:"properties-1"},"Properties"),(0,a.yg)(g,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(h,{module:"@refinedev/react-hook-form/useModalForm",mdxType:"PropsTable"}),(0,a.yg)("admonition",{title:"External Props",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"It also accepts all props of ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},"useForm")," hook available in the ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form"),"."))),(0,a.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.yg)(g,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,a.yg)("td",{parentName:"tr",align:null},"Field Values for mutation function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TContext"),(0,a.yg)("td",{parentName:"tr",align:null},"Second generic type of the ",(0,a.yg)("inlineCode",{parentName:"td"},"useForm")," of the React Hook Form."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,a.yg)("h3",{id:"return-values-1"},"Return values"),(0,a.yg)(g,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"modal"),(0,a.yg)("td",{parentName:"tr",align:null},"Relevant states and methods to control the modal"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#modalreturnvalues"},(0,a.yg)("inlineCode",{parentName:"a"},"ModalReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"refineCore"),(0,a.yg)("td",{parentName:"tr",align:null},"The return values of the ",(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"React Hook Form Return Values"),(0,a.yg)("td",{parentName:"tr",align:null},"See ",(0,a.yg)("a",{parentName:"td",href:"https://react-hook-form.com/api/useform"},"React Hook Form")," documentation"),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)("h4",{id:"modalreturnvalues"},"ModalReturnValues"),(0,a.yg)(g,{id:"modalreturnvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"visible"),(0,a.yg)("td",{parentName:"tr",align:null},"State of modal visibility"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"show"),(0,a.yg)("td",{parentName:"tr",align:null},"Sets the visible state to true"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"close"),(0,a.yg)("td",{parentName:"tr",align:null},"Sets the visible state to false"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"() => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"submit"),(0,a.yg)("td",{parentName:"tr",align:null},"Submits the form"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(values: TVariables) => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"title"),(0,a.yg)("td",{parentName:"tr",align:null},"Modal title based on resource and action value"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ disabled: boolean, onClick: (e: React.BaseSyntheticEvent) => void; }")))))),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(g,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(f,{path:"form-react-hook-form-use-modal-form",mdxType:"CodeSandboxExample"})))}N.isMDXComponent=!0}}]);