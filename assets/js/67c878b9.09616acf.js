"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[50525],{88123:(e,n,t)=>{t.d(n,{O:()=>m});var r=t(68835),a=t(37953),o=t(86743),i=t(59451),l=t(62201);const s=({horizontalSize:e,onMouseDown:n})=>a.createElement("div",{className:(0,r.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){c(e,n,t[n])}))}return e}function u(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const m=e=>"nextjs"===(null==e?void 0:e.template)?a.createElement(h,e):a.createElement(g,e),g=e=>{var n,t,c,m,g,f,{startRoute:h,showNavigator:y,showLineNumbers:v,showOpenInCodeSandbox:k,initialPercentage:x=50,dependencies:C,showReadOnly:P,options:w={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.A)("h-full","!gap-0"),"sp-console-header-button":(0,r.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:S="react-ts",customSetup:T,files:I,previewOnly:O,layout:R,height:E=420,wrapperClassName:F,className:D,showFiles:M=!1,showConsole:N=!1,hidePreview:z=!1}=e,B=p(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[j,A]=a.useState(!1);a.useEffect((()=>{A(!0)}),[]);const{colorMode:G}=(0,l.G)();var H,L;null!=w||(w={}),null!==(H=(g=w).resizablePanels)&&void 0!==H||(g.resizablePanels=!0),null!==(L=(f=w).editorWidthPercentage)&&void 0!==L||(f.editorWidthPercentage=null!=x?x:50);const U={showTabs:w.showTabs,showLineNumbers:w.showLineNumbers,showInlineErrors:w.showInlineErrors,wrapContent:w.wrapContent,closableTabs:w.closableTabs,initMode:w.initMode,extensions:null===(n=w.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=w.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:w.readOnly,showReadOnly:null!=P?P:w.showReadOnly,additionalLanguages:null===(c=w.codeEditor)||void 0===c?void 0:c.additionalLanguages},V={activeFile:w.activeFile,visibleFiles:w.visibleFiles,recompileMode:w.recompileMode,recompileDelay:w.recompileDelay,autorun:w.autorun,autoReload:w.autoReload,bundlerURL:w.bundlerURL,startRoute:w.startRoute,skipEval:w.skipEval,fileResolver:w.fileResolver,initMode:w.initMode,initModeObserverOptions:w.initModeObserverOptions,externalResources:w.externalResources,logLevel:w.logLevel,classes:w.classes},[W,K]=a.useState(!1),{onHandleMouseDown:X,horizontalSize:q}=(({initialSize:e=50})=>{const[n,t]=a.useState(e),r=a.useRef(null),o=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:a,width:o}=n.getBoundingClientRect(),i=(e.clientX-a)/o*100,l=Math.min(Math.max(i,25),75);t(l),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return a.useEffect((()=>(document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",o),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:a.useCallback((e=>{r.current=e.target}),[])}})({initialSize:w.editorWidthPercentage}),$=!O&&!(null==R?void 0:R.includes("col"));var _,Z,J,Q,Y;return a.createElement(a.Fragment,null,a.createElement("div",{className:(0,r.A)("pb-6","refine-sandpack-wrapper",F)},a.createElement("div",{className:(0,r.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",D)},a.createElement(i.l5,d({key:`${S}-${G}-${j}`,customSetup:d({dependencies:C},T),files:I,options:u(d({},V),{classes:u(d({},V.classes),{"sp-layout":(0,r.A)(null===(m=V.classes)||void 0===m?void 0:m["sp-layout"],N&&"!rounded-bl-none !rounded-br-none")})}),template:S,theme:"light"===G?u(d({},o.Zw),{colors:u(d({},o.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):u(d({},o.hc),{colors:u(d({},o.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},B),a.createElement(i.am,{className:(0,r.A)("col"===R&&"!flex-col","col-reverse"===R&&"!flex-col-reverse")},M&&a.createElement(i.Lm,{autoHiddenFiles:!0,style:{height:null!==(_=w.editorHeight)&&void 0!==_?_:E}}),!O&&a.createElement(i.cW,u(d({},U),{showLineNumbers:v,closableTabs:M,initMode:"lazy",style:u(d({height:null!==(Z=w.editorHeight)&&void 0!==Z?Z:E},(null==R?void 0:R.includes("col"))?{flex:"initial"}:{flexGrow:q,flexShrink:q,flexBasis:0}),{overflow:"hidden"})})),$?a.createElement(s,{onMouseDown:X,horizontalSize:q}):null,z?null:a.createElement(a.Fragment,null,a.createElement(i.G5,{showOpenInCodeSandbox:k,startRoute:h,showNavigator:null!=y?y:w.showNavigator,showRefreshButton:w.showRefreshButton,style:u(d({display:z?"none":"flex"},(null==R?void 0:R.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-q,flexShrink:100-q,flexBasis:0,width:O?"100%":100-q+"%"}),{gap:0,height:null!==(J=w.editorHeight)&&void 0!==J?J:E})},a.createElement("div",{className:"sp-custom-loading"},a.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.A)("w-12","h-12","rounded-full")}))))),N?a.createElement(i.X2,{style:u(d({height:200},(null==R?void 0:R.includes("col"))?{flex:"initial"}:{flexGrow:q,flexShrink:q,flexBasis:0}),{overflow:"hidden"})}):null)),a.createElement("div",{className:(0,r.A)(""),style:{height:Number(null!==(Q=w.editorHeight)&&void 0!==Q?Q:E)+2}}),a.createElement("div",{className:(0,r.A)((null==R?void 0:R.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Y=w.editorHeight)&&void 0!==Y?Y:E)+2}}),a.createElement("div",{className:(0,r.A)(N?"block":"hidden","h-[200px]")})),a.createElement(b,{files:I,dependencies:C}))},b=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return a.createElement("section",{className:"hidden max-w-0 max-h-0"},a.createElement("h6",null,"Code Example"),t.map((n=>a.createElement("div",{"data-filename":n,key:n},a.createElement("pre",null,`// file: ${n} \n`,f(e[n]))))))},f=e=>"string"==typeof e?e:"code"in e?e.code:"",h=e=>{const n={hidePreview:!0,showConsole:!1};return a.createElement(g,u(d({},n,e),{template:"react-ts"}))}},65335:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>T,contentTitle:()=>w,default:()=>j,frontMatter:()=>P,metadata:()=>S,toc:()=>I});var r=t(37953),a=t(58860),o=t(88123);function i(){return r.createElement(o.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@tanstack/react-table":"latest","@refinedev/react-table":"latest"},startRoute:"/",files:{"/App.tsx":{code:l,hidden:!1},"/product-table.tsx":{code:s,hidden:!1,active:!0}}})}const l='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <ProductTable />\n        </Refine>\n    );\n}\n\n'.trim(),s='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        getState,\n        setPageIndex,\n        getCanPreviousPage,\n        getPageCount,\n        getCanNextPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n    } = useTable<IProduct>({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div>\n            <h1>Products</h1>\n            <table>\n                <thead>\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => {\n                                return (\n                                    <th key={header.id}>\n                                        {header.isPlaceholder ? null : (\n                                            <>\n                                                <div\n                                                    onClick={header.column.getToggleSortingHandler()}\n                                                >\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                    {{\n                                                        asc: " \ud83d\udd3c",\n                                                        desc: " \ud83d\udd3d",\n                                                    }[\n                                                        header.column.getIsSorted() as string\n                                                    ] ?? " \u2195\ufe0f"}\n                                                </div>\n                                            </>\n                                        )}\n                                        {header.column.getCanFilter() ? (\n                                            <div>\n                                                <input\n                                                    value={\n                                                        (header.column.getFilterValue() as string) ??\n                                                        ""\n                                                    }\n                                                    onChange={(e) =>\n                                                        header.column.setFilterValue(\n                                                            e.target.value,\n                                                        )\n                                                    }\n                                                />\n                                            </div>\n                                        ) : null}\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n\n            <div>\n                <button\n                    onClick={() => setPageIndex(0)}\n                    disabled={!getCanPreviousPage()}\n                >\n                    {"<<"}\n                </button>\n                <button\n                    onClick={() => previousPage()}\n                    disabled={!getCanPreviousPage()}\n                >\n                    {"<"}\n                </button>\n                <button onClick={() => nextPage()} disabled={!getCanNextPage()}>\n                    {">"}\n                </button>\n                <button\n                    onClick={() => setPageIndex(getPageCount() - 1)}\n                    disabled={!getCanNextPage()}\n                >\n                    {">>"}\n                </button>\n                <span>\n                    Page\n                    <strong>\n                        {getState().pagination.pageIndex + 1} of{" "}\n                        {getPageCount()}\n                    </strong>\n                </span>\n                <span>\n                    | Go to page:\n                    <input\n                        type="number"\n                        defaultValue={getState().pagination.pageIndex + 1}\n                        onChange={(e) => {\n                            const page = e.target.value\n                                ? Number(e.target.value) - 1\n                                : 0;\n                            setPageIndex(page);\n                        }}\n                    />\n                </span>{" "}\n                <select\n                    value={getState().pagination.pageSize}\n                    onChange={(e) => {\n                        setPageSize(Number(e.target.value));\n                    }}\n                >\n                    {[10, 20, 30, 40, 50].map((pageSize) => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n'.trim();function c(){return r.createElement(o.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/mantine":"latest","@refinedev/react-table":"latest","@tanstack/react-table":"latest","@mantine/core":"^5.10.4","@tabler/icons-react":"^3.1.0"},startRoute:"/",files:{"/App.tsx":{code:d,hidden:!1},"/product-table.tsx":{code:u,hidden:!1,active:!0},"/column-sorter.tsx":{code:p,hidden:!1},"/column-filter.tsx":{code:m,hidden:!1}}})}const d='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { MantineProvider, Global } from "@mantine/core";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <MantineProvider\n                withNormalizeCSS\n                withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n        </MantineProvider>\n    );\n}\n\n'.trim(),u='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { Box, Group, Table, Pagination } from "@mantine/core";\n\nimport { ColumnSorter } from "./column-sorter.tsx";\nimport { ColumnFilter } from "./column-filter.tsx";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        refineCore: { setCurrentPage, pageCount, currentPage },\n    } = useTable({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div style={{ padding: "4px" }}>\n            <h2>Products</h2>\n            <Table highlightOnHover>\n                <thead>\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => {\n                                return (\n                                    <th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <Group spacing="xs" noWrap>\n                                                <Box>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Box>\n                                                <Group spacing="xs" noWrap>\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </Group>\n                                            </Group>\n                                        )}\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n            <br />\n            <Pagination\n                position="right"\n                total={pageCount}\n                page={currentPage}\n                onChange={setCurrentPage}\n            />\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n'.trim(),p='\nimport { ActionIcon } from "@mantine/core";\nimport { IconChevronDown, IconSelector, IconChevronUp } from "@tabler/icons-react";\n\nexport interface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnSorter: React.FC<ColumnButtonProps> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <ActionIcon\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            style={{\n                transition: "transform 0.25s",\n                transform: `rotate(${sorted === "asc" ? "180" : "0"}deg)`,\n            }}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        >\n            {!sorted && <IconSelector size={18} />}\n            {sorted === "asc" && <IconChevronDown size={18} />}\n            {sorted === "desc" && <IconChevronUp size={18} />}\n        </ActionIcon>\n    );\n};\n'.trim(),m='\nimport React, { useState } from "react";\nimport { Column } from "@tanstack/react-table";\nimport { TextInput, Menu, ActionIcon, Stack, Group } from "@mantine/core";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons-react";\n\ninterface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnFilter: React.FC<ColumnButtonProps> = ({ column }) => {\n    // eslint-disable-next-line\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <TextInput\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return <FilterComponent value={state?.value} onChange={change} />;\n    };\n\n    return (\n        <Menu\n            opened={!!state}\n            position="bottom"\n            withArrow\n            transition="scale-y"\n            shadow="xl"\n            onClose={close}\n            width="256px"\n            withinPortal\n        >\n            <Menu.Target>\n                <ActionIcon\n                    size="xs"\n                    onClick={open}\n                    variant={column.getIsFiltered() ? "light" : "transparent"}\n                    color={column.getIsFiltered() ? "primary" : "gray"}\n                >\n                    <IconFilter size={18} />\n                </ActionIcon>\n            </Menu.Target>\n            <Menu.Dropdown>\n                {!!state && (\n                    <Stack p="xs" spacing="xs">\n                        {renderFilterElement()}\n                        <Group position="right" spacing={6} noWrap>\n                            <ActionIcon\n                                size="md"\n                                color="gray"\n                                variant="outline"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </ActionIcon>\n                            <ActionIcon\n                                size="md"\n                                onClick={save}\n                                color="primary"\n                                variant="outline"\n                            >\n                                <IconCheck size={18} />\n                            </ActionIcon>\n                        </Group>\n                    </Stack>\n                )}\n            </Menu.Dropdown>\n        </Menu>\n    );\n};\n\n'.trim();function g(){return r.createElement(o.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-table":"latest","@tanstack/react-table":"latest","@refinedev/chakra-ui":"latest","@chakra-ui/react":"^2.5.1","@tabler/icons-react":"^3.1.0"},startRoute:"/",files:{"/App.tsx":{code:b,hidden:!1},"/product-table.tsx":{code:f,hidden:!1,active:!0},"/pagination.tsx":{code:h,hidden:!1},"/column-sorter.tsx":{code:y,hidden:!1},"/column-filter.tsx":{code:v,hidden:!1}}})}const b='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <ChakraProvider>\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n        </ChakraProvider>\n    );\n}\n\n'.trim(),f='\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport {\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    HStack,\n    Text,\n} from "@chakra-ui/react";\nimport { Pagination } from "./pagination";\n\nimport { ColumnSorter } from "./column-sorter";\nimport { ColumnFilter } from "./column-filter";\n\nexport const ProductTable: React.FC = () => {\n    const columns = React.useMemo<ColumnDef<IProduct>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "name",\n                header: "Name",\n                accessorKey: "name",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "price",\n                header: "Price",\n                accessorKey: "price",\n                meta: {\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        refineCore: { setCurrentPage, pageCount, currentPage },\n    } = useTable({\n        refineCoreProps: {\n            resource: "products",\n        },\n        columns,\n    });\n\n    return (\n        <div style={{ padding:"8px" }}>\n            <Text fontSize=\'3xl\'>Products</Text>\n            <TableContainer whiteSpace="pre-line">\n                <Table variant="simple">\n                    <Thead>\n                        {getHeaderGroups().map((headerGroup) => (\n                            <Tr key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <Th key={header.id}>\n                                        {!header.isPlaceholder && (\n                                            <HStack spacing="2">\n                                                <Text>\n                                                    {flexRender(\n                                                        header.column.columnDef\n                                                            .header,\n                                                        header.getContext(),\n                                                    )}\n                                                </Text>\n                                                <HStack spacing="2">\n                                                    <ColumnSorter\n                                                        column={header.column}\n                                                    />\n                                                    <ColumnFilter\n                                                        column={header.column}\n                                                    />\n                                                </HStack>\n                                            </HStack>\n                                        )}\n                                    </Th>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Thead>\n                    <Tbody>\n                        {getRowModel().rows.map((row) => (\n                            <Tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => (\n                                    <Td key={cell.id}>\n                                        {flexRender(\n                                            cell.column.columnDef.cell,\n                                            cell.getContext(),\n                                        )}\n                                    </Td>\n                                ))}\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </Table>\n            </TableContainer>\n            <Pagination\n                currentPage={currentPage}\n                pageCount={pageCount}\n                setCurrentPage={setCurrentPage}\n            />\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n'.trim(),h='\nimport { FC } from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nexport const Pagination: FC<PaginationProps> = ({\n    currentPage,\n    pageCount,\n    setCurrentPage,\n}) => {\n    const pagination = usePagination({\n        currentPage,\n        pageCount,\n    });\n\n    return (\n        <Box display="flex" justifyContent="flex-end">\n            <HStack my="3" spacing="1">\n                {pagination?.prev && (\n                    <Button\n                        aria-label="previous page"\n                        onClick={() => setCurrentPage(currentPage - 1)}\n                        disabled={!pagination?.prev}\n                        variant="outline"\n                    >\n                        Prev\n                    </Button>\n                )}\n\n                {pagination?.items.map((page) => {\n                    if (typeof page === "string")\n                        return <span key={page}>...</span>;\n\n                    return (\n                        <Button\n                            key={page}\n                            onClick={() => setCurrentPage(page)}\n                            variant={page === currentPage ? "solid" : "outline"}\n                        >\n                            {page}\n                        </Button>\n                    );\n                })}\n                {pagination?.next && (\n                    <Button\n                        aria-label="next page"\n                        onClick={() => setCurrentPage(currentPage + 1)}\n                        variant="outline"\n                    >\n                        Next\n                    </Button>\n                )}\n            </HStack>\n        </Box>\n    );\n};\n\ntype PaginationProps = {\n    currentPage: number;\n    pageCount: number;\n    setCurrentPage: (page: number) => void;\n};\n'.trim(),y='\nimport React, { useState } from "react";\nimport { IconButton } from "@chakra-ui/react";\nimport { IconChevronDown, IconChevronUp, IconSelector } from "@tabler/icons-react";\n\nimport type { SortDirection } from "@tanstack/react-table";\n\nexport interface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\n\nexport const ColumnSorter: React.FC<ColumnButtonProps> = ({ column }) => {\n    if (!column.getCanSort()) {\n        return null;\n    }\n\n    const sorted = column.getIsSorted();\n\n    return (\n        <IconButton\n            aria-label="Sort"\n            size="xs"\n            onClick={column.getToggleSortingHandler()}\n            icon={<ColumnSorterIcon sorted={sorted} />}\n            variant={sorted ? "light" : "transparent"}\n            color={sorted ? "primary" : "gray"}\n        />\n    );\n};\n\nconst ColumnSorterIcon = ({ sorted }: { sorted: false | SortDirection }) => {\n    if (sorted === "asc") return <IconChevronDown size={18} />;\n    if (sorted === "desc") return <IconChevronUp size={18} />;\n    return <IconSelector size={18} />;\n};\n\n'.trim(),v='\nimport React, { useState } from "react";\nimport {\n    Input,\n    Menu,\n    IconButton,\n    MenuButton,\n    MenuList,\n    VStack,\n    HStack,\n} from "@chakra-ui/react";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons-react";\n\n\ninterface ColumnButtonProps {\n    column: Column<any, any>; // eslint-disable-line\n}\n\nexport const ColumnFilter: React.FC<ColumnButtonProps> = ({ column }) => {\n    // eslint-disable-next-line\n    const [state, setState] = useState(null as null | { value: any });\n\n    if (!column.getCanFilter()) {\n        return null;\n    }\n\n    const open = () =>\n        setState({\n            value: column.getFilterValue(),\n        });\n\n    const close = () => setState(null);\n\n    // eslint-disable-next-line\n    const change = (value: any) => setState({ value });\n\n    const clear = () => {\n        column.setFilterValue(undefined);\n        close();\n    };\n\n    const save = () => {\n        if (!state) return;\n        column.setFilterValue(state.value);\n        close();\n    };\n\n    const renderFilterElement = () => {\n        // eslint-disable-next-line\n        const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n        if (!FilterComponent && !!state) {\n            return (\n                <Input\n                    borderRadius="md"\n                    size="sm"\n                    autoComplete="off"\n                    value={state.value}\n                    onChange={(e) => change(e.target.value)}\n                />\n            );\n        }\n\n        return (\n            <FilterComponent\n                value={state?.value}\n                onChange={(e: any) => change(e.target.value)}\n            />\n        );\n    };\n\n    return (\n        <Menu isOpen={!!state} onClose={close}>\n            <MenuButton\n                onClick={open}\n                as={IconButton}\n                aria-label="Options"\n                icon={<IconFilter size="16" />}\n                variant="ghost"\n                size="xs"\n            />\n            <MenuList p="2">\n                {!!state && (\n                    <VStack align="flex-start">\n                        {renderFilterElement()}\n                        <HStack spacing="1">\n                            <IconButton\n                                aria-label="Clear"\n                                size="sm"\n                                colorScheme="red"\n                                onClick={clear}\n                            >\n                                <IconX size={18} />\n                            </IconButton>\n                            <IconButton\n                                aria-label="Save"\n                                size="sm"\n                                onClick={save}\n                                colorScheme="green"\n                            >\n                                <IconCheck size={18} />\n                            </IconButton>\n                        </HStack>\n                    </VStack>\n                )}\n            </MenuList>\n        </Menu>\n    );\n};\n'.trim();function k(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function x(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function C(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const P={title:"Introduction",source:"/packages/react-table/src/useTable"},w='TanStack Table <GuideBadge id="guides-concepts/tables" /> <RouterBadge id="guides-concepts/routing/#usetable" />',S={unversionedId:"packages/tanstack-table/introduction/index",id:"packages/tanstack-table/introduction/index",title:"Introduction",description:"Refine provides an integration package for TanStack Table library. This package enables you to manage your tables in a headless manner. This adapter supports all of the features of both TanStack Table and Refine's useTable hook (sorting, filtering pagination etc). Simply, you can use any of the TanStack Table examples as-is by copying and pasting them into your project.",source:"@site/docs/packages/tanstack-table/introduction/index.md",sourceDirName:"packages/tanstack-table/introduction",slug:"/packages/tanstack-table/introduction/",permalink:"/docs/packages/tanstack-table/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/packages/tanstack-table/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1732871967,formattedLastUpdatedAt:"Nov 29, 2024",frontMatter:{title:"Introduction",source:"/packages/react-table/src/useTable"},sidebar:"mainSidebar",previous:{title:"List of Packages",permalink:"/docs/packages/list-of-packages/"},next:{title:"useTable",permalink:"/docs/packages/tanstack-table/use-table/"}},T={},I=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],O=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},R=O("GuideBadge"),E=O("RouterBadge"),F=O("DocThumbsUpDownFeedbackWidget"),D=O("InstallPackagesCommand"),M=O("Tabs"),N=O("TabItem"),z={toc:I},B="wrapper";function j(e){var{components:n}=e,t=C(e,["components"]);return(0,a.yg)(B,x(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){k(e,n,t[n])}))}return e}({},z,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"tanstack-table--"},"TanStack Table ",(0,a.yg)(R,{id:"guides-concepts/tables",mdxType:"GuideBadge"})," ",(0,a.yg)(E,{id:"guides-concepts/routing/#usetable",mdxType:"RouterBadge"})),(0,a.yg)("p",null,"Refine provides an integration package for ",(0,a.yg)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," library. This package enables you to manage your tables in a headless manner. This adapter supports all of the features of both ",(0,a.yg)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},"Refine's useTable")," hook (sorting, filtering pagination etc). Simply, you can use any of the ",(0,a.yg)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table")," examples as-is by copying and pasting them into your project."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)(F,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Install the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/react-table"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/react-table"))," library."),(0,a.yg)(D,{args:"@refinedev/react-table",mdxType:"InstallPackagesCommand"})),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(F,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Let's see how to display a table with ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"useTable")," hook."),(0,a.yg)("p",null,"We provide implementation examples for the Mantine and Chakra UI. If you using a different ui library, you can use the headless example as a starting point."),(0,a.yg)(M,{wrapContent:!1,mdxType:"Tabs"},(0,a.yg)(N,{value:"headless",label:"Headless",mdxType:"TabItem"},(0,a.yg)(i,{mdxType:"BaseHeadlessTable"})),(0,a.yg)(N,{value:"mantine",label:(0,a.yg)("span",null,(0,a.yg)("span",{className:"block"},"Mantine"),(0,a.yg)("small",{className:"block"},"TanStack Table")),mdxType:"TabItem"},(0,a.yg)(c,{mdxType:"BaseMantineTable"})),(0,a.yg)(N,{value:"chakra-ui",label:(0,a.yg)("span",null,(0,a.yg)("span",{className:"block"},"Chakra UI"),(0,a.yg)("small",{className:"block"},"TanStack Table")),mdxType:"TabItem"},(0,a.yg)(g,{mdxType:"BaseChakraUiTable"})))))}j.isMDXComponent=!0}}]);