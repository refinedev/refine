"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[79655],{58860:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>R});var o=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=o.createContext({}),p=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=i,R=l["".concat(d,".").concat(m)]||l[m]||c[m]||r;return n?o.createElement(R,a(a({ref:t},u),{},{components:n})):o.createElement(R,a({ref:t},u))}));function R(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[l]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},46006:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>y,frontMatter:()=>s,metadata:()=>p,toc:()=>l});n(37953);var o=n(58860);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={title:"Edit",swizzle:!0},d=void 0,p={unversionedId:"ui-integrations/mantine/components/basic-views/edit/index",id:"version-4.xx.xx/ui-integrations/mantine/components/basic-views/edit/index",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/mantine/components/basic-views/edit/index.md",sourceDirName:"ui-integrations/mantine/components/basic-views/edit",slug:"/ui-integrations/mantine/components/basic-views/edit/",permalink:"/docs/4.xx.xx/ui-integrations/mantine/components/basic-views/edit/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/mantine/components/basic-views/edit/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Edit",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Create",permalink:"/docs/4.xx.xx/ui-integrations/mantine/components/basic-views/create/"},next:{title:"List",permalink:"/docs/4.xx.xx/ui-integrations/mantine/components/basic-views/list/"}},u={},l=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"canDelete and deleteButtonProps",id:"candelete-and-deletebuttonprops",level:3},{value:"resource",id:"resource",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:"breadcrumb",id:"breadcrumb",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},m=c("DocThumbsUpDownFeedbackWidget"),R=c("PropsTable"),g={toc:l},h="wrapper";function y(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(h,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){i(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n// visible-block-start\nimport { Edit, useForm, useSelect } from "@refinedev/mantine";\nimport { Select, TextInput } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    refineCore: { query },\n  } = useForm<IPost>({\n    initialValues: {\n      title: "",\n      status: "",\n      category: {\n        id: "",\n      },\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n      category: {\n        id: (value) => (value.length <= 0 ? "Category is required" : null),\n      },\n    },\n  });\n\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n    defaultValue: query?.data?.data?.category?.id,\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          {...getInputProps("status")}\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n        />\n        <Select\n          mt={8}\n          label="Category"\n          placeholder="Pick one"\n          {...getInputProps("category.id")}\n          {...selectProps}\n        />\n      </form>\n    </Edit>\n  );\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows the addition of titles inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>"),' component. if you don\'t pass title props it uses the "Edit" prefix and singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Title } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-next-line\n      title={<Title order={3}>Custom Title</Title>}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,o.yg)(m,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," can be used to customize the default button of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component that submits the form:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ size: "xs" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"For more information, refer to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<SaveButton>")," documentation \u2192")),(0,o.yg)("h3",{id:"candelete-and-deletebuttonprops"},"canDelete and deleteButtonProps"),(0,o.yg)(m,{id:"candelete-and-deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," property, Refine adds the delete button by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.yg)("p",null,"When clicked on, the delete button executes the ",(0,o.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the dataProvider."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ size: "xs" }}\n      /* highlight-end */\n      saveButtonProps={{ variant: "outline", size: "xs" }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the documentations ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")," ","\u2192")," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-permissions"},(0,o.yg)("inlineCode",{parentName:"a"},"usePermission")," ","\u2192")))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/custom/23 previewHeight=280px",live:!0,url:"http://localhost:3000/custom/23",previewHeight:"280px"},'setInitialRoutes(["/custom/23"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="categories">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "categories",\n          list: "/categories",\n          edit: "/categories/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/custom/:id" element={<CustomPage />} />\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL, such as when it is used on a custom page, modal or drawer."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=350px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"350px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, useModalForm } from "@refinedev/mantine";\nimport { Modal, Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  const {\n    modal: { visible, close, show },\n    id,\n  } = useModalForm({\n    action: "edit",\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal\n        opened={visible}\n        onClose={close}\n        // hide-start\n        size={700}\n        withCloseButton={false}\n        // hide-end\n      >\n        {/* highlight-next-line */}\n        <Edit recordItemId={id}>\n          <p>Rest of your page here</p>\n        </Edit>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="23">\n                  Edit Item 23\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,o.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Determines which mode mutation will have while executing ",(0,o.yg)("inlineCode",{parentName:"p"},"<DeleteButton>"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { TextInput } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  const { saveButtonProps, getInputProps } = useForm<IPost>({\n    initialValues: {\n      title: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n    },\n  });\n\n  return (\n    <Edit\n      //highlight-next-line\n      mutationMode="undoable"\n      canDelete\n      saveButtonProps={saveButtonProps}\n    >\n      <form>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n      </form>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/advanced-tutorials/mutation-mode"},"mutation mode documentation ","\u2192")))),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(m,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit = () => {\n  return (\n    <Edit\n      // highlight-start\n      dataProviderName="other"\n      // highlight-end\n    >\n      {/* ... */}\n    </Edit>\n  );\n};\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(m,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit goBack="\ud83d\ude0a">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(m,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit isLoading={true}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb"},"breadcrumb"),(0,o.yg)(m,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, Breadcrumb } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      breadcrumb={\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/breadcrumb"},(0,o.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,o.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the wrapper of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mantine")," wrapper element is ",(0,o.yg)("inlineCode",{parentName:"p"},"<Card>"),"s and ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,o.yg)("inlineCode",{parentName:"p"},"<Card>")," can get."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      wrapperProps={{\n        style: {\n          border: "2px dashed cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mantine.dev/core/card/"},(0,o.yg)("inlineCode",{parentName:"a"},"Card")," documentation from Mantine ","\u2192")))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      headerProps={{\n        style: {\n          border: "2px dashed cornflowerblue",\n          padding: "16px",\n        },\n      }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mantine.dev/core/group/"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Mantine ","\u2192")))),(0,o.yg)("h3",{id:"contentprops"},"contentProps"),(0,o.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the content of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      contentProps={{\n        style: {\n          border: "2px dashed cornflowerblue",\n          padding: "16px",\n        },\n      }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mantine.dev/core/box/"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Mantine ","\u2192")))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, refreshButtonProps, listButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,'If "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button variant="outline" type="primary">\n            Custom Button\n          </Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"refreshButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, RefreshButton, ListButton } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ refreshButtonProps, listButtonProps }) => (\n        <>\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n          {listButtonProps && (\n            <ListButton {...listButtonProps} meta={{ foo: "bar" }} />\n          )}\n          <Button variant="outline" type="primary">\n            Custom Button\n          </Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Modal, Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      headerButtonProps={{\n        style: {\n          border: "2px dashed cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      headerButtons={\n        <Button variant="outline" type="primary">\n          Custom Button\n        </Button>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mantine.dev/core/group/"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Mantine ","\u2192")))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(m,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," at the footer."),(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, saveButtonProps, deleteButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-deletebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button variant="gradient">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, SaveButton, DeleteButton } from "@refinedev/mantine";\nimport { Button } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      footerButtons={({ saveButtonProps, deleteButtonProps }) => (\n        <>\n          <SaveButton {...saveButtonProps} hideText />\n          {deleteButtonProps && (\n            <DeleteButton {...deleteButtonProps} hideText />\n          )}\n          <Button variant="gradient">Custom Button</Button>\n        </>\n      )}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(m,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mantine";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          // hide-start\n          float: "right",\n          marginRight: 24,\n          // hide-end\n          border: "2px dashed cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mantine.dev/core/group/"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Mantine ","\u2192")))),(0,o.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,o.yg)(m,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the auto save feature of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, useForm, useSelect } from "@refinedev/mantine";\nimport { Select, TextInput } from "@mantine/core";\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    refineCore: { query, autoSaveProps },\n  } = useForm<IPost>({\n    initialValues: {\n      title: "",\n      status: "",\n      category: {\n        id: "",\n      },\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n      category: {\n        id: (value) => (value.length <= 0 ? "Category is required" : null),\n      },\n    },\n    // highlight-start\n    refineCoreProps: {\n      autoSave: {\n        enabled: true,\n      },\n    },\n    // highlight-end\n  });\n\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n    defaultValue: query?.data?.data?.category?.id,\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} autoSaveProps={autoSaveProps}>\n      <form>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          {...getInputProps("status")}\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n        />\n        <Select\n          mt={8}\n          label="Category"\n          placeholder="Pick one"\n          {...getInputProps("category.id")}\n          {...selectProps}\n        />\n      </form>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMantineDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMantine.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMantine.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMantineDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"props"},"Props"),(0,o.yg)(m,{id:"props",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(R,{module:"@refinedev/mantine/Edit","goBack-default":"`<IconArrowLeft />`","title-default":"`<Title order={3}>Edit {resource.name}</Title>`",mdxType:"PropsTable"})))}y.isMDXComponent=!0}}]);