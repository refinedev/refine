"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[43955],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var o=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},55965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>u});n(37953);var o=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Show",swizzle:!0},l=void 0,c={unversionedId:"ui-integrations/chakra-ui/components/buttons/show-button/index",id:"version-4.xx.xx/ui-integrations/chakra-ui/components/buttons/show-button/index",title:"Show",description:"` uses Chakra UI's  component. It uses the show method from useNavigation` under the hood. It can be useful when redirecting the app to the show page with the record id route of resource.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/chakra-ui/components/buttons/show-button/index.md",sourceDirName:"ui-integrations/chakra-ui/components/buttons/show-button",slug:"/ui-integrations/chakra-ui/components/buttons/show-button/",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/buttons/show-button/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/chakra-ui/components/buttons/show-button/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Show",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Save",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/buttons/save-button/"},next:{title:"Boolean",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/fields/boolean-field/"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"recordItemId",id:"recorditemid",level:3},{value:"resource",id:"resource",level:3},{value:"meta",id:"meta",level:3},{value:"hideText",id:"hidetext",level:3},{value:"accessControl",id:"accesscontrol",level:3},{value:"<del>resourceNameOrRouteName</del> <PropTag deprecated />",id:"resourcenameorroutename-",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},h=d("DocThumbsUpDownFeedbackWidget"),m=d("PropTag"),g=d("PropsTable"),y={toc:u},f="wrapper";function b(e){var{components:t}=e,n=i(e,["components"]);return(0,o.yg)(f,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<ShowButton>")," uses Chakra UI's ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/button#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"<Button>"))," component. It uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," method from ",(0,o.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-navigation"},(0,o.yg)("inlineCode",{parentName:"a"},"useNavigation"))," under the hood. It can be useful when redirecting the app to the show page with the record id route of resource."),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI")))),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)(h,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  List,\n  //highlight-next-line\n  ShowButton,\n} from "@refinedev/chakra-ui";\nimport {\n  TableContainer,\n  Table,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n} from "@chakra-ui/react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\n\nconst PostList: React.FC = () => {\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n      },\n      {\n        id: "actions",\n        header: "Actions",\n        accessorKey: "id",\n        cell: function render({ getValue }) {\n          return (\n            //highlight-start\n            <ShowButton\n              colorScheme="black"\n              recordItemId={getValue() as number}\n            />\n            //highlight-end\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const { getHeaderGroups, getRowModel } = useTable({\n    columns,\n  });\n\n  return (\n    <List>\n      <TableContainer whiteSpace="pre-line">\n        <Table variant="simple">\n          <Thead>\n            {getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <Th key={header.id}>\n                    {!header.isPlaceholder &&\n                      flexRender(\n                        header.column.columnDef.header,\n                        header.getContext(),\n                      )}\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody>\n            {getRowModel().rows.map((row) => (\n              <Tr key={row.id}>\n                {row.getVisibleCells().map((cell) => (\n                  <Td key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Td>\n                ))}\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </List>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          //highlight-start\n          list: "/posts",\n          show: "/posts/show/:id",\n          //highlight-end\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostList />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(h,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used to append the record id to the end of the route path. By default it will read the id information from the route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=200px",live:!0,url:"http://localhost:3000",previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { ShowButton } from "@refinedev/chakra-ui";\n\nconst MyShowComponent = () => {\n  //highlight-next-line\n  return <ShowButton colorScheme="black" recordItemId="123" />;\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<MyShowComponent />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Clicking the button will trigger the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," method of ",(0,o.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-navigation"},(0,o.yg)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect the app to the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," action path of the resource, filling the necessary parameters in the route.")),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(h,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Redirection endpoint is defined by the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource"),"'s ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," action path. By default, ",(0,o.yg)("inlineCode",{parentName:"p"},"<ShowButton>")," uses the inferred resource from the route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=200px",live:!0,url:"http://localhost:3000",previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { ShowButton } from "@refinedev/chakra-ui";\n\nconst MyShowComponent = () => {\n  //highlight-next-line\n  return (\n    <ShowButton colorScheme="black" resource="categories" recordItemId="2" />\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n        {\n          //highlight-start\n          name: "categories",\n          list: "/categories",\n          show: "/categories/show/:id",\n          //highlight-end\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<MyShowComponent />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Clicking the button will trigger the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," method of ",(0,o.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-navigation"},(0,o.yg)("inlineCode",{parentName:"a"},"useNavigation"))," and then redirect the app to the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," action path of the resource, filling the necessary parameters in the route."),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"meta"},"meta"),(0,o.yg)(h,{id:"meta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"It is used to pass additional parameters to the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," method of ",(0,o.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-navigation"},(0,o.yg)("inlineCode",{parentName:"a"},"useNavigation")),". By default, existing parameters in the route are used by the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," method. You can pass additional parameters or override the existing ones using the ",(0,o.yg)("inlineCode",{parentName:"p"},"meta")," prop."),(0,o.yg)("p",null,"If the ",(0,o.yg)("inlineCode",{parentName:"p"},"show")," action route is defined by the pattern: ",(0,o.yg)("inlineCode",{parentName:"p"},"/posts/:authorId/show/:id"),", the ",(0,o.yg)("inlineCode",{parentName:"p"},"meta")," prop can be used as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyComponent = () => {\n  //highlight-next-line\n  return <ShowButton meta={{ authorId: "10" }} />;\n};\n'))),(0,o.yg)("h3",{id:"hidetext"},"hideText"),(0,o.yg)(h,{id:"hidetext",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"It is used to show and not show the text of the button. When ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),", only the button icon is visible."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=200px",live:!0,url:"http://localhost:3000",previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { ShowButton } from "@refinedev/chakra-ui";\n\nconst MyShowComponent = () => {\n  //highlight-next-line\n  return <ShowButton colorScheme="black" hideText recordItemId="123" />;\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<MyShowComponent />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"accesscontrol"},"accessControl"),(0,o.yg)(h,{id:"accesscontrol",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"accessControl")," prop can be used to skip the access control check with its ",(0,o.yg)("inlineCode",{parentName:"p"},"enabled")," property or to hide the button when the user does not have the permission to access the resource with ",(0,o.yg)("inlineCode",{parentName:"p"},"hideIfUnauthorized")," property. This is relevant only when an ",(0,o.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"accessControlProvider"))," is provided to ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { ShowButton } from "@refinedev/chakra-ui";\n\nexport const MyListComponent = () => {\n  //highlight-next-line\n  return (\n    <ShowButton accessControl={{ enabled: true, hideIfUnauthorized: true }} />\n  );\n};\n'))),(0,o.yg)("h3",{id:"resourcenameorroutename-"},(0,o.yg)("del",{parentName:"h3"},"resourceNameOrRouteName")," ",(0,o.yg)(m,{deprecated:!0,mdxType:"PropTag"})),(0,o.yg)(h,{id:"resourcenameorroutename-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Use ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop instead.")),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"properties-1"},"Properties"),(0,o.yg)(h,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(g,{module:"@refinedev/chakra-ui/ShowButton",mdxType:"PropsTable"}),(0,o.yg)("admonition",{title:"External Props",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"It also accepts all props of Chakra UI ",(0,o.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/button#props"},"Button"),"."))))}b.isMDXComponent=!0}}]);