"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[34372],{58860:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var o=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(g,a(a({ref:t},c),{},{components:n})):o.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>p});n(37953);var o=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={title:"Delete",swizzle:!0},s=void 0,u={unversionedId:"ui-integrations/material-ui/components/buttons/delete-button/index",id:"ui-integrations/material-ui/components/buttons/delete-button/index",title:"Delete",description:"` uses Material UI's  and ` components.",source:"@site/docs/ui-integrations/material-ui/components/buttons/delete-button/index.md",sourceDirName:"ui-integrations/material-ui/components/buttons/delete-button",slug:"/ui-integrations/material-ui/components/buttons/delete-button/",permalink:"/docs/ui-integrations/material-ui/components/buttons/delete-button/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/material-ui/components/buttons/delete-button/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1756388384,formattedLastUpdatedAt:"Aug 28, 2025",frontMatter:{title:"Delete",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Create",permalink:"/docs/ui-integrations/material-ui/components/buttons/create-button/"},next:{title:"Edit",permalink:"/docs/ui-integrations/material-ui/components/buttons/edit-button/"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"recordItemId",id:"recorditemid",level:3},{value:"resource",id:"resource",level:3},{value:"onSuccess",id:"onsuccess",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"hideText",id:"hidetext",level:3},{value:"accessControl",id:"accesscontrol",level:3},{value:"How to override confirm texts?",id:"how-to-override-confirm-texts",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},m=d("DocThumbsUpDownFeedbackWidget"),g=d("PropsTable"),y={toc:p},b="wrapper";function f(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(b,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<DeleteButton>")," uses Material UI's ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<Button>"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-dialog/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Dialog>"))," components."),(0,o.yg)("p",null,"When you try to delete something, a pop-up shows up and asks for confirmation. When confirmed, it executes the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,o.yg)("inlineCode",{parentName:"a"},"useDelete"))," method provided by your ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"dataProvider")),"."),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)(m,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewHeight=340px",live:!0,previewHeight:"340px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  useDataGrid,\n  List,\n  // highlight-next-line\n  DeleteButton,\n} from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nconst columns: GridColDef[] = [\n  { field: "id", headerName: "ID", type: "number" },\n  { field: "title", headerName: "Title", minWidth: 400, flex: 1 },\n  {\n    field: "actions",\n    headerName: "Actions",\n    display: "flex",\n    renderCell: function render({ row }) {\n      // highlight-next-line\n      return <DeleteButton size="small" recordItemId={row.id} />;\n    },\n    align: "center",\n    headerAlign: "center",\n    minWidth: 80,\n  },\n];\n\nconst PostsList: React.FC = () => {\n  const { dataGridProps } = useDataGrid<IPost>();\n\n  return (\n    <List>\n      <DataGrid {...dataGridProps} columns={columns} />\n    </List>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<ReactRouter.Outlet />}>\n          <ReactRouter.Route index element={<PostsList />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," allows us to manage which record will be deleted. By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is inferred from the route params."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=200px",live:!0,disableScroll:!0,previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { DeleteButton } from "@refinedev/mui";\n\nconst MyDeleteComponent = () => {\n  return <DeleteButton resource="posts" recordItemId="123" />;\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<MyDeleteComponent />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Clicking the button will trigger the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,o.yg)("inlineCode",{parentName:"a"},"useDelete"))," method and then the record whose resource is ",(0,o.yg)("inlineCode",{parentName:"p"},"post")," and whose id is ",(0,o.yg)("inlineCode",{parentName:"p"},"1")," gets deleted.")),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"resource")," allows us to manage which resource's record is going to be deleted."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=200px",live:!0,disableScroll:!0,previewHeight:"200px"},'setInitialRoutes(["/categories"]);\n\n// visible-block-start\nimport { DeleteButton } from "@refinedev/mui";\n\nconst MyDeleteComponent = () => {\n  return <DeleteButton resource="categories" recordItemId="123" />;\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n        {\n          name: "categories",\n          list: "/categories",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/categories" element={<ReactRouter.Outlet />}>\n          <ReactRouter.Route index element={<MyDeleteComponent />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"onsuccess"},"onSuccess"),(0,o.yg)(m,{id:"onsuccess",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"onSuccess")," can be used if you want to do anything on the result returned after the delete request."),(0,o.yg)("p",null,"For example, let's ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log")," after deletion:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=200px",live:!0,disableScroll:!0,previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { DeleteButton } from "@refinedev/mui";\n\nconst MyDeleteComponent = () => {\n  return (\n    <DeleteButton\n      resource="posts"\n      recordItemId="123"\n      onSuccess={(value) => {\n        console.log(value);\n      }}\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<ReactRouter.Outlet />}>\n          <ReactRouter.Route index element={<MyDeleteComponent />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,o.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Determines which mode mutation will have while executing ",(0,o.yg)("inlineCode",{parentName:"p"},"<DeleteButton>"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@refinedev/core";\n\nimport {\n  List,\n  // highlight-next-line\n  DeleteButton,\n} from "@refinedev/mui";\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from "@mui/x-data-grid";\n\nexport const PostList: React.FC = () => {\n  const { result, tableQuery } = useTable<IPost>();\n\n  const { data } = result;\n\n  return (\n    <List>\n      <Table aria-label="simple table">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell>Title</TableCell>\n            <TableCell align="center">Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data?.data.map((row) => (\n            <TableRow key={row.id}>\n              <TableCell>{row.id}</TableCell>\n              <TableCell component="th" scope="row">\n                {row.title}\n              </TableCell>\n              <TableCell align="center">\n                <DeleteButton\n                  recordItemId={row.id}\n                  // highlight-next-line\n                  mutationMode="undoable"\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </List>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/advanced-tutorials/mutation-mode"},"mutation mode documentation ","\u2192")))),(0,o.yg)("h3",{id:"hidetext"},"hideText"),(0,o.yg)(m,{id:"hidetext",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"hideText")," is used to show or hide the text of the button. When ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),", only the button icon is visible."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=200px",live:!0,disableScroll:!0,previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { DeleteButton } from "@refinedev/mui";\n\nconst MyDeleteComponent = () => {\n  return (\n    <DeleteButton\n      // highlight-next-line\n      hideText={true}\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <MyDeleteComponent />\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"accesscontrol"},"accessControl"),(0,o.yg)(m,{id:"accesscontrol",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"This prop can be used to skip access control check with its ",(0,o.yg)("inlineCode",{parentName:"p"},"enabled")," property or to hide the button when the user does not have the permission to access the resource with ",(0,o.yg)("inlineCode",{parentName:"p"},"hideIfUnauthorized")," property. This is relevant only when an ",(0,o.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"accessControlProvider"))," is provided to ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DeleteButton } from "@refinedev/mui";\n\nexport const MyListComponent = () => {\n  return (\n    <DeleteButton accessControl={{ enabled: true, hideIfUnauthorized: true }} />\n  );\n};\n'))),(0,o.yg)("h2",{id:"how-to-override-confirm-texts"},"How to override confirm texts?"),(0,o.yg)(m,{id:"how-to-override-confirm-texts",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can change the text that appears when you confirm a transaction with ",(0,o.yg)("inlineCode",{parentName:"p"},"confirmTitle")," prop, as well as what 'ok' and 'cancel' buttons text look like with ",(0,o.yg)("inlineCode",{parentName:"p"},"confirmOkText")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"confirmCancelText")," props."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=200px",live:!0,disableScroll:!0,previewHeight:"200px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { DeleteButton } from "@refinedev/mui";\n\nconst MyDeleteComponent = () => {\n  return (\n    <DeleteButton\n      resource="posts"\n      recordItemId="123"\n      confirmTitle="Are you sure?"\n      confirmOkText="Yes, delete"\n      confirmCancelText="No, cancel"\n    />\n  );\n};\n\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<MyDeleteComponent />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"props"},"Props"),(0,o.yg)(m,{id:"props",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(g,{module:"@refinedev/mui/DeleteButton",mdxType:"PropsTable"}),(0,o.yg)("admonition",{title:"External Props",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"It also accepts all props of Material UI ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-button/"},"Button"),"."))))}f.isMDXComponent=!0}}]);