"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[85273],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var o=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(u,".").concat(h)]||d[h]||c[h]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},84427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>d});n(37953);var o=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Show",swizzle:!0},u=void 0,l={unversionedId:"ui-integrations/material-ui/components/basic-views/show/index",id:"ui-integrations/material-ui/components/basic-views/show/index",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page.",source:"@site/docs/ui-integrations/material-ui/components/basic-views/show/index.md",sourceDirName:"ui-integrations/material-ui/components/basic-views/show",slug:"/ui-integrations/material-ui/components/basic-views/show/",permalink:"/docs/ui-integrations/material-ui/components/basic-views/show/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/material-ui/components/basic-views/show/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1756401563,formattedLastUpdatedAt:"Aug 28, 2025",frontMatter:{title:"Show",swizzle:!0},sidebar:"mainSidebar",previous:{title:"List",permalink:"/docs/ui-integrations/material-ui/components/basic-views/list/"},next:{title:"Clone",permalink:"/docs/ui-integrations/material-ui/components/buttons/clone-button/"}},p={},d=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"resource",id:"resource",level:3},{value:"canDelete and canEdit",id:"candelete-and-canedit",level:3},{value:"deleteButtonProps",id:"deletebuttonprops",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:'breadcrumb <GlobalConfigBadge id="core/refine-component/#breadcrumb" />',id:"breadcrumb-",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},h=c("DocThumbsUpDownFeedbackWidget"),m=c("GlobalConfigBadge"),g=c("PropsTable"),y={toc:d},R="wrapper";function f(e){var{components:t}=e,n=i(e,["components"]);return(0,o.yg)(R,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/show/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { useShow, useOne } from "@refinedev/core";\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { Stack, Typography } from "@mui/material";\n\nconst ShowPage = () => {\n  const {\n    result: product,\n    query: { isLoading },\n  } = useShow();\n\n  const {\n    result: category,\n    query: { isLoading: categoryIsLoading },\n  } = useOne({\n    resource: "categories",\n    id: product?.category?.id || "",\n    queryOptions: {\n      enabled: !!product,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n          Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n          Title\n        </Typography>\n        <TextField value={product?.title} />\n        <Typography variant="body1" fontWeight="bold">\n          Content\n        </Typography>\n        <MarkdownField value={product?.content} />\n        <Typography variant="body1" fontWeight="bold">\n          Category\n        </Typography>\n        {categoryIsLoading ? <>Loading...</> : <>{category?.title}</>}\n        <Typography variant="body1" fontWeight="bold">\n          Created At\n        </Typography>\n        <DateField value={product?.createdAt} />\n      </Stack>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<SampleList />} />\n        </ReactRouter.Route>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<SampleShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(h,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows the addition of titles inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>"),' component. if you don\'t pass title props it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it would be "Show post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Typography } from "@mui/material";\n\nconst ShowPage: React.FC = () => {\n  return (\n    <Show\n      // highlight-next-line\n      title={<Typography variant="h5">Custom Title</Typography>}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<ShowPage />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(h,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},'setInitialRoutes(["/custom"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource="posts" recordItemId={123}>\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/custom"\n          element={\n            <div style={{ padding: 16 }}>\n              <CustomPage />\n            </div>\n          }\n        />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"candelete-and-canedit"},"canDelete and canEdit"),(0,o.yg)(h,{id:"candelete-and-canedit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component. If the resource has ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"canEdit")," property Refine adds the buttons by default."),(0,o.yg)("p",null,"When clicked on, delete button executes the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,o.yg)("inlineCode",{parentName:"a"},"useDelete"))," method provided by the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    };\n  },\n};\n\nconst authProvider = {\n  login: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: async () => ({\n    authenticated: true,\n  }),\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => ["admin"],\n  getIdentity: async () => null,\n};\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { usePermissions } from "@refinedev/core";\n\nconst ShowPage: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      canEdit={\n        permissionsData?.includes("editor") ||\n        permissionsData?.includes("admin")\n      }\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      authProvider={authProvider}\n      dataProvider={customDataProvider}\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")," ","\u2192"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>")," ","\u2192")," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-permissions"},(0,o.yg)("inlineCode",{parentName:"a"},"usePermission")," ","\u2192")," documentations."))),(0,o.yg)("h3",{id:"deletebuttonprops"},"deleteButtonProps"),(0,o.yg)(h,{id:"deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If the resource has the ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," property and you want to customize this button, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    };\n  },\n};\n\nconst authProvider = {\n  login: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: async () => ({\n    authenticated: true,\n  }),\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => ["admin"],\n  getIdentity: async () => null,\n};\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { usePermissions } from "@refinedev/core";\n\nconst ShowPage: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ size: "small" }}\n      canEdit={\n        permissionsData?.includes("editor") ||\n        permissionsData?.includes("admin")\n      }\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      authProvider={authProvider}\n      dataProvider={customDataProvider}\n      resources={[\n        {\n          name: "posts",\n          show: "/posts/show/:id",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route element={<ShowPage />} path="/posts/show/123" />\n        <ReactRouter.Route element={<SampleList />} path="/posts" />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(h,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},'setInitialRoutes(["/custom"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource="posts" recordItemId={123}>\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/custom"\n          element={\n            <div style={{ padding: 16 }}>\n              <CustomPage />\n            </div>\n          }\n        />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information for ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," to work properly.")),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(h,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Show } from "@refinedev/mui";\n\n// highlight-start\nconst PostShow = () => {\n  return <Show dataProviderName="other">...</Show>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(h,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\nimport { useBack } from "@refinedev/core";\n\nconst BackButton = () => {\n  const goBack = useBack();\n\n  return <Button onClick={goBack}>BACK!</Button>;\n};\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-next-line\n      goBack={<BackButton />}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId="123" />\n            </div>\n          ),\n          show: PostShow,\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(h,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-next-line\n      isLoading={loading}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          show: "/posts/show/:id",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route element={<PostShow />} path="/posts/show/123" />\n        <ReactRouter.Route element={<SampleList />} path="/posts" />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb-"},"breadcrumb ",(0,o.yg)(m,{id:"core/refine-component/#breadcrumb",mdxType:"GlobalConfigBadge"})),(0,o.yg)(h,{id:"breadcrumb-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show, Breadcrumb } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          show: "/posts/show/:id",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route element={<PostShow />} path="/posts/show/123" />\n        <ReactRouter.Route element={<SampleList />} path="/posts" />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/breadcrumb"},(0,o.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,o.yg)(h,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the wrapper of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      wrapperProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          show: "/posts/show/:id",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route element={<PostShow />} path="/posts/show/123" />\n        <ReactRouter.Route element={<SampleList />} path="/posts" />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card/"},(0,o.yg)("inlineCode",{parentName:"a"},"Card")," documentation from Material UI ","\u2192")))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(h,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      headerProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          show: "/posts/show/:id",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route element={<PostShow />} path="/posts/show/123" />\n        <ReactRouter.Route element={<SampleList />} path="/posts" />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},(0,o.yg)("inlineCode",{parentName:"a"},"CardHeader")," documentation from Material UI ","\u2192")))),(0,o.yg)("h3",{id:"contentprops"},"contentProps"),(0,o.yg)(h,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the content of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      contentProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    initialRoutes={["/posts", "/posts/show/123"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <RefineMui.ShowButton recordItemId={123} />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},(0,o.yg)("inlineCode",{parentName:"a"},"CardContent")," documentation from Material UI ","\u2192")))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(h,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and, ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, deleteButtonProps, editButtonProps, listButtonProps, refreshButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,'If "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("p",null,"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("p",null,"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.yg)("inlineCode",{parentName:"a"},"canEdit"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"editButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId="123" />\n            </div>\n          ),\n          show: PostShow,\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport {\n  Show,\n  ListButton,\n  EditButton,\n  DeleteButton,\n  RefreshButton,\n} from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({\n        deleteButtonProps,\n        editButtonProps,\n        listButtonProps,\n        refreshButtonProps,\n      }) => (\n        <>\n          <Button type="primary">Custom Button</Button>\n          {listButtonProps && (\n            <ListButton {...listButtonProps} meta={{ foo: "bar" }} />\n          )}\n          {editButtonProps && (\n            <EditButton {...editButtonProps} meta={{ foo: "bar" }} />\n          )}\n          {deleteButtonProps && (\n            <DeleteButton {...deleteButtonProps} meta={{ foo: "bar" }} />\n          )}\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineMuiDemo\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton recordItemId="123" />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(h,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      headerButtonProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId="123" />\n            </div>\n          ),\n          show: PostShow,\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(h,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId="123" />\n            </div>\n          ),\n          show: PostShow,\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(h,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'setInitialRoutes(["/posts/show/123"]);\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Show\n      // highlight-start\n      footerButtonProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <ShowButton recordItemId="123" />\n            </div>\n          ),\n          show: PostShow,\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts/show/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostShow />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},(0,o.yg)("inlineCode",{parentName:"a"},"CardActions")," documentation from Material UI ","\u2192")))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"properties-1"},"Properties"),(0,o.yg)(h,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(g,{module:"@refinedev/mui/Show","wrapperProps-type":"[`CardProps`](https://mui.com/material-ui/api/card/#props)","contentProps-type":"[`CardContentProps`](https://mui.com/material-ui/api/card-content/#props)","headerProps-type":"[`CardHeaderProps`](https://mui.com/material-ui/api/card-header/#props)","headerButtonProps-type":"[`BoxProps`](https://mui.com/material-ui/api/box/#props)","headerButtons-default":"[`ListButton`](/docs/ui-integrations/material-ui/components/buttons/list-button/), [`EditButton`](/docs/ui-integrations/material-ui/components/buttons/edit-button/), [`DeleteButton`](/docs/ui-integrations/material-ui/components/buttons/delete-button/), [`RefreshButton`](/docs/ui-integrations/material-ui/components/buttons/refresh-button/)","footerButtonProps-type":"[`CardActionsProps`](https://mui.com/material-ui/api/card-actions/#props)","breadcrumb-default":"[`<Breadcrumb/>`](/docs/ui-integrations/material-ui/components/breadcrumb)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"}),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const SampleList = () => {\n  const { dataGridProps } = RefineMui.useDataGrid();\n\n  const {\n    result: categoryData,\n    query: { isLoading: categoryIsLoading },\n  } = RefineCore.useMany({\n    resource: "categories",\n    ids: dataGridProps?.rows?.map((item: any) => item?.category?.id) ?? [],\n    queryOptions: {\n      enabled: !!dataGridProps?.rows,\n    },\n  });\n\n  const columns = React.useMemo<GridColDef<any>[]>(\n    () => [\n      {\n        field: "id",\n        headerName: "Id",\n        type: "number",\n        minWidth: 50,\n      },\n      {\n        field: "title",\n        headerName: "Title",\n        minWidth: 200,\n      },\n      {\n        field: "category",\n        headerName: "Category",\n        valueGetter: ({ row }) => {\n          const value = row?.category?.id;\n\n          return value;\n        },\n        minWidth: 300,\n        display: "flex",\n        renderCell: function render({ value }) {\n          return categoryIsLoading ? (\n            <>Loading...</>\n          ) : (\n            categoryData?.data?.find((item) => item.id === value)?.title\n          );\n        },\n      },\n      {\n        field: "createdAt",\n        headerName: "Created At",\n        minWidth: 250,\n        display: "flex",\n        renderCell: function render({ value }) {\n          return <RefineMui.DateField value={value} />;\n        },\n      },\n      {\n        field: "actions",\n        headerName: "Actions",\n        display: "flex",\n        renderCell: function render({ row }) {\n          return (\n            <>\n              <RefineMui.ShowButton hideText recordItemId={row.id} />\n            </>\n          );\n        },\n        align: "center",\n        headerAlign: "center",\n        minWidth: 80,\n      },\n    ],\n    [categoryData?.data],\n  );\n\n  return (\n    <RefineMui.List>\n      <MuiXDataGrid.DataGrid {...dataGridProps} columns={columns} />\n    </RefineMui.List>\n  );\n};\n'))))}f.isMDXComponent=!0}}]);