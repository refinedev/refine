"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[35186],{55533:e=>{e.exports=JSON.parse('{"pluginId":"tutorial","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{},"docs":{"authentication/data-provider-integration/index":{"id":"authentication/data-provider-integration/index","title":"Data Provider Integration","description":"Having implemented the authentication logic, we will now integrate it with our data provider to protect our resources from unauthenticated users."},"authentication/intro/index":{"id":"authentication/intro/index","title":"Introduction","description":"Now we\'ve learned the data fetching and manipulation essentials of Refine. In this unit, we\'ll learn how to add authentication to our application and the essentials of authentication in Refine."},"authentication/logging-in-out/index":{"id":"authentication/logging-in-out/index","title":"Logging In & Out","description":"In the previous step, we\'ve added the ` component to our src/App.tsx file to protect our content from unauthenticated users. Now, we\'ll be implementing the login and logout` methods in our auth provider to enable our users to login and logout."},"authentication/protecting-content/index":{"id":"authentication/protecting-content/index","title":"Protecting Content","description":"In this step, we\'ll be implementing a basic authProvider with check method to validate the user\'s authentication status, allowing us to protect our content from unauthenticated users."},"authentication/user-identity/index":{"id":"authentication/user-identity/index","title":"Using User Identity","description":"In the previous steps, we\'ve added login and logout functionalities and protected our content from unauthenticated users. Now, we\'ll be learning about the Refine\'s useGetIdentity hook to get the user\'s identity from our API and implement the getIdentity method in our auth provider."},"essentials/data-fetching/fetching-data/index":{"id":"essentials/data-fetching/fetching-data/index","title":"Fetching a Record","description":"In this step, we\'ll be learning about the Refine\'s useOne hook to fetch a single record from our API and implement the getOne method in our data provider."},"essentials/data-fetching/intro/index":{"id":"essentials/data-fetching/intro/index","title":"Data Fetching","description":"In this step, we\'ll be learning about the basics of data fetching in Refine. ` component accepts a dataProvider` prop which is used to handle all the data fetching and mutation operations with a simple interface. While Refine supports many data providers out of the box, for sake of this tutorial, we\'ll be creating our own data provider and connecting it to a fake REST API."},"essentials/data-fetching/listing-data/index":{"id":"essentials/data-fetching/listing-data/index","title":"Listing Records","description":"In this step, we\'ll be learning about the Refine\'s useList hook to fetch a list of records from our API. We\'ll also learn about pagination, sorting and filtering through the useList hook."},"essentials/data-fetching/updating-data/index":{"id":"essentials/data-fetching/updating-data/index","title":"Updating a Record","description":"In this step, we\'ll be learning about the Refine\'s useUpdate hook to update a record from our API and implement the update method in our data provider."},"essentials/forms/index":{"id":"essentials/forms/index","title":"Forms","description":"In this step, we\'ll be learning about the Refine\'s useForm hook to manage forms for creating and updating records."},"essentials/intro/index":{"id":"essentials/intro/index","title":"Introduction","description":"This tutorial will walk you through from essentials of Refine to advanced topics. You\'ll learn how to build a full-featured CRUD applications with Refine."},"essentials/setup/index":{"id":"essentials/setup/index","title":"Your First Refine App","description":"Creating a new Refine app is super simple and takes only a few steps to generate a fully functional app. For the sake of this tutorial, we will not be using the create-refine-app at its full potential. Instead, we will be creating an empty app and installing the required dependencies and configuring the app manually."},"essentials/tables/index":{"id":"essentials/tables/index","title":"Tables","description":"In this step, we\'ll be learning about the Refine\'s useTable hook to manage tables in our application."},"next-steps/cli/react-router/ant-design/index":{"id":"next-steps/cli/react-router/ant-design/index","title":"Using CLI","description":"In the previous step, we\'ve learned about the Inferencer package and how to use it to generate views for resources. In this step, we\'ll be learning about the Refine\'s CLI and its features."},"next-steps/cli/react-router/material-ui/index":{"id":"next-steps/cli/react-router/material-ui/index","title":"Using CLI","description":"In the previous step, we\'ve learned about the Inferencer package and how to use it to generate views for resources. In this step, we\'ll be learning about the Refine\'s CLI and its features."},"next-steps/devtools/react-router/ant-design/index":{"id":"next-steps/devtools/react-router/ant-design/index","title":"Using Devtools","description":"In this step, we\'ll explore Refine\'s powerful Devtools package, which offers monitoring and update features for inspecting and debugging Refine applications."},"next-steps/devtools/react-router/material-ui/index":{"id":"next-steps/devtools/react-router/material-ui/index","title":"Using Devtools","description":"In this step, we\'ll explore Refine\'s powerful Devtools package, which offers monitoring and update features for inspecting and debugging Refine applications."},"next-steps/inferencer/react-router/ant-design/index":{"id":"next-steps/inferencer/react-router/ant-design/index","title":"Using Inferencer","description":"Refine\'s @refinedev/inferencer package can be used to scaffold initial code for your resource pages based on API responses."},"next-steps/inferencer/react-router/material-ui/index":{"id":"next-steps/inferencer/react-router/material-ui/index","title":"Using Inferencer","description":"Refine\'s @refinedev/inferencer package can be used to scaffold initial code for your resource pages based on API responses."},"next-steps/intro/ant-design/index":{"id":"next-steps/intro/ant-design/index","title":"Introduction","description":"We\'ve completed building our app from scratch and gained knowledge about the fundamentals of Refine, including building a CRUD application using its hooks and components."},"next-steps/intro/material-ui/index":{"id":"next-steps/intro/material-ui/index","title":"Introduction","description":"We\'ve completed building our app from scratch and gained knowledge about the fundamentals of Refine, including building a CRUD application using its hooks and components."},"next-steps/summary/react-router/ant-design/index":{"id":"next-steps/summary/react-router/ant-design/index","title":"Summary","description":"Congratulations! You\'ve completed the tutorial, learning how to create a CRUD application from scratch using Refine and understanding its basic concepts. With this knowledge, you can now use Refine to develop your own applications without limitations."},"next-steps/summary/react-router/material-ui/index":{"id":"next-steps/summary/react-router/material-ui/index","title":"Summary","description":"Congratulations! You\'ve completed the tutorial by learning how to create a CRUD application from scratch using Refine and understanding its basic concepts. With this knowledge, you can now use Refine to develop your own applications without limitations."},"routing/authentication/react-router/index":{"id":"routing/authentication/react-router/index","title":"Authentication","description":"Before starting to add our resources and their respective routes, we\'ll be moving our authentication logic to work with routing. To achieve this, we\'ll use the ` and ` components to redirect users to our products list page."},"routing/inferring-parameters/react-router/index":{"id":"routing/inferring-parameters/react-router/index","title":"Inferring Parameters","description":"Now we\'ve learned about the useNavigation hook and how to handle navigation with Refine. In this step, we\'ll be updating components to benefit from the parameter inference of Refine."},"routing/intro/react-router/index":{"id":"routing/intro/react-router/index","title":"Introduction","description":"Now we\'ve learned the data fetching essentials and basics of authentication in Refine. In this unit, we\'ll learn how to add a router provider to our app and the features we\'re unlocking with a router provider."},"routing/navigation/react-router/index":{"id":"routing/navigation/react-router/index","title":"Navigation","description":"Now we\'ve set up our routes and resources. In this step, we\'ll be learning about Refine\'s navigation helpers and how to use them in our app."},"routing/redirects/react-router/index":{"id":"routing/redirects/react-router/index","title":"Redirects","description":"Now we\'ve updated our components to benefit from the parameter inference of Refine. In this step, we\'ll be learning about the redirects and how to benefit from them in our forms and auth provider."},"routing/resource-definition/react-router/index":{"id":"routing/resource-definition/react-router/index","title":"Defining Resources","description":"So far, we\'ve integrated the authentication logic into our routes. In this step, we\'ll be creating routes for these components and define our resources to inform Refine about their corresponding routes."},"routing/syncing-state/react-router/index":{"id":"routing/syncing-state/react-router/index","title":"Syncing State with Location","description":"As the final step of this unit, we\'ll be learning how to sync the state of our tables with the location. This will allow us to share the currentPage state of the table with others. For example, we can share the URL of the table with our colleagues and they will see the same table with the same filters, sorting, and pagination."},"ui-libraries/authentication/ant-design/react-router/index":{"id":"ui-libraries/authentication/ant-design/react-router/index","title":"Authentication","description":"Now our application is ready to use with layouts, views and notifications. Only thing left unstyled is the /login page. Refine provides `` components which works with Refine\'s auth hooks and uses the UI elements from the Ant Design."},"ui-libraries/authentication/material-ui/react-router/index":{"id":"ui-libraries/authentication/material-ui/react-router/index","title":"Authentication","description":"Now our application is ready to use with layouts, views and notifications. Only thing left unstyled is the /login page. Refine provides `` components which works with Refine\'s auth hooks and uses the UI elements from the Material UI."},"ui-libraries/crud-components/ant-design/react-router/index":{"id":"ui-libraries/crud-components/ant-design/react-router/index","title":"CRUD Components","description":"After refactoring the components, it\'s time to learn about the CRUD view components provided by Refine\'s Ant Design integration. These components are implemented to provide consistent design with Ant Design with additional features such as headers with i18n support, breadcrumbs, navigation buttons, submission buttons, and more."},"ui-libraries/crud-components/material-ui/react-router/index":{"id":"ui-libraries/crud-components/material-ui/react-router/index","title":"CRUD Components","description":"After refactoring the components, it\'s time to learn about the CRUD view components provided by Refine\'s Material UI integration. These components are implemented to provide consistent design with Material UI with additional features such as headers with i18n support, breadcrumbs, navigation buttons, submission buttons, and more."},"ui-libraries/intro/ant-design/react-router/index":{"id":"ui-libraries/intro/ant-design/react-router/index","title":"Introduction","description":"In the previous unit, we learned about the router integrations of Refine. Now, we\'ll dive into its UI integrations, layouts, CRUD view components, and hooks to build a CRUD application with Refine and Ant Design."},"ui-libraries/intro/material-ui/react-router/index":{"id":"ui-libraries/intro/material-ui/react-router/index","title":"Introduction","description":"In the previous unit, we learned about the router integrations of Refine. Now, we\'ll dive into its UI integrations, layouts, CRUD view components, and hooks to build a CRUD application with Refine and Material UI."},"ui-libraries/layout/ant-design/react-router/index":{"id":"ui-libraries/layout/ant-design/react-router/index","title":"Using Layouts","description":"Having wrapped our app with the necessary styling components, we\'re now ready to add our layout into the application. Refine provides default layouts for its supported UI libraries through `` components, delivering a two-column layout with a sidebar and a main content area."},"ui-libraries/layout/material-ui/react-router/index":{"id":"ui-libraries/layout/material-ui/react-router/index","title":"Using Layouts","description":"Having wrapped our app with the necessary styling components, we\'re now ready to add our layout into the application. Refine provides default layouts for its supported UI libraries through `` components, delivering a two-column layout with a sidebar and a main content area."},"ui-libraries/notifications/ant-design/react-router/index":{"id":"ui-libraries/notifications/ant-design/react-router/index","title":"Notifications","description":"In this step, we will explore integrating Ant Design\'s notification system with Refine to deliver notifications to users."},"ui-libraries/notifications/material-ui/react-router/index":{"id":"ui-libraries/notifications/material-ui/react-router/index","title":"Notifications","description":"Now we\'ve refactored our application with Material UI, we only have one thing left to do: handle notifications."},"ui-libraries/refactoring/ant-design/react-router/index":{"id":"ui-libraries/refactoring/ant-design/react-router/index","title":"Refactoring","description":"Now we\'re ready to refactor our app to use the @refinedev/antd\'s useForm and useTable hooks. These hooks will allow us to create forms and tables with ease by providing an interface that is compatible with Ant Design\'s ` and ` components."},"ui-libraries/refactoring/material-ui/react-router/index":{"id":"ui-libraries/refactoring/material-ui/react-router/index","title":"Refactoring","description":"Now we\'re ready to refactor our app to use the @refinedev/mui\'s useTable hook and @refinedev/react-hook-form\'s useForm hook. These hooks will allow us to create forms and tables with ease by providing an interface that is compatible with Material UI\'s ` and ` components."}}}')}}]);