"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[81e3],{58860:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(37953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||c[g]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},54271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>D,contentTitle:()=>k,default:()=>U,frontMatter:()=>O,metadata:()=>T,toc:()=>L});n(37953);var r=n(58860);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={toc:[]},l="wrapper";function p(e){var{components:t}=e,n=o(e,["components"]);return(0,r.yg)(l,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},s,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/categories previewHeight=300px",live:!0,url:"http://localhost:3000/categories",previewHeight:"300px"},'import React from "react";\nimport { Refine } from "@refinedev/core";\n\nsetInitialRoutes(["/posts"]);\n// visible-block-start\nimport React from "react";\nimport { useInfiniteList } from "@refinedev/core";\n\nconst PostList = () => {\n  const {\n    data,\n    isError,\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    isFetchingNextPage,\n  } = useInfiniteList({\n    resource: "categories",\n    pagination: {\n      pageSize: 4,\n    },\n  });\n\n  if (isLoading) {\n    return <p>Loading</p>;\n  }\n  if (isError) {\n    return <p>Something went wrong</p>;\n  }\n\n  const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n  return (\n    <div>\n      <ul>\n        {allPages.map(({ id, title }) => (\n          <li key={id}>\n            {id}.{title}\n          </li>\n        ))}\n      </ul>\n      {hasNextPage && (\n        <button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n          {isFetchingNextPage ? "Loading more..." : "Load More"}\n        </button>\n      )}\n    </div>\n  );\n};\n// visible-block-end\n\nsetRefineProps({\n  // Layout: (props: LayoutProps) => <Layout {...props} />,\n  resources: [\n    {\n      name: "posts",\n      list: "/posts",\n    },\n  ],\n});\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo>\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}p.isMDXComponent=!0;const g={toc:[]},m="wrapper";function y(e){var{components:t}=e,n=c(e,["components"]);return(0,r.yg)(m,u(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=300px hideCode",live:!0,url:"http://localhost:3000/products",previewHeight:"300px",hideCode:!0},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useState } from "react";\nimport { useInfiniteList, HttpError } from "@refinedev/core";\n\ninterface IProduct {\n  id: number;\n  name: string;\n  material: string;\n}\n\nconst ProductList: React.FC = () => {\n  //highlight-next-line\n  const [order, setOrder] = useState<"asc" | "desc">("asc");\n\n  const {\n    data,\n    isLoading,\n    isError,\n    hasNextPage,\n    fetchNextPage,\n    isFetchingNextPage,\n  } = useInfiniteList<IProduct, HttpError>({\n    resource: "products",\n    //highlight-start\n    sorters: [\n      {\n        field: "name",\n        order,\n      },\n    ],\n    //highlight-end\n  });\n\n  if (isLoading) {\n    return <p>Loading</p>;\n  }\n  if (isError) {\n    return <p>Something went wrong</p>;\n  }\n\n  const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n  return (\n    <div>\n      {/* highlight-start */}\n      <button\n        onClick={() => setOrder((prev) => (prev === "asc" ? "desc" : "asc"))}\n      >\n        toggle sort\n      </button>\n      {/* highlight-end */}\n\n      <ul>\n        {allPages.map((product) => (\n          <li key={product.id}>\n            {product.name} - ({product.material})\n          </li>\n        ))}\n      </ul>\n\n      {hasNextPage && (\n        <button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n          {isFetchingNextPage ? "Loading more..." : "Load More"}\n        </button>\n      )}\n    </div>\n  );\n};\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "products",\n      list: "/products",\n    },\n  ],\n});\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo>\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/products" element={<ProductList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function b(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}y.isMDXComponent=!0;const v={toc:[]},N="wrapper";function w(e){var{components:t}=e,n=b(e,["components"]);return(0,r.yg)(N,f(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){h(e,t,n[t])}))}return e}({},v,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  padding: 4px;\n  background: white;\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=300px hideCode",live:!0,url:"http://localhost:3000/products",previewHeight:"300px",hideCode:!0},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useState } from "react";\nimport { useInfiniteList, HttpError } from "@refinedev/core";\n\ninterface IProduct {\n  id: number;\n  name: string;\n  material: string;\n}\n\nconst ProductList: React.FC = () => {\n  //highlight-next-line\n  const [value, setValue] = useState("Cotton");\n\n  const {\n    data,\n    isLoading,\n    isError,\n    hasNextPage,\n    fetchNextPage,\n    isFetchingNextPage,\n  } = useInfiniteList<IProduct, HttpError>({\n    resource: "products",\n    //highlight-start\n    filters: [\n      {\n        field: "material",\n        operator: "eq",\n        value,\n      },\n    ],\n    //highlight-end\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Something went wrong!</div>;\n  }\n\n  const allPages = [].concat(...(data?.pages ?? []).map((page) => page.data));\n\n  return (\n    <div>\n      {/* highlight-start */}\n      <span> material: </span>\n      <select value={value} onChange={(e) => setValue(e.target.value)}>\n        {["Cotton", "Bronze", "Plastic"].map((material) => (\n          <option key={material} value={material}>\n            {material}\n          </option>\n        ))}\n      </select>\n      {/* highlight-end */}\n\n      <ul>\n        {allPages.map((product) => (\n          <li key={product.id}>\n            {product.name} - ({product.material})\n          </li>\n        ))}\n      </ul>\n\n      {hasNextPage && (\n        <button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n          {isFetchingNextPage ? "Loading more..." : "Load More"}\n        </button>\n      )}\n    </div>\n  );\n};\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "products",\n      list: "/products",\n    },\n  ],\n});\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo>\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/products" element={<ProductList />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function C(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}w.isMDXComponent=!0;const O={title:"useInfiniteList",siderbar_label:"useInfiniteList",source:"https://github.com/refinedev/refine/blob/main/packages/core/src/hooks/data/useInfiniteList.ts",description:"useInfiniteList data hook from Refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},k=void 0,T={unversionedId:"data/hooks/use-infinite-list/index",id:"version-4.xx.xx/data/hooks/use-infinite-list/index",title:"useInfiniteList",description:"useInfiniteList data hook from Refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations.",source:"@site/versioned_docs/version-4.xx.xx/data/hooks/use-infinite-list/index.md",sourceDirName:"data/hooks/use-infinite-list",slug:"/data/hooks/use-infinite-list/",permalink:"/docs/4.xx.xx/data/hooks/use-infinite-list/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/data/hooks/use-infinite-list/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useInfiniteList",siderbar_label:"useInfiniteList",source:"https://github.com/refinedev/refine/blob/main/packages/core/src/hooks/data/useInfiniteList.ts",description:"useInfiniteList data hook from Refine is a modified version of TanStack Query's useInfiniteQuery for retrieving items from a resource with pagination, search, sort, and filter configurations."},sidebar:"mainSidebar",previous:{title:"useList",permalink:"/docs/4.xx.xx/data/hooks/use-list/"},next:{title:"useOne",permalink:"/docs/4.xx.xx/data/hooks/use-one/"}},D={},L=[{value:"Usage",id:"usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Retrieving the Total Row Count",id:"retrieving-the-total-row-count",level:3},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"resource <PropTag required />",id:"resource-",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"filters",id:"filters",level:3},{value:"sorters",id:"sorters",level:3},{value:"pagination",id:"pagination-1",level:3},{value:"current",id:"current",level:4},{value:"pageSize",id:"pagesize",level:4},{value:"mode",id:"mode",level:4},{value:"queryOptions",id:"queryoptions",level:3},{value:"meta",id:"meta",level:3},{value:"successNotification",id:"successnotification",level:3},{value:"errorNotification",id:"errornotification",level:3},{value:"liveMode",id:"livemode",level:3},{value:"onLiveEvent",id:"onliveevent",level:3},{value:"liveParams",id:"liveparams",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"<del>config</del> <PropTag deprecated />",id:"config-",level:3},{value:"<del>hasPagination</del> <PropTag deprecated />",id:"haspagination-",level:3},{value:"Return Values",id:"return-values",level:2},{value:"Additional Values",id:"additional-values",level:3},{value:"overtime",id:"overtime",level:4},{value:"FAQ",id:"faq",level:2},{value:"How to use cursor-based pagination?",id:"how-to-use-cursor-based-pagination",level:3},{value:"How to override the <code>getNextPageParam</code> method?",id:"how-to-override-the-getnextpageparam-method",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],I=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},j=I("DocThumbsUpDownFeedbackWidget"),R=I("PropTag"),q=I("PropsTable"),F=I("CodeSandboxExample"),S={toc:L},E="wrapper";function U(e){var{components:t}=e,n=C(e,["components"]);return(0,r.yg)(E,x(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){P(e,t,n[t])}))}return e}({},S,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook is an extended version of TanStack Query's ",(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"useInfiniteQuery"))," used for retrieving items from a ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," with pagination, sort, and filter configurations. It is ideal for lists where the total number of records is unknown and the user loads the next pages with a button."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"It uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method as the query function from the ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"dataProvider"))," which is passed to ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"It uses a query key to cache the data. The ",(0,r.yg)("strong",{parentName:"p"},"query key")," is generated from the provided properties. You can see the query key by using the TanStack Query devtools."))),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(j,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Here is a basic example of how to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook."),(0,r.yg)(p,{mdxType:"BasicUsageLivePreview"})),(0,r.yg)("h2",{id:"pagination"},"Pagination"),(0,r.yg)(j,{id:"pagination",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports pagination properties just like ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-list"},(0,r.yg)("inlineCode",{parentName:"a"},"useList")),". To handle pagination, the ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook passes the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.yg)("p",null,"Dynamically changing the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," properties will trigger a new request. The ",(0,r.yg)("inlineCode",{parentName:"p"},"fetchNextPage")," method will increase the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination.current")," property by one and trigger a new request as well.")),(0,r.yg)("h3",{id:"retrieving-the-total-row-count"},"Retrieving the Total Row Count"),(0,r.yg)(j,{id:"retrieving-the-total-row-count",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method is called via ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList"),", it should ideally return the total count of rows (",(0,r.yg)("inlineCode",{parentName:"p"},"rowCount"),"). The way this count is obtained depends on the data provider in use:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"REST Providers:")," Commonly obtain the total count from the ",(0,r.yg)("inlineCode",{parentName:"li"},"x-total-count")," header."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"GraphQL Providers:")," Often source the count from specific data fields like ",(0,r.yg)("inlineCode",{parentName:"li"},"pageInfo.total"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Other Providers:")," Follow their own practices for obtaining the total count.")),(0,r.yg)("p",null,"If the data provider doesn't return a specific count, the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method may fall back to using the length of the paginated data array as the ",(0,r.yg)("inlineCode",{parentName:"p"},"rowCount"),"."),(0,r.yg)("p",null,"For more information on how this works, refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://refine.dev/docs/data/data-provider/#getlist"},(0,r.yg)("inlineCode",{parentName:"a"},"getList")," method documentation"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'import { useInfiniteList } from "@refinedev/core";\n\nconst postListQueryResult = useInfiniteList({\n  resource: "posts",\n  pagination: { current: 3, pageSize: 8 },\n});\n'))),(0,r.yg)("h2",{id:"sorting"},"Sorting"),(0,r.yg)(j,{id:"sorting",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports the sorting feature, which you can enable by passing the ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," property. ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," will then pass this property to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.yg)("p",null,"Dynamically changing the ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," property will trigger a new request."),(0,r.yg)(y,{mdxType:"SortingLivePreview"})),(0,r.yg)("h2",{id:"filtering"},"Filtering"),(0,r.yg)(j,{id:"filtering",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook supports the filtering feature, which you can enable by passing the ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," property. ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," will then pass this property to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.yg)("p",null,"Dynamically changing the ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," property will trigger a new request."),(0,r.yg)(w,{mdxType:"FilteringLivePreview"})),(0,r.yg)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.yg)(j,{id:"realtime-updates",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This feature is only available if you use a ",(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},"Live Provider"),".")),(0,r.yg)("p",null,"When the ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," hook is mounted, it will call the ",(0,r.yg)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"liveProvider")," with some parameters such as ",(0,r.yg)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," etc. This is useful when you want to subscribe to live updates.")),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"resource-"},"resource ",(0,r.yg)(R,{required:!0,mdxType:"PropTag"})),(0,r.yg)(j,{id:"resource-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This parameter will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is usually used as an API endpoint path but it all depends on how you handle the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  resource: "categories",\n});\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},"creating a data provider tutorial ","\u2192"))),(0,r.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,r.yg)("inlineCode",{parentName:"a"},"identifier")," of the ",(0,r.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,r.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,r.yg)(j,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This prop allows you to specify which ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," if you have more than one. Just pass it like in the example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  dataProviderName: "second-data-provider",\n});\n'))),(0,r.yg)("h3",{id:"filters"},"filters"),(0,r.yg)(j,{id:"filters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send filter query parameters to the API."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  filters: [\n    {\n      field: "title",\n      operator: "contains",\n      value: "Foo",\n    },\n  ],\n});\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")," interface ","\u2192")))),(0,r.yg)("h3",{id:"sorters"},"sorters"),(0,r.yg)(j,{id:"sorters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send sort query parameters to the API."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  sorters: [\n    {\n      field: "title",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/interface-references#crudsorting"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudSorting")," interface ","\u2192")))),(0,r.yg)("h3",{id:"pagination-1"},"pagination"),(0,r.yg)(j,{id:"pagination-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as a parameter. It is used to send pagination query parameters to the API.")),(0,r.yg)("h4",{id:"current"},"current"),(0,r.yg)(j,{id:"current",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n  pagination: {\n    current: 2,\n  },\n});\n"))),(0,r.yg)("h4",{id:"pagesize"},"pageSize"),(0,r.yg)(j,{id:"pagesize",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n  pagination: {\n    pageSize: 20,\n  },\n});\n"))),(0,r.yg)("h4",{id:"mode"},"mode"),(0,r.yg)(j,{id:"mode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This property can be ",(0,r.yg)("inlineCode",{parentName:"p"},'"off"'),", ",(0,r.yg)("inlineCode",{parentName:"p"},'"client"')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'"server"'),". It is used to determine whether to use server-side pagination or not."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  pagination: {\n    mode: "off",\n  },\n});\n'))),(0,r.yg)("h3",{id:"queryoptions"},"queryOptions"),(0,r.yg)(j,{id:"queryoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n  queryOptions: {\n    retry: 3,\n  },\n});\n")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"useQuery")," documentation","\u2192")))),(0,r.yg)("h3",{id:"meta"},"meta"),(0,r.yg)(j,{id:"meta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,r.yg)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,r.yg)("p",null,"In the following example, we pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.yg)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  // highlight-start\n  meta: {\n    headers: { "x-meta-data": "true" },\n  },\n  // highlight-end\n});\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    sorters,\n    filters,\n    // highlight-next-line\n    meta,\n  }) => {\n    // highlight-next-line\n    const headers = meta?.headers ?? {};\n    const url = `${apiUrl}/${resource}`;\n    //...\n    // highlight-next-line\n    const { data } = await httpClient.get(`${url}`, { headers });\n\n    return {\n      data,\n    };\n  },\n  //...\n};\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/guides-concepts/general-concepts/#meta-concept"},(0,r.yg)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation","\u2192")))),(0,r.yg)("h3",{id:"successnotification"},"successNotification"),(0,r.yg)(j,{id:"successnotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data is fetched successfully, ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," can call ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: "Success with no errors",\n      type: "success",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"errornotification"},"errorNotification"),(0,r.yg)(j,{id:"errornotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data fetching is failed, ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," will call the ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show an error notification. With this prop, you can customize the error notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: "Error",\n      type: "error",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"livemode"},"liveMode"),(0,r.yg)(j,{id:"livemode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useInfiniteList({\n  liveMode: "auto",\n});\n'))),(0,r.yg)("h3",{id:"onliveevent"},"onLiveEvent"),(0,r.yg)(j,{id:"onliveevent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"The callback function is executed when new events from a subscription have arrived."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useInfiniteList({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n"))),(0,r.yg)("h3",{id:"liveparams"},"liveParams"),(0,r.yg)(j,{id:"liveparams",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"Params to pass to liveProvider's ",(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider#subscribe"},"subscribe")," method.")),(0,r.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,r.yg)(j,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want loading overtime for the request, you can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,r.yg)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,r.yg)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,r.yg)("p",null,"Return ",(0,r.yg)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,r.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useInfiniteList({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n"))),(0,r.yg)("h3",{id:"config-"},(0,r.yg)("del",{parentName:"h3"},"config")," ",(0,r.yg)(R,{deprecated:!0,mdxType:"PropTag"})),(0,r.yg)(j,{id:"config-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"hasPagination"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," instead.")),(0,r.yg)("h3",{id:"haspagination-"},(0,r.yg)("del",{parentName:"h3"},"hasPagination")," ",(0,r.yg)(R,{deprecated:!0,mdxType:"PropTag"})),(0,r.yg)(j,{id:"haspagination-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination.mode")," instead.")),(0,r.yg)("h2",{id:"return-values"},"Return Values"),(0,r.yg)(j,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Returns an object with TanStack Query's ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteQuery")," return values."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/reference/useInfiniteQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"useInfiniteQuery")," documentation","\u2192")))),(0,r.yg)("h3",{id:"additional-values"},"Additional Values"),(0,r.yg)("h4",{id:"overtime"},"overtime"),(0,r.yg)(j,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,r.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useInfiniteList();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n"))),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-to-use-cursor-based-pagination"},"How to use cursor-based pagination?"),(0,r.yg)(j,{id:"how-to-use-cursor-based-pagination",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Some APIs use the ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor-pagination")," method for its benefits. This method uses a ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor")," object to determine the next set of data. The cursor can be a number or a string and is passed to the API as a query parameter."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Preparing the data provider:")),(0,r.yg)("p",null,"Consumes data from data provider ",(0,r.yg)("inlineCode",{parentName:"p"},"useInfiniteList")," with the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method. First of all, we need to make this method in the data provider convenient for this API. The ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor")," data is kept in ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," and should be set to ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," by default."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n    };\n},\n")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"As the ",(0,r.yg)("inlineCode",{parentName:"p"},"total")," data is only needed in the ",(0,r.yg)("inlineCode",{parentName:"p"},"offset-pagination")," method, define it as ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," here.")),(0,r.yg)("p",null,"After this process, we successfully retrieved the first page of data. Let's fill the ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor")," object for the next page."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination }) => {\n    const { current } = pagination;\n    const { data } = await axios.get(\n        `https://api.fake-rest.refine.dev/${resource}?cursor=${current || 0}`,\n    );\n\n    return {\n        data: data[resource],\n        total: 0,\n        // highlight-start\n        cursor: {\n            next: data.cursor.next,\n            prev: data.cursor.prev,\n        },\n        // highlight-end\n    };\n},\n"))),(0,r.yg)("h3",{id:"how-to-override-the-getnextpageparam-method"},"How to override the ",(0,r.yg)("inlineCode",{parentName:"h3"},"getNextPageParam")," method?"),(0,r.yg)(j,{id:"how-to-override-the-getnextpageparam-method",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"By default, ",(0,r.yg)("inlineCode",{parentName:"p"},"Refine")," expects you to return the ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor")," object, but is not required. This is because some APIs don't work that way. To fix this problem you need to override the ",(0,r.yg)("inlineCode",{parentName:"p"},"getNextPageParam")," method and return the next ",(0,r.yg)("inlineCode",{parentName:"p"},"cursor"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useInfiniteList } from "@refinedev/core";\n\nconst {\n  data,\n  error,\n  hasNextPage,\n  isLoading,\n  fetchNextPage,\n  isFetchingNextPage,\n} = useInfiniteList({\n  resource: "posts",\n  // highlight-start\n  queryOptions: {\n    // When you override this method, you can access the `lastPage` and `allPages`.\n    getNextPageParam: (lastPage, allPages) => {\n      // return the last post\'s id\n      const { data } = lastPage;\n      const lastPost = data[data.length - 1];\n      return lastPost.id;\n    },\n  },\n  // highlight-end\n});\n'))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(j,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(q,{module:"@refinedev/core/useInfiniteList","successNotification-default":"`false`","errorNotification-default":'"Error (status code: `statusCode`)"',mdxType:"PropsTable"})),(0,r.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.yg)(j,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")))))),(0,r.yg)("h3",{id:"return-values-1"},"Return Values"),(0,r.yg)(j,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Result of the TanStack Query's ",(0,r.yg)("inlineCode",{parentName:"td"},"useInfiniteQuery")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://tanstack.com/query/latest/docs/react/reference/useInfiniteQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"InfiniteQueryObserverResult<{ data: TData[]; total: number; }, TError>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"overtime"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }")))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(j,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(F,{path:"use-infinite-list",mdxType:"CodeSandboxExample"})))}U.isMDXComponent=!0}}]);