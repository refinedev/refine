"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[75425],{58860:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var a=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>u});n(37953);var a=n(58860);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const l={title:"<Refine>"},s=void 0,p={unversionedId:"core/refine-component/index",id:"core/refine-component/index",title:"<Refine>",description:"`` component is the entry point of a Refine app. It is where the highest level of configuration of the app occurs.",source:"@site/docs/core/refine-component/index.md",sourceDirName:"core/refine-component",slug:"/core/refine-component/",permalink:"/docs/core/refine-component/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/core/refine-component/index.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756448184,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{title:"<Refine>"},sidebar:"mainSidebar",previous:{title:"FAQ",permalink:"/docs/guides-concepts/faq/"},next:{title:"Interface References",permalink:"/docs/core/interface-references/"}},d={},u=[{value:"dataProvider <PropTag asterisk />",id:"dataprovider-",level:2},{value:"routerProvider",id:"routerprovider",level:2},{value:"resources",id:"resources",level:2},{value:"name <PropTag asterisk />",id:"name-",level:3},{value:"identifier",id:"identifier",level:3},{value:"list",id:"list",level:3},{value:"create",id:"create",level:3},{value:"edit",id:"edit",level:3},{value:"show",id:"show",level:3},{value:"meta",id:"meta",level:3},{value:"label",id:"label",level:4},{value:"icon",id:"icon",level:4},{value:"canDelete",id:"candelete",level:4},{value:"parent",id:"parent",level:4},{value:"dataProviderName",id:"dataprovidername",level:4},{value:"hide",id:"hide",level:4},{value:"authProvider",id:"authprovider",level:2},{value:"i18nProvider",id:"i18nprovider",level:2},{value:"accessControlProvider",id:"accesscontrolprovider",level:2},{value:"liveProvider",id:"liveprovider",level:2},{value:"notificationProvider",id:"notificationprovider",level:2},{value:"options",id:"options",level:2},{value:"disableServerSideValidation",id:"disableserversidevalidation",level:3},{value:"breadcrumb",id:"breadcrumb",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"undoableTimeout",id:"undoabletimeout",level:3},{value:"syncWithLocation",id:"syncwithlocation",level:3},{value:"warnWhenUnsavedChanges",id:"warnwhenunsavedchanges",level:3},{value:"liveMode",id:"livemode",level:3},{value:"disableTelemetry",id:"disabletelemetry",level:3},{value:"redirect",id:"redirect",level:3},{value:"reactQuery",id:"reactquery",level:3},{value:"clientConfig",id:"clientconfig",level:4},{value:"textTransformers",id:"texttransformers",level:3},{value:"humanize",id:"humanize",level:4},{value:"plural",id:"plural",level:4},{value:"singular",id:"singular",level:4},{value:"overtime",id:"overtime",level:3},{value:"enabled",id:"enabled",level:4},{value:"interval",id:"interval",level:4},{value:"onInterval",id:"oninterval",level:4},{value:"useNewQueryKeys",id:"usenewquerykeys",level:3},{value:"title",id:"title",level:3},{value:"onLiveEvent",id:"onliveevent",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},m=c("PropTag"),h=c("DocThumbsUpDownFeedbackWidget"),g=c("Image"),y=c("PropsTable"),f={toc:u},v="wrapper";function b(e){var{components:t}=e,n=r(e,["components"]);return(0,a.yg)(v,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"<Refine>")," component is the entry point of a Refine app. It is where the highest level of configuration of the app occurs."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nconst App = () => (\n  <Refine\n    dataProvider={dataProvider("https://api.example.com")}\n    resources={[\n      {\n        name: "posts",\n        list: "/posts",\n      },\n    ]}\n  />\n);\n')),(0,a.yg)("h2",{id:"dataprovider-"},"dataProvider ",(0,a.yg)(m,{asterisk:!0,mdxType:"PropTag"})),(0,a.yg)(h,{id:"dataprovider-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.yg)("inlineCode",{parentName:"a"},"dataProvider"))," is the place where a Refine app communicates with an API.\nData providers also act as adapters for Refine, making it possible for it to consume different API's and data services.\nA ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.yg)("inlineCode",{parentName:"a"},"dataProvider"))," makes HTTP requests and returns response data back using predefined methods."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},"Refer to the Data Provider documentation for detailed information. ","\u2192")),(0,a.yg)("p",null,"Multiple data providers can be used with Refine, if you have multiple data providers, you can pass them to the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," prop as an object."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { defaultDataProvider, exampleDataProvider } from "./data-providers";\n\nconst App = () => (\n  <Refine\n    dataProvider={{\n      // `default` key must be defined to determine the default data provider\n      default: defaultDataProvider,\n      example: exampleDataProvider,\n    }}\n  />\n);\n'))),(0,a.yg)("h2",{id:"routerprovider"},"routerProvider"),(0,a.yg)(h,{id:"routerprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Refine provides a simple interface from the ",(0,a.yg)("inlineCode",{parentName:"p"},"routerProvider")," prop to infer the resource from route, pass, parse and sync the query parameters and handle navigation operations. This provider and its properties are optional but it is recommended to use it to get the most out of Refine. Bindings to pass to the ",(0,a.yg)("inlineCode",{parentName:"p"},"routerProvider")," prop are provided for the following libraries:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"React Router via ",(0,a.yg)("inlineCode",{parentName:"li"},"@refinedev/react-router")),(0,a.yg)("li",{parentName:"ul"},"Next.js via ",(0,a.yg)("inlineCode",{parentName:"li"},"@refinedev/nextjs-router")),(0,a.yg)("li",{parentName:"ul"},"Remix via ",(0,a.yg)("inlineCode",{parentName:"li"},"@refinedev/remix-router"))),(0,a.yg)("p",null,"It's also possible to create a custom router bindings for your routing needs."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/routing/router-provider"},"Refer to the Router Provider documentation for detailed information. ","\u2192")),(0,a.yg)("admonition",{title:"Legacy Router",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"In prior versions from v4 of Refine, ",(0,a.yg)("inlineCode",{parentName:"p"},"routerProvider")," had a different interface and it was required. This is no longer the case and ",(0,a.yg)("inlineCode",{parentName:"p"},"routerProvider")," is optional. If you want to keep using the legacy router provider, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"legacyRouterProvider")," prop instead."))),(0,a.yg)("h2",{id:"resources"},"resources"),(0,a.yg)(h,{id:"resources",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"resources")," is the main building block of a Refine app. A resource represents an entity in an endpoint in the API (e.g. ",(0,a.yg)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/posts"},"https://api.fake-rest.refine.dev/posts"),"). It serves as a bridge between the data from the API and the pages in the app, allowing pages to interact with the data from the API."),(0,a.yg)("p",null,"Here's an app that consumes the ",(0,a.yg)("a",{parentName:"p",href:"https://api.fake-rest.refine.dev/posts"},"https://api.fake-rest.refine.dev/posts")," endpoint as a resource to list multiple items, edit or create an item and show a single item."),(0,a.yg)("p",null,"Routes for the action pages that are for interacting with the CRUD API operations are passed as a resource element to ",(0,a.yg)("inlineCode",{parentName:"p"},"resources"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/json-server";\n\nconst App = () => (\n  <Refine\n    dataProvider={dataProvider("https://api.example.com")}\n    // highlight-start\n    resources={[\n      {\n        name: "posts",\n        list: "/posts", // Means that the list action of this resource will be available at /posts in your app\n        create: "/posts/create", // Means that the create action of this resource will be available at /posts/create in your app\n        edit: "/posts/edit/:id", // Means that the edit action of this resource will be available at /posts/edit/:id in your app\n        show: "/posts/show/:id", // Means that the show action of this resource will be available at /posts/show/:id in your app\n      },\n    ]}\n    // highlight-end\n  />\n);\n')),(0,a.yg)("admonition",{title:"Accessing the Resource",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"You can use ",(0,a.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-resource-params"},"useResourceParams")," hook to get the current active resource by the route or you can pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," or the ",(0,a.yg)("inlineCode",{parentName:"p"},"identifier")," of a resource to the ",(0,a.yg)("inlineCode",{parentName:"p"},"useResourceParams")," hook to get the resource object."))),(0,a.yg)("h3",{id:"name-"},"name ",(0,a.yg)(m,{asterisk:!0,mdxType:"PropTag"})),(0,a.yg)(h,{id:"name-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A string value that identifies a resource in the API. Interacting with the data in a resource will be done using an endpoint determined by the ",(0,a.yg)("inlineCode",{parentName:"p"},"name"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"https://api.fake-rest.refine.dev/posts\nhttps://api.fake-rest.refine.dev/posts/1\n"))),(0,a.yg)("h3",{id:"identifier"},"identifier"),(0,a.yg)(h,{id:"identifier",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"identifier")," value serves as the main matching key for a resource. It allows you to effectively differentiate between multiple resources that share the same ",(0,a.yg)("inlineCode",{parentName:"p"},"name"),"."),(0,a.yg)("p",null,"There are scenarios where you may have multiple resources with the same ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," but different ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," values. For instance, you might want a ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," resource utilizing the default data provider and another ",(0,a.yg)("inlineCode",{parentName:"p"},"posts"),' resource utilizing the "typicode" data provider. In this case, you can use the ',(0,a.yg)("inlineCode",{parentName:"p"},"identifier")," to differentiate between them."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\n\n<Refine\n    ...\n    dataProvider={{\n        default: defaultDataProvider,\n        typicode: typicodeDataProvider,\n    }}\n    resources={[\n        {\n            name: "posts",\n            identifier: "posts",\n            meta: {\n                foo: "bar",\n            },\n        },\n        {\n            name: "posts",\n            identifier: "featured-posts",\n            meta: {\n                foo: "baz",\n                filter: {\n                    featured: true,\n                },\n                dataProviderName: "typicode",\n            },\n        },\n    ]}\n>\n...\n</Refine>;\n')),(0,a.yg)("p",null,"As you can see in the example above, we have two resources with the same ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," but different ",(0,a.yg)("inlineCode",{parentName:"p"},"identifier")," values. Also, both resources have different ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," values. Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"identifier"),", we can differentiate between the two resources like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@refinedev/core";\n\nuseTable({\n  resource: "featured-posts",\n});\n\nconst typicodeDataProvider = {\n  //...\n  getList: async ({ resource, meta }) => {\n    console.log(resource); // "posts"\n    console.log(meta); // { foo: "baz", filter: { featured: true } }\n  },\n  //...\n};\n'))),(0,a.yg)("h3",{id:"list"},"list"),(0,a.yg)(h,{id:"list",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The list path of the resource. The value assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," will be treated as the ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," action path for the resource and the navigation operations will be performed on this path."),(0,a.yg)("p",null,"You can also pass a component to this property. In this case the default value for the path will be used, which is the ",(0,a.yg)("inlineCode",{parentName:"p"},"/${name}"),"."),(0,a.yg)("p",null,"There's also a third option, which is to pass an object with the ",(0,a.yg)("inlineCode",{parentName:"p"},"component")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," properties. This allows you to customize the path of the list action.")),(0,a.yg)("h3",{id:"create"},"create"),(0,a.yg)(h,{id:"create",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The create path of the resource. The value assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"create")," will be treated as the ",(0,a.yg)("inlineCode",{parentName:"p"},"create")," action path for the resource and the navigation operations will be performed on this path."),(0,a.yg)("p",null,"You can also pass a component to this property. In this case the default value for the path will be used, which is the ",(0,a.yg)("inlineCode",{parentName:"p"},"/${name}/create"),"."),(0,a.yg)("p",null,"There's also a third option, which is to pass an object with the ",(0,a.yg)("inlineCode",{parentName:"p"},"component")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," properties. This allows you to customize the path of the list action.")),(0,a.yg)("h3",{id:"edit"},"edit"),(0,a.yg)(h,{id:"edit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The edit path of the resource. The value assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," will be treated as the ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," action path for the resource and the navigation operations will be performed on this path."),(0,a.yg)("p",null,"You can also pass a component to this property. In this case the default value for the path will be used, which is the ",(0,a.yg)("inlineCode",{parentName:"p"},"/${name}/edit/:id"),"."),(0,a.yg)("p",null,"There's also a third option, which is to pass an object with the ",(0,a.yg)("inlineCode",{parentName:"p"},"component")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," properties. This allows you to customize the path of the list action.")),(0,a.yg)("h3",{id:"show"},"show"),(0,a.yg)(h,{id:"show",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The show path of the resource. The value assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," will be treated as the ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," action path for the resource and the navigation operations will be performed on this path."),(0,a.yg)("p",null,"You can also pass a component to this property. In this case the default value for the path will be used, which is the ",(0,a.yg)("inlineCode",{parentName:"p"},"/${name}/show/:id"),"."),(0,a.yg)("p",null,"There's also a third option, which is to pass an object with the ",(0,a.yg)("inlineCode",{parentName:"p"},"component")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," properties. This allows you to customize the path of the list action."),(0,a.yg)("admonition",{title:"Action definitions",type:"simple"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Additional parameters can also be used in the paths for the actions of the resources. Paths like ",(0,a.yg)("inlineCode",{parentName:"p"},"/:authorId/posts/:id/details")," are also valid and supported. When these actions are used in the navigation helpers, the existing parameters from the URL and the ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," property of these functions will be used to determine the additional parameters when composing the path.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Passing a component or an object to the action will only take effect if the RefineRoutes component from one of the ",(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/routing/#router-integrations"},"Router Packages")," is used in the app to render the routes.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"When using the legacy router provider, only the component values will be used. Custom paths are not supported."))))),(0,a.yg)("h3",{id:"meta"},"meta"),(0,a.yg)(h,{id:"meta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"meta")," can have any kind of property. It is used to store additional information about the resource. This property you pass can be received from the ",(0,a.yg)("a",{parentName:"p",href:"/docs/routing/hooks/use-resource-params"},"useResourceParams"),". Listed below are the properties that are used by Refine or its libraries.")),(0,a.yg)("h4",{id:"label"},"label"),(0,a.yg)(h,{id:"label",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Name to show in the menu. The plural form of the resource name is shown by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  resources={[\n    {\n      /* ... */\n      // highlight-next-line\n      meta: { label: "custom" },\n    },\n  ]}\n/>\n'))),(0,a.yg)("h4",{id:"icon"},"icon"),(0,a.yg)(h,{id:"icon",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"An icon element can be passed as properties for the icon in the menu."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<Refine\n  resources={[\n    {\n      /* ... */\n      // highlight-next-line\n      meta: { icon: <CustomIcon /> },\n    },\n  ]}\n/>\n"))),(0,a.yg)("h4",{id:"candelete"},"canDelete"),(0,a.yg)(h,{id:"candelete",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This value is used by the Crud views to determine whether to show the delete button or not."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<Refine\n  resources={[\n    {\n      /* ... */\n      // highlight-next-line\n      meta: { canDelete: true },\n    },\n  ]}\n/>\n"))),(0,a.yg)("h4",{id:"parent"},"parent"),(0,a.yg)(h,{id:"parent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"You can set this value if you want to nest your resource into another resource. Usually this value represents the name of the parent resource but you can also pass a custom string. In this case, it will still be interpreted as a parent resource. This value is used by the ",(0,a.yg)("inlineCode",{parentName:"p"},"useMenu")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useBreadcrumb")," hooks."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  resources={[\n    { name: "parent" },\n    {\n      name: "child",\n      // highlight-next-line\n      meta: { parent: "parent" },\n    },\n  ]}\n/>\n'))),(0,a.yg)("h4",{id:"dataprovidername"},"dataProviderName"),(0,a.yg)(h,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Default data provider name to use for the resource. If not specified, the default data provider will be used."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  dataProvider={{\n    default: defaultDataProvider,\n    typicode: typicodeDataProvider,\n  }}\n  resources={[\n    {\n      /* ... */\n      // highlight-next-line\n      meta: { dataProviderName: "typicode" },\n    },\n  ]}\n/>\n'))),(0,a.yg)("h4",{id:"hide"},"hide"),(0,a.yg)(h,{id:"hide",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Can be used to hide a ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"Sider"),". This resource is also filtered in the ",(0,a.yg)("inlineCode",{parentName:"p"},"useMenu")," hook."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<Refine\n  resources={[\n    {\n      /* ... */\n      // highlight-next-line\n      meta: { hide: true },\n    },\n  ]}\n/>\n"))),(0,a.yg)("h2",{id:"authprovider"},"authProvider"),(0,a.yg)(h,{id:"authprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," handles authentication logic like login, logout flow, and checking user credentials. It is an object with methods that Refine uses when necessary."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},"Refer to Auth Provider documentation for detailed information. ","\u2192"))),(0,a.yg)("h2",{id:"i18nprovider"},"i18nProvider"),(0,a.yg)(h,{id:"i18nprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"i18nProvider")," property lets you add i18n support to your app. Making you able to use any i18n framework."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/i18n/i18n-provider"},"Refer to i18n documentation for detailed information. ","\u2192"))),(0,a.yg)("h2",{id:"accesscontrolprovider"},"accessControlProvider"),(0,a.yg)(h,{id:"accesscontrolprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"accessControlProvider")," is the entry point for implementing access control for Refine apps."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},"Refer to access control documentation for detailed information. ","\u2192"))),(0,a.yg)("h2",{id:"liveprovider"},"liveProvider"),(0,a.yg)(h,{id:"liveprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Refine lets you add Realtime support to your app via ",(0,a.yg)("inlineCode",{parentName:"p"},"liveProvider"),". It can be used to update and show data in Realtime throughout your app."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},"Refer to live provider documentation for detailed information. ","\u2192"))),(0,a.yg)("h2",{id:"notificationprovider"},"notificationProvider"),(0,a.yg)(h,{id:"notificationprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"notificationProvider")," handles notification logic. It is an object with methods that Refine uses when necessary."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},"Refer to the Notification Provider documentation for detailed information. ","\u2192"))),(0,a.yg)("h2",{id:"options"},"options"),(0,a.yg)(h,{id:"options",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"options")," is used to configure the app.")),(0,a.yg)("h3",{id:"disableserversidevalidation"},"disableServerSideValidation"),(0,a.yg)(h,{id:"disableserversidevalidation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"errors"))," field, the ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm")," hook will set the ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"errors"))," state with the ",(0,a.yg)("inlineCode",{parentName:"p"},"errors")," returned from the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/forms/#server-side-validation-"},"Refer to Server Side Validation section of the Forms guide for detailed information. ","\u2192")),(0,a.yg)("p",null,"To disable this behavior, you can set the ",(0,a.yg)("inlineCode",{parentName:"p"},"disableServerSideValidation")," option to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n\nconst App = () => (\n  <Refine\n    // highlight-start\n    options={{ disableServerSideValidation: true }}\n    // highlight-end\n  >\n    {/* ... */}\n  </Refine>\n);\n'))),(0,a.yg)("h3",{id:"breadcrumb"},"breadcrumb"),(0,a.yg)(h,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Customize or disable the breadcrumb. By default it uses the Breadcrumb component from the respective package."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/ui-libraries/#layouts-and-menus"},"Refer to the Layouts and Menus section of UI Libraries guide for further information. ","\u2192")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Breadcrumb } from "@refinedev/antd";\n\nconst App = () => (\n  <Refine\n    // highlight-start\n    options={{\n      // Or you can pass `false` to disable the breadcrumbs\n      breadcrumb: (\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      ),\n    }}\n    // highlight-end\n  />\n);\n'))),(0,a.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,a.yg)(h,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"mutationMode")," determines which mode the mutations run with. (e.g. useUpdate, useDelete)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const App = () => (\n  <Refine\n    // highlight-next-line\n    options={{ mutationMode: "optimistic" }}\n  />\n);\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"pessimistic"),": The mutation runs immediately. Redirection and UI updates are executed after the mutation returns successfully. This is the default setting."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"optimistic"),": The mutation is applied locally, and redirection and UI updates are executed immediately as if the mutation is successful. If the mutation returns with an error, UI updates accordingly."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"undoable"),": The mutation is applied locally, and redirection and UI updates are executed immediately as if the mutation is successful. Waits for a customizable amount of timeout before mutation is applied. During the timeout, mutation can be canceled from the notification with the ?undo? button. UI will revert accordingly."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/forms/#mutation-modes-"},"Refer to the Mutation Mode docs for further information. ","\u2192"))),(0,a.yg)("h3",{id:"undoabletimeout"},"undoableTimeout"),(0,a.yg)(h,{id:"undoabletimeout",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The duration of the timeout period in ",(0,a.yg)("strong",{parentName:"p"},"undoable")," mode is shown in milliseconds. Mutations can be canceled during this period. This period can also be set on the supported data hooks.\nThe value set in hooks will override the value set with ",(0,a.yg)("inlineCode",{parentName:"p"},"undoableTimeout"),".\n",(0,a.yg)("inlineCode",{parentName:"p"},"undoableTimeout")," has a default value of ",(0,a.yg)("inlineCode",{parentName:"p"},"5000"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const App = () => (\n  <Refine\n    // highlight-next-line\n    options={{ mutationMode: "undoable", undoableTimeout: 3500 }}\n  />\n);\n'))),(0,a.yg)("h3",{id:"syncwithlocation"},"syncWithLocation"),(0,a.yg)(h,{id:"syncwithlocation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"List query parameter values can be edited manually by typing directly in the URL.\n",(0,a.yg)("inlineCode",{parentName:"p"},"syncWithLocation"),"'s default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),", so you need to set it to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to activate the feature."),(0,a.yg)("p",null,"Form hooks like ",(0,a.yg)("inlineCode",{parentName:"p"},"useDrawerForm")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," also have a ",(0,a.yg)("inlineCode",{parentName:"p"},"syncWithLocation")," property but the value of this option has no effect on these hooks. You'll still need to set the ",(0,a.yg)("inlineCode",{parentName:"p"},"syncWithLocation")," property in hooks to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to activate this feature."),(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"syncWithLocation")," is active, the URL on the listing page shows query parameters like those shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"/posts?current=1&pageSize=8&sort[]=createdAt&order[]=desc\n")),(0,a.yg)("p",null,"Users can change the current page, items count per page, and sort and filter parameters.")),(0,a.yg)("h3",{id:"warnwhenunsavedchanges"},"warnWhenUnsavedChanges"),(0,a.yg)(h,{id:"warnwhenunsavedchanges",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When you have unsaved changes and try to leave the current page, Refine shows a confirmation modal box.\n",(0,a.yg)("inlineCode",{parentName:"p"},"warnWhenUnsavedChanges"),"'s default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),", so you need to set it to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to activate the feature."),(0,a.yg)("p",null,"This feature also ",(0,a.yg)("strong",{parentName:"p"},"requires")," ",(0,a.yg)("inlineCode",{parentName:"p"},"UnsavedChangesNotifier")," component to be mounted. You can import this component from your router package."),(0,a.yg)(g,{className:"p-3 object-none",src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/warnwhen.png",mdxType:"Image"})),(0,a.yg)("h3",{id:"livemode"},"liveMode"),(0,a.yg)(h,{id:"livemode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"liveMode")," controls whether to update data automatically or not, with ",(0,a.yg)("inlineCode",{parentName:"p"},"auto")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"manual")," respectively if a related live event is received. The ",(0,a.yg)("inlineCode",{parentName:"p"},"off")," value can be used to avoid creating a subscription all together."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider#livemode"},"live provider documentation ","\u2192")))),(0,a.yg)("h3",{id:"disabletelemetry"},"disableTelemetry"),(0,a.yg)(h,{id:"disabletelemetry",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Refine implements a simple and transparent telemetry module for collecting usage statistics defined in a very limited scope. This telemetry module is used to improve the Refine experience. You can disable this by setting ",(0,a.yg)("inlineCode",{parentName:"p"},"disableTelemetry")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.yg)("a",{parentName:"p",href:"/docs/further-readings/telemetry"},"Refine telemetry documentation ","\u2192")))),(0,a.yg)("h3",{id:"redirect"},"redirect"),(0,a.yg)(h,{id:"redirect",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"By default, Refine redirects to the ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," page of the resource after a successful form mutation. To change this behavior based on the form ",(0,a.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-form/#actions"},"action"),", set ",(0,a.yg)("inlineCode",{parentName:"p"},"redirect")," as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const App = () => (\n  <Refine\n    // highlight-start\n    options={{\n      redirect: {\n        // If the resource doesn\'t have a show page defined, the user will be redirected to the list page.\n        afterCreate: "show",\n        // If the mutation mode is `undoable` or `optimistic`, the redirect happens before the mutation succeeds. Therefore, if there is no known `id` value, the user will be redirected to the list page.\n        afterClone: "edit",\n        // If set to `false`, no redirect is performed after a successful form mutation.\n        afterEdit: false,\n      },\n    }}\n    // highlight-end\n  />\n);\n'))),(0,a.yg)("h3",{id:"reactquery"},"reactQuery"),(0,a.yg)("h4",{id:"clientconfig"},"clientConfig"),(0,a.yg)(h,{id:"clientconfig",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Config for React Query client that Refine uses."),(0,a.yg)("admonition",{title:"Defaults",type:"simple"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"refetchOnWindowFocus"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"false")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"keepPreviousData"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"true")))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const App = () => (\n  <Refine\n    // highlight-start\n    options={{\n      reactQuery: {\n        clientConfig: {\n          defaultOptions: {\n            queries: {\n              staleTime: Infinity,\n            },\n          },\n        },\n      },\n    }}\n    // highlight-end\n  />\n);\n")),(0,a.yg)("p",null,"Also, you can use your own ",(0,a.yg)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/QueryClient#queryclient"},"QueryClient"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { QueryClient } from "@tanstack/react-query";\n\nconst myQueryClient = new QueryClient();\n\nconst App = () => (\n  <Refine\n    // highlight-start\n    options={{\n      reactQuery: {\n        clientConfig: myQueryClient,\n      },\n    }}\n    // highlight-end\n  />\n);\n')),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.yg)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/QueryClient#queryclient"},"QueryClient documentation ","\u2192")))),(0,a.yg)("h3",{id:"texttransformers"},"textTransformers"),(0,a.yg)(h,{id:"texttransformers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"textTransformers")," option in Refine is used to transform the resource name displayed on the user interface (UI). By default, if you define a resource named ",(0,a.yg)("inlineCode",{parentName:"p"},"posts"),", Refine will display it as ",(0,a.yg)("inlineCode",{parentName:"p"},"Posts"),". Similarly, when you delete a record, notification messages will be shown as ",(0,a.yg)("inlineCode",{parentName:"p"},"Post deleted successfully."),"."),(0,a.yg)("p",null,"You have the flexibility to customize these messages by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"textTransformers")," option. For instance, if you wish to disable any transformation, you can set the ",(0,a.yg)("inlineCode",{parentName:"p"},"textTransformers")," option as shown in the example below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const App = () => (\n  <Refine\n    // ...\n    options={{\n      textTransformers: {\n        humanize: (text) => text,\n        plural: (text) => text,\n        singular: (text) => text,\n      },\n    }}\n  />\n);\n"))),(0,a.yg)("h4",{id:"humanize"},"humanize"),(0,a.yg)(h,{id:"humanize",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The function converts the resource name to a more human-readable format. The default value uses the ",(0,a.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/humanize-string"},(0,a.yg)("inlineCode",{parentName:"a"},"humanize-string"))," library.")),(0,a.yg)("h4",{id:"plural"},"plural"),(0,a.yg)(h,{id:"plural",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The function converts the resource name to its plural form. The default value uses the ",(0,a.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/pluralize"},(0,a.yg)("inlineCode",{parentName:"a"},"pluralize"))," library.")),(0,a.yg)("h4",{id:"singular"},"singular"),(0,a.yg)(h,{id:"singular",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The function converts the resource name to its singular form. The default value uses the ",(0,a.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/pluralize"},(0,a.yg)("inlineCode",{parentName:"a"},"pluralize"))," library.")),(0,a.yg)("h3",{id:"overtime"},"overtime"),(0,a.yg)(h,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want loading overtime for the request, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"overtime")," object. It is useful when you want to show a loading indicator when the request takes too long."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const App = () => (\n  <Refine\n    // highlight-start\n    options={{\n      overtime: {\n        enabled: true,\n        interval: 1000, // default value is 1000\n        onInterval: (elapsedInterval, context) => {\n          console.log(elapsedInterval, context);\n        },\n      },\n    }}\n    // highlight-end\n  />\n);\n"))),(0,a.yg)("h4",{id:"enabled"},"enabled"),(0,a.yg)(h,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If true, the elapsed time will be calculated. If set to false, the elapsed time will always be ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined"),".")),(0,a.yg)("h4",{id:"interval"},"interval"),(0,a.yg)(h,{id:"interval",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The interval value in milliseconds. The default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"1000"),".")),(0,a.yg)("h4",{id:"oninterval"},"onInterval"),(0,a.yg)(h,{id:"oninterval",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The callback function that will be called on every interval. The default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.yg)("p",null,"The callback function receives two parameters:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"elapsedInterval"),": The elapsed interval in milliseconds."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"context"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"{ resource?: IResourceItem; resourceName?: string; id?: BaseKey, action?: Action }")))),(0,a.yg)("h3",{id:"usenewquerykeys"},"useNewQueryKeys"),(0,a.yg)(h,{id:"usenewquerykeys",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"With ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/core"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"v4.35.0"),", Refine introduced new query and mutation keys which are more structured and easy to construct. These keys are used in all data, auth, access control and audit log queries and mutations."),(0,a.yg)("p",null,"By default, Refine uses the legacy keys for backward compatibility and in the future versions it will switch to using the new query keys. You can easily switch to using new keys by setting ",(0,a.yg)("inlineCode",{parentName:"p"},"useNewQueryKeys")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),".")),(0,a.yg)("h3",{id:"title"},"title"),(0,a.yg)(h,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Refine's predefined layout and auth components displays a title for the app, which consists of the app name and an icon. These values can be customized globally by passing ",(0,a.yg)("inlineCode",{parentName:"p"},"options.title")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine>")," component."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"title")," is an object that can have the following properties:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"icon"),": A React Node to be used as the app icon. By default, it's Refine logo."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"text"),": A React Node to be used as the app name. By default, it's ",(0,a.yg)("inlineCode",{parentName:"li"},'"Refine Project"'),".")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'const App = () => (\n  <Refine\n    options={{\n      // highlight-start\n      title: {\n        icon: <CustomIcon />,\n        text: "Custom App Name",\n      },\n      // highlight-end\n    }}\n  />\n);\n')),(0,a.yg)("p",null,"If you wish to use separate values for your ",(0,a.yg)("inlineCode",{parentName:"p"},"<AuthPage />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<ThemedLayout />")," components, you can ",(0,a.yg)("inlineCode",{parentName:"p"},"Title")," prop to override the default title component (which is the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ThemedTitle />")," component from the respective package)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\n// ThemedTitle accepts `text` and `icon` props with same types as `options.title`\n// This component is used in both AuthPage and ThemedLayout components.\nimport { ThemedLayout, AuthPage, ThemedTitle } from "@refinedev/antd";\n\nconst App = () => {\n  return (\n    <Refine\n      options={{\n        // highlight-start\n        title: {\n          text: "My App",\n          icon: <IconA />,\n        },\n        // highlight-end\n      }}\n    >\n      {/* ... */}\n      <ThemedLayout\n        // highlight-start\n        Title={(props) => (\n          <ThemedTitle\n            // These values will override the global title values\n            text="A Different Value"\n            icon={<IconB />}\n            {...props}\n          />\n        )}\n        // highlight-end\n      >\n        {/* ... */}\n      </ThemedLayout>\n      {/* ... */}\n      <AuthPage\n        type="login"\n        // highlight-start\n        title={\n          <ThemedTitle\n            collapsed={false}\n            // These values will override the global title values\n            text="A Different Value"\n            icon={<IconC />}\n          />\n        }\n        // highlight-end\n      />\n    </Refine>\n  );\n};\n'))),(0,a.yg)("h2",{id:"onliveevent"},"onLiveEvent"),(0,a.yg)(h,{id:"onliveevent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Callback to handle all live events."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider#Refine"},"live provider documentation ","\u2192")))),(0,a.yg)("h2",{id:"api-reference"},"API Reference"),(0,a.yg)("h3",{id:"properties"},"Properties"),(0,a.yg)(h,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(y,{module:"@refinedev/core/Refine",mdxType:"PropsTable"})))}b.isMDXComponent=!0}}]);