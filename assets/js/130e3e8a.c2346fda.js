"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[41867],{58860:(e,t,a)=>{a.d(t,{xA:()=>h,yg:()=>g});var n=a(37953);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},h=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return a?n.createElement(g,i(i({ref:t},h),{},{components:a})):n.createElement(g,i({ref:t},h))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},76802:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});a(37953);var n=a(58860);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const o={title:"Create charts using Recharts",description:"We'll explore how to create charts in a Refine project using Recharts.",slug:"recharts",authors:"joseph_mawa",tags:["react","Refine"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/social.png",hide_table_of_contents:!1},l=void 0,c={permalink:"/blog/recharts",source:"@site/blog/2024-11-05-recharts.md",title:"Create charts using Recharts",description:"We'll explore how to create charts in a Refine project using Recharts.",date:"2024-11-05T00:00:00.000Z",formattedDate:"November 5, 2024",tags:[{label:"react",permalink:"/blog/tags/react"},{label:"Refine",permalink:"/blog/tags/refine"}],readingTime:24.985,hasTruncateMarker:!1,authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],frontMatter:{title:"Create charts using Recharts",description:"We'll explore how to create charts in a Refine project using Recharts.",slug:"recharts",authors:"joseph_mawa",tags:["react","Refine"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/social.png",hide_table_of_contents:!1},prevItem:{title:"Essentials of Managing Form State with React Hook Form",permalink:"/blog/react-hook-form"},nextItem:{title:"Tailwind Animations with Examples",permalink:"/blog/tailwind-animations"},relatedPosts:[{title:"Creating Polished Content with React Markdown",description:"We will explore the process of integrating the markdown editor into a Refine application",permalink:"/blog/react-markdown",formattedDate:"August 16, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:16.745,date:"2024-08-16T00:00:00.000Z"},{title:"React Memo Guide with Examples",description:"Improve app performance with React.memo().",permalink:"/blog/react-memo-guide",formattedDate:"September 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:18.645,date:"2024-09-19T00:00:00.000Z"},{title:"Introduction to Chakra UI",description:"Chakra UI is a comprehensive library of React components made to make creating user interfaces easier. .",permalink:"/blog/chakra-ui",formattedDate:"September 17, 2024",authors:[{name:"Samuel Ogunleye",title:"Frontend Engineer",imageURL:"https://github.com/Sproff.png",key:"samuel_ogunleye"}],readingTime:19.955,date:"2024-09-17T00:00:00.000Z"}],authorPosts:[{title:"A complete guide to the React createPortal API",description:"We'll explore the React createPortal API, its advantages, disadvantages, and possible use cases.",permalink:"/blog/react-createportal",formattedDate:"August 21, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:9.43,date:"2024-08-21T00:00:00.000Z"},{title:"CSS Box Shadow with 25 Examples",description:"We'll explore the CSS `box-shadow` property.",permalink:"/blog/box-shadow-css",formattedDate:"February 28, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:18.315,date:"2024-02-28T00:00:00.000Z"},{title:"How to use the useParams hook in React Router",description:"We'll discover how to access the parameters of the current route with the useParams hook in React Router.",permalink:"/blog/react-router-useparams",formattedDate:"December 12, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:6.45,date:"2024-12-12T00:00:00.000Z"}]},h={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is Recharts",id:"what-is-recharts",level:2},{value:"How to create a Refine project",id:"how-to-create-a-refine-project",level:2},{value:"How to install Recharts",id:"how-to-install-recharts",level:2},{value:"Create a Line chart using Recharts",id:"create-a-line-chart-using-recharts",level:2},{value:"Create Area chart using Recharts",id:"create-area-chart-using-recharts",level:2},{value:"Create a Bar chart using Recharts",id:"create-a-bar-chart-using-recharts",level:2},{value:"Create Scatter chart using Recharts",id:"create-scatter-chart-using-recharts",level:2},{value:"Create a Pie chart using Recharts",id:"create-a-pie-chart-using-recharts",level:2},{value:"Create TreeMap using Recharts",id:"create-treemap-using-recharts",level:2},{value:"Recharts Performance Optimization with Large Data Sets",id:"recharts-performance-optimization-with-large-data-sets",level:2},{value:"Limit Data Points to Display Only What&#39;s Necessary",id:"limit-data-points-to-display-only-whats-necessary",level:3},{value:"Prevent Re-Rendering with React.memo or PureComponent",id:"prevent-re-rendering-with-reactmemo-or-purecomponent",level:3},{value:"Minimize SVG Complexity by Limiting Chart Elements",id:"minimize-svg-complexity-by-limiting-chart-elements",level:3},{value:"Lazy-Load Charts Using Intersection Observers",id:"lazy-load-charts-using-intersection-observers",level:3},{value:"How to Make Recharts Responsive for Different Screen Sizes",id:"how-to-make-recharts-responsive-for-different-screen-sizes",level:2},{value:"Automatic Resizing Using ResponsiveContainer",id:"automatic-resizing-using-responsivecontainer",level:3},{value:"Set Aspect Ratio for Consistent Proportions",id:"set-aspect-ratio-for-consistent-proportions",level:3},{value:"Make Chart Elements Adaptive to Screen Size",id:"make-chart-elements-adaptive-to-screen-size",level:3},{value:"Proper Padding and Margins",id:"proper-padding-and-margins",level:3},{value:"Conclusion",id:"conclusion",level:2}],p={toc:d},m="wrapper";function g(e){var{components:t}=e,a=i(e,["components"]);return(0,n.yg)(m,s(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},p,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"This article was last updated on November 5, 2024 to include performance optimization tips and responsive design techniques for improved chart rendering in Recharts.")),(0,n.yg)("h2",{id:"introduction"},"Introduction"),(0,n.yg)("p",null,"Charts make it easy to represent complex data in a simple and visually appealing way. With charts, you can easily identify trends and patterns and make comparisons across different variables and data types. You can use charts to interpret current data and predict the future."),(0,n.yg)("p",null,"There are several types of charts you can use to visually represent data. Some of them include Line Charts, Bar Charts, Area Charts, and Scatter charts. The choice of a chart largely depends on the type of data. Different types of charts are suited for different purposes."),(0,n.yg)("p",null,"There are several libraries for creating charts in the React ecosystem. These React chart libraries include react-flow-charts, react-financial-charts, react-charts and Recharts. In this article, we will explore how to create charts in a Refine project using ",(0,n.yg)("a",{parentName:"p",href:"https://recharts.org/"},"Recharts"),"."),(0,n.yg)("p",null,"What we will cover:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#what-is-recharts"},"What is Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#how-to-create-a-refine-project"},"How to create a Refine project")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#how-to-install-recharts"},"How to install Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-a-line-chart-using-recharts"},"Create a Line chart using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-area-chart-using-recharts"},"Create Area chart using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-a-bar-chart-using-recharts"},"Create a Bar chart using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-scatter-chart-using-recharts"},"Create Scatter chart using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-a-pie-chart-using-recharts"},"Create a Pie chart using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#create-treemap-using-recharts"},"Create TreeMap using Recharts")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#recharts-performance-optimization-with-large-data-sets"},"Recharts Performance Optimization with Large Data Sets"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#limit-data-points-to-display-only-whats-necessary"},"Limit Data Points to Display Only What's Necessary")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#prevent-re-rendering-with-reactmemo-or-purecomponent"},"Prevent Re-Rendering with React.memo or PureComponent")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#minimize-svg-complexity-by-limiting-chart-elements"},"Minimize SVG Complexity by Limiting Chart Elements")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#lazy-load-charts-using-intersection-observers"},"Lazy-Load Charts Using Intersection Observers")))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#how-to-make-recharts-responsive-for-different-screen-sizes"},"How to Make Recharts Responsive for Different Screen Sizes"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#automatic-resizing-using-responsivecontainer"},"Automatic Resizing Using ResponsiveContainer")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#set-aspect-ratio-for-consistent-proportions"},"Set Aspect Ratio for Consistent Proportions")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#make-chart-elements-adaptive-to-screen-size"},"Make Chart Elements Adaptive to Screen Size")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#proper-padding-and-margins"},"Proper Padding and Margins"))))),(0,n.yg)("h2",{id:"what-is-recharts"},"What is Recharts"),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/recharts.png",alt:"Recharts chart"})),(0,n.yg)("p",null,"Recharts is a popular, MIT-licensed library for creating charts in React and React-based frameworks like refine. Internally, it uses SVG and some lightweight D3 packages as its dependencies."),(0,n.yg)("p",null,"Recharts has several built-in components that you can compose to create some of the commonest charts such as Area charts, Bar charts, Pie charts, and Line charts."),(0,n.yg)("p",null,"As an example, the code below illustrates how you can use Rechart's built-in components to create a Bar chart. The component names are self-explanatory."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'import {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from "recharts";\n\n<BarChart width={730} height={250} data={data}>\n  <CartesianGrid strokeDasharray="3 3" />\n  <XAxis dataKey="name" />\n  <YAxis />\n  <Tooltip />\n  <Legend />\n  <Bar dataKey="pv" fill="#8884d8" />\n  <Bar dataKey="uv" fill="#82ca9d" />\n</BarChart>;\n')),(0,n.yg)("h2",{id:"how-to-create-a-refine-project"},"How to create a Refine project"),(0,n.yg)("p",null,"In this section, we will create a Refine demo project."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"npm create refine-app@latest\n")),(0,n.yg)("p",null,"Select the options below when prompted by the command line tool."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-txt"},"\u2714 Choose a project template \xb7 Vite\n\u2714 What would you like to name your project?: \xb7 refine-recharts-demo\n\u2714 Choose your backend service to connect: \xb7 REST API\n\u2714 Do you want to use a UI Framework?: \xb7 Material UI\n\u2714 Do you want to add example pages?: \xb7 Yes\n\u2714 Do you need any Authentication logic?: \xb7 No\n\u2714 Choose a package manager: \xb7 npm\n")),(0,n.yg)("p",null,"After setting up the project and installing dependencies, use the command below to launch the development server."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"npm run dev\n")),(0,n.yg)("p",null,"Later in this article, we will create charts using Recharts and render them in a dashboard. Let's add a dashboard to the project we have just created."),(0,n.yg)("p",null,"Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file. Copy and paste the code below into it. Be aware that the ",(0,n.yg)("inlineCode",{parentName:"p"},"dashboard")," directory doesn't exist yet. You need to first create it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'import React from "react";\n\nexport const DashboardPage: React.FC = () => {\n  return <p>Hello world!</p>;\n};\n')),(0,n.yg)("p",null,'The component above renders a simple "Hello world!" text at the moment. We will add more code to it later. Now we need to export the component above. Create the ',(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/index.ts")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/index.ts"',title:'"src/pages/dashboard/index.ts"'},'export { DashboardPage } from "./list";\n')),(0,n.yg)("p",null,"You can now import the ",(0,n.yg)("inlineCode",{parentName:"p"},"DashboardPage")," component we created above and render it in the ",(0,n.yg)("inlineCode",{parentName:"p"},"<App />")," component. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show App.tsx code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n//highlight-next-line\nimport { DashboardPage } from "./pages/dashboard";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <ColorModeContextProvider>\n          <CssBaseline />\n          <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n          <RefineSnackbarProvider>\n            <DevtoolsProvider>\n              <Refine\n              //highlight-start\n                dataProvider={{\n                  default: dataProvider("https://api.fake-rest.refine.dev"),\n                  metrics: dataProvider("https://api.finefoods.refine.dev"),\n                }}\n                //highlight-end\n                notificationProvider={notificationProvider}\n                routerProvider={routerBindings}\n                resources={[\n                  {\n                    name: "blog_posts",\n                    list: "/blog-posts",\n                    create: "/blog-posts/create",\n                    edit: "/blog-posts/edit/:id",\n                    show: "/blog-posts/show/:id",\n                    meta: {\n                      canDelete: true,\n                    },\n                  },\n                  {\n                    name: "categories",\n                    list: "/categories",\n                    create: "/categories/create",\n                    edit: "/categories/edit/:id",\n                    show: "/categories/show/:id",\n                    meta: {\n                      canDelete: true,\n                    },\n                  },\n                  //highlight-start\n                  {\n                    name: "dashboard",\n                    list: "/dashboard",\n                    meta: {\n                      label: "Dashboard",\n                      dataProviderName: "metrics",\n                    },\n                  },\n                  //highlight-end\n                ]}\n                options={{\n                  syncWithLocation: true,\n                  warnWhenUnsavedChanges: true,\n                  useNewQueryKeys: true,\n                  projectId: "5l4F52-JwXWMu-eZRGwA",\n                }}\n              >\n                <Routes>\n                  <Route\n                    element={\n                      <ThemedLayoutV2 Header={() => <Header sticky />}>\n                        <Outlet />\n                      </ThemedLayoutV2>\n                    }\n                  >\n                    <Route\n                      index\n                      element={<NavigateToResource resource="blog_posts" />}\n                    />\n                    ...\n                    //highlight-start\n                    <Route path="/dashboard">\n                      <Route index element={<DashboardPage />} />\n                    </Route>\n                    //highlight-end\n                    <Route path="*" element={<ErrorComponent />} />\n                  </Route>\n                </Routes>\n\n                <RefineKbar />\n                <UnsavedChangesNotifier />\n                <DocumentTitleHandler />\n              </Refine>\n              <DevtoolsPanel />\n            </DevtoolsProvider>\n          </RefineSnackbarProvider>\n        </ColorModeContextProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\n\n\nexport default App;\n')))),(0,n.yg)("p",null,"In the code above, we added another data provider. The data provider will fetch data from the ",(0,n.yg)("a",{parentName:"p",href:"https://api.finefoods.refine.dev"},"fast foods API"),". It's a dummy API created by the Refine team. You can use it to create simple projects when testing out refine. We will use the API to create charts later."),(0,n.yg)("p",null,"You will now see a dashboard entry in the sidebar. The dashboard will look like the image below. We will create charts and render them in the dashboard in the next sub-sections."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/dashboard.png",alt:"Recharts chart"})),(0,n.yg)("p",null,"Before we start creating charts, let's create a simple interface for the data from our API. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/interfaces/index.d.ts")," file. Copy and paste the interface below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface IQueryResult {\n  date: string;\n  value: number;\n}\n")),(0,n.yg)("h2",{id:"how-to-install-recharts"},"How to install Recharts"),(0,n.yg)("p",null,"You can install Recharts either from the npm package registry or get its UMD build via a CDN. Depending on your package manager, use one of the commands below to install Recharts."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"npm install recharts\n")),(0,n.yg)("h2",{id:"create-a-line-chart-using-recharts"},"Create a Line chart using Recharts"),(0,n.yg)("p",null,"Line charts consist of a series of data points connected using line segments. They are mostly used to represent time series data. You can use Rechart's built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<LineChart />")," component to create a Line chart like so:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'<LineChart\n  width={730}\n  height={250}\n  data={data}\n  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n>\n  <CartesianGrid strokeDasharray="3 3" />\n  <XAxis dataKey="name" />\n  <YAxis />\n  <Tooltip />\n  <Legend />\n  <Line type="monotone" dataKey="value" stroke="#8884d8" />\n</LineChart>\n')),(0,n.yg)("p",null,"Charts in general need to have features such as axes, Cartesian grid, legend, and tooltips. Therefore, we need to use the ",(0,n.yg)("inlineCode",{parentName:"p"},"<LineChart />")," component with Rechart's built-in general and Cartesian components as in the example above."),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"<LineChart />")," component has the ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," prop for passing the data you want to represent on the Line chart. The data should be an array of objects like in the example below."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'[\n  { name: "a", value: 16 },\n  { name: "b", value: 12 },\n  { name: "c", value: 18 },\n];\n')),(0,n.yg)("p",null,"Let's create a simple Line chart in our Refine project. We will render it in the dashboard we created above. Start by creating the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/line-chart.tsx")," file. Copy and paste the code below into it. The ",(0,n.yg)("inlineCode",{parentName:"p"},"charts")," directory doesn't exist yet. Start by creating it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/charts/line-chart.tsx"',title:'"src/pages/dashboard/charts/line-chart.tsx"'},'import React from "react";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from "recharts";\n\nimport { IQueryResult } from "../../../interfaces";\n\nexport const LineChartComponent: React.FC<{\n  dailyOrders: IQueryResult[];\n}> = ({ dailyOrders }) => {\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={500 / 300}>\n      <LineChart\n        width={500}\n        height={300}\n        data={dailyOrders}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <XAxis dataKey="date" />\n        <YAxis />\n        <Tooltip />\n        <Line type="monotone" dataKey="value" stroke="#82ca9d" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"In the example above, the ",(0,n.yg)("inlineCode",{parentName:"p"},"<LineChart />")," component is wrapped in a responsive container. We will do the same while creating other charts later. We need to export the component we created above so that we can easily import and render it anywhere in our project. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\n')),(0,n.yg)("p",null,"Let's now import the above component and render it in the ",(0,n.yg)("inlineCode",{parentName:"p"},"<DashboardPage />")," component. Copy and paste the code below into the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show DashboardPage code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'import React from "react";\nimport { Grid } from "@mui/material";\nimport { useApiUrl, useCustom } from "@refinedev/core";\n\nimport dayjs from "dayjs";\n\nconst query = {\n  start: dayjs().subtract(7, "days").startOf("day"),\n  end: dayjs().startOf("day"),\n};\n\nimport { LineChartComponent } from "./charts";\n\nimport { IQueryResult } from "../../interfaces";\n\nexport const formatDate = new Intl.DateTimeFormat("en-US", {\n  month: "short",\n  year: "numeric",\n  day: "numeric",\n});\n\nconst transformData = (data: IQueryResult[]): IQueryResult[] => {\n  return data.map(({ date, value }) => ({\n    date: formatDate.format(new Date(date)),\n    value,\n  }));\n};\n\nexport const DashboardPage: React.FC = () => {\n  const API_URL = useApiUrl("metrics");\n\n  const { data: dailyRevenue } = useCustom({\n    url: `${API_URL}/dailyRevenue`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  const { data: dailyOrders } = useCustom({\n    url: `${API_URL}/dailyOrders`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  const { data: newCustomers } = useCustom({\n    url: `${API_URL}/newCustomers`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"In the code above, we are using the ",(0,n.yg)("inlineCode",{parentName:"p"},"useCustom")," hook to make custom query requests to the backend. The ",(0,n.yg)("inlineCode",{parentName:"p"},"useCustom")," hook uses TanStack Query's ",(0,n.yg)("inlineCode",{parentName:"p"},"useQuery")," hook under the hook. We have been querying the daily revenue, daily orders, and new customers of a restaurant business for the last seven days. We will represent the data in different types of charts. The dashboard should now have a Line chart that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/line-chart.png",alt:"Recharts chart"})),(0,n.yg)("p",null,"There are several Line chart variants you can create using Rechart's built-in components. For more complex charts, check out the Recharts documentation."),(0,n.yg)("h2",{id:"create-area-chart-using-recharts"},"Create Area chart using Recharts"),(0,n.yg)("p",null,"Recharts has the built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<AreaChart />")," component for creating area charts. You can compose the built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<AreaChart />")," component to create complex area charts in your React project."),(0,n.yg)("p",null,"You can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"<AreaChart />")," component's ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," prop to pass the data you want to represent on an area chart. Like in the previous example, your data should be an array of objects."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'[\n  { name: "Name A", data: 4000 },\n  { name: "Name B", data: 3000 },\n];\n')),(0,n.yg)("p",null,"To represent the above data in an area chart, you can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"<AreaChart />")," component as in the example below. As before, the component names are self-explanatory."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'<AreaChart\n  width={500}\n  height={300}\n  data={data}\n  margin={{\n    top: 10,\n    right: 30,\n    left: 0,\n    bottom: 0,\n  }}\n>\n  <XAxis dataKey="name" />\n  <YAxis />\n  <Tooltip />\n  <Area type="monotone" dataKey="data" stroke="#8884d8" fill="#8884d8" />\n</AreaChart>\n')),(0,n.yg)("p",null,"Let's now add an area chart to the Refine project we created above. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/area-chart.tsx")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/charts/area-chart.tsx"',title:'"src/pages/dashboard/charts/area-chart.tsx"'},'import {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from "recharts";\n\nimport { IQueryResult } from "../../../interfaces";\n\nexport const AreaChartComponent: React.FC<{ dailyRevenue: IQueryResult[] }> = ({\n  dailyRevenue,\n}) => {\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={500 / 300}>\n      <AreaChart\n        width={500}\n        height={300}\n        data={dailyRevenue}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <XAxis dataKey="date" />\n        <YAxis />\n        <Tooltip />\n        <Area type="monotone" dataKey="value" stroke="#8884d8" fill="#8884d8" />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"In the example above, we are representing the daily revenue of a restaurant business in an area chart. We are fetching the data in our dashboard component and passing it as a prop to the above component. Once again we are wrapping the area chart in a responsive container."),(0,n.yg)("p",null,"You need to export the above component by adding the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show Charts code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\n//highlight-next-line\nexport { AreaChartComponent } from "./area-chart";\n')),(0,n.yg)("p",null,"We can now import and render the above component in the ",(0,n.yg)("inlineCode",{parentName:"p"},"<DashboardPage />")," component. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'...\n\nimport {\n  LineChartComponent,\n  //highlight-next-line\n  AreaChartComponent,\n} from "./charts";\n\n ...\n\nexport const DashboardPage: React.FC = () => {\n\n ...\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      //highlight-start\n      <Grid item xs={12} sm={6}>\n        <AreaChartComponent dailyRevenue={dailyRevenue?.data ?? []} />\n      </Grid>\n      //highlight-end\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"Your dashboard should now have a simple area chart that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/area-chart.png",alt:"Recharts chart"})),(0,n.yg)("p",null,"There are several types of Area charts. What we have created above is a simple Area chart. Recharts has built-in functionality for implementing most of them. For more, check out the documentation."),(0,n.yg)("h2",{id:"create-a-bar-chart-using-recharts"},"Create a Bar chart using Recharts"),(0,n.yg)("p",null,"Bar charts are among the most common charts for visualizing data. You can use it to visually represent categorical data. Recharts has the built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<BarChart />")," component for creating bar charts."),(0,n.yg)("p",null,"Like the other types of charts, the data you want to represent on a bar chart should be an array of objects. You need to pass it to the ",(0,n.yg)("inlineCode",{parentName:"p"},"<BarChart />")," component as the value of the ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," prop."),(0,n.yg)("p",null,"Let's add a bar chart to the dashboard in the Refine project we created above. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/bar-chart.tsx")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/charts/bar-chart.tsx"',title:'"src/pages/dashboard/charts/bar-chart.tsx"'},'import React from "react";\n\nimport {\n  BarChart,\n  Bar,\n  Rectangle,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from "recharts";\n\nimport { IQueryResult } from "../../../interfaces";\n\nexport const BarChartComponent: React.FC<{ newCustomers: IQueryResult[] }> = ({\n  newCustomers,\n}) => {\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={500 / 300}>\n      <BarChart\n        width={500}\n        height={300}\n        data={newCustomers}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <XAxis dataKey="date" />\n        <YAxis />\n        <Tooltip />\n        <Bar\n          dataKey="value"\n          fill="#8884d8"\n          activeBar={<Rectangle fill="pink" stroke="blue" />}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"We need to export the component above. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\nexport { AreaChartComponent } from "./area-chart";\n//highlight-next-line\nexport { BarChartComponent } from "./bar-chart";\n')),(0,n.yg)("p",null,"We can now import and render the above component. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show List code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'...\n\nimport {\n  LineChartComponent,\n  AreaChartComponent,\n  //highlight-next-line\n  BarChartComponent,\n} from "./charts";\n\n...\n\nexport const DashboardPage: React.FC = () => {\n ...\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <AreaChartComponent dailyRevenue={dailyRevenue?.data ?? []} />\n      </Grid>\n      //highlight-start\n      <Grid item xs={12} sm={6}>\n        <BarChartComponent newCustomers={newCustomers?.data ?? []} />\n      </Grid>\n     //highlight-end\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"After rendering the above component, your dashboard should now have a bar chart that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/bar-chart.png",alt:"Recharts chart"})),(0,n.yg)("h2",{id:"create-scatter-chart-using-recharts"},"Create Scatter chart using Recharts"),(0,n.yg)("p",null,"Scatter charts are useful to graphically represent the relationship between two variables. Like the other charts mentioned above, Recharts has the built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<ScatterChart />")," component for creating scatter charts."),(0,n.yg)("p",null,"Let's create a simple scatter chart in this article. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/scatter-chart.tsx")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from "recharts";\n\nimport { IQueryResult } from "../../../interfaces";\n\nconst formatData = (\n  dailyOrders: IQueryResult[],\n  newCustomers: IQueryResult[],\n) => {\n  const formattedData = [];\n\n  for (let i = 0; i < dailyOrders.length; i++) {\n    if (!dailyOrders[i] || !newCustomers[i]) continue;\n\n    if (dailyOrders[i].date === newCustomers[i].date) {\n      formattedData.push({\n        date: dailyOrders[i].date,\n        dailyOrders: dailyOrders[i].value,\n        newCustomers: newCustomers[i].value,\n      });\n    }\n  }\n\n  return formattedData;\n};\n\nexport const ScatterChartComponent: React.FC<{\n  dailyOrders: IQueryResult[];\n  newCustomers: IQueryResult[];\n}> = ({ dailyOrders, newCustomers }) => {\n  const formattedData = formatData(dailyOrders, newCustomers);\n\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={500 / 300}>\n      <ScatterChart\n        width={500}\n        height={300}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        }}\n      >\n        <XAxis type="number" dataKey="dailyOrders" name="Orders" />\n        <YAxis type="number" dataKey="newCustomers" name="Customers" />\n        <Tooltip cursor={{ strokeDasharray: "3 3" }} />\n        <Scatter name="A school" data={formattedData} fill="#8884d8" />\n      </ScatterChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"In the example above, we wrapped the chart in a responsive container and passed the data to the ",(0,n.yg)("inlineCode",{parentName:"p"},"Scatter")," component instead of the ",(0,n.yg)("inlineCode",{parentName:"p"},"ScatterChart"),". Similar to the other charts we have already looked at, the data should be an array of objects."),(0,n.yg)("p",null,"In the example above, we had to transform the data because we wanted to determine the relationship between two variables(daily orders and new customers)."),(0,n.yg)("p",null,"Let's export the above component. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\nexport { AreaChartComponent } from "./area-chart";\nexport { BarChartComponent } from "./bar-chart";\n//highlight-next-line\nexport { ScatterChartComponent } from "./scatter-chart";\n')),(0,n.yg)("p",null,"You can now import and render the above component in the dashboard. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show List code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'...\n\nimport {\n  LineChartComponent,\n  AreaChartComponent,\n  BarChartComponent,\n  //highlight-next-line\n  ScatterChartComponent,\n} from "./charts";\n\ni...\n\nexport const DashboardPage: React.FC = () => {\n ...\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <AreaChartComponent dailyRevenue={dailyRevenue?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <BarChartComponent newCustomers={newCustomers?.data ?? []} />\n      </Grid>\n      //highlight-start\n      <Grid item xs={12} sm={6}>\n        <ScatterChartComponent\n          dailyOrders={dailyOrders?.data ?? []}\n          newCustomers={newCustomers?.data ?? []}\n        />\n      </Grid>\n      //highlight-end\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"After rendering the above component, the dashboard should now have a scatter chart that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/scatter-chart.png",alt:"Recharts chart"})),(0,n.yg)("h2",{id:"create-a-pie-chart-using-recharts"},"Create a Pie chart using Recharts"),(0,n.yg)("p",null,"A pie chart is one of the most common and easy-to-understand charts. It is a circular graph that is split into multiple sectors. Each sector in a pie chart represents a particular category of data and its size is proportional to the quantity of the category it represents."),(0,n.yg)("p",null,"In this section, we will create a simple Pie chart using Recharts. Let's start by creating the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/pie-chart.tsx")," file. Copy and paste the code below into it."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/charts/pie-chart.tsx"',title:'"src/pages/dashboard/charts/pie-chart.tsx"'},'import React from "react";\nimport { PieChart, Pie, ResponsiveContainer } from "recharts";\n\nimport { IQueryResult } from "../../../interfaces";\n\nexport const PieChartComponent: React.FC<{ dailyOrders: IQueryResult[] }> = ({\n  dailyOrders,\n}) => {\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={300 / 300}>\n      <PieChart width={300} height={300}>\n        <Pie\n          data={dailyOrders}\n          dataKey="value"\n          nameKey="date"\n          cx="50%"\n          cy="40%"\n          outerRadius={150}\n          fill="#82ca9d"\n          label\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"Let's export the above component so that we can import it anywhere in our application. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\nexport { AreaChartComponent } from "./area-chart";\nexport { BarChartComponent } from "./bar-chart";\nexport { ScatterChartComponent } from "./scatter-chart";\n//highlight-next-line\nexport { PieChartComponent } from "./pie-chart";\n')),(0,n.yg)("p",null,"Let's import and render the above component in our dashboard. Add the changes below to the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/list.tsx")," file."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show List code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'...\n\nimport {\n  LineChartComponent,\n  AreaChartComponent,\n  BarChartComponent,\n  ScatterChartComponent,\n  //highlight-next-line\n  PieChartComponent,\n} from "./charts";\n\n...\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <AreaChartComponent dailyRevenue={dailyRevenue?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <BarChartComponent newCustomers={newCustomers?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <ScatterChartComponent\n          dailyOrders={dailyOrders?.data ?? []}\n          newCustomers={newCustomers?.data ?? []}\n        />\n      </Grid>\n      //highlight-start\n      <Grid item xs={12} sm={6}>\n        <PieChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      //highlight-end\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"Your dashboard should now have a Pie chart that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/pie-chart.png",alt:"Recharts chart"})),(0,n.yg)("h2",{id:"create-treemap-using-recharts"},"Create TreeMap using Recharts"),(0,n.yg)("p",null,"A Treemap is a data visualization tool similar to a Pie chart. However, instead of using a circular graph and sectors to represent data, a Treemap instead uses rectangles and nested rectangles."),(0,n.yg)("p",null,"With a Treemap, a rectangle represents a category, and nested rectangles represent sub-categories within a category. Recharts has the built-in ",(0,n.yg)("inlineCode",{parentName:"p"},"<Treemap />")," component for creating Treemaps. You can pass the data as the value of the data attribute."),(0,n.yg)("p",null,"Let's add a simple Treemap to our dashboard. Create the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/treemap.tsx")," file. Copy and paste the code below into it."),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show Treemap code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/charts/treemap.tsx"',title:'"src/pages/dashboard/charts/treemap.tsx"'},'import React from "react";\nimport { Treemap, ResponsiveContainer } from "recharts";\n\nconst data = [\n  {\n    name: "axis",\n    children: [\n      { name: "Axes", size: 1302 },\n      { name: "Axis", size: 24593 },\n      { name: "AxisGridLine", size: 652 },\n      { name: "AxisLabel", size: 636 },\n      { name: "CartesianAxes", size: 6703 },\n    ],\n  },\n  {\n    name: "controls",\n    children: [\n      { name: "AnchorControl", size: 2138 },\n      { name: "ClickControl", size: 3824 },\n      { name: "Control", size: 1353 },\n      { name: "ControlList", size: 4665 },\n      { name: "DragControl", size: 2649 },\n      { name: "ExpandControl", size: 2832 },\n      { name: "HoverControl", size: 4896 },\n      { name: "IControl", size: 763 },\n      { name: "PanZoomControl", size: 5222 },\n      { name: "SelectionControl", size: 7862 },\n      { name: "TooltipControl", size: 8435 },\n    ],\n  },\n  {\n    name: "data",\n    children: [\n      { name: "Data", size: 20544 },\n      { name: "DataList", size: 19788 },\n      { name: "DataSprite", size: 10349 },\n      { name: "EdgeSprite", size: 3301 },\n      { name: "NodeSprite", size: 19382 },\n      {\n        name: "render",\n        children: [\n          { name: "ArrowType", size: 698 },\n          { name: "EdgeRenderer", size: 5569 },\n          { name: "IRenderer", size: 353 },\n          { name: "ShapeRenderer", size: 2247 },\n        ],\n      },\n      { name: "ScaleBinding", size: 11275 },\n      { name: "Tree", size: 7147 },\n      { name: "TreeBuilder", size: 9930 },\n    ],\n  },\n  {\n    name: "events",\n    children: [\n      { name: "DataEvent", size: 7313 },\n      { name: "SelectionEvent", size: 6880 },\n      { name: "TooltipEvent", size: 3701 },\n      { name: "VisualizationEvent", size: 2117 },\n    ],\n  },\n  {\n    name: "legend",\n    children: [\n      { name: "Legend", size: 20859 },\n      { name: "LegendItem", size: 4614 },\n      { name: "LegendRange", size: 10530 },\n    ],\n  },\n];\n\nexport const TreemapComponent: React.FC = () => {\n  return (\n    <ResponsiveContainer width="100%" height="100%" aspect={500 / 300}>\n      <Treemap\n        width={500}\n        height={300}\n        data={data}\n        dataKey="size"\n        aspectRatio={500 / 300}\n        stroke="#fff"\n        fill="#8884d8"\n      />\n    </ResponsiveContainer>\n  );\n};\n')))),(0,n.yg)("p",null,"In the example above, we have hard-coded the data because the API doesn't have a dataset we can use to create a Treemap. In a typical real-world project, you will retrieve the data from an API. You can export the above component from the ",(0,n.yg)("inlineCode",{parentName:"p"},"src/pages/dashboard/charts/index.ts")," file like so:"),(0,n.yg)("details",null,(0,n.yg)("summary",null,"Show Charts code"),(0,n.yg)("p",null,(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/charts/index.ts"',title:'"src/pages/dashboard/charts/index.ts"'},'export { LineChartComponent } from "./line-chart";\nexport { AreaChartComponent } from "./area-chart";\nexport { BarChartComponent } from "./bar-chart";\nexport { ScatterChartComponent } from "./scatter-chart";\nexport { PieChartComponent } from "./pie-chart";\n//highlight-next-line\nexport { TreemapComponent } from "./treemap";\n')),(0,n.yg)("p",null,"You can now import the above component and render it in the dashboard."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/list.tsx"',title:'"src/pages/dashboard/list.tsx"'},'import React from "react";\nimport { Grid } from "@mui/material";\nimport { useApiUrl, useCustom } from "@refinedev/core";\n\nimport dayjs from "dayjs";\n\nconst query = {\n  start: dayjs().subtract(7, "days").startOf("day"),\n  end: dayjs().startOf("day"),\n};\n\nimport {\n  LineChartComponent,\n  AreaChartComponent,\n  BarChartComponent,\n  ScatterChartComponent,\n  PieChartComponent,\n  //highlight-next-line\n  TreemapComponent,\n} from "./charts";\n\nimport { IQueryResult } from "../../interfaces";\n\nexport const formatDate = new Intl.DateTimeFormat("en-US", {\n  month: "short",\n  year: "numeric",\n  day: "numeric",\n});\n\nconst transformData = (data: IQueryResult[]): IQueryResult[] => {\n  return data.map(({ date, value }) => ({\n    date: formatDate.format(new Date(date)),\n    value,\n  }));\n};\n\nexport const DashboardPage: React.FC = () => {\n  const API_URL = useApiUrl("metrics");\n\n  const { data: dailyRevenue } = useCustom({\n    url: `${API_URL}/dailyRevenue`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  const { data: dailyOrders } = useCustom({\n    url: `${API_URL}/dailyOrders`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  const { data: newCustomers } = useCustom({\n    url: `${API_URL}/newCustomers`,\n    method: "get",\n    config: {\n      query,\n    },\n    queryOptions: {\n      select: ({ data }) => {\n        return { data: transformData(data.data) };\n      },\n    },\n  });\n\n  return (\n    <Grid\n      container\n      justifyContent="baseline"\n      alignItems={"stretch"}\n      spacing={2}\n    >\n      <Grid item xs={12} sm={6}>\n        <LineChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <AreaChartComponent dailyRevenue={dailyRevenue?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <BarChartComponent newCustomers={newCustomers?.data ?? []} />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <ScatterChartComponent\n          dailyOrders={dailyOrders?.data ?? []}\n          newCustomers={newCustomers?.data ?? []}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <PieChartComponent dailyOrders={dailyOrders?.data ?? []} />\n      </Grid>\n      //highlight-start\n      <Grid item xs={12} sm={6}>\n        <TreemapComponent />\n      </Grid>\n      //highlight-end\n    </Grid>\n  );\n};\n')))),(0,n.yg)("p",null,"Your dashboard should now have a Treemap that looks like the image below."),(0,n.yg)("div",{className:"centered-image"},(0,n.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-02-23-recharts/treemap.png",alt:"Recharts chart"})),(0,n.yg)("h2",{id:"recharts-performance-optimization-with-large-data-sets"},"Recharts Performance Optimization with Large Data Sets"),(0,n.yg)("p",null,"I have been researching the best practices to keep Recharts performing well, especially with larger datasets, and wanted to pass on a few tips that might help keep things smooth. Recharts is good for data visualization, but small adjustments can make all the difference when working with sizable chunks of data. Here's what I came up with:"),(0,n.yg)("h3",{id:"limit-data-points-to-display-only-whats-necessary"},"Limit Data Points to Display Only What's Necessary"),(0,n.yg)("p",null,"The performance can really slow down when dealing with a time series or high-frequency data, especially if it tries to render each and every data point. The solution is straightforward: limit the number of data points or summarize data. For example, you might display every 10th data point or use averages for simpler overviews."),(0,n.yg)("h3",{id:"prevent-re-rendering-with-reactmemo-or-purecomponent"},"Prevent Re-Rendering with React.memo or PureComponent"),(0,n.yg)("p",null,"If your chart data or settings aren\u2019t changing on every render, use React.memo or PureComponent to prevent unnecessary updates. This is especially useful with big data sets or complex charts."),(0,n.yg)("p",null,"Example with React.memo:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { memo } from "react";\nimport { LineChart, Line } from "recharts";\n\nconst LineChartComponent = memo(({ data }) => (\n  <LineChart width={600} height={300} data={data}>\n    <Line type="monotone" dataKey="value" stroke="#8884d8" />\n  </LineChart>\n));\n')),(0,n.yg)("p",null,"Using memo ensures that LineChartComponent only re-renders if the data prop changes."),(0,n.yg)("h3",{id:"minimize-svg-complexity-by-limiting-chart-elements"},"Minimize SVG Complexity by Limiting Chart Elements"),(0,n.yg)("p",null,"Recharts renders using SVG, so reducing the number of elements in the SVG will help performance. For example, remove grid lines, extra labels, or multiple tooltips if they\u2019re not necessary."),(0,n.yg)("p",null,"Keeping Only Essential Chart Elements:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'<LineChart width={600} height={300} data={data}>\n  <Line type="monotone" dataKey="value" stroke="#8884d8" />\n  <XAxis dataKey="date" hide={true} /> {/* Hiding axis labels */}\n  <YAxis hide={true} />\n  <Tooltip /> {/* Optional: Only keep if needed */}\n</LineChart>\n')),(0,n.yg)("p",null,"This keeps the chart minimal and improves performance."),(0,n.yg)("h3",{id:"lazy-load-charts-using-intersection-observers"},"Lazy-Load Charts Using Intersection Observers"),(0,n.yg)("p",null,"If you have multiple charts on a page, consider lazy-loading them as the user scrolls. This improves initial load times by rendering charts only when visible. You can use react-intersection-observer for easy implementation."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useInView } from "react-intersection-observer";\n\nconst ChartComponent = ({ data }) => {\n  const { ref, inView } = useInView({ triggerOnce: true });\n\n  return (\n    <div ref={ref}>\n      {inView && (\n        <LineChart width={600} height={300} data={data}>\n          <Line type="monotone" dataKey="value" stroke="#8884d8" />\n        </LineChart>\n      )}\n    </div>\n  );\n};\n')),(0,n.yg)("p",null,"Setting ",(0,n.yg)("inlineCode",{parentName:"p"},"triggerOnce: true")," loads the chart only when it first comes into view, conserving resources if the user doesn\u2019t scroll down."),(0,n.yg)("h2",{id:"how-to-make-recharts-responsive-for-different-screen-sizes"},"How to Make Recharts Responsive for Different Screen Sizes"),(0,n.yg)("p",null,"I\u2019ve put together some tips on making Recharts charts responsive to different screen sizes. Recharts itself has some built-in features for responsiveness, but a few tweaks can make sure the charts look great on both desktop and mobile."),(0,n.yg)("h3",{id:"automatic-resizing-using-responsivecontainer"},"Automatic Resizing Using ResponsiveContainer"),(0,n.yg)("p",null,"Recharts provides a ",(0,n.yg)("inlineCode",{parentName:"p"},"ResponsiveContainer")," component that allows the chart to automatically resize to fit its container. Wrapping charts in this component is a quick way to make them responsive:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},'import { LineChart, Line, ResponsiveContainer } from "recharts";\n\nconst ResponsiveLineChart = ({ data }) => (\n  <ResponsiveContainer width="100%" height={300}>\n    <LineChart data={data}>\n      <Line type="monotone" dataKey="value" stroke="#8884d8" />\n    </LineChart>\n  </ResponsiveContainer>\n);\n')),(0,n.yg)("p",null,'Here, width="100%" makes the chart resize to fit the container width, while height={300} keeps the height fixed.'),(0,n.yg)("h3",{id:"set-aspect-ratio-for-consistent-proportions"},"Set Aspect Ratio for Consistent Proportions"),(0,n.yg)("p",null,"For charts that need to maintain consistent proportions (like in grids), you can set an aspect ratio in ResponsiveContainer. This keeps the chart\u2019s proportions uniform across different screens:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'<ResponsiveContainer width="100%" aspect={4 / 3}>\n  <LineChart data={data}>\n    <Line type="monotone" dataKey="value" stroke="#8884d8" />\n  </LineChart>\n</ResponsiveContainer>\n')),(0,n.yg)("p",null,"Setting aspect={4 / 3} means the height will adjust according to the width, preserving a 4:3 ratio and preventing stretching on wide or narrow screens."),(0,n.yg)("h3",{id:"make-chart-elements-adaptive-to-screen-size"},"Make Chart Elements Adaptive to Screen Size"),(0,n.yg)("p",null,"Some elements like tooltips, labels, or legends may need to be hidden or resized on smaller screens. You can use CSS media queries to style these elements conditionally or use JavaScript to control visibility based on screen width:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useMediaQuery } from "react-responsive";\n\nconst ResponsiveLineChart = ({ data }) => {\n  const isMobile = useMediaQuery({ query: "(max-width: 768px)" });\n\n  return (\n    <ResponsiveContainer width="100%" height={isMobile ? 200 : 300}>\n      <LineChart data={data}>\n        <Line type="monotone" dataKey="value" stroke="#8884d8" />\n        {!isMobile && <Legend />} {/* Only show legend on larger screens */}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,n.yg)("p",null,"In this example, we use useMediaQuery to adjust the chart\u2019s height and hide the legend on smaller screens."),(0,n.yg)("h3",{id:"proper-padding-and-margins"},"Proper Padding and Margins"),(0,n.yg)("p",null,"Using Recharts on smaller screens may require padding and margin adjustments to prevent elements from overlapping. Setting smaller margins on mobile can help avoid crowding:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-tsx"},'<LineChart\n  data={data}\n  margin={{\n    top: 5,\n    right: isMobile ? 10 : 30,\n    left: isMobile ? 10 : 30,\n    bottom: 5,\n  }}\n>\n  <Line type="monotone" dataKey="value" stroke="#8884d8" />\n</LineChart>\n')),(0,n.yg)("p",null,"These recommendations should make it easier to design charts that adapt well to any screen size, ensuring a better user experience across devices."),(0,n.yg)("h2",{id:"conclusion"},"Conclusion"),(0,n.yg)("p",null,"Sometimes you may have to integrate data visualization in your React project. Charts make it easy to present data in an easy-to-understand and visually appealing way."),(0,n.yg)("p",null,"There are several frameworks for creating charts in React. Recharts is one of the most popular and feature-rich packages for creating charts in a React project or React-based frameworks such as refine."),(0,n.yg)("p",null,"Recharts support several types of charts out of the box. In this article, we have only explored a subset of charts you can create using Recharts. Check the documentation for details."))}g.isMDXComponent=!0}}]);