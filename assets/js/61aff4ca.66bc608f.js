"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[54731],{58860:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>g});var a=t(37953);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),p=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(m.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,g=c["".concat(m,".").concat(d)]||c[d]||u[d]||r;return t?a.createElement(g,o(o({ref:n},l),{},{components:t})):a.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},899:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>m,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});t(37953);var a=t(58860);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const s={title:"A Detailed Guide on TypeScript Enum with Examples",description:"We'll explore TypeScript Enums with examples.",slug:"typescript-enum",authors:"abdullah_numan",tags:["typescript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-05-21-typescript-enums/social-2.png",hide_table_of_contents:!1},m=void 0,p={permalink:"/blog/typescript-enum",source:"@site/blog/2025-01-06-typescript-enums.md",title:"A Detailed Guide on TypeScript Enum with Examples",description:"We'll explore TypeScript Enums with examples.",date:"2025-01-06T00:00:00.000Z",formattedDate:"January 6, 2025",tags:[{label:"typescript",permalink:"/blog/tags/typescript"}],readingTime:16.055,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"A Detailed Guide on TypeScript Enum with Examples",description:"We'll explore TypeScript Enums with examples.",slug:"typescript-enum",authors:"abdullah_numan",tags:["typescript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-05-21-typescript-enums/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Using SVGs in React",permalink:"/blog/react-svg"},nextItem:{title:"TypeScript Record Type with Examples",permalink:"/blog/typescript-record-type"},relatedPosts:[{title:"TypeScript Record Type with Examples",description:"We'll explore TypeScript Record type with examples.",permalink:"/blog/typescript-record-type",formattedDate:"January 6, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:8.085,date:"2025-01-06T00:00:00.000Z"},{title:"A Guide for Next.js with TypeScript",description:"We will explain the entire process of how to use Next.js in TypeScript",permalink:"/blog/next-js-with-typescript",formattedDate:"June 10, 2024",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:11.765,date:"2024-06-10T00:00:00.000Z"},{title:"How to use TypeScript Partial Type?",description:"We'll explain the TypeScript Partial utility type with examples",permalink:"/blog/typescript-partial-utility-type",formattedDate:"December 18, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:5.25,date:"2024-12-18T00:00:00.000Z"}],authorPosts:[{title:"Using Heroicons with TailwindCSS",description:"In this post, we see how to use Heroicons with TailwindCSS.",permalink:"/blog/heroicons-with-tailwind",formattedDate:"August 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:14.115,date:"2024-08-19T00:00:00.000Z"},{title:"Javascript Currying - Variadic Currying",description:"Deep dive into variadic currying in JavaScript with examples",permalink:"/blog/javascript-variadic-currying",formattedDate:"May 27, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:13.68,date:"2024-05-27T00:00:00.000Z"},{title:"React Memo Guide with Examples",description:"Improve app performance with React.memo().",permalink:"/blog/react-memo-guide",formattedDate:"September 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:18.645,date:"2024-09-19T00:00:00.000Z"}]},l={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"TL;DR;",id:"tldr",level:3}],u={toc:c},d="wrapper";function g(e){var{components:n}=e,t=o(e,["components"]);return(0,a.yg)(d,r(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){i(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on January 6, 2025, to include sections on Common Mistakes with TypeScript Enums and Tips for Using Enums in TypeScript Classes.")),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("h3",{id:"tldr"},"TL;DR;"),(0,a.yg)("admonition",{title:"FAQ",type:"info"},(0,a.yg)("ol",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ol"},"What is an enum in TypeScript?")),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Enumeration or enum is a feature in TypeScript, which allows a set of named constants. This makes the code more readable and maintainable.")),(0,a.yg)("ol",{parentName:"admonition",start:2},(0,a.yg)("li",{parentName:"ol"},"What kinds of enums are there in TypeScript?")),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},'TypeScript supports two kinds of enums: string enums, such as enum Color { RED = "Red" }; and numeric enums, such as enum Day { MONDAY = 0 };.')),(0,a.yg)("ol",{parentName:"admonition",start:3},(0,a.yg)("li",{parentName:"ol"},"How do I initialize enum members in TypeScript?")),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"String enums must be initialized explicitly; numeric enums can be uninitialized and will auto-increment starting from 0.")),(0,a.yg)("ol",{parentName:"admonition",start:4},(0,a.yg)("li",{parentName:"ol"},"What are the differences between constant and computed values in enums?")),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},'Constant means values are fixed, such as "Red", 0; computed means values are derived from expressions, such as "A".length.')),(0,a.yg)("ol",{parentName:"admonition",start:5},(0,a.yg)("li",{parentName:"ol"},"How do enums behave at runtime?")),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},"Enums create the JavaScript object versions at runtime; this therefore includes the ability for bi-directional mapping when these are numeric enums but still only unidirectional mapping exists for string enums\n:::")),(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"Enum"),"s are constants based data structures that store a set of named constants grouped around a central theme or intent. In TypeScript, Enums are a feature that injects runtime JavaScript objects to an application in addition to providing usual type-level extensions."),(0,a.yg)("p",{parentName:"admonition"},"This post explores ",(0,a.yg)("strong",{parentName:"p"},"enums")," in TypeScript with examples from a tiers based Subscription model where subscription entities differ according to account types and billing schedules."),(0,a.yg)("p",{parentName:"admonition"},"While examining the examples, we discuss underlying ",(0,a.yg)("strong",{parentName:"p"},"enums")," concepts including ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"enum")," member")," types such as ",(0,a.yg)("strong",{parentName:"p"},"string")," or ",(0,a.yg)("strong",{parentName:"p"},"numeric")," and ",(0,a.yg)("strong",{parentName:"p"},"constant")," or ",(0,a.yg)("strong",{parentName:"p"},"computed"),"; ",(0,a.yg)("strong",{parentName:"p"},"homogeneity")," and ",(0,a.yg)("strong",{parentName:"p"},"heterogeneity")," of ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s as well as ",(0,a.yg)("strong",{parentName:"p"},"member initialization")," with or without setting a value. We also explore how an enum translates to an IIFE during compilation, carries out ",(0,a.yg)("strong",{parentName:"p"},"directional mapping")," and injects its JavaScript object to the runtime environment. We examine and leverage the individual types generated by enum members to define our own subtypes and see how the main enum type generates a union of member keys. Lastly, we bring all these enum concepts together to implement a simple ",(0,a.yg)("inlineCode",{parentName:"p"},"PersonalSubscription")," class."),(0,a.yg)("p",{parentName:"admonition"},"In the sections ahead, we relate to examples for the tiers based Subscription model and analyze them to discuss underlying concepts and behaviors."),(0,a.yg)("p",{parentName:"admonition"},"Steps well'll cover:"),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#typescript-enums-examples"},"TypeScript Enums Examples")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#enum-types-in-typescript"},(0,a.yg)("inlineCode",{parentName:"a"},"enum")," Types in TypeScript")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#enum-member-initialization-in-typescript"},"Enum Member Initialization in TypeScript")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#typescript-enums-at-compile-time-and-runtime"},"TypeScript Enums at Compile Time and Runtime")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#enum-member-values-in-typescript-constant-vs-computed"},"Enum Member Values in TypeScript: Constant vs Computed")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#types-from-typescript-enums"},"Types from TypeScript Enums")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#using-typescript-enums-in-classes"},"Using TypeScript Enums in Classes")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#practical-applications-of-typescript-enums"},"Practical Applications of TypeScript Enums")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#common-pitfalls-using-enums"},"Common Pitfalls Using Enums"))),(0,a.yg)("h2",{parentName:"admonition",id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",{parentName:"admonition"},"In order to properly follow this post and test out the examples, you need to have a JavaScript engine. It could be ",(0,a.yg)("strong",{parentName:"p"},"Node.js")," in your local machine with TypeScript supported or you could use the ",(0,a.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/play#code"},"TypeScript Playground"),"."),(0,a.yg)("h2",{parentName:"admonition",id:"typescript-enums-examples"},"TypeScript Enums Examples"),(0,a.yg)("p",{parentName:"admonition"},"In order to illustrate ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s concepts in TypeScript, we are using a tiers based Subscription model. Let's say, we have a subscription entity stored in a ",(0,a.yg)("inlineCode",{parentName:"p"},"subscriptions")," table. And it has ",(0,a.yg)("inlineCode",{parentName:"p"},"accountType")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"billingSchedule")," attributes."),(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("inlineCode",{parentName:"p"},"accountType"),"s can be one of ",(0,a.yg)("inlineCode",{parentName:"p"},"Personal"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Startup"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Enterprise")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"Custom"),". ",(0,a.yg)("inlineCode",{parentName:"p"},"billingSchedule")," can be categorized as one of ",(0,a.yg)("inlineCode",{parentName:"p"},"Free"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Monthly"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Quarterly")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"Yearly"),". These possible options indicate an intent to group a subscription based on account type and billing schedule. We can use TypeScript ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s to define types for these attributes. Using ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s not only allows us to declare types for ",(0,a.yg)("inlineCode",{parentName:"p"},"accountType")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"billingSchedule"),", but also creates representative runtime objects which would otherwise need to be produced from a database table for reference."),(0,a.yg)("p",{parentName:"admonition"},"So, to start the proceedings let's define a couple of enums. We can declare the ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"accountType")," attribute like this:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM = "Custom",\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"We are using ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," literals to initialize all ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," members in ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType"),". This is an example of ",(0,a.yg)("strong",{parentName:"p"},"string enum"),"s. Further elaboration ahead in ",(0,a.yg)("a",{parentName:"p",href:"#string-enums-in-typescript"},"an upcoming section"),"."),(0,a.yg)("p",{parentName:"admonition"},"One way of defining an ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"billingSchedule")," looks like this:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"enum BillingSchedule {\n  FREE = 0,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"Here, we are using a numeric literal to initialize the first member of ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule"),". This is an example of ",(0,a.yg)("strong",{parentName:"p"},"numeric enum"),"s. More on this in ",(0,a.yg)("a",{parentName:"p",href:"#numerical-enums-in-typescript"},"a later section"),"."),(0,a.yg)("p",{parentName:"admonition"},"Let's quickly test out the runtime role of enums as we start discussing underlying ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s concepts."),(0,a.yg)("h3",{parentName:"admonition",id:"enums-produce-runtime-javascript-objects"},(0,a.yg)("inlineCode",{parentName:"h3"},"enum"),"s Produce Runtime JavaScript Objects"),(0,a.yg)("p",{parentName:"admonition"},"We mentioned before that ",(0,a.yg)("inlineCode",{parentName:"p"},"enum"),"s inject JS objects to runtime environment. This can be observed when we run the following snippet:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const accountType = AccountType.PERSONAL;\nconst billingSchedule = BillingSchedule.FREE;\n\nconsole.log(accountType); // "Personal"\nconsole.log(billingSchedule); // 0\n')),(0,a.yg)("p",{parentName:"admonition"},"With ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType.PERSONAL")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule.FREE"),", we are calling actual objects at runtime and getting appropriate responses. These indicate that TypeScript ",(0,a.yg)("inlineCode",{parentName:"p"},"enum")," definitions are not just simple type definitions, but also introduce JS objects to our application. We revisit this in ",(0,a.yg)("a",{parentName:"p",href:"#typescript-enums-at-compile-time-and-runtime"},"a later part of this post"),"."),(0,a.yg)("h2",{parentName:"admonition",id:"enum-types-in-typescript"},(0,a.yg)("inlineCode",{parentName:"h2"},"enum")," Types in TypeScript"),(0,a.yg)("p",{parentName:"admonition"},"Enum members are typically used to store constants. Members can have string constants, numerical constants or mix of both. Homogeneity of member values determines whether the enum is a ",(0,a.yg)("strong",{parentName:"p"},"string enum")," or a ",(0,a.yg)("strong",{parentName:"p"},"numerical enum"),"."),(0,a.yg)("h3",{parentName:"admonition",id:"string-enums-in-typescript"},"String Enums in TypeScript"),(0,a.yg)("p",{parentName:"admonition"},"When all members of an enum have string values, it is a string enum. As in ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM = "Custom",\n}\n')),(0,a.yg)("h3",{parentName:"admonition",id:"numerical-enums-in-typescript"},"Numerical Enums in TypeScript"),(0,a.yg)("p",{parentName:"admonition"},"Similarly, when all members have numerical values, the enum itself becomes numerical:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"enum BillingSchedule {\n  FREE = 0,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"Here, ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," has the first member initialized to a number, and the subsequent ones are uninitialized but TypeScript's enum defaults auto-increment them by ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),". So, all members here are numerical and ",(0,a.yg)("inlineCode",{parentName:"p"}," BillingSchedule")," is a numerical enum. We discuss this more in the next section on enum member initialization."),(0,a.yg)("h2",{parentName:"admonition",id:"enum-member-initialization-in-typescript"},"Enum Member Initialization in TypeScript"),(0,a.yg)("p",{parentName:"admonition"},"String enum members must be initialized explicitly with string values. In numerical enums, they may remain uninitialized and the value is then assigned implicitly by TypeScript."),(0,a.yg)("h3",{parentName:"admonition",id:"member-initialization-in-typescript-string-enums"},"Member Initialization in TypeScript String Enums"),(0,a.yg)("p",{parentName:"admonition"},"For string enums, as we can see in our ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," example, we are explicitly initializing all members:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM = "Custom",\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"Here, we are using string literals to meaningfully document and describe our intent of grouping account types in to several options, which is useful for our application features and developer experience. Explicit string initialization also helps with serialization of the JS object created at runtime."),(0,a.yg)("p",{parentName:"admonition"},"An uninitialized member coming after a string member is invalid:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM,\n}\n\n/*\nEnum member must have initializer.(1061)\n(enum member) AccountType.CUSTOM\n*/\n')),(0,a.yg)("p",{parentName:"admonition"},"If ",(0,a.yg)("inlineCode",{parentName:"p"},"CUSTOM")," is uninitialized as the first member, it is assigned ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," by default, but we then have a ",(0,a.yg)("strong",{parentName:"p"},"heterogenous")," enum with a numeric member mixed with string members:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'// Heterogenous enum\n\nenum AccountType {\n  CUSTOM,\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n}\n\nconst accountTypeCustom = AccountType.CUSTOM;\nconsole.log(accountTypeCustom); // 0\n')),(0,a.yg)("h3",{parentName:"admonition",id:"member-initialization-in-typescript-numerical-enums"},"Member Initialization in TypeScript Numerical Enums"),(0,a.yg)("p",{parentName:"admonition"},"Members in a numerical enum may or may not be initialized explicitly. Uninitialized members are assigned implicit default values."),(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"Explicitly Initialized Numerical Members")),(0,a.yg)("p",{parentName:"admonition"},"In our ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," enum, we explicitly assigned ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," to the first member:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"// First member initialized, subsequent members auto-increment\n\nenum BillingSchedule {\n  FREE = 0,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"The subsequent members get an auto-incremented value increased by ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"console.log(BillingSchedule.MONTHLY); // 1\nconsole.log(BillingSchedule.QUARTERLY); // 2\nconsole.log(BillingSchedule.YEARLY); // 3\n")),(0,a.yg)("p",{parentName:"admonition"},"As we can see, initializing a member with a number represents an offset value based on which auto-incremented values of subsequent members are determined. Assigning the first member with ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," represents a zero offset. We could have been better off without initialization of a member at all, like this:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"// No initialization\n\nenum BillingSchedule {\n  FREE,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n\nconsole.log(BillingSchedule.FREE); // 0\n")),(0,a.yg)("p",{parentName:"admonition"},"This is because the default offset for first member is ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),". This definition offers more convenience."),(0,a.yg)("p",{parentName:"admonition"},"We can assign an offset anywhere and it would reflect in subsequent implicitly incremented member values:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"enum BillingSchedule {\n  FREE,\n  MONTHLY,\n  QUARTERLY = 5,\n  YEARLY,\n}\n\nconsole.log(BillingSchedule.MONTHLY); // 1\nconsole.log(BillingSchedule.QUARTERLY); // 5\nconsole.log(BillingSchedule.YEARLY); // 6\n")),(0,a.yg)("h2",{parentName:"admonition",id:"typescript-enums-at-compile-time-and-runtime"},"TypeScript Enums at Compile Time and Runtime"),(0,a.yg)("p",{parentName:"admonition"},"At compile time, TypeScript translates an enum to a corresponding IIFE which then introduces into runtime a JavaScript object representation of the enum."),(0,a.yg)("p",{parentName:"admonition"},"String members and numeric members behave differently at compilation. A string member gets mapped ",(0,a.yg)("strong",{parentName:"p"},"unidirectionally")," to its corresponding JavaScript object property. In contrast, a numeric member gets mapped ",(0,a.yg)("strong",{parentName:"p"},"bi-directionally")," to its runtime object property. So, as we see in the sections below, string enums are limited to unidirectional navigation, but numeric members offer us the convenience of bidirectional access to constants."),(0,a.yg)("h3",{parentName:"admonition",id:"typescript-string-enums-have-unidirectional-mapping"},"TypeScript String Enums Have Unidirectional Mapping"),(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," enum we declared in the beginning compiles to the following JS code:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'/*\nenum AccountType {\n    PERSONAL = "Personal",\n    STARTUP = "Startup",\n    ENTERPRISE = "Enterprise",\n    CUSTOM = "Custom"\n}\n*/\n\n"use strict";\nvar AccountType;\n(function (AccountType) {\n  AccountType.PERSONAL = "Personal";\n  AccountType["STARTUP"] = "Startup";\n  AccountType["ENTERPRISE"] = "Enterprise";\n  AccountType["CUSTOM"] = "Custom";\n})(AccountType || (AccountType = {}));\n')),(0,a.yg)("p",{parentName:"admonition"},"This IIFE propels the following object to runtime:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'{\n    PERSONAL: "Personal",\n    STARTUPP: "Startup",\n    ENTERPRISEP: "Enterprise",\n    CUSTOMP: "Custom"\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"Unidirectional mapping of a string member sets only the constant names as keys and therefore limits access to the enum only via constant names only, not by the value:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"console.log(AccountType.PERSONAL); // \"Personal\"\nconsole.log(AccountType.Personal); // Property 'Personal' does not exist on type 'typeof AccountType'. Did you mean 'PERSONAL'?(2551)\n")),(0,a.yg)("p",{parentName:"admonition"},"Accessing the enum via member values is possible in numeric enums, as we'll see next."),(0,a.yg)("h3",{parentName:"admonition",id:"typescript-numerical-enums-have-bidirectional-mapping"},"TypeScript Numerical Enums Have Bidirectional Mapping"),(0,a.yg)("p",{parentName:"admonition"},"In contrast to unidirectional mapping of string enums, numerical enums compile to bidirectional JS objects. Our ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," object translates to the following IIFE:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'/*\nenum BillingSchedule {\n    FREE,\n    MONTHLY,\n    QUARTERLY = 5,\n    YEARLY\n}\n*/\n\n"use strict";\nvar BillingSchedule;\n(function (BillingSchedule) {\n  BillingSchedule[(BillingSchedule["FREE"] = 0)] = "FREE";\n  BillingSchedule[(BillingSchedule["MONTHLY"] = 0)] = "MONTHLY";\n  BillingSchedule[(BillingSchedule["QUARTERLY"] = 0)] = "QUARTERLY";\n  BillingSchedule[(BillingSchedule["YEARLY"] = 0)] = "YEARLY";\n})(BillingSchedule || (BillingSchedule = {}));\n')),(0,a.yg)("p",{parentName:"admonition"},"And it introduces this object to the runtime environment:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'{\n    "0": "FREE",\n    "1": "MONTHLY",\n    "2": "QUARTERLY",\n    "3": "YEARLY",\n    "FREE": 0,\n    "MONTHLY": 1,\n    "QUARTERLY": 2,\n    "YEARLY": 3\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"So, now we are able to navigate both ways for numeric members:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'console.log(BillingSchedule.FREE); // 0\nconsole.log(BillingSchedule[0]); // "FREE"\nconsole.log(BillingSchedule.YEARLY); // 3\nconsole.log(BillingSchedule[3]); // "YEARLY"\n')),(0,a.yg)("h2",{parentName:"admonition",id:"enum-member-values-in-typescript-constant-vs-computed"},"Enum Member Values in TypeScript: Constant vs Computed"),(0,a.yg)("p",{parentName:"admonition"},"Enum member values can be ",(0,a.yg)("strong",{parentName:"p"},"constant")," or ",(0,a.yg)("strong",{parentName:"p"},"computed"),"."),(0,a.yg)("h3",{parentName:"admonition",id:"constant-values-of-enum-members"},"Constant Values of Enum Members"),(0,a.yg)("p",{parentName:"admonition"},"In both our examples, the value of enums are constant. However, there are subtle differences among constant values too. For example, in the ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," enum, all values are string literals which are considered as ",(0,a.yg)("strong",{parentName:"p"},"literal enum expressions"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM = "Custom",\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"Similarly, in the following ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," enum, the numeric literal ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," is also a literal enum expression:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"enum BillingSchedule {\n  FREE = 0,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"Uninitialized members which implicitly get assigned numeric literals are also considered constants. As all the members have in this version of ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"enum BillingSchedule {\n  FREE,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"There are other nuanced forms of literal enum expressions, such as a value referenced from another enum member. For the rest of the possible cases, please look up the ",(0,a.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/enums.html"},"TypeScript ",(0,a.yg)("strong",{parentName:"a"},"Enums")," docs"),"."),(0,a.yg)("h3",{parentName:"admonition",id:"computed-values-of-enum-members"},"Computed Values of Enum Members"),(0,a.yg)("p",{parentName:"admonition"},"A computed value is assumed when a member's value is computed from a JavaScript expression. We have no such use case in our examples, but a basic instance would look like this:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum ABasicExample {\n    A_BASIC_EXAMPLE = "A Basic Example".length;\n}\n')),(0,a.yg)("h2",{parentName:"admonition",id:"types-from-typescript-enums"},"Types from TypeScript Enums"),(0,a.yg)("p",{parentName:"admonition"},"So far, we have explored only the object aspects of TypeScript enums. Let's now consider types act out in enums."),(0,a.yg)("p",{parentName:"admonition"},"When all members of an enum are literal enum expressions, types for each member are generated from their member names. And the enum itself effectively becomes a union of all the subtypes."),(0,a.yg)("h3",{parentName:"admonition",id:"individual-types"},"Individual Types"),(0,a.yg)("p",{parentName:"admonition"},"Individual types are generated from each member when all members of the enum are either string literals or numeric literals. This becomes clear when such standalone types are used to define new subtypes. For example, from our ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," enum, we can produce a few account subtypes which uses the member types:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"type TPersonalAccount = {\n  tier: AccountType.PERSONAL;\n  postsQuota: number;\n  verified: boolean;\n};\n\ninterface IStartupAccount {\n  tier: AccountType.STARTUP;\n  postsQuota: number;\n  verified: boolean;\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"In the above type definitions, we are using ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType.PERSONAL")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType.STARTUP")," enum member types to define new subtypes of accounts."),(0,a.yg)("p",{parentName:"admonition"},"In a similar vein, let's look at a subtype derived from a ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," member:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"interface IFreeBilling {\n  tier: BillingSchedule.FREE;\n  startDate: string | boolean;\n  expiryDate: string | boolean;\n}\n")),(0,a.yg)("h3",{parentName:"admonition",id:"union-of-member-keys"},"Union of Member Keys"),(0,a.yg)("p",{parentName:"admonition"},"The type generated by the enum itself is effectively a union of all enum member types. It can be accessed with the ",(0,a.yg)("inlineCode",{parentName:"p"},"keyof typeof")," functions chained like this:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'/*\n    enum AccountType {\n        PERSONAL = "Personal",\n        STARTUP = "Startup",\n        ENTERPRISE = "Enterprise",\n        CUSTOM = "Custom"\n    }\n*/\n\ntype TAccountType = keyof typeof AccountType;\n\n/*\nThe generated type is equivalent to:\n\n    type TAccountType = "PERSONAL" | "STARTUP" | ENTERPRISE | "ENTERPRISE" | "CUSTOM";\n*/\n')),(0,a.yg)("p",{parentName:"admonition"},"The code above first accesses the enum object with ",(0,a.yg)("inlineCode",{parentName:"p"},"typeof")," and then grabs the member names (keys) with ",(0,a.yg)("inlineCode",{parentName:"p"},"keyof"),"."),(0,a.yg)("p",{parentName:"admonition"},"With these essential concepts covered, let's now see how to use enums and its generated types inside TypeScript classes."),(0,a.yg)("h2",{parentName:"admonition",id:"using-typescript-enums-in-classes"},"Using TypeScript Enums in Classes"),(0,a.yg)("p",{parentName:"admonition"},"We can now refactor some of the enums and type definitions and implement a rudimentary ",(0,a.yg)("inlineCode",{parentName:"p"},"PersonalSubscription")," class which uses them:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'enum AccountType {\n  PERSONAL = "Personal",\n  STARTUP = "Startup",\n  ENTERPRISE = "Enterprise",\n  CUSTOM = "Custom",\n}\n\nenum BillingSchedule {\n  FREE,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n}\n\ntype TAccount<AccountType> = {\n  tier: AccountType;\n  postsQuota: number;\n  verified: boolean;\n};\n\ninterface IBilling<BillingSchedule> {\n  tier: BillingSchedule;\n  startDate: string | boolean;\n  expiryDate: string | boolean;\n}\n\nclass PersonalAccount implements TAccount<AccountType.PERSONAL> {\n  tier: AccountType.PERSONAL = AccountType.PERSONAL;\n  postsQuota = 2;\n  verified = false;\n}\n\nclass FreeBilling implements IBilling<BillingSchedule.FREE> {\n  tier: BillingSchedule.FREE = BillingSchedule.FREE;\n  startDate = false;\n  expiryDate = false;\n}\n\ninterface IPersonalSubscription<TAccount, IBilling> {\n  accountType: TAccount;\n  billingSchedule: IBilling;\n  creditCard: string;\n}\n\nclass PersonalSubscription\n  implements\n    IPersonalSubscription<\n      TAccount<AccountType.PERSONAL>,\n      IBilling<BillingSchedule.FREE>\n    >\n{\n  accountType = new PersonalAccount();\n  billingSchedule = new FreeBilling();\n  creditCard: string = "XXXXXXXXXXXXXXXX";\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"In the above code, for ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," we have used a numeric enum with all uninitialized members. The first member is therefore assigned ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," and subsequent ones get auto-incremented by ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),". We have used generics to pass in ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule")," types to ",(0,a.yg)("inlineCode",{parentName:"p"},"TAccount")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"IBilling")," respectively so their use becomes more flexible in the ",(0,a.yg)("inlineCode",{parentName:"p"},"PersonalAccount")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"FreeBilling")," classes as well as in the ",(0,a.yg)("inlineCode",{parentName:"p"},"IPersonalSubscription")," type, where we are using enum members both as constant values as well as type definitions."),(0,a.yg)("h2",{parentName:"admonition",id:"practical-applications-of-typescript-enums"},"Practical Applications of TypeScript Enums"),(0,a.yg)("p",{parentName:"admonition"},"Enums are super useful when you have to organize a set of related constants. Here are some real-world examples:"),(0,a.yg)("h3",{parentName:"admonition",id:"1-role-based-access-control"},"1. Role-Based Access Control"),(0,a.yg)("p",{parentName:"admonition"},"Let's say you're building an app with different user roles. You could use enums to define those clearly:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'enum UserRole {\n  ADMIN = "Admin",\n  EDITOR = "Editor",\n  VIEWER = "Viewer",\n}\n\nfunction checkAccess(role: UserRole): void {\n  if (role === UserRole.ADMIN) {\n    console.log("You have full access!");\n  } else {\n    console.log("Limited access only.");\n  }\n}\n')),(0,a.yg)("h3",{parentName:"admonition",id:"2-http-methods-for-apis"},"2. HTTP Methods for APIs"),(0,a.yg)("p",{parentName:"admonition"},"You can use enums to standardize HTTP methods when making API calls:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'enum HttpMethod {\n  GET = "GET",\n  POST = "POST",\n  PUT = "PUT",\n  DELETE = "DELETE",\n}\n\nfunction makeRequest(method: HttpMethod, url: string): void {\n  console.log(`Sending a ${method} request to ${url}`);\n}\n\nmakeRequest(HttpMethod.POST, "/api/users");\n')),(0,a.yg)("h3",{parentName:"admonition",id:"3-error-types"},"3. Error Types"),(0,a.yg)("p",{parentName:"admonition"},"Enums are much cleaner for handling errors. You can define error categories like so:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'enum ErrorType {\n  NETWORK = "Network Error",\n  VALIDATION = "Validation Error",\n  SERVER = "Server Error",\n}\n\nfunction logError(type: ErrorType): void {\n  console.log(`An error occurred: ${type}`);\n}\n\nlogError(ErrorType.NETWORK);\n')),(0,a.yg)("p",{parentName:"admonition"},"Enums will make your code more readable and save you from using invalid values. No longer magic strings or numbers everywhere!"),(0,a.yg)("h2",{parentName:"admonition",id:"common-pitfalls-using-enums"},"Common Pitfalls Using Enums"),(0,a.yg)("p",{parentName:"admonition"},"Here are some mistakes I've run into when working with enums\u2014and how I avoid them now:"),(0,a.yg)("h3",{parentName:"admonition",id:"forgetting-to-initialize-string-enums"},"Forgetting to Initialize String Enums"),(0,a.yg)("p",{parentName:"admonition"},"If you are using string enums, then all members must have an initial value. Man, I forgot this one all the time! Nowadays, I initialize them upfront."),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'// Wrong\nenum Color {\nRED,\nGREEN, // Error: Must have an initializer\n}\n\n// Correct\nenum Color {\nRED = "Red\nGREEN = "Green,\n}\n')),(0,a.yg)("h3",{parentName:"admonition",id:"hardcoded-values"},"Hardcoded Values"),(0,a.yg)("p",{parentName:"admonition"},'Early on, I would hard-code values like "Admin" or 0, which became a nightmare to maintain. Nowadays, I always use enums for cleaner, centralized constants.'),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'// Instead of this:\nconst userRole = "Admin";\n\n// Use this:\nenum UserRole { ADMIN = "Admin,\n\nEDITOR = "Editor,\n\n\n}\n\nconst userRole = UserRole.ADMIN;\n')),(0,a.yg)("h3",{parentName:"admonition",id:"confusing-enum-keys-and-values"},"Confusing Enum Keys and Values"),(0,a.yg)("p",{parentName:"admonition"},"I\u2019ve definitely tried to use a value when a key was needed or vice versa. With numeric enums, you can go both ways, but string enums are more strict."),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'enum Status {\n  ACTIVE = "Active",\n  INACTIVE = "Inactive",\n}\n\nconsole.log(Status.ACTIVE); // "Active"\nconsole.log(Status["Active"]); // Error: Property \'Active\' does not exist\n')),(0,a.yg)("h3",{parentName:"admonition",id:"no-logging-for-errors"},"No Logging for Errors"),(0,a.yg)("p",{parentName:"admonition"},"Cron jobs used to fail silently until I started logging errors. The same principle applies to enums\u2014you should always validate that the values you pass are correct, especially when enums interact with APIs or third-party systems."),(0,a.yg)("h3",{parentName:"admonition",id:"overcomplicating-numeric-enums"},"Overcomplicating Numeric Enums"),(0,a.yg)("p",{parentName:"admonition"},"I once manually assigned values to every member in a numeric enum. Turns out, you can let TypeScript auto-increment them for you:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"enum BillingCycle {\n  FREE = 0,\n  MONTHLY, // 1\n  YEARLY, // 2\n}\n")),(0,a.yg)("p",{parentName:"admonition"},"By avoiding these mistakes, my code has become more reliable and easier to debug! Enums are great when used well."),(0,a.yg)("h2",{parentName:"admonition",id:"summary"},"Summary"),(0,a.yg)("p",{parentName:"admonition"},"In this post, we explored TypeScript enum concepts by storing groups of constants in a couple of enums defined to implement a simplistic tier based Subscription model. We stored constants in enums for ",(0,a.yg)("inlineCode",{parentName:"p"},"AccountType")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BillingSchedule"),". On our way, we found that it is mandatory to initialize every member in a string enum, and which is not necessary in a numeric enum. We saw how an uninitialized first member is automatically assigned an offset of ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," and subsequent members get auto-incremented by ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),". We learned how to assign offset values at any point in a numeric enum."),(0,a.yg)("p",{parentName:"admonition"},"We also demonstrated how string enums implement unidirectional mapping and numeric enums implement a more convenient unidirectional mapping at compiltion and got an idea of typical objects introduced by them to runtime. We discussed the common usage of literal enum expressions in declaring string and numeric enums with constant values, and how they differ from computed member values."),(0,a.yg)("p",{parentName:"admonition"},"Towards the end, we explored the types generated by the enums and leveraged them to derive our own subtypes. Finally we implemented a basic ",(0,a.yg)("inlineCode",{parentName:"p"},"PersonalSubscription")," class that demonstrates the convenience offered by objects and types generated by TypeScript enums.")))}g.isMDXComponent=!0}}]);