"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[25925],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=o,g=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},11086:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>c});t(37953);var r=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={id:"list",title:"List",sidebar_label:"List",swizzle:!0},p=void 0,l={unversionedId:"api-reference/antd/components/basic-views/list",id:"version-3.xx.xx/api-reference/antd/components/basic-views/list",title:"List",description:"`` provides us a layout to display the page. It does not contain any logic but adds extra functionalities like a create button or giving the page titles.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/list.md",sourceDirName:"api-reference/antd/components/basic-views",slug:"/api-reference/antd/components/basic-views/list",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/list",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/antd/components/basic-views/list.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1710166301,formattedLastUpdatedAt:"Mar 11, 2024",frontMatter:{id:"list",title:"List",sidebar_label:"List",swizzle:!0},sidebar:"someSidebar",previous:{title:"Edit",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/edit"},next:{title:"Show",permalink:"/docs/3.xx.xx/api-reference/antd/components/basic-views/show"}},d={},c=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>canCreate</code> and <code>createButtonProps</code>",id:"cancreate-and-createbuttonprops",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},m=u("DocThumbsUpDownFeedbackWidget"),g=u("PropsTable"),h={toc:c},y="wrapper";function b(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(y,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},h,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," provides us a layout to display the page. It does not contain any logic but adds extra functionalities like a create button or giving the page titles."),(0,r.yg)("p",null,"We will show what ",(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," does using properties with examples."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts",live:!0,hideCode:!0,url:"http://localhost:3000/posts"},'interface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\n// visible-block-start\nimport { useMany } from "@pankod/refine-core";\n\nimport {\n  List,\n  Table,\n  TextField,\n  TagField,\n  useTable,\n} from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps } = useTable<IPost>({\n    syncWithLocation: true,\n  });\n\n  const categoryIds =\n    tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany<ICategory>({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          dataIndex={["category", "id"]}\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return (\n              <TextField\n                value={data?.data.find((item) => item.id === value)?.title}\n              />\n            );\n          }}\n        />\n        <Table.Column\n          dataIndex="status"\n          title="Status"\n          render={(value: string) => <TagField value={value} />}\n        />\n      </Table>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n')),(0,r.yg)("admonition",{title:"Swizzle",type:"info-tip"},(0,r.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/cli"},(0,r.yg)("strong",{parentName:"a"},"refine CLI")))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"title"},(0,r.yg)("inlineCode",{parentName:"h3"},"title")),(0,r.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It allows adding a title for the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," component. if you don't pass title props, it uses plural form of resource name by default."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <List title="Custom Title">\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"resource"},(0,r.yg)("inlineCode",{parentName:"h3"},"resource")),(0,r.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," component reads the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," component in a custom page, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},'setInitialRoutes(["/custom"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport { List } from "@pankod/refine-antd";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <List resource="posts">\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: "/custom",\n          },\n        ],\n        // highlight-end\n      }}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[{ name: "posts" }]}\n    />\n  );\n};\n// visible-block-end\n\nrender(<App />);\n'))),(0,r.yg)("h3",{id:"cancreate-and-createbuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"canCreate")," and ",(0,r.yg)("inlineCode",{parentName:"h3"},"createButtonProps")),(0,r.yg)(m,{id:"cancreate-and-createbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"canCreate")," allows us to add the create button inside the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List>")," component. If resource is passed a create component, ",(0,r.yg)("strong",{parentName:"p"},"refine")," adds the create button by default. If you want to customize this button you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"createButtonProps")," property like the code below."),(0,r.yg)("p",null,"Create button redirects to the create page of the resource according to the value it reads from the URL."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'const { Create } = RefineAntd;\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n  ...dataProvider,\n  create: async ({ resource, variables }) => {\n    return {\n      data: {},\n    };\n  },\n};\n\nconst authProvider = {\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  checkAuth: () => Promise.resolve(),\n  checkError: () => Promise.resolve(),\n  getPermissions: () => Promise.resolve("admin"),\n  getUserIdentity: () => Promise.resolve(),\n};\n\n// visible-block-start\nimport { List } from "@pankod/refine-antd";\nimport { usePermissions } from "@pankod/refine-core";\n\nconst PostList: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <List\n      /* highlight-start */\n      canCreate={permissionsData?.includes("admin")}\n      createButtonProps={{ size: "small" }}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    authProvider={authProvider}\n    dataProvider={customDataProvider}\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n        create: () => {\n          return <Create>Create Page</Create>;\n        },\n      },\n    ]}\n  />,\n);\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192"))),(0,r.yg)("h3",{id:"breadcrumb"},(0,r.yg)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,r.yg)(m,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,r.yg)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," package."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/components/breadcrumb"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List } from "@pankod/refine-antd";\n\nconst CustomBreadcrumb: React.FC = () => {\n  return (\n    <p\n      style={{\n        padding: "3px 6px",\n        border: "2px dashed cornflowerblue",\n      }}\n    >\n      My Custom Breadcrumb\n    </p>\n  );\n};\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      breadcrumb={<CustomBreadcrumb />}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"wrapperprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,r.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the wrapper of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,r.yg)("inlineCode",{parentName:"p"},"@pankod/refine-antd")," wrapper elements are simple ",(0,r.yg)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,r.yg)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      wrapperProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"headerprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerProps")),(0,r.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the header of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://procomponents.ant.design/en-US/components/page-header"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"PageHeader")," documentation from Ant Design for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      headerProps={{\n        subTitle: "This is a subtitle",\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"contentprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"contentProps")),(0,r.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the content of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<List/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"contentProps")," property. ",(0,r.yg)("inlineCode",{parentName:"p"},"<List/>")," components content is wrapped with a ",(0,r.yg)("inlineCode",{parentName:"p"},"<div/>")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"contentProps")," can get every attribute that ",(0,r.yg)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      contentProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"headerbuttons"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerButtons")),(0,r.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the buttons at the header by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,r.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List, Button } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h3",{id:"headerbuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,r.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts"},'// visible-block-start\nimport { List, Button } from "@pankod/refine-antd";\n\nconst PostList: React.FC = () => {\n  return (\n    <List\n      // highlight-start\n      headerButtonProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n      headerButtons={<Button type="primary">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts"]}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n      },\n    ]}\n  />,\n);\n'))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(m,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(g,{module:"@pankod/refine-antd/List","headerProps-type":"[`PageHeaderProps`](https://procomponents.ant.design/en-US/components/page-header)","headerButtonProps-type":"[`SpaceProps`](https://ant.design/components/space/)","createButtonProps-type":"[`ButtonProps`](https://ant.design/components/button/#API) & `{ resourceName: string }`","breadcrumb-default":"[`<Breadcrumb>`](https://ant.design/components/breadcrumb/)","canCreate-default":"If the resource is passed a create component, `true` else `false`",mdxType:"PropsTable"})))}b.isMDXComponent=!0}}]);