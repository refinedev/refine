"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[40346],{58860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var a=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97824:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>b,frontMatter:()=>l,metadata:()=>s,toc:()=>d});t(37953);var a=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={title:"useStepsForm"},p=void 0,s={unversionedId:"ui-integrations/mantine/hooks/use-steps-form/index",id:"version-4.xx.xx/ui-integrations/mantine/hooks/use-steps-form/index",title:"useStepsForm",description:"useStepsForm allows you to manage a form with multiple steps. It provides features such as which step is currently active, the ability to go to a specific step and validation when changing steps etc.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/mantine/hooks/use-steps-form/index.md",sourceDirName:"ui-integrations/mantine/hooks/use-steps-form",slug:"/ui-integrations/mantine/hooks/use-steps-form/",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-steps-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/mantine/hooks/use-steps-form/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useStepsForm"},sidebar:"mainSidebar",previous:{title:"useModalForm",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-modal-form/"},next:{title:"useSelect",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-select/"}},u={},d=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"refineCoreProps",id:"refinecoreprops",level:3},{value:"stepsProps",id:"stepsprops",level:3},{value:"defaultStep",id:"defaultstep",level:4},{value:"isBackValidate",id:"isbackvalidate",level:4},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"Return Values",id:"return-values",level:2},{value:"steps",id:"steps",level:3},{value:"currentStep",id:"currentstep",level:4},{value:"gotoStep",id:"gotostep",level:4},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},m=c("DocThumbsUpDownFeedbackWidget"),g=c("Tabs"),y=c("TabItem"),f=c("PropsTable"),h=c("CodeSandboxExample"),S={toc:d},v="wrapper";function b(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(v,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},S,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { useTable } from "@refinedev/react-table";\nimport { Column, ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nimport {\n  Box as MantineBox,\n  Code as MantineCode,\n  Group as MantineGroup,\n  Pagination as MantinePagination,\n  ScrollArea as MantineScrollArea,\n  Select as MantineSelect,\n  Space as MantineSpace,\n  Stepper as MantineStepper,\n  Table as MantineTable,\n  Textarea as MantineTextarea,\n  TextInput as MantineTextInput,\n} from "@mantine/core";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n  Button as MantineButton,\n  Create as MantineCreate,\n  DeleteButton as MantineDeleteButton,\n  Edit as MantineEdit,\n  EditButton as MantineEditButton,\n  List as MantineList,\n  useStepsForm as MantineUseStepsForm,\n} from "@refinedev/mantine";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\ninterface ColumnButtonProps {\n  column: Column<any, any>; // eslint-disable-line\n}\n\ninterface FilterElementProps {\n  value: any; // eslint-disable-line\n  onChange: (value: any) => void; // eslint-disable-line\n}\n\nconst PostList: React.FC = () => {\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n      {\n        id: "category.id",\n        header: "Category",\n        enableColumnFilter: false,\n        accessorKey: "category.id",\n        cell: function render({ getValue, table }) {\n          const meta = table.options.meta as {\n            categoriesData: GetManyResponse<ICategory>;\n          };\n          const category = meta.categoriesData?.data.find(\n            (item) => item.id === getValue(),\n          );\n          return category?.title ?? "Loading...";\n        },\n      },\n      {\n        id: "actions",\n        header: "Actions",\n        accessorKey: "id",\n        enableColumnFilter: false,\n        enableSorting: false,\n        cell: function render({ getValue }) {\n          return (\n            <MantineGroup spacing="xs" noWrap>\n              <MantineEditButton hideText recordItemId={getValue() as number} />\n              <MantineDeleteButton\n                hideText\n                recordItemId={getValue() as number}\n              />\n            </MantineGroup>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQuery: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  const categoryIds = tableData?.data?.map((item) => item.category.id) ?? [];\n  const { data: categoriesData } = useMany<ICategory>({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  setOptions((prev) => ({\n    ...prev,\n    meta: {\n      ...prev.meta,\n      categoriesData,\n    },\n  }));\n\n  return (\n    <MantineScrollArea>\n      <MantineList>\n        <MantineTable highlightOnHover>\n          <thead>\n            {getHeaderGroups().map((headerGroup) => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <th key={header.id}>\n                      {!header.isPlaceholder && (\n                        <MantineGroup spacing="xs" noWrap>\n                          <MantineBox>\n                            {flexRender(\n                              header.column.columnDef.header,\n                              header.getContext(),\n                            )}\n                          </MantineBox>\n                        </MantineGroup>\n                      )}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {getRowModel().rows.map((row) => {\n              return (\n                <tr key={row.id}>\n                  {row.getVisibleCells().map((cell) => {\n                    return (\n                      <td key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext(),\n                        )}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </MantineTable>\n        <br />\n        <MantinePagination\n          position="right"\n          total={pageCount}\n          page={current}\n          onChange={setCurrent}\n        />\n      </MantineList>\n    </MantineScrollArea>\n  );\n};\n\nconst PostCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = MantineUseStepsForm({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return (\n    <MantineCreate\n      footerButtons={\n        <MantineGroup position="right" mt="xl">\n          {currentStep !== 0 && (\n            <MantineButton\n              variant="default"\n              onClick={() => gotoStep(currentStep - 1)}\n            >\n              Back\n            </MantineButton>\n          )}\n          {currentStep !== 3 && (\n            <MantineButton onClick={() => gotoStep(currentStep + 1)}>\n              Next step\n            </MantineButton>\n          )}\n          {currentStep === 2 && <SaveButton {...saveButtonProps} />}\n        </MantineGroup>\n      }\n    >\n      <MantineStepper\n        active={currentStep}\n        onStepClick={gotoStep}\n        breakpoint="xs"\n      >\n        <MantineStepper.Step\n          label="First Step"\n          description="Title and Slug"\n          allowStepSelect={currentStep > 0}\n        >\n          <MantineTextInput\n            mt="md"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n          />\n          <MantineTextInput\n            mt="md"\n            label="Slug"\n            placeholder="Slug"\n            {...getInputProps("slug")}\n          />\n        </MantineStepper.Step>\n\n        <MantineStepper.Step\n          label="Second Step"\n          description="Status"\n          allowStepSelect={currentStep > 1}\n        >\n          <MantineSelect\n            mt="md"\n            label="Status"\n            placeholder="Pick one"\n            {...getInputProps("status")}\n            data={[\n              { label: "Published", value: "published" },\n              { label: "Draft", value: "draft" },\n              { label: "Rejected", value: "rejected" },\n            ]}\n          />\n        </MantineStepper.Step>\n\n        <MantineStepper.Step\n          label="Final Step"\n          description="Content"\n          allowStepSelect={currentStep > 2}\n        >\n          <MantineTextarea\n            label="Content"\n            placeholder="Content"\n            {...getInputProps("content")}\n          />\n        </MantineStepper.Step>\n\n        <MantineStepper.Completed>\n          Completed! Form values:\n          <MantineSpace />\n          <MantineCode mt="xl">{JSON.stringify(values, null, 2)}</MantineCode>\n        </MantineStepper.Completed>\n      </MantineStepper>\n    </MantineCreate>\n  );\n};\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = MantineUseStepsForm({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return (\n    <MantineEdit\n      footerButtons={\n        <MantineGroup position="right" mt="xl">\n          {currentStep !== 0 && (\n            <MantineButton\n              variant="default"\n              onClick={() => gotoStep(currentStep - 1)}\n            >\n              Back\n            </MantineButton>\n          )}\n          {currentStep !== 3 && (\n            <MantineButton onClick={() => gotoStep(currentStep + 1)}>\n              Next step\n            </MantineButton>\n          )}\n          {currentStep === 2 && <SaveButton {...saveButtonProps} />}\n        </MantineGroup>\n      }\n    >\n      <MantineStepper\n        active={currentStep}\n        onStepClick={gotoStep}\n        breakpoint="xs"\n      >\n        <MantineStepper.Step\n          label="First Step"\n          description="Title and Slug"\n          allowStepSelect={currentStep > 0}\n        >\n          <MantineTextInput\n            mt="md"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n          />\n          <MantineTextInput\n            mt="md"\n            label="Slug"\n            placeholder="Slug"\n            {...getInputProps("slug")}\n          />\n        </MantineStepper.Step>\n\n        <MantineStepper.Step\n          label="Second Step"\n          description="Status"\n          allowStepSelect={currentStep > 1}\n        >\n          <MantineSelect\n            mt="md"\n            label="Status"\n            placeholder="Pick one"\n            {...getInputProps("status")}\n            data={[\n              { label: "Published", value: "published" },\n              { label: "Draft", value: "draft" },\n              { label: "Rejected", value: "rejected" },\n            ]}\n          />\n        </MantineStepper.Step>\n\n        <MantineStepper.Step\n          label="Final Step"\n          description="Content"\n          allowStepSelect={currentStep > 2}\n        >\n          <MantineTextarea\n            label="Content"\n            placeholder="Content"\n            {...getInputProps("content")}\n          />\n        </MantineStepper.Step>\n        <MantineStepper.Completed>\n          Completed! Form values:\n          <MantineSpace />\n          <MantineCode mt="xl">{JSON.stringify(values, null, 2)}</MantineCode>\n        </MantineStepper.Completed>\n      </MantineStepper>\n    </MantineEdit>\n  );\n};\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," allows you to manage a form with multiple steps. It provides features such as which step is currently active, the ability to go to a specific step and validation when changing steps etc."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook is extended from ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/mantine"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/mantine"))," package. This means that you can use all the functionalities of ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," in your ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm"),"."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(m,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"We will show two examples, one for creating and one for editing a post. Let's see how ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,a.yg)(g,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,a.yg)(y,{value:"create",mdxType:"TabItem"},(0,a.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport {\n  Button,\n  Code,\n  Group,\n  Select,\n  Space,\n  Stepper,\n  Textarea,\n  TextInput,\n} from "@mantine/core";\nimport { HttpError } from "@refinedev/core";\nimport { Create, SaveButton, useStepsForm } from "@refinedev/mantine";\nimport React from "react";\n\ntype FormValues = Omit<IPost, "id">;\n\nconst PostCreatePage: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, FormValues>({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return (\n    <Create\n      footerButtons={\n        <Group position="right" mt="xl">\n          {currentStep !== 0 && (\n            <Button variant="default" onClick={() => gotoStep(currentStep - 1)}>\n              Back\n            </Button>\n          )}\n          {currentStep !== 3 && (\n            <Button onClick={() => gotoStep(currentStep + 1)}>Next step</Button>\n          )}\n          {currentStep === 2 && <SaveButton {...saveButtonProps} />}\n        </Group>\n      }\n    >\n      <Stepper active={currentStep} onStepClick={gotoStep} breakpoint="xs">\n        <Stepper.Step\n          label="First Step"\n          description="Title and Slug"\n          allowStepSelect={currentStep > 0}\n        >\n          <TextInput\n            mt="md"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n          />\n          <TextInput\n            mt="md"\n            label="Slug"\n            placeholder="Slug"\n            {...getInputProps("slug")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Second Step"\n          description="Status"\n          allowStepSelect={currentStep > 1}\n        >\n          <Select\n            mt="md"\n            label="Status"\n            placeholder="Pick one"\n            {...getInputProps("status")}\n            data={[\n              { label: "Published", value: "published" },\n              { label: "Draft", value: "draft" },\n              { label: "Rejected", value: "rejected" },\n            ]}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Final Step"\n          description="Content"\n          allowStepSelect={currentStep > 2}\n        >\n          <Textarea\n            label="Content"\n            placeholder="Content"\n            {...getInputProps("content")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Completed>\n          Completed! Form values:\n          <Space />\n          <Code mt="xl">{JSON.stringify(values, null, 2)}</Code>\n        </Stepper.Completed>\n      </Stepper>\n    </Create>\n  );\n};\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreatePage,\n      edit: PostEdit,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n'))),(0,a.yg)(y,{value:"edit",mdxType:"TabItem"},(0,a.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport {\n  Button,\n  Code,\n  Group,\n  Select,\n  Space,\n  Stepper,\n  Textarea,\n  TextInput,\n} from "@mantine/core";\nimport { HttpError } from "@refinedev/core";\nimport { Edit, SaveButton, useStepsForm } from "@refinedev/mantine";\nimport React from "react";\n\ntype FormValues = Omit<IPost, "id">;\n\nconst PostEditPage: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, FormValues>({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return (\n    <Edit\n      footerButtons={\n        <Group position="right" mt="xl">\n          {currentStep !== 0 && (\n            <Button variant="default" onClick={() => gotoStep(currentStep - 1)}>\n              Back\n            </Button>\n          )}\n          {currentStep !== 3 && (\n            <Button onClick={() => gotoStep(currentStep + 1)}>Next step</Button>\n          )}\n          {currentStep === 2 && <SaveButton {...saveButtonProps} />}\n        </Group>\n      }\n    >\n      <Stepper active={currentStep} onStepClick={gotoStep} breakpoint="xs">\n        <Stepper.Step\n          label="First Step"\n          description="Title and Slug"\n          allowStepSelect={currentStep > 0}\n        >\n          <TextInput\n            mt="md"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n          />\n          <TextInput\n            mt="md"\n            label="Slug"\n            placeholder="Slug"\n            {...getInputProps("slug")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Second Step"\n          description="Status"\n          allowStepSelect={currentStep > 1}\n        >\n          <Select\n            mt="md"\n            label="Status"\n            placeholder="Pick one"\n            {...getInputProps("status")}\n            data={[\n              { label: "Published", value: "published" },\n              { label: "Draft", value: "draft" },\n              { label: "Rejected", value: "rejected" },\n            ]}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Final Step"\n          description="Content"\n          allowStepSelect={currentStep > 2}\n        >\n          <Textarea\n            label="Content"\n            placeholder="Content"\n            {...getInputProps("content")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Completed>\n          Completed! Form values:\n          <Space />\n          <Code mt="xl">{JSON.stringify(values, null, 2)}</Code>\n        </Stepper.Completed>\n      </Stepper>\n    </Edit>\n  );\n};\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreate,\n      edit: PostEditPage,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n')))),(0,a.yg)("p",null,"In this example we're going to build a Post ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"')," form. To creating a multi-step form, we will use ",(0,a.yg)("a",{parentName:"p",href:"https://mantine.dev/core/stepper/"},(0,a.yg)("inlineCode",{parentName:"a"},"<Stepper/>"))," component from Mantine. To handle the state of both the form and the steps, we will use ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook."),(0,a.yg)("p",null,"To show your form inputs step by step, first import and use ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError } from "@refinedev/core";\nimport { Create } from "@refinedev/mantine";\nimport React from "react";\n\ntype FormValues = Omit<IPost, "id">;\n\nconst PostCreatePage: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, FormValues>({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return <Create>create page</Create>;\n};\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is generic over the type form data to help you type check your code."),(0,a.yg)("p",null,"This hook returns a set of useful values to render ",(0,a.yg)("a",{parentName:"p",href:"https://mantine.dev/core/stepper/"},(0,a.yg)("inlineCode",{parentName:"a"},"<Stepper/>")),". Given current value, you should have a way to render your form items conditionally with this index value."),(0,a.yg)("p",null,"Here, we're going to use a ",(0,a.yg)("a",{parentName:"p",href:"https://mantine.dev/core/stepper/"},(0,a.yg)("inlineCode",{parentName:"a"},"<Stepper/>"))," component to render the form items based on the ",(0,a.yg)("inlineCode",{parentName:"p"},"currentStep")," and we added ",(0,a.yg)("inlineCode",{parentName:"p"},"<Button>")," to footer with ",(0,a.yg)("inlineCode",{parentName:"p"},"gotoStep")," function to navigate between steps."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError } from "@refinedev/core";\nimport { Create } from "@refinedev/mantine";\nimport React from "react";\n\ntype FormValues = Omit<IPost, "id">;\n\nconst PostCreatePage: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, FormValues>({\n    initialValues: {\n      title: "",\n      status: "",\n      slug: "",\n      content: "",\n    },\n    validate: (values) => {\n      if (currentStep === 0) {\n        return {\n          title: values.title ? null : "Title is required",\n          slug: values.slug ? null : "Slug is required",\n        };\n      }\n\n      if (currentStep === 1) {\n        return {\n          status: values.status ? null : "Status is required",\n        };\n      }\n\n      return {};\n    },\n  });\n\n  return (\n    <Create\n      //highlight-start\n      footerButtons={\n        <Group position="right" mt="xl">\n          {currentStep !== 0 && (\n            <Button variant="default" onClick={() => gotoStep(currentStep - 1)}>\n              Back\n            </Button>\n          )}\n          {currentStep !== 3 && (\n            <Button onClick={() => gotoStep(currentStep + 1)}>Next step</Button>\n          )}\n          {currentStep === 2 && <SaveButton {...saveButtonProps} />}\n        </Group>\n      }\n      // highlight-end\n    >\n      {/* highlight-start */}\n      <Stepper active={currentStep} onStepClick={gotoStep} breakpoint="xs">\n        <Stepper.Step\n          label="First Step"\n          description="Title and Slug"\n          allowStepSelect={currentStep > 0}\n        >\n          <TextInput\n            mt="md"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n          />\n          <TextInput\n            mt="md"\n            label="Slug"\n            placeholder="Slug"\n            {...getInputProps("slug")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Second Step"\n          description="Status"\n          allowStepSelect={currentStep > 1}\n        >\n          <Select\n            mt="md"\n            label="Status"\n            placeholder="Pick one"\n            {...getInputProps("status")}\n            data={[\n              { label: "Published", value: "published" },\n              { label: "Draft", value: "draft" },\n              { label: "Rejected", value: "rejected" },\n            ]}\n          />\n        </Stepper.Step>\n\n        <Stepper.Step\n          label="Final Step"\n          description="Content"\n          allowStepSelect={currentStep > 2}\n        >\n          <Textarea\n            label="Content"\n            placeholder="Content"\n            {...getInputProps("content")}\n          />\n        </Stepper.Step>\n\n        <Stepper.Completed>\n          Completed! Form values:\n          <Space />\n          <Code mt="xl">{JSON.stringify(values, null, 2)}</Code>\n        </Stepper.Completed>\n      </Stepper>\n      {/* highlight-end */}\n    </Create>\n  );\n};\n'))),(0,a.yg)("h2",{id:"properties"},"Properties"),(0,a.yg)("h3",{id:"refinecoreprops"},"refineCoreProps"),(0,a.yg)(m,{id:"refinecoreprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," properties also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#properties"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const stepsForm = useStepsForm({\n  refineCoreProps: {\n    action: "edit",\n    resource: "posts",\n    id: "1",\n  },\n});\n'))),(0,a.yg)("h3",{id:"stepsprops"},"stepsProps"),(0,a.yg)("h4",{id:"defaultstep"},"defaultStep"),(0,a.yg)(m,{id:"defaultstep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Sets the default starting step number. Counting starts from ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  stepsProps: {\n    defaultStep: 0,\n  },\n});\n"))),(0,a.yg)("h4",{id:"isbackvalidate"},"isBackValidate"),(0,a.yg)(m,{id:"isbackvalidate",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When is ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", validates a form fields when the user navigates to a previous step. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  stepsProps: {\n    isBackValidate: true,\n  },\n});\n"))),(0,a.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,a.yg)(m,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,a.yg)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.yg)("p",null,"Return ",(0,a.yg)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useStepsForm({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n"))),(0,a.yg)("h3",{id:"autosave"},"autoSave"),(0,a.yg)(m,{id:"autosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.yg)("p",null,"By default the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," prop to invalidate queries upon unmount."),(0,a.yg)("p",null,"It also supports ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.yg)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed.")),(0,a.yg)("h4",{id:"enabled"},"enabled"),(0,a.yg)(m,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"To enable the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.yg)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),". Default is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"debounce"},"debounce"),(0,a.yg)(m,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"debounce")," sets the debounce time for the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," prop. Default is ",(0,a.yg)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      debounce: 2000,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,a.yg)(m,{id:"invalidateonunmount",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. Default is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnUnmount: true,\n    },\n  },\n});\n"))),(0,a.yg)("h2",{id:"return-values"},"Return Values"),(0,a.yg)(m,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,a.yg)("h3",{id:"steps"},"steps"),(0,a.yg)(m,{id:"steps",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The props needed by the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Stepper>")," component.")),(0,a.yg)("h4",{id:"currentstep"},"currentStep"),(0,a.yg)(m,{id:"currentstep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Current step, counting from ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,a.yg)("h4",{id:"gotostep"},"gotoStep"),(0,a.yg)(m,{id:"gotostep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Is a function that allows you to programmatically change the current step of a form.\nIt takes in one argument, step, which is a number representing the index of the step you want to navigate to.")),(0,a.yg)("h3",{id:"overtime"},"overtime"),(0,a.yg)(m,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useStepsForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n"))),(0,a.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,a.yg)(m,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.yg)("inlineCode",{parentName:"p"},"data"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," properties from mutation.")),(0,a.yg)("h2",{id:"faq"},"FAQ"),(0,a.yg)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.yg)(m,{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"You may need to modify the form data before it is sent to the API."),(0,a.yg)("p",null,"For example, Let's send the values we received from the user in two separate inputs, ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.yg)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { useStepsForm } from "@refinedev/mantine";\nimport React from "react";\n\nconst UserCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    getInputProps,\n    values,\n    steps: { currentStep, gotoStep },\n  } = useStepsForm({\n    refineCoreProps: { action: "create" },\n    initialValues: {\n      name: "",\n      surname: "",\n    },\n    // highlight-start\n    transformValues: (values) => ({\n      fullName: `${values.name} ${values.surname}`,\n    }),\n    // highlight-end\n  });\n\n  // ...\n};\n'))),(0,a.yg)("h2",{id:"api-reference"},"API Reference"),(0,a.yg)("h3",{id:"properties-1"},"Properties"),(0,a.yg)(m,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(f,{module:"@refinedev/mantine/useStepsForm","refineCoreProps-type":"[`UseFormCoreProps<TData, TError, TVariables>`](/docs/data/hooks/use-form/#properties)","refineCoreProps-description":"Configuration object for the core of the [useForm](/docs/data/hooks/use-form/)","stepsProps-description":"Configuration object for the steps. `defaultStep`: Allows you to set the initial step. `isBackValidate`: Whether to validation the current step when going back.","stepsProps-default":"`defaultStep = 0` `isBackValidate = false`",mdxType:"PropsTable"})),(0,a.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.yg)(m,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,a.yg)("td",{parentName:"tr",align:null},"Form values for mutation function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Record<string, unknown>"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TTransformed"),(0,a.yg)("td",{parentName:"tr",align:null},"Form values after transformation for mutation function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TVariables"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,a.yg)("h3",{id:"return-values-1"},"Return values"),(0,a.yg)(m,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"steps"),(0,a.yg)("td",{parentName:"tr",align:null},"Relevant state and method to control the steps"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#steps"},(0,a.yg)("inlineCode",{parentName:"a"},"StepsReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"refineCore"),(0,a.yg)("td",{parentName:"tr",align:null},"The return values of the ",(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.yg)("inlineCode",{parentName:"td"},"useForm")," return values"),(0,a.yg)("td",{parentName:"tr",align:null},"See ",(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/mantine/hooks/use-form"},"useForm")," documentation"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"overtime"),(0,a.yg)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"success" }')))))),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(m,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(h,{path:"form-mantine-use-steps-form",mdxType:"CodeSandboxExample"})))}b.isMDXComponent=!0}}]);