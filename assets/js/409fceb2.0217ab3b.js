"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[28562],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var o=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),m=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(t),u=r,g=c["".concat(s,".").concat(u)]||c[u]||p[u]||a;return t?o.createElement(g,i(i({ref:n},d),{},{components:t})):o.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<a;m++)i[m]=t[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},12096:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>c});t(37953);var o=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={title:"Forms",source:"https://github.com/refinedev/refine/tree/feat/init-shadcn/packages/refine-ui/registry/new-york/refine-ui/form"},s="Building Forms with Refine and shadcn/ui",m={unversionedId:"ui-integrations/shadcn/components/forms/index",id:"ui-integrations/shadcn/components/forms/index",title:"Forms",description:"This guide explains how to create and manage forms in your Refine applications using the @refinedev/react-hook-form adapter and shadcn/ui form components. We'll cover complete setup, validation with Zod, and provide examples for create and edit scenarios.",source:"@site/docs/ui-integrations/shadcn/components/forms/index.md",sourceDirName:"ui-integrations/shadcn/components/forms",slug:"/ui-integrations/shadcn/components/forms/",permalink:"/docs/ui-integrations/shadcn/components/forms/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/shadcn/components/forms/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1758111044,formattedLastUpdatedAt:"Sep 17, 2025",frontMatter:{title:"Forms",source:"https://github.com/refinedev/refine/tree/feat/init-shadcn/packages/refine-ui/registry/new-york/refine-ui/form"},sidebar:"mainSidebar",previous:{title:"Show",permalink:"/docs/ui-integrations/shadcn/components/buttons/show-button/"},next:{title:"<DataTable />",permalink:"/docs/ui-integrations/shadcn/components/data-table/"}},d={},c=[{value:"Key Features",id:"key-features",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Step 1: Installation",id:"step-1-installation",level:2},{value:"Step 2: Understanding the Hook",id:"step-2-understanding-the-hook",level:2},{value:"Step 3: Define Your Schema",id:"step-3-define-your-schema",level:2},{value:"Step 4: Create a Form",id:"step-4-create-a-form",level:2},{value:"Step 5: Creating Edit Forms",id:"step-5-creating-edit-forms",level:2},{value:"Step 6: Working with Relationships",id:"step-6-working-with-relationships",level:2},{value:"Advanced Validation Patterns",id:"advanced-validation-patterns",level:2},{value:"Cross-field Validation",id:"cross-field-validation",level:3},{value:"Conditional Validation",id:"conditional-validation",level:3}],p=(u="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",e)});var u;const g={toc:c},f="wrapper";function h(e){var{components:n}=e,t=i(e,["components"]);return(0,o.yg)(f,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"building-forms-with-refine-and-shadcnui"},"Building Forms with Refine and shadcn/ui"),(0,o.yg)("p",null,"This guide explains how to create and manage forms in your Refine applications using the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/react-hook-form/use-form/"},(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," adapter and ",(0,o.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/"},(0,o.yg)("inlineCode",{parentName:"a"},"shadcn/ui"))," ",(0,o.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/form"},"form components"),". We'll cover complete setup, validation with ",(0,o.yg)("a",{parentName:"p",href:"https://zod.dev/"},"Zod"),", and provide examples for create and edit scenarios."),(0,o.yg)("h2",{id:"key-features"},"Key Features"),(0,o.yg)(p,{id:"key-features",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Seamless integration")," with Refine's data lifecycle for creating and updating resources"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Powerful validation capabilities")," using ",(0,o.yg)("inlineCode",{parentName:"li"},"react-hook-form")," and Zod with TypeScript support"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Pre-built shadcn/ui components")," ",(0,o.yg)("a",{parentName:"li",href:"https://ui.shadcn.com/docs/components/form"},"(",(0,o.yg)("inlineCode",{parentName:"a"},"Form"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"FormField"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"FormItem"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"FormLabel"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"FormControl"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"FormMessage"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"Input"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"Textarea"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"Select"),", ",(0,o.yg)("inlineCode",{parentName:"a"},"Button"),", etc.)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Automatic CRUD operations")," that connect directly to your data provider"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Loading states and error handling")," built-in for better user experience"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Works seamlessly")," within Refine UI's view components like ",(0,o.yg)("inlineCode",{parentName:"li"},"CreateView")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"EditView")))),(0,o.yg)("h2",{id:"how-it-works"},"How It Works"),(0,o.yg)(p,{id:"how-it-works",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/react-hook-form/use-form/"},(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," acts as a bridge between:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"React Hook Form"),": For form state management and validation"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Refine Core"),": For automatic data provider integration and CRUD operations"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"shadcn/ui"),": For consistent, accessible UI components"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Zod"),": For TypeScript-first schema validation")),(0,o.yg)("p",null,"This integration means you get automatic:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Form submission to your backend via data providers"),(0,o.yg)("li",{parentName:"ul"},"Loading states during API calls"),(0,o.yg)("li",{parentName:"ul"},"Error handling and validation feedback"),(0,o.yg)("li",{parentName:"ul"},"Data fetching for edit forms"),(0,o.yg)("li",{parentName:"ul"},"Optimistic updates and cache invalidation"))),(0,o.yg)("h2",{id:"what-youll-build"},"What You'll Build"),(0,o.yg)(p,{id:"what-youll-build",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By the end of this guide, you'll know how to:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Set up forms with automatic data integration"),(0,o.yg)("li",{parentName:"ul"},"Add validation with Zod schemas"),(0,o.yg)("li",{parentName:"ul"},"Handle both create and edit operations"),(0,o.yg)("li",{parentName:"ul"},"Work with relationships and complex data"),(0,o.yg)("li",{parentName:"ul"},"Implement advanced validation patterns"),(0,o.yg)("li",{parentName:"ul"},"Integrate with Refine's notification system"))),(0,o.yg)("h2",{id:"step-1-installation"},"Step 1: Installation"),(0,o.yg)(p,{id:"step-1-installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"First, install the required packages:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @refinedev/react-hook-form @hookform/resolvers zod\n")),(0,o.yg)("p",null,"Next, add the necessary shadcn/ui components:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest add form input button select textarea\n"))),(0,o.yg)("h2",{id:"step-2-understanding-the-hook"},"Step 2: Understanding the Hook"),(0,o.yg)(p,{id:"step-2-understanding-the-hook",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," provides everything you need:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Automatic data integration"),": Connects to your data provider for create/update operations"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Form state management"),": Handles loading, validation, and error states"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Validation"),": Integrates with Zod schemas for type-safe validation"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"shadcn/ui compatibility"),": Works seamlessly with Form components"))),(0,o.yg)("h2",{id:"step-3-define-your-schema"},"Step 3: Define Your Schema"),(0,o.yg)(p,{id:"step-3-define-your-schema",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Start by creating a Zod schema that defines your form structure and validation rules:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},'import * as z from "zod";\n\nconst postSchema = z.object({\n  title: z.string().min(2, "Title must be at least 2 characters"),\n  content: z.string().min(10, "Content must be at least 10 characters"),\n  status: z.enum(["draft", "published", "rejected"], {\n    errorMap: () => ({ message: "Please select a status" }),\n  }),\n});\n\ntype PostFormData = z.infer<typeof postSchema>;\n'))),(0,o.yg)("h2",{id:"step-4-create-a-form"},"Step 4: Create a Form"),(0,o.yg)(p,{id:"step-4-create-a-form",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Here's a complete example of a create form using ",(0,o.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/form"},"shadcn/ui form components"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport * as z from "zod";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from "@/components/ui/form";\nimport { Input } from "@/components/ui/input";\nimport { Textarea } from "@/components/ui/textarea";\nimport { Button } from "@/components/ui/button";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from "@/components/ui/select";\nimport {\n  CreateView,\n  CreateViewHeader,\n} from "@/components/refine-ui/views/create-view";\n\nconst postSchema = z.object({\n  title: z.string().min(2, "Title must be at least 2 characters"),\n  content: z.string().min(10, "Content must be at least 10 characters"),\n  status: z.enum(["draft", "published", "rejected"]),\n});\n\ntype PostFormData = z.infer<typeof postSchema>;\n\nexport default function CreatePost() {\n  const {\n    refineCore: { onFinish, formLoading },\n    ...form\n  } = useForm<PostFormData>({\n    resolver: zodResolver(postSchema),\n    defaultValues: {\n      title: "",\n      content: "",\n      status: "draft",\n    },\n    refineCoreProps: {\n      resource: "posts",\n      action: "create",\n    },\n  });\n\n  const onSubmit = (data: PostFormData) => {\n    onFinish(data); // Automatically calls your data provider\'s create method\n  };\n\n  return (\n    <CreateView>\n      <CreateViewHeader title="Create New Post" />\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 p-4">\n          <FormField\n            control={form.control}\n            name="title"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Title</FormLabel>\n                <FormControl>\n                  <Input placeholder="Enter post title" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name="content"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Content</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder="Write your post content..."\n                    className="resize-none"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name="status"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder="Select a status" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value="draft">Draft</SelectItem>\n                    <SelectItem value="published">Published</SelectItem>\n                    <SelectItem value="rejected">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className="flex justify-end space-x-2">\n            <Button type="button" variant="outline">\n              Cancel\n            </Button>\n            <Button type="submit" disabled={formLoading}>\n              {formLoading ? "Creating..." : "Create Post"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </CreateView>\n  );\n}\n')),(0,o.yg)("h3",null,"Key Points:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"useForm hook"),": Configured with ",(0,o.yg)("inlineCode",{parentName:"li"},'action: "create"')," to handle new record creation"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"zodResolver"),": Connects your Zod schema to form validation"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"onFinish"),": Automatically calls your data provider's ",(0,o.yg)("inlineCode",{parentName:"li"},"create")," method"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"FormField"),": Each field connects to the form state with automatic validation"))),(0,o.yg)("h2",{id:"step-5-creating-edit-forms"},"Step 5: Creating Edit Forms"),(0,o.yg)(p,{id:"step-5-creating-edit-forms",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"For editing existing records, change the ",(0,o.yg)("inlineCode",{parentName:"p"},"action")," and add an ",(0,o.yg)("inlineCode",{parentName:"p"},"ID"),". Other than that, the form structure remains the same."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n// highlight-start\nimport { useParams } from "react-router";\n// highlight-end\nimport { useForm } from "@refinedev/react-hook-form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport * as z from "zod";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from "@/components/ui/form";\nimport { Input } from "@/components/ui/input";\nimport { Textarea } from "@/components/ui/textarea";\nimport { Button } from "@/components/ui/button";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from "@/components/ui/select";\nimport {\n  EditView,\n  EditViewHeader,\n} from "@/components/refine-ui/views/edit-view";\nimport { LoadingOverlay } from "@/components/refine-ui/layout/loading-overlay";\n\nconst postSchema = z.object({\n  title: z.string().min(2, "Title must be at least 2 characters"),\n  content: z.string().min(10, "Content must be at least 10 characters"),\n  status: z.enum(["draft", "published", "rejected"]),\n});\n\ntype PostFormData = z.infer<typeof postSchema>;\n\nexport default function EditPost() {\n  // highlight-start\n  const { id } = useParams();\n  // highlight-end\n\n  const {\n    refineCore: { onFinish, formLoading, query },\n    ...form\n  } = useForm<PostFormData>({\n    resolver: zodResolver(postSchema),\n    refineCoreProps: {\n      resource: "posts",\n      // highlight-start\n      action: "edit",\n      id,\n      // highlight-end\n    },\n  });\n\n  const onSubmit = (data: PostFormData) => {\n    onFinish(data); // Calls your data provider\'s update method\n  };\n\n  return (\n    <EditView>\n      <EditViewHeader title={`Edit Post #${id}`} />\n      <LoadingOverlay loading={formLoading || query?.isLoading}>\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className="space-y-6 p-4"\n          >\n            <FormField\n              control={form.control}\n              name="title"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder="Enter post title" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name="content"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Content</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder="Write your post content..."\n                      className="resize-none"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name="status"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder="Select a status" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value="draft">Draft</SelectItem>\n                      <SelectItem value="published">Published</SelectItem>\n                      <SelectItem value="rejected">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className="flex justify-end space-x-2">\n              <Button type="button" variant="outline">\n                Cancel\n              </Button>\n              <Button type="submit" disabled={formLoading}>\n                {formLoading ? "Updating..." : "Update Post"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </LoadingOverlay>\n    </EditView>\n  );\n}\n')),(0,o.yg)("h3",null,"Edit Form Features:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"Automatic data loading"),": The hook automatically loads existing data using the record ID"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"query"),": Contains loading state and data for the record being edited"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"value vs defaultValue"),": Use ",(0,o.yg)("inlineCode",{parentName:"li"},"value")," for Select components in edit forms to ensure proper state management"))),(0,o.yg)("h2",{id:"step-6-working-with-relationships"},"Step 6: Working with Relationships"),(0,o.yg)(p,{id:"step-6-working-with-relationships",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"When your forms need to handle relationships with other resources (like selecting a category for a post), you can use the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-select/"},(0,o.yg)("inlineCode",{parentName:"a"},"useSelect"))," hook alongside your form. This approach works identically for both create and edit forms, but adds the ability to fetch and select related data from other resources."),(0,o.yg)("p",null,"Here's how to extend your form with relationship handling using shadcn/ui's Combobox pattern:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'// highlight-start\nimport { useForm, useSelect } from "@refinedev/react-hook-form";\n// highlight-end\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport * as z from "zod";\nimport { Check, ChevronsUpDown } from "lucide-react";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from "@/components/ui/form";\nimport { Button } from "@/components/ui/button";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from "@/components/ui/popover";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from "@/components/ui/command";\nimport { cn } from "@/lib/utils";\n\n// Extended schema with relationship\nconst postWithCategorySchema = z.object({\n  title: z.string().min(2, "Title must be at least 2 characters"),\n  content: z.string().min(10, "Content must be at least 10 characters"),\n  status: z.enum(["draft", "published", "rejected"]),\n  // highlight-start\n  category: z.object({\n    id: z.number({ required_error: "Please select a category" }),\n  }),\n  // highlight-end\n});\n\ntype PostWithCategoryData = z.infer<typeof postWithCategorySchema>;\n\nexport default function PostFormWithCategory() {\n  const {\n    refineCore: { onFinish, formLoading },\n    ...form\n  } = useForm<PostWithCategoryData>({\n    resolver: zodResolver(postWithCategorySchema),\n    refineCoreProps: {\n      resource: "posts",\n      action: "create",\n    },\n  });\n\n  // Fetch categories for selection\n  // highlight-start\n  const { options: categoryOptions } = useSelect({\n    resource: "categories",\n    optionValue: "id",\n    optionLabel: "title",\n  });\n  // highlight-end\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onFinish)} className="space-y-6">\n        {/* Other fields... */}\n\n        {/* highlight-start */}\n        <FormField\n          control={form.control}\n          name="category.id"\n          render={({ field }) => (\n            <FormItem className="flex flex-col">\n              <FormLabel>Category</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant="outline"\n                      role="combobox"\n                      className={cn(\n                        "w-[300px] justify-between",\n                        !field.value && "text-muted-foreground",\n                      )}\n                      type="button"\n                    >\n                      {field.value\n                        ? categoryOptions?.find(\n                            (option) => option.value === field.value,\n                          )?.label\n                        : "Select category..."}\n                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className="w-[300px] p-0">\n                  <Command>\n                    <CommandInput placeholder="Search category..." />\n                    <CommandList>\n                      <CommandEmpty>No category found.</CommandEmpty>\n                      <CommandGroup>\n                        {categoryOptions?.map((option) => (\n                          <CommandItem\n                            key={option.value}\n                            value={option.label}\n                            onSelect={() => {\n                              form.setValue(\n                                "category.id",\n                                option.value as number,\n                              );\n                            }}\n                          >\n                            <Check\n                              className={cn(\n                                "mr-2 h-4 w-4",\n                                option.value === field.value\n                                  ? "opacity-100"\n                                  : "opacity-0",\n                              )}\n                            />\n                            {option.label}\n                          </CommandItem>\n                        ))}\n                      </CommandGroup>\n                    </CommandList>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        {/* highlight-end */}\n      </form>\n    </Form>\n  );\n}\n'))),(0,o.yg)("h2",{id:"advanced-validation-patterns"},"Advanced Validation Patterns"),(0,o.yg)(p,{id:"advanced-validation-patterns",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"These patterns show common validation scenarios. For comprehensive validation options and advanced features, see the ",(0,o.yg)("a",{parentName:"p",href:"https://zod.dev/"},"Zod documentation"),".")),(0,o.yg)("h3",{id:"cross-field-validation"},"Cross-field Validation"),(0,o.yg)(p,{id:"cross-field-validation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},'const userSchema = z\n  .object({\n    email: z.string().email("Please enter a valid email"),\n    password: z.string().min(8, "Password must be at least 8 characters"),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: "Passwords don\'t match",\n    path: ["confirmPassword"], // Error shows on confirmPassword field\n  });\n'))),(0,o.yg)("h3",{id:"conditional-validation"},"Conditional Validation"),(0,o.yg)(p,{id:"conditional-validation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},'const productSchema = z\n  .object({\n    type: z.enum(["physical", "digital"]),\n    weight: z.number().optional(),\n    downloadUrl: z.string().url().optional(),\n  })\n  .refine(\n    (data) => {\n      if (data.type === "physical") return data.weight && data.weight > 0;\n      return true;\n    },\n    {\n      message: "Weight is required for physical products",\n      path: ["weight"],\n    },\n  )\n  .refine(\n    (data) => {\n      if (data.type === "digital") return data.downloadUrl;\n      return true;\n    },\n    {\n      message: "Download URL is required for digital products",\n      path: ["downloadUrl"],\n    },\n  );\n'))))}h.isMDXComponent=!0}}]);