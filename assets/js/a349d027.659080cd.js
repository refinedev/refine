"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[84367],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),g=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=g(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var g=2;g<i;g++)o[g]=n[g];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},82021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>g,toc:()=>d});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Introduction to HTMX",description:"We will explore what HTMX is and its capabilities.",slug:"what-is-htmx",authors:"peter_osah",tags:["dev-tools"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-10-26-htmx/social-3.png",hide_table_of_contents:!1},l=void 0,g={permalink:"/blog/what-is-htmx",source:"@site/blog/2024-09-06-htmx.md",title:"Introduction to HTMX",description:"We will explore what HTMX is and its capabilities.",date:"2024-09-06T00:00:00.000Z",formattedDate:"September 6, 2024",tags:[{label:"dev-tools",permalink:"/blog/tags/dev-tools"}],readingTime:20.24,hasTruncateMarker:!1,authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],frontMatter:{title:"Introduction to HTMX",description:"We will explore what HTMX is and its capabilities.",slug:"what-is-htmx",authors:"peter_osah",tags:["dev-tools"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-10-26-htmx/social-3.png",hide_table_of_contents:!1},prevItem:{title:"Error Boundaries in React -  Handling Errors Gracefully",permalink:"/blog/react-error-boundaries"},nextItem:{title:"Introduction to React Table - TanStack Table Adapter for React",permalink:"/blog/tanstack-react-table"},relatedPosts:[{title:"How to Change Node Version",description:"A comprehensive guide on how to change the node version.",permalink:"/blog/change-node-version",formattedDate:"March 27, 2024",authors:[{name:"Muhammad Khabbab",title:"Project Manager",imageURL:"/img/generic-profile.png",key:"muhammad_khabbab"}],readingTime:10.11,date:"2024-03-27T00:00:00.000Z"},{title:"Why you should prefer using pnpm over npm and yarn?",description:"The advantages of pnpm and comparison guide.",permalink:"/blog/pnpm-vs-npm-and-yarn",formattedDate:"July 2, 2024",authors:[{name:"Muhammad Khabbab",title:"Project Manager",imageURL:"/img/generic-profile.png",key:"muhammad_khabbab"}],readingTime:11.295,date:"2024-07-02T00:00:00.000Z"},{title:"Kubectl Restart Pod - Restarting Pods in Kubernetes",description:"We'll discuss the importance of restarting pods in Kubernetes, the different methods to do so, and the best practices to follow.",permalink:"/blog/kubectl-restart-pod",formattedDate:"October 22, 2023",authors:[{name:"Muhammad Khabbab",title:"Project Manager",imageURL:"/img/generic-profile.png",key:"muhammad_khabbab"}],readingTime:9.14,date:"2023-10-22T00:00:00.000Z"}],authorPosts:[{title:"How do you wrap text content in CSS?",description:"We'll look at the CSS features that allow us to wrap overflowing text in containers.",permalink:"/blog/css-text-wrap",formattedDate:"March 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:7.6,date:"2024-03-05T00:00:00.000Z"},{title:"Building a React Admin Dashboard with Refine",description:"We will be building a Complete React CRUD application using Refine and Airtable, a famous backend service to illustrate how you can power your applications with refine.",permalink:"/blog/building-react-admin-dashboard",formattedDate:"April 6, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:37.59,date:"2023-04-06T00:00:00.000Z"},{title:"React Design Patterns",description:"We'll explore React design patterns and examine how they might improve the development of React applications.",permalink:"/blog/react-design-patterns",formattedDate:"September 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:14.98,date:"2024-09-05T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installing HTMX",id:"installing-htmx",level:2},{value:"Ajax Requests with HTMX",id:"ajax-requests-with-htmx",level:2},{value:"Use case",id:"use-case",level:4},{value:"Trigger Request",id:"trigger-request",level:2},{value:"Trigger Modifiers",id:"trigger-modifiers",level:2},{value:"Trigger Filters",id:"trigger-filters",level:2},{value:"Polling",id:"polling",level:2},{value:"Load Polling",id:"load-polling",level:2},{value:"Request Indicators",id:"request-indicators",level:2},{value:"Targets",id:"targets",level:2},{value:"Swapping",id:"swapping",level:2},{value:"Synchronization",id:"synchronization",level:2},{value:"CSS Transitions",id:"css-transitions",level:2},{value:"Out of Band Swaps",id:"out-of-band-swaps",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Confirming Requests",id:"confirming-requests",level:2},{value:"Web Sockets &amp; SSE",id:"web-sockets--sse",level:2},{value:"State Management Using HTMX",id:"state-management-using-htmx",level:2},{value:"1. <strong>Server-Driven State</strong>",id:"1-server-driven-state",level:3},{value:"2. <strong>Client-Side State Management Not Possible</strong>",id:"2-client-side-state-management-not-possible",level:3},{value:"3. <strong>Forms and Inputs Handling</strong>",id:"3-forms-and-inputs-handling",level:3},{value:"4. <strong>Persistence Across Requests</strong>",id:"4-persistence-across-requests",level:3},{value:"5. <strong>Dealing with Complex State</strong>",id:"5-dealing-with-complex-state",level:3},{value:"Animations with HTMX",id:"animations-with-htmx",level:2},{value:"Extensions in HTMX",id:"extensions-in-htmx",level:2},{value:"Logging and events in HTMX",id:"logging-and-events-in-htmx",level:2},{value:"Events",id:"events",level:3},{value:"Logging",id:"logging",level:2},{value:"Error Handling in HTMX",id:"error-handling-in-htmx",level:2},{value:"1. <strong>Simple Error Handling</strong>",id:"1-simple-error-handling",level:3},{value:"2. <strong>Presenting Error Messages to Users</strong>",id:"2-presenting-error-messages-to-users",level:3},{value:"3. <strong>Handling Form Validation Errors</strong>",id:"3-handling-form-validation-errors",level:3},{value:"4. <strong>Graceful Fallback for Non-HTMX Browsers</strong>",id:"4-graceful-fallback-for-non-htmx-browsers",level:3},{value:"5. <strong>Request-Specific Error Handling</strong>",id:"5-request-specific-error-handling",level:3},{value:"6. <strong>Handling Different HTTP Error Codes</strong>",id:"6-handling-different-http-error-codes",level:3},{value:"7. <strong>Programmatically Aborting Requests</strong>",id:"7-programmatically-aborting-requests",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:d},h="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(h,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on August 21, 2024, to add sections on State Management with HTMX and Error Handling with HTMX.")),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"In this article, we will explore what HTMX is and its capabilities."),(0,a.yg)("p",null,"HTMX is a small (14k min. gzipped), dependency-free javascript library that can create cutting-edge user interfaces with the ease and power of hypertext (markup).\nIt provides access to AJAX, CSS Transitions, WebSockets, and Server Sent Events directly in HTML using attributes. This has become a game-changer for developers as it enables them to achieve interactivity (that JavaScript gives) from the markup alone."),(0,a.yg)("p",null,"Steps to follow in this article:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#validation-with-htmx"},"Validation with HTMX"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#animations-with-htmx"},"Animations with HTMX")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#extensions-in-htmx"},"Extensions in HTMX")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#logging-and-events-in-htmx"},"Logging and events in HTMX"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#events"},"Events")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#logging"},"Logging"))))),(0,a.yg)("h2",{id:"installing-htmx"},"Installing HTMX"),(0,a.yg)("p",null,"You can install HTMX using three methods:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Through A CDN"),": You can load HTMX to your website/application by including the CDN at the head of your HTML file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<script\n  src="https://unpkg.com/htmx.org@1.9.6"\n  integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni"\n  crossorigin="anonymous"\n><\/script>\n')),(0,a.yg)("p",null,"N/B: While this is possible,it is not advisable to use CDNs in production environments."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"You can download a copy of the HTMX source file intoyour website/application")),(0,a.yg)("p",null,"Download ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx.min.js")," from ",(0,a.yg)("a",{parentName:"p",href:"https://unpkg.com/htmx.org/dist/htmx.min.js"},"unpkg.com"),", place it in the proper directory in your project, then include it with a script> tag as needed:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<script src="/path/to/htmx.min.js"><\/script>\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Installing through npm"),": you can install HTMX through npm using the below command"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install htmx.org\n")),(0,a.yg)("p",null,"After installing, you'll need to use the proper tooling to utilize ",(0,a.yg)("inlineCode",{parentName:"p"},"node_modules/htmx.org/dist/htmx.js")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"node_modules/htmx.org/dist/htmx.min.js)"),".\nFor instance, you may package HTMX with certain extensions and project-specific code."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Setting up HTMX in Webpack"),": If you are using webpack to manage your javascript, firstly, Install htmx via your package manager (",(0,a.yg)("strong",{parentName:"p"},"npm"),", ",(0,a.yg)("strong",{parentName:"p"},"yarn"),", ",(0,a.yg)("strong",{parentName:"p"},"pnpm"),") and then add the import to your ",(0,a.yg)("inlineCode",{parentName:"p"},"index.js")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import "htmx.org";\n')),(0,a.yg)("p",null,"If you want to use the global htmx variable, you can inject it into the window scope as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create a unique JS file."),(0,a.yg)("li",{parentName:"ul"},"Import this file into your ",(0,a.yg)("inlineCode",{parentName:"li"},"index.js")," file.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import "path/to/my_custom.js";\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Then add the code below to the file")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'window.htmx = require("htmx.org");\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Finally, rebuild your application bundle(to reflect the changes)")),(0,a.yg)("h2",{id:"ajax-requests-with-htmx"},"Ajax Requests with HTMX"),(0,a.yg)("p",null,"HTMX provides custom attributes that allow you to perform AJAX requests directly from the HTML:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Attribute"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"hx-post"),(0,a.yg)("td",{parentName:"tr",align:null},"fires a post request to a given url")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"hx-get"),(0,a.yg)("td",{parentName:"tr",align:null},"fires a get request request to a given url")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"hx-put"),(0,a.yg)("td",{parentName:"tr",align:null},"fires a put request to a given url")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"hx-patch"),(0,a.yg)("td",{parentName:"tr",align:null},"fires a patch request to a given url")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"hx-delete"),(0,a.yg)("td",{parentName:"tr",align:null},"fires a delete request to a given url")))),(0,a.yg)("h4",{id:"use-case"},"Use case"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-post="/messages">Put To Messages</div>\n')),(0,a.yg)("p",null,"from the code above the ",(0,a.yg)("inlineCode",{parentName:"p"},"hx-post")," attribute triggers a post api call to the url ",(0,a.yg)("inlineCode",{parentName:"p"},'"/messages"')),(0,a.yg)("h2",{id:"trigger-request"},"Trigger Request"),(0,a.yg)("p",null,"In HTMX, an element's natural event initiates AJAX requests. For instance, the ",(0,a.yg)("strong",{parentName:"p"},"onchange")," event triggers the ",(0,a.yg)("inlineCode",{parentName:"p"},"input"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"select"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"textarea"),"; the ",(0,a.yg)("strong",{parentName:"p"},"onsubmit")," event triggers the ",(0,a.yg)("inlineCode",{parentName:"p"},"form"),"; and the ",(0,a.yg)("strong",{parentName:"p"},"onclick")," event triggers everything else."),(0,a.yg)("p",null,"However, HTMX offers a unique ",(0,a.yg)("strong",{parentName:"p"},"hx-trigger")," attribute for situations when you want to change the event that initiates the request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-post="http://localhost:3000/submit" hx-trigger="mouseenter">\n  Submit\n</div>\n')),(0,a.yg)("p",null,"In the code above, only if the user's mouse hovers above the div will the GET request be made to the specified URL."),(0,a.yg)("h2",{id:"trigger-modifiers"},"Trigger Modifiers"),(0,a.yg)("p",null,"A trigger's behavior can also be altered by a few other modifications. Use the once modifier for the trigger, for instance, if you want a request to occur only once:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-post="/mouse_entered" hx-trigger="mouseenter once">\n  Submit\n</div>\n')),(0,a.yg)("p",null,"Other trigger modifiers you can use are:\n",(0,a.yg)("strong",{parentName:"p"},"changed")," - Only send a request if the element's value has changed"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"delay:",(0,a.yg)("inlineCode",{parentName:"strong"},"<time interval>"))," - It specifies a delay period before making the request. The countdown is reset if the event occurs again."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"throttle:",(0,a.yg)("inlineCode",{parentName:"strong"},"<interval time>"))," - it specifies a delay time before making the request,. In contrast to delay, if a new event happens before the time limit is reached, the event is deleted, and the request is triggered at the end of the time period."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"from:",(0,a.yg)("inlineCode",{parentName:"strong"},"<CSS Selector>")),"- listen to the event of a different element."),(0,a.yg)("p",null,"to view more modifiers that HTMX supports, visit ",(0,a.yg)("a",{parentName:"p",href:"https://htmx.org/docs/#trigger-modifiers"},"here")),(0,a.yg)("h2",{id:"trigger-filters"},"Trigger Filters"),(0,a.yg)("p",null,"These are applied by surrounding a javascript expression in square brackets after the event name. If the expression evaluates to true, the event will be triggered; otherwise, it will not."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-get="/clicked" hx-trigger="click[ctrlKey]">\n  Click the force\n</div>\n')),(0,a.yg)("p",null,"htmx includes a few special events that can be used with ",(0,a.yg)("strong",{parentName:"p"},"hx-trigger"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"load")," - fires once when the element is loaded for the first time."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"revealed")," - fires when an element first scrolls into the viewport"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"intersect")," - fires when an element first intersects the viewport. This allows for two additional options:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"root:",(0,a.yg)("inlineCode",{parentName:"strong"},"<selector>"))," - a root element CSS selector for intersection"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"threshold:",(0,a.yg)("inlineCode",{parentName:"strong"},"<float>"))," - a floating point number between 0.0 and 1.0 indicating the amount of intersection on which the event should be triggered.")))),(0,a.yg)("p",null,"If you have a more advanced use case, you may also utilize custom events to trigger requests."),(0,a.yg)("h2",{id:"polling"},"Polling"),(0,a.yg)("p",null,"you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"every")," syntax with a timeframe (in seconds) with the ",(0,a.yg)("strong",{parentName:"p"},"hx-trigger")," property to make an element poll a specific URL:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-get="/get-star-wars-data" hx-trigger="every 2s"></div>\n')),(0,a.yg)("h2",{id:"load-polling"},"Load Polling"),(0,a.yg)("p",null,'"Load polling" is an additional method for doing polling in HTMLX. It involves an element specifying a load trigger and a delay, and then replacing itself with the response:'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div\n  hx-get="/get-star-wars-data"\n  hx-trigger="load delay:1s"\n  hx-swap="starWarsDataHTML"\n></div>\n')),(0,a.yg)("h2",{id:"request-indicators"},"Request Indicators"),(0,a.yg)("p",null,"Because the browser does not provide feedback when an AJAX request is made, it is often beneficial to notify the user that anything is happening. You may do this with HTMX by using the ",(0,a.yg)("strong",{parentName:"p"},"htmx-indicator")," class."),(0,a.yg)("p",null,"The opacity of any element with the ",(0,a.yg)("strong",{parentName:"p"},"htmx-indicator")," class is set to ",(0,a.yg)("strong",{parentName:"p"},"0")," by default, meaning that even though the element is present in the DOM, it is invisible."),(0,a.yg)("p",null,"A ",(0,a.yg)("strong",{parentName:"p"},"htmx-request")," class is added to an element when HTMX submits a request. When a child element with the ",(0,a.yg)("strong",{parentName:"p"},"htmx-indicator")," class on it is exposed to the ",(0,a.yg)("strong",{parentName:"p"},"htmx-request")," class, it will transition to an opacity of ",(0,a.yg)("strong",{parentName:"p"},"1"),", displaying the indicator."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<button hx-get="/click">\n    Click Me!\n    <img class="htmx-indicator" src="/spinner.gif">\n</button>\n')),(0,a.yg)("p",null,"Using the ",(0,a.yg)("strong",{parentName:"p"},"hx-indicator")," attribute and a CSS selector, you can add the ",(0,a.yg)("strong",{parentName:"p"},"htmx-request")," class to an alternative element if you wish:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div>\n  <button hx-get="/click" hx-indicator="#indicator">\n    Click the force!\n  </button>\n  <img id="indicator" class="htmx-indicator" src="/spinner.gif" />\n</div>\n')),(0,a.yg)("h2",{id:"targets"},"Targets"),(0,a.yg)("p",null,"You can load the response into an element other than the one that initiated the request using the ",(0,a.yg)("strong",{parentName:"p"},"hx-target")," attribute which accepts a CSS selector(a div, class, etc)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<input type="text" name="star-wars-input"\n    hx-get="/star-wars-characters"\n    hx-trigger="keyup delay:500ms changed"\n    hx-target="#search-results"\n    placeholder="Search..."\n>\n<div id="search-results"></div>\n')),(0,a.yg)("p",null,"In the example above, the ",(0,a.yg)("strong",{parentName:"p"},"hx-target")," attribute targets the ",(0,a.yg)("inlineCode",{parentName:"p"},"#search-result")," id and populate request values to the div containing the id when the request is successful."),(0,a.yg)("h2",{id:"swapping"},"Swapping"),(0,a.yg)("p",null,"You can swap HTML contents returned to the DOM in HTMX. The target element's ",(0,a.yg)("inlineCode",{parentName:"p"},"innerHTML")," is automatically replaced with the content. This can be changed by applying any of the following values to the ",(0,a.yg)("strong",{parentName:"p"},"hx-swap "),"attribute:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"innerHTML"),(0,a.yg)("td",{parentName:"tr",align:null},"the content is inserted inside the target element by default.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"outerHTML"),(0,a.yg)("td",{parentName:"tr",align:null},"the returning content completely replaces the target element.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"afterbegin"),(0,a.yg)("td",{parentName:"tr",align:null},"content is prepended before the target's first child")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"beforebegin"),(0,a.yg)("td",{parentName:"tr",align:null},"prepends the content of the target's parent element before the target.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"beforeend"),(0,a.yg)("td",{parentName:"tr",align:null},"adds the content after the target's final child.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"afterend"),(0,a.yg)("td",{parentName:"tr",align:null},"adds the content to the targets parent element after the target")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"delete"),(0,a.yg)("td",{parentName:"tr",align:null},"removes the target element irrespective of the response")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"none"),(0,a.yg)("td",{parentName:"tr",align:null},"does not include the response's content")))),(0,a.yg)("p",null,"an example of ",(0,a.yg)("strong",{parentName:"p"},"hx-swap")," in action"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-get="/example" hx-swap="afterend">\n  Get Some HTML & Append It\n</div>\n')),(0,a.yg)("p",null,"In the code above, the ",(0,a.yg)("inlineCode",{parentName:"p"},"div")," will make a request and append the returned contents behind the ",(0,a.yg)("inlineCode",{parentName:"p"},"div"),"."),(0,a.yg)("h2",{id:"synchronization"},"Synchronization"),(0,a.yg)("p",null,"When you make requests in two elements and you want one of them to take priority over the other or wait until the other element's request is fulfilled, HTMX has a ",(0,a.yg)("strong",{parentName:"p"},"hx-sync")," feature that can be helpful."),(0,a.yg)("p",null,"For example, let us paint a scenario of a race situation between a form submission and a validation request for a specific input:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<form hx-post="/submit-character">\n    <input id="title" name="title" type="text"\n        hx-post="/validate-character"\n        hx-trigger="change"\n    >\n    <button type="submit">Submit</button>\n</form>\n')),(0,a.yg)("p",null,"When the input is completed and the form is instantly submitted, two concurrent requests are sent to ",(0,a.yg)("inlineCode",{parentName:"p"},"/validate-character")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"/submit-character")," without the use of ",(0,a.yg)("strong",{parentName:"p"},"hx-sync"),"."),(0,a.yg)("p",null,"When ",(0,a.yg)("strong",{parentName:"p"},'hx-sync="closest form:abort"')," is applied to an input, the form will be watched for requests and the input request will be aborted if a form request is found or begins while the input request is being processed. This automatically solves the synchronization constraint."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<form hx-post="/submit-character">\n    <input id="title" name="title" type="text"\n        hx-post="/validate-character"\n        hx-trigger="change"\n        hx-sync="closest form:abort"\n    >\n    <button type="submit">Submit</button>\n</form>\n')),(0,a.yg)("p",null,"Additionally, htmx offers a programmatic method for cancelling requests: To stop any in-flight requests, you can send an element the ",(0,a.yg)("strong",{parentName:"p"},"htmx:abort")," event into a ",(0,a.yg)("strong",{parentName:"p"},"htmx.trigger")," function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<button id="request-button" hx-post="/submit-character">\n    Submit Character\n</button>\n<button onclick="htmx.trigger(\'#request-button\', \'htmx:abort\')">\n    Cancel Submission\n</button>\n')),(0,a.yg)("h2",{id:"css-transitions"},"CSS Transitions"),(0,a.yg)("p",null,"HTMX lets you perform CSS Transitions without the need for javascript. we will illustrate this with an example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div id="div1">The Empire</div>\n')),(0,a.yg)("p",null,"We then make an ajax request and replace the content with the content below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div id="div1" class="red">\n  The Republic\n</div>\n')),(0,a.yg)("p",null,"From the code above, a new class ",(0,a.yg)("inlineCode",{parentName:"p"},"red")," has been added to the new content. We can create a CSS transition from the previous state(without the class ",(0,a.yg)("inlineCode",{parentName:"p"},"red"),") to the current one (with the class ",(0,a.yg)("inlineCode",{parentName:"p"},"red"),") in this scenario:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-css"},".red {\n  color: red;\n  transition: all ease-in 1s;\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"How HTMX handles transitions under the hood"),":\nBefore new content is added to a page, elements that match the ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),' attribute of the current content are found. This happens when new content is received from a server. Before the swap takes place, the properties of the old content are replicated onto the new element if a match is found for it in the updated content. After that, the new content is replaced, but the old attribute values remain. The new attribute values are then switched in following a "',(0,a.yg)("strong",{parentName:"p"},"settle"),'" time (20 ms by default).'),(0,a.yg)("h2",{id:"out-of-band-swaps"},"Out of Band Swaps"),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"hx-swap-oob")," attribute in the response html can be used to swap content from a response directly into the DOM using the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," attribute:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div id="message" hx-swap-oob="true">Dark Sidious</div>\nAnakin Skywalker\n')),(0,a.yg)("p",null,"from the code above, The extra content would be swapped into the target in the typical way, but ",(0,a.yg)("inlineCode",{parentName:"p"},"div#message")," would be swapped straight into the corresponding DOM element in this response."),(0,a.yg)("h2",{id:"parameters"},"Parameters"),(0,a.yg)("p",null,"You can filter the arguments that will be submitted with an AJAX call using the ",(0,a.yg)("strong",{parentName:"p"},"hx-params")," attribute."),(0,a.yg)("p",null,"These are the possible values for this attribute:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},'"',"*",'"- Include every parameter by default')),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"none")," - Do not include")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"<param-list>"))," and do not include any parameters. All except the parameter names list")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"<param-list>")),", which should be comma-separated Provide a list of all the parameter names, separated by commas."))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-get="/get-starwars-characters" hx-params="*">\n  Luke Skywalker\n</div>\n')),(0,a.yg)("p",null,"In the example above, All the parameters that a ",(0,a.yg)("strong",{parentName:"p"},"POST")," would contain are contained in this div, however as is customary with a ",(0,a.yg)("strong",{parentName:"p"},"GET"),", they will be URL encoded and included in the URL."),(0,a.yg)("h2",{id:"confirming-requests"},"Confirming Requests"),(0,a.yg)("p",null,"HTMX provides the ",(0,a.yg)("strong",{parentName:"p"},"hx-confirm attribute"),", which enables you to confirm an action using a straightforward javascript dialogue:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<button\n  hx-delete="/delete-character"\n  hx-confirm="Are you sure you wish to delete Obiwan Kenobi"\n>\n  Delete Obiwan Kenobi\n</button>\n')),(0,a.yg)("h2",{id:"web-sockets--sse"},"Web Sockets & SSE"),(0,a.yg)("p",null,"HTMX currently has experimental supports for WebSockets and Server Sent Events. However, if you want to establish a WebSocket connection, you can use the ",(0,a.yg)("strong",{parentName:"p"},"hx-ws attribute")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<div hx-ws="connect:wss:/darth-chatroom">\n    <div id="chat_room">\n        ...\n    </div>\n    <form hx-ws="send:submit">\n        <input name="chat_message">\n    </form>\n</div>\n')),(0,a.yg)("p",null,"To send events to browsers using SSE(Server sent Events), add a connect ",(0,a.yg)("inlineCode",{parentName:"p"},"<url>")," declaration to a parent element and add the ",(0,a.yg)("strong",{parentName:"p"},"hx-sse")," attribute with the URL."),(0,a.yg)("p",null,"After which, you will use the ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},'hx-trigger="sse:<event_name>'))," attribute to define elements that are this element's descendants and are activated by server-sent events. grammar"),(0,a.yg)("p",null,"A sample is shown below"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<body hx-sse="connect:/darth-events">\n  <div hx-trigger="sse:new_news" hx-get="/news"></div>\n</body>\n')),(0,a.yg)("h1",{id:"history-support"},"History Support"),(0,a.yg)("p",null,"With the ",(0,a.yg)("strong",{parentName:"p"},"hx-push-url")," attribute on an element you can push a request URL into the browser's navigation bar and add the page's current state to the history:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<a hx-get="/star-wars-characters" hx-push-url="true">\n  Blog\n</a>\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Principle on how the hx-push-url works"),":\nBefore making a request to ",(0,a.yg)("inlineCode",{parentName:"p"},"/star-wars-characters"),", HTMX will take a snapshot of the current document and store it when a user clicks on this link. After that, a new location is added to the history stack and the swap is completed."),(0,a.yg)("p",null,'HTMX simulates "going back" to the prior state when a user presses the back button by retrieving the old content from storage and swapping it back into the target. HTMX will send an ajax call to the specified URL with the header ',(0,a.yg)("inlineCode",{parentName:"p"},"HX-History-Restore-call")," set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," if the location cannot be located in the cache, and it will expect back the HTML required for the full page. Alternatively, it will force a hard browser refresh if the ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx.config.refreshOnHistoryMiss")," config setting is set to true."),(0,a.yg)("h1",{id:"validation-with-htmx"},"Validation with HTMX"),(0,a.yg)("p",null,"Because HTMX works with the HTML5 Validation API, an invalid validatable input will prevent a form request from being made. This applies to both WebSocket sends and AJAX queries."),(0,a.yg)("p",null,"Events related to validation in HTMX are:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"htmx:validation:validate")," - called before an elements checkValidity() method is called. May be used to add in custom validation logic"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"htmx:validation:failed")," - called when checkValidity() returns false, indicating an invalid input"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"htmx:validation:halted")," - called when a request is not issued due to validation errors. Specific errors may be found in the event.detail.errors object"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<form hx-post=\"/create-characters\">\n    <input _=\"on htmx:validation:validate\n                if my.value != 'foo'\n                    call me.setCustomValidity('Please enter the value foo')\n                else\n                    call me.setCustomValidity('')\"\n        name=\"example\"\n    >\n</form>\n")),(0,a.yg)("p",null,"The code above is an illustration of an input using the htmx:validation. In the code, ",(0,a.yg)("a",{parentName:"p",href:"https://hyperscript.org/"},"hyperscript")," was used to validate the event to ensure that an input have the value ",(0,a.yg)("inlineCode",{parentName:"p"},"foo"),"."),(0,a.yg)("h2",{id:"state-management-using-htmx"},"State Management Using HTMX"),(0,a.yg)("p",null,"I'll just share some thoughts on how the whole state management thing works in HTMX, and how this might compare with how you've been doing it with traditional JavaScript frameworks like React and Vue."),(0,a.yg)("h3",{id:"1-server-driven-state"},"1. ",(0,a.yg)("strong",{parentName:"h3"},"Server-Driven State")),(0,a.yg)("p",null,"HTMX is state management with a server-driven approach. It means most of the logic and state handling are done on the server rather than on the client. This contrasts sharply with JavaScript frameworks like React that handle state on the client side. Each and every action or interaction in HTMX (like form submissions and button clicks) creates a request that's made to a server. In response, it receives HTML back from the server to update the client-side DOM without any further effort on your part."),(0,a.yg)("p",null,"For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<div hx-get="/get-data" hx-trigger="click" hx-swap="outerHTML">\n  Click to Get Data\n</div>\n')),(0,a.yg)("p",null,"Here, the state is maintained on the server, and HTMX will update the DOM according to the response from the server to keep the client in sync with the latest state."),(0,a.yg)("h3",{id:"2-client-side-state-management-not-possible"},"2. ",(0,a.yg)("strong",{parentName:"h3"},"Client-Side State Management Not Possible")),(0,a.yg)("p",null,"Unlike React, where state is managed using ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useReducer"),", HTMX relies on very little client-side state. Then, if you are in a server-centric world\u2014which is quite good if your application is not one of these super-client interactive applications\u2014the state management is easier, and you do not have to have all these huge, heavy client-side tools managing the state for you."),(0,a.yg)("h3",{id:"3-forms-and-inputs-handling"},"3. ",(0,a.yg)("strong",{parentName:"h3"},"Forms and Inputs Handling")),(0,a.yg)("p",null,"For forms, HTMX supports even form submission in an asynchronous fashion, whereby even the state of the form can be handled by directly listening on the server's responses. This eliminates all the boilerplate of tracking client-side state: the server is responsible for validation, processing, and changing state and then updating the UI accordingly."),(0,a.yg)("p",null,"Sample:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<form hx-post="/submit-form" hx-swap="outerHTML">\n  <input name="username" type="text" />\n  <button type="submit">Submit</button>\n</form>\n')),(0,a.yg)("p",null,"In this case, the server is in control of the form submission, and it directly sends the server response back to the DOM, updating it accordingly."),(0,a.yg)("h3",{id:"4-persistence-across-requests"},"4. ",(0,a.yg)("strong",{parentName:"h3"},"Persistence Across Requests")),(0,a.yg)("p",null,"Because HTMX is essentially server-driven, it can be used most productively with server-side session state or database-driven state that can be preserved across requests. This makes handling things like persistent user sessions, authentication, and long-running operations easy without the need to store state in the browser or client."),(0,a.yg)("h3",{id:"5-dealing-with-complex-state"},"5. ",(0,a.yg)("strong",{parentName:"h3"},"Dealing with Complex State")),(0,a.yg)("p",null,"If your app needs more complex state management\u2014like multiple interacting components or maintaining state across different elements..."),(0,a.yg)("h2",{id:"animations-with-htmx"},"Animations with HTMX"),(0,a.yg)("p",null,"HTMX is intended to allow you to add seamless animations and transitions to your web page using only CSS and HTML. You can now utilize the new ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API"},"View Transitions API")," to create animations with HTMX.\nA basic example is the ",(0,a.yg)("strong",{parentName:"p"},"Fade Out On Swap")," animation.\nIf you want to fade out an element that will be removed when the request is finished, use the ",(0,a.yg)("strong",{parentName:"p"},"htmx-swapping")," class with some CSS and extend the swap phase to be long enough for your animation to finish. This can be accomplished as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-css"},'<style>\n.fade-me-out.htmx-swapping {\n  opacity: 0;\n  transition: opacity 1s ease-out;\n}\n</style>\n\n<button class="fade-me-out"\n        hx-delete="/fade_out_demo"\n        hx-swap="outerHTML swap:1s">\n        Fade Me Out\n</button>\n')),(0,a.yg)("p",null,"more examples of animations with HTMX are shown ",(0,a.yg)("a",{parentName:"p",href:"https://htmx.org/examples/animations/"},"here")),(0,a.yg)("h2",{id:"extensions-in-htmx"},"Extensions in HTMX"),(0,a.yg)("p",null,"HTMX includes an extension framework for creating and deploying extensions within htmx-based applications.\nWith the ",(0,a.yg)("strong",{parentName:"p"},"hx-ext")," attribute You can utilize extension libraries(after being specified in javascript)."),(0,a.yg)("p",null,"Using an extension entails two steps:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Include the extension definition, which will add it to the HTMX extension registry."),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("strong",{parentName:"li"},"hx-ext")," attribute is used to specify the extension.")),(0,a.yg)("p",null,"An example is shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'// Including the extension library\n<script src="/path/to/ext/debug.js" defer><\/script>\n\n// add the extension(debug) to the hx-ext attribute\n<button hx-post="/example" hx-ext="debug">\n    This Button Uses The Force\n</button>\n')),(0,a.yg)("p",null,"HTMX comes with a set of extensions that cover common developer needs. In each release, these extensions are tested against htmx. In order to view the list of included extensions in HTMX, visit ",(0,a.yg)("a",{parentName:"p",href:"https://htmx.org/extensions/#reference"},"here")),(0,a.yg)("h2",{id:"logging-and-events-in-htmx"},"Logging and events in HTMX"),(0,a.yg)("h3",{id:"events"},"Events"),(0,a.yg)("p",null,"HTMX includes a robust events mechanism that also serves as the logging system."),(0,a.yg)("p",null,"You can easily register to a HTMX event through:\n",(0,a.yg)("strong",{parentName:"p"},"The event listener approach"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'document.body.addEventListener("htmx:load", function (evt) {\n  myJavascriptLib.init(evt.detail.elt);\n});\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"HTMX helpers"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'htmx.on("htmx:load", function (evt) {\n  myJavascriptLib.init(evt.detail.elt);\n});\n')),(0,a.yg)("p",null,"in both cases, ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:load")," is the event."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:load")," event is fired whenever HTMX loads an element into the DOM, and it is functionally the same as the conventional load event."),(0,a.yg)("p",null,"You can also initialize a third-party library Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:load")," event:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"htmx.onLoad(function (target) {\n  myJavascriptLib.init(target);\n});\n")),(0,a.yg)("p",null,"You can also configure a request with events. An example of this is shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'document.body.addEventListener("htmx:configRequest", function (evt) {\n  evt.detail.parameters["auth_token"] = getAuthToken(); // add a new parameter into the request\n  evt.detail.headers["Authentication-Token"] = getAuthToken(); // add a new header into the request\n});\n')),(0,a.yg)("p",null,"In the code above, we used the ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:configRequest")," event to change an AJAX request before it is sent:"),(0,a.yg)("p",null,"You can adjust the swap behavior of HTMX by handling the ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:beforeSwap")," event."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'document.body.addEventListener("htmx:beforeSwap", function (evt) {\n  if (evt.detail.xhr.status === 404) {\n    // alert the user when a 404 occurs (maybe use a nicer mechanism than alert())\n    alert("Error: Could Not Find Resource");\n  } else if (evt.detail.xhr.status === 422) {\n    // allow 422 responses to swap as we are using this as a signal that\n    // a form was submitted with bad data and want to rerender with the\n    // errors\n    //\n    // set isError to false to avoid error logging in console\n    evt.detail.shouldSwap = true;\n    evt.detail.isError = false;\n  } else if (evt.detail.xhr.status === 418) {\n    // if the response code 418 (I\'m a teapot) is returned, retarget the\n    // content of the response to the element with the id `teapot`\n    evt.detail.shouldSwap = true;\n    evt.detail.target = htmx.find("#teapot");\n  }\n});\n')),(0,a.yg)("p",null,"In the code above, we handled a few ",(0,a.yg)("inlineCode",{parentName:"p"},"400"),"-level error response codes that would ordinarily not result in a swap in htmx."),(0,a.yg)("p",null,"In order to view more events that HTMX supports, visit ",(0,a.yg)("a",{parentName:"p",href:"https://htmx.org/reference/#events"},"here"),"."),(0,a.yg)("h2",{id:"logging"},"Logging"),(0,a.yg)("p",null,"HTMX provides a ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx.logger")," variable which when set, logs every event. An example on how to set the logger is shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"htmx.logger = function (elt, event, data) {\n  if (console) {\n    console.log(event, elt, data);\n  }\n};\n")),(0,a.yg)("h2",{id:"error-handling-in-htmx"},"Error Handling in HTMX"),(0,a.yg)("p",null,"I have a few thoughts about how error handling works in HTMX and how we could manage errors gracefully in our applications."),(0,a.yg)("h3",{id:"1-simple-error-handling"},"1. ",(0,a.yg)("strong",{parentName:"h3"},"Simple Error Handling")),(0,a.yg)("p",null,"HTMX has built-in events that can help us catch Ajax request errors or form submission errors in a custom manner. With an error like 404, 500, or a validation failure, we get an opportunity to intercept the error using the event ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:responseError"),"."),(0,a.yg)("p",null,"Here's how you would handle a trivial error event:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'document.body.addEventListener("htmx:responseError", function (evt) {\n  alert("An error occurred: " + evt.detail.xhr.status);\n});\n')),(0,a.yg)("p",null,"This event is triggered every time an AJAX request fails, and you can specify the response based on the HTTP status code, such as 404 or 500."),(0,a.yg)("h3",{id:"2-presenting-error-messages-to-users"},"2. ",(0,a.yg)("strong",{parentName:"h3"},"Presenting Error Messages to Users")),(0,a.yg)("p",null,"Provide friendly UI error messages on page failure, rather than a pure alert or default browser error, by listening for the event ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:beforeSwap")," and injecting error content into an area of the page you designate:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'document.body.addEventListener("htmx:beforeSwap", function (evt) {\n  if (evt.detail.xhr.status >= 400) {\n    evt.detail.shouldSwap = false;\n    document.getElementById("error-message").innerHTML =\n      "Something went wrong. Please try again.";\n  }\n});\n')),(0,a.yg)("p",null,"In this case, an error will prevent a default content swap and instead show the content of a custom error message in a ",(0,a.yg)("inlineCode",{parentName:"p"},"#error-message")," div."),(0,a.yg)("h3",{id:"3-handling-form-validation-errors"},"3. ",(0,a.yg)("strong",{parentName:"h3"},"Handling Form Validation Errors")),(0,a.yg)("p",null,"With HTMX, form validation is very easy to handle. For example, if the server returns an error about validation (e.g., 422 Unprocessable Entity), we can easily manage such a response and show validation messages without page reloading."),(0,a.yg)("p",null,"Here's an example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<form hx-post="/submit" hx-target="#form-errors" hx-swap="outerHTML">\n  <input name="username" type="text" />\n  <button type="submit">Submit</button>\n</form>\n\n<div id="form-errors"></div>\n')),(0,a.yg)("p",null,"If the server returns validation errors, those can be added to the response and will be shown inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"#form-errors")," without a page reload."),(0,a.yg)("h3",{id:"4-graceful-fallback-for-non-htmx-browsers"},"4. ",(0,a.yg)("strong",{parentName:"h3"},"Graceful Fallback for Non-HTMX Browsers")),(0,a.yg)("p",null,"One thing HTMX is really good at is being able to progressively enhance your application, but you need to handle errors gracefully for your non-HTMX users\u2014that is, those with JavaScript disabled. In that case, we return a full-page reload in case of necessity, so the classic form submission and error handling still work."),(0,a.yg)("h3",{id:"5-request-specific-error-handling"},"5. ",(0,a.yg)("strong",{parentName:"h3"},"Request-Specific Error Handling")),(0,a.yg)("p",null,"HTMX allows you to work with errors on a per-request basis by attaching the error handling logic to specific elements. For instance, if there is a button that triggers an AJAX request, you could listen for events like:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'document\n  .getElementById("my-button")\n  .addEventListener("htmx:responseError", function (evt) {\n    console.log("Error on this button request: " + evt.detail.xhr.status);\n  });\n')),(0,a.yg)("p",null,"This allows granular error handling, where it is easy to distinguish the error responses for different parts of an application."),(0,a.yg)("h3",{id:"6-handling-different-http-error-codes"},"6. ",(0,a.yg)("strong",{parentName:"h3"},"Handling Different HTTP Error Codes")),(0,a.yg)("p",null,"HTMX does have some flexibility in how you can treat various HTTP error codes. For example, you might want to treat a ",(0,a.yg)("inlineCode",{parentName:"p"},"404")," error differently from a ",(0,a.yg)("inlineCode",{parentName:"p"},"500")," error or handle a ",(0,a.yg)("inlineCode",{parentName:"p"},"403")," Forbidden by redirecting users to a login page:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'document.body.addEventListener("htmx:beforeSwap", function (evt) {\n  if (evt.detail.xhr.status === 404) {\n    alert("Page not found.");\n    evt.detail.shouldSwap = false;\n  } else if (evt.detail.xhr.status === 403) {\n    window.location.href = "/login";\n  }\n});\n')),(0,a.yg)("p",null,"For instance, we show an alert for ",(0,a.yg)("inlineCode",{parentName:"p"},"404")," errors, and in case a ",(0,a.yg)("inlineCode",{parentName:"p"},"403")," Forbidden error occurs, the user is redirected to the login page."),(0,a.yg)("h3",{id:"7-programmatically-aborting-requests"},"7. ",(0,a.yg)("strong",{parentName:"h3"},"Programmatically Aborting Requests")),(0,a.yg)("p",null,"Sometimes, you would want to programmatically cancel ongoing requests when a new one is triggered. HTMX provides the ",(0,a.yg)("inlineCode",{parentName:"p"},"htmx:abort")," event for this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html"},'<button id="submit-btn" hx-post="/submit" hx-target="#result">Submit</button>\n<button onclick="htmx.trigger(\'#submit-btn\', \'htmx:abort\')">\n  Cancel Request\n</button>\n')),(0,a.yg)("p",null,"This will cancel all requests made by the ",(0,a.yg)("inlineCode",{parentName:"p"},"Submit")," button."),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"In this article, we provided an overview of the HTMX library. we showed that you can achieve Ajax functionality without relying on JavaScript with HTMX, allowing you to construct dynamic applications at ease.\nHTMX may be more than just a new library. It may revolutionize the way we approach interactivity in web development."))}m.isMDXComponent=!0}}]);