"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3017],{58860:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},y="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),y=p(n),m=r,h=y["".concat(s,".").concat(m)]||y[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[y]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>y});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={title:"A Definitive guide on JavaScript every Method",description:"We expound with examples what the JavaScript every method is, how it works and when to use it.",slug:"javascript-every-method",authors:"abdullah_numan",tags:["javascript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-11-02-js-every/social-2.png",hide_table_of_contents:!1},s=void 0,p={permalink:"/blog/javascript-every-method",source:"@site/blog/2025-01-17-js-every.md",title:"A Definitive guide on JavaScript every Method",description:"We expound with examples what the JavaScript every method is, how it works and when to use it.",date:"2025-01-17T00:00:00.000Z",formattedDate:"January 17, 2025",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:14.22,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"A Definitive guide on JavaScript every Method",description:"We expound with examples what the JavaScript every method is, how it works and when to use it.",slug:"javascript-every-method",authors:"abdullah_numan",tags:["javascript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-11-02-js-every/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Bolt.new - AI Web App Builder",permalink:"/blog/bolt-new-ai"},nextItem:{title:"How to Use the TypeScript satisfies Operator",permalink:"/blog/typescript-satisfies-operator"},relatedPosts:[{title:"Unexpected token in JSON at position 0 error",description:"We will look into the various possible causes of this error message and suggest methods to rectify it.",permalink:"/blog/unexpected-token-in-json-at-position-0-error",formattedDate:"July 18, 2024",authors:[{name:"Chukwuka Reuben",title:"Frontend Developer",imageURL:"/img/generic-profile.png",key:"chukwuka_reuben"}],readingTime:10.66,date:"2024-07-18T00:00:00.000Z"},{title:"What is Vite? & Vite vs Webpack",description:"We will explore what is Vite.js and compare it to Webpack.",permalink:"/blog/what-is-vite-vs-webpack",formattedDate:"July 30, 2024",authors:[{name:"Victor Uma",title:"Software Developer",imageURL:"https://github.com/uma-victor1.png",key:"victor_uma"}],readingTime:11.55,date:"2024-07-30T00:00:00.000Z"},{title:"How to become a modern Node.js developer?",description:"The most essential skills to have as a modern Node.js developer",permalink:"/blog/node-js-developer-skills",formattedDate:"September 6, 2022",authors:[{name:"David Herbert",title:"Frontend Engineer",url:"https://github.com/DaveyHert",github:"https://github.com/DaveyHert",linkedin:"https://www.linkedin.com/in/daveyhert",imageURL:"https://github.com/DaveyHert.png",key:"david_herbert"}],readingTime:8.74,date:"2022-09-06T00:00:00.000Z"}],authorPosts:[{title:"TypeScript Mapped Types in Depth",description:"This post provides an in-depth guide on how to derive mapped types in TypeScript.",permalink:"/blog/typescript-mapped-types",formattedDate:"February 29, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:11.19,date:"2024-02-29T00:00:00.000Z"},{title:"React useReducer Hook - The Basics",description:"This post is about the useReducer() hook in React. We demonstrate with examples how to use it for action based state updates and discuss some safe practices.",permalink:"/blog/react-usereducer",formattedDate:"November 8, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:30.27,date:"2024-11-08T00:00:00.000Z"},{title:"Implementing Role Based Access Control",description:"We'll implement Role Based Access Control (RBAC)",permalink:"/blog/refine-pixels-6",formattedDate:"February 19, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:12.205,date:"2023-02-19T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},y=[{value:"Introduction",id:"introduction",level:2},{value:"What is the JavaScript <code>Array.prototype.every</code> Method ?",id:"what-is-the-javascript-arrayprototypeevery-method-",level:2},{value:"JS <code>Array.prototype.every</code>: Details of the Callback Function",id:"js-arrayprototypeevery-details-of-the-callback-function",level:3},{value:"How JavaScript Array <code>every</code> Method Works",id:"how-javascript-array-every-method-works",level:3},{value:"Comparison Table: JavaScript <code>every</code> vs <code>some</code>",id:"comparison-table-javascript-every-vs-some",level:2},{value:"When to Use the JS Array <code>every</code> Method",id:"when-to-use-the-js-array-every-method",level:2},{value:"JavaScript Array <code>every()</code> With <code>thisArg</code> Argument",id:"javascript-array-every-with-thisarg-argument",level:3},{value:"JavaScript Array <code>every(callback, thisArg)</code> Doesn&#39;t Work With Arrow Functions",id:"javascript-array-everycallback-thisarg-doesnt-work-with-arrow-functions",level:3},{value:"JavaScript Array <code>every(callback, thisArg)</code> Works With Non-Arrow Functions",id:"javascript-array-everycallback-thisarg-works-with-non-arrow-functions",level:3},{value:"JavaScript Array <code>every</code> Method: Modifying the Caller Array",id:"javascript-array-every-method-modifying-the-caller-array",level:3},{value:"Nuances of Using JS Array <code>every</code> Method",id:"nuances-of-using-js-array-every-method",level:2},{value:"The JS <code>Array.prototype.every</code>: Using with Sparse Arrays",id:"the-js-arrayprototypeevery-using-with-sparse-arrays",level:3},{value:"Using JavaScript <code>every</code> With Empty Arrays",id:"using-javascript-every-with-empty-arrays",level:3},{value:"Difference Between Some and Every in JavaScript?",id:"difference-between-some-and-every-in-javascript",level:2},{value:"When Should You Use the JavaScript every Method?",id:"when-should-you-use-the-javascript-every-method",level:2},{value:"Data Validation",id:"data-validation",level:3},{value:"Check Data Types",id:"check-data-types",level:3},{value:"Team Permissions",id:"team-permissions",level:3},{value:"FAQs About the JavaScript every Method",id:"faqs-about-the-javascript-every-method",level:2},{value:"1. What is the purpose of the every method in JavaScript?",id:"1-what-is-the-purpose-of-the-every-method-in-javascript",level:3},{value:"2. Does the every method work for empty arrays?",id:"2-does-the-every-method-work-for-empty-arrays",level:3},{value:"3. Can the every method modify the array?",id:"3-can-the-every-method-modify-the-array",level:3},{value:"4. What is the difference between every and some?",id:"4-what-is-the-difference-between-every-and-some",level:3},{value:"5. Does the every Method Work with Objects?",id:"5-does-the-every-method-work-with-objects",level:3},{value:"Summary",id:"summary",level:2}],c={toc:y},m="wrapper";function h(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(m,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},c,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},(0,a.yg)("strong",{parentName:"em"},"This article was last updated on January 17, 2025, to include best practices for using the JavaScript every method, a detailed table comparing every with some, and tips for avoiding common mistakes when working with sparse arrays, empty arrays, and callbacks involving thisArg."))),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"This article is about the Array ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," method in JavaScript. This is the third part of the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/javascript-slice/"},"JavaScript Iteration Methods Series"),"."),(0,a.yg)("p",null,"Refinedev JavaScript Iteration Methods Series is a tutorial series that publishes posts on iteration methods in JavaScript."),(0,a.yg)("p",null,"The JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"Array")," ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," method is an iteration method that tests whether every element in a collection satisfies a given condition passed via a callback function. It is used to verify if all items in an array fulfill some requirement, typically expressed in the form of a complex set of conditions."),(0,a.yg)("p",null,"In this post, we expound with examples what ",(0,a.yg)("inlineCode",{parentName:"p"},"Array.prototype.every")," is and how it works. We get to know what entails the callback function that is used to set the test logic and cover examples of using it with and without the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg"),". We also examine the impact of using arrow syntax for the callback on the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object. Later on, we investigate how to modify the caller array from inside with JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"every()"),". In the end, we explore how the JS ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," method works with sparse and empty arrays."),(0,a.yg)("p",null,"Steps we'll cover:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#what-is-the-javascript-arrayprototypeevery-method-"},"What is the JavaScript ",(0,a.yg)("inlineCode",{parentName:"a"},"Array.prototype.every")," Method ?"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#js-arrayprototypeevery-details-of-the-callback-function"},"JS ",(0,a.yg)("inlineCode",{parentName:"a"},"Array.prototype.every"),": Details of the Callback Function")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#how-javascript-array-every-method-works"},"How JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," Method Works")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#comparison-table-javascript-every-vs-some"},"Comparison Table: JavaScript ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," vs ",(0,a.yg)("inlineCode",{parentName:"a"},"some"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#when-to-use-the-js-array-every-method"},"When to Use the JS Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," Method"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#javascript-array-every-with-thisarg-argument"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every()")," With ",(0,a.yg)("inlineCode",{parentName:"a"},"thisArg")," Argument")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#javascript-array-everycallback-thisarg-doesnt-work-with-arrow-functions"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every(callback, thisArg)")," Doesn't Work With Arrow Functions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#javascript-array-everycallback-thisarg-works-with-non-arrow-functions"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every(callback, thisArg)")," Works With Non-Arrow Functions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#javascript-array-every-method-modifying-the-caller-array"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," Method: Modifying the Caller Array")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#nuances-of-using-js-array-every-method"},"Nuances of Using JS Array ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," Method"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#the-js-arrayprototypeevery-using-with-sparse-arrays"},"The JS ",(0,a.yg)("inlineCode",{parentName:"a"},"Array.prototype.every"),": Using with Sparse Arrays")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#using-javascript-every-with-empty-arrays"},"Using JavaScript ",(0,a.yg)("inlineCode",{parentName:"a"},"every")," With Empty Arrays")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#difference-between-some-and-every-in-javascript"},"Difference Between Some and Every in JavaScript?")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#when-should-you-use-the-javascript-every-method"},"When Should You Use the JavaScript every Method?"))),(0,a.yg)("h2",{id:"what-is-the-javascript-arrayprototypeevery-method-"},"What is the JavaScript ",(0,a.yg)("inlineCode",{parentName:"h2"},"Array.prototype.every")," Method ?"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"Array.prototype.every")," is a JavaScript iteration method that checks whether every element in an array satisfies a given condition. The method is called on an array of items, and the condition is checked with a callback function, ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn"),", and any necessary ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object passed to the execution context of the callback function."),(0,a.yg)("p",null,"The first argument, ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn"),", is mandatory, and the second argument, ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," is optional. So, possible call signatures of the JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," method are:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"// Method signature\n\nevery(callbackFn);\nevery(callbackFn, thisArg);\n")),(0,a.yg)("h3",{id:"js-arrayprototypeevery-details-of-the-callback-function"},"JS ",(0,a.yg)("inlineCode",{parentName:"h3"},"Array.prototype.every"),": Details of the Callback Function"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn()")," of ",(0,a.yg)("inlineCode",{parentName:"p"},"every")," takes three arguments. The first is the element being traversed to, ",(0,a.yg)("inlineCode",{parentName:"p"},"element"),", which is mandatory. The second argument is the current index, ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," and the third is ",(0,a.yg)("inlineCode",{parentName:"p"},"array"),", the array being iterated. Both the second and third arguments are optional:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"// Method signature\n\nevery(function(element){...});\nevery(function(element, index){...});\nevery(function(element, index, array){...});\n")),(0,a.yg)("h3",{id:"how-javascript-array-every-method-works"},"How JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"h3"},"every")," Method Works"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"JavaScript every")," traverses till the end of the array to test whether ",(0,a.yg)("strong",{parentName:"p"},"all")," elements satisfy the condition specified in the callback function,",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn"),". It attempts to execute ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn")," once for each item in the array. If it finds one that evaluates to a falsy value, it immediately returns with the Boolean ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),". Otherwise, it seeks to traverse to the end of the array and returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," if all are truthy:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nconst even = (element) => element % 2 === 0;\n\nconst areAllEven = numbers.every(even);\nconst areAllDoubledEven = numbersDoubled.every(even);\n\nconsole.log(areAllEven); // false\nconsole.log(areAllDoubledEven); // true\n")),(0,a.yg)("p",null,"In the chunk of code above, ",(0,a.yg)("inlineCode",{parentName:"p"},"even")," is our callback function, which we pass to ",(0,a.yg)("inlineCode",{parentName:"p"},"every()"),". Apparently, we have at least one odd number in our ",(0,a.yg)("inlineCode",{parentName:"p"},"numbers")," array and so not all elements pass the test. So, ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," returns ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"areAllEven"),". In contrast, all items in ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled")," are even, so we get ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," for ",(0,a.yg)("inlineCode",{parentName:"p"},"areAllDoubledEven"),"."),(0,a.yg)("h2",{id:"comparison-table-javascript-every-vs-some"},"Comparison Table: JavaScript ",(0,a.yg)("inlineCode",{parentName:"h2"},"every")," vs ",(0,a.yg)("inlineCode",{parentName:"h2"},"some")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Feature"),(0,a.yg)("th",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"th"},"every")," Method"),(0,a.yg)("th",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"th"},"some")," Method"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("strong",{parentName:"td"},"Purpose")),(0,a.yg)("td",{parentName:"tr",align:null},"Tests if ",(0,a.yg)("strong",{parentName:"td"},"all")," elements pass a condition"),(0,a.yg)("td",{parentName:"tr",align:null},"Tests if ",(0,a.yg)("strong",{parentName:"td"},"at least one")," element passes a condition")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("strong",{parentName:"td"},"Returns")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true")," if all elements pass the test"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true")," if any element passes the test")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("strong",{parentName:"td"},"Stops Checking")),(0,a.yg)("td",{parentName:"tr",align:null},"At the first failing element"),(0,a.yg)("td",{parentName:"tr",align:null},"At the first passing element")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("strong",{parentName:"td"},"Empty Arrays")),(0,a.yg)("td",{parentName:"tr",align:null},"Always returns ",(0,a.yg)("inlineCode",{parentName:"td"},"true")),(0,a.yg)("td",{parentName:"tr",align:null},"Always returns ",(0,a.yg)("inlineCode",{parentName:"td"},"false"))))),(0,a.yg)("p",null,"You can now directly copy and paste this table into your Markdown editor!"),(0,a.yg)("h2",{id:"when-to-use-the-js-array-every-method"},"When to Use the JS Array ",(0,a.yg)("inlineCode",{parentName:"h2"},"every")," Method"),(0,a.yg)("p",null,"The JS Array ",(0,a.yg)("inlineCode",{parentName:"p"},"every")," method can be used in a wide range of scenarios where we need to verify that all items, with no exception, satisfy the test specified in the callback function. In all cases, the first argument (",(0,a.yg)("inlineCode",{parentName:"p"},"element"),") has to be passed to the callback. The complexity of the test would determine whether to access the second (",(0,a.yg)("inlineCode",{parentName:"p"},"index"),"), third arguments (",(0,a.yg)("inlineCode",{parentName:"p"},"array"),"), or any additional argument via the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object."),(0,a.yg)("p",null,"We can use JS ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," in the following situations:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Simple linear conditionals: we can use JS ",(0,a.yg)("inlineCode",{parentName:"li"},"every()")," for testing elements with simple linear conditionals like the ",(0,a.yg)("inlineCode",{parentName:"li"},"even")," function above."),(0,a.yg)("li",{parentName:"ol"},"Multiple linear conditionals: JS Array ",(0,a.yg)("inlineCode",{parentName:"li"},"every()")," is more frequently used with complex tests that use multiple conditionals involving the ",(0,a.yg)("inlineCode",{parentName:"li"},"element")," and the ",(0,a.yg)("inlineCode",{parentName:"li"},"index"),"."),(0,a.yg)("li",{parentName:"ol"},"Complex conditionals with additional arguments: it is typical to use ",(0,a.yg)("inlineCode",{parentName:"li"},"Array.prototype.every")," with additional arguments passed to its execution context via ",(0,a.yg)("inlineCode",{parentName:"li"},"thisArg")," properties."),(0,a.yg)("li",{parentName:"ol"},"Conditionals involving nested objects: it is also common to use Array ",(0,a.yg)("inlineCode",{parentName:"li"},"every()")," with arrays of deeply nested objects.")),(0,a.yg)("h3",{id:"javascript-array-every-with-thisarg-argument"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"h3"},"every()")," With ",(0,a.yg)("inlineCode",{parentName:"h3"},"thisArg")," Argument"),(0,a.yg)("p",null,"We can pass in the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object to ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," and add it to the execution context of the callback function. Let's start doing that now by first making some modifications to our callback."),(0,a.yg)("p",null,"Instead of checking for an even number, let's say we want to generalize our callback function to check if the item is divisible by a given number. We would like our callback to be something like the below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function divisible(element, divisor) {\n  return element % divisor === 0;\n}\n")),(0,a.yg)("p",null,"However, we cannot pass ",(0,a.yg)("inlineCode",{parentName:"p"},"divisor")," as the second argument to ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),", as our callback accepts ",(0,a.yg)("inlineCode",{parentName:"p"},"index")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"array")," as the second and third arguments respectively. And it becomes overcrowded if we introduce a fourth with ",(0,a.yg)("inlineCode",{parentName:"p"},"divisor"),"."),(0,a.yg)("p",null,"We can get around this problem by passing ",(0,a.yg)("inlineCode",{parentName:"p"},"divisor")," as a property of the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object, the second argument to JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"every()"),". And then access the object with ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," from inside the callback:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nfunction divisible(element) {\n  return element % this?.divisor === 0;\n}\n\nconst areAllEven = numbers.every(divisible, { divisor: 2 });\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\n\nconsole.log(areAllEven); // false\nconsole.log(areAllDoubledEven); // true\n")),(0,a.yg)("p",null,"Here, we set the ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," object to ",(0,a.yg)("inlineCode",{parentName:"p"},"{ divisor: 2 }"),", which leads to checking whether the item is even or not."),(0,a.yg)("p",null,"We can try other divisor options, like checking if we have a number divisible by 3 or 7. Thanks to ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg"),", this became very easily reproducible:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const areAllDivisibleByThree = numbers.every(divisible, { divisor: 3 });\nconst areAllDivisibleBySeven = numbers.every(divisible, { divisor: 7 });\n\nconsole.log(areAllDivisibleByThree); // false\nconsole.log(areAllDivisibleBySeven); // false\n")),(0,a.yg)("h3",{id:"javascript-array-everycallback-thisarg-doesnt-work-with-arrow-functions"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"h3"},"every(callback, thisArg)")," Doesn't Work With Arrow Functions"),(0,a.yg)("p",null,"If we look back at the first example that involves the ",(0,a.yg)("inlineCode",{parentName:"p"},"even()")," callback, we defined it as an arrow function. And it worked."),(0,a.yg)("p",null,"We defined its extension, the ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()")," function with named declaration syntax. And it worked as well."),(0,a.yg)("p",null,"If we declare ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()")," as an arrow function, we run into problems:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nconst divisible = (element) => element % this?.divisor === 0;\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\nconst areAllDoubledDivisibleByThree = numbersDoubled.every(divisible, {\n  divisor: 3,\n});\nconst areAllDoubledDivisibleBySeven = numbersDoubled.every(divisible, {\n  divisor: 7,\n});\n\nconsole.log(areAllDoubledEven); // false\nconsole.log(areAllDoubledDivisibleByThree); // false\nconsole.log(areAllDoubledDivisibleBySeven); // false\n")),(0,a.yg)("p",null,"All returning ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),", although we know ",(0,a.yg)("inlineCode",{parentName:"p"},"areAllDoubledEven")," should be ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," and the other two ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("p",null,"If we investigate with a modified ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()")," function that logs ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," to the console, we see that ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," in strict mode:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"// strict mode\n\nconst numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nconst divisible = (element) => {\n  console.log(this);\n  return element % this?.divisor === 0;\n};\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\n\nconsole.log(areAllDoubledEven);\n// undefined\n// false\n")),(0,a.yg)("p",null,"Now, if we introduce a ",(0,a.yg)("inlineCode",{parentName:"p"},"this.divisor")," property to the lexical environment of ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),", we get its value logged to the console:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nthis.divisor = \"Hi\";\n\nconst divisible = (element) => {\n  console.log(this);\n  return element % this.divisor === 0;\n};\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\n\nconsole.log(areAllDoubledEven);\n// { divisor: 'Hi' }\n// false\n")),(0,a.yg)("p",null,"Here, clearly, we have ",(0,a.yg)("inlineCode",{parentName:"p"},"{ divisor: 'Hi' }")," coming from ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible"),"'s closure. It turns out, the problem is due to the binding of ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," to its lexical environment because of the arrow syntax. It was ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," before we introduced ",(0,a.yg)("inlineCode",{parentName:"p"},"this.divisor = 'Hi';"),". Now ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"{ divisor: 'Hi' }"),". In other words, ",(0,a.yg)("inlineCode",{parentName:"p"},"{ divisor: 2 "),"} is not being relayed to ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"this"),"."),(0,a.yg)("p",null,"So, ",(0,a.yg)("strong",{parentName:"p"},"JavaScript ",(0,a.yg)("inlineCode",{parentName:"strong"},"every()"))," with ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," does not work as expected with ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackFn")," defined with arrow syntax."),(0,a.yg)("h3",{id:"javascript-array-everycallback-thisarg-works-with-non-arrow-functions"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"h3"},"every(callback, thisArg)")," Works With Non-Arrow Functions"),(0,a.yg)("p",null,"But as we have seen before, it works with callbacks defined with named function declarations:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function divisible(element) {\n  return element % this?.divisor === 0;\n}\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\n\nconsole.log(areAllDoubledEven); // true\n")),(0,a.yg)("p",null,"It also works with anonymous function expressions:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const divisible = function (element) {\n  return element % this?.divisor === 0;\n};\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\n\nconsole.log(areAllDoubledEven); // true\n")),(0,a.yg)("h3",{id:"javascript-array-every-method-modifying-the-caller-array"},"JavaScript Array ",(0,a.yg)("inlineCode",{parentName:"h3"},"every")," Method: Modifying the Caller Array"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"Array.prototype.every")," sets the range of the items to be processed before the first invocation of the callback function. And if an item is changed after traversal, the change is disregarded by the callback function. That is, the callback function only respects the existing value of an item at the time it is visited."),(0,a.yg)("p",null,"We can witness this in a scenario where the caller array is mutated from inside ",(0,a.yg)("strong",{parentName:"p"},"JavaScript ",(0,a.yg)("inlineCode",{parentName:"strong"},"every()")),"."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"every()")," itself does not modify the caller array, but the caller is available to the callback function as its third argument, ",(0,a.yg)("inlineCode",{parentName:"p"},"array"),". This means we can deliberately mutate the caller when we need to from inside our callback, ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function divisible(element, index, array) {\n  array[0] = 7;\n  array[4] = 7;\n\n  console.log(array);\n\n  return element % this?.divisor === 0;\n}\n")),(0,a.yg)("p",null,"In this scenario, if an unvisited item is changed ahead of time, the callback function - here ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible")," - finds the new value when it visits the item and so the new value is processed. In contrast, it disregards changes to items that are already traversed:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, 6, 8, 10];\n\nconst divisible = function (element, index, array) {\n  array[0] = 7;\n  array[4] = 7;\n\n  console.log(array);\n\n  return element % this?.divisor === 0;\n};\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\nconsole.log(areAllDoubledEven);\nconsole.log(numbersDoubled);\n/*\n  [ 7, 4, 6, 8, 7 ]\n  [ 7, 4, 6, 8, 7 ]\n  [ 7, 4, 6, 8, 7 ]\n  [ 7, 4, 6, 8, 7 ]\n  [ 7, 4, 6, 8, 7 ]\n  false\n  [ 7, 4, 6, 8, 7 ]\n*/\n")),(0,a.yg)("p",null,"In the console log statements above, the ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled")," array is being logged five times due to the ",(0,a.yg)("inlineCode",{parentName:"p"},"console.log(array);")," statement we placed inside ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),"."),(0,a.yg)("p",null,"As we can see, ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled")," is being mutated twice in the first call to ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),". The first mutation happens when at ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled[0]"),", i.e. after being visited, which changes the value of itself to ",(0,a.yg)("inlineCode",{parentName:"p"},"7"),". So, even though ",(0,a.yg)("inlineCode",{parentName:"p"},"7")," is not divisible by the divisor ",(0,a.yg)("inlineCode",{parentName:"p"},"2"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," didn't immediately return ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," at index ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),". Instead, it returned ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," in the next instance when it visited the unvisited and mutated value of ",(0,a.yg)("inlineCode",{parentName:"p"},"7")," at ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled[4]"),"."),(0,a.yg)("p",null,"This shows that the callback function processes the value of an item as it finds it at traversal and disregards the changes made to it when and after it is at that index."),(0,a.yg)("h2",{id:"nuances-of-using-js-array-every-method"},"Nuances of Using JS Array ",(0,a.yg)("inlineCode",{parentName:"h2"},"every")," Method"),(0,a.yg)("h3",{id:"the-js-arrayprototypeevery-using-with-sparse-arrays"},"The JS ",(0,a.yg)("inlineCode",{parentName:"h3"},"Array.prototype.every"),": Using with Sparse Arrays"),(0,a.yg)("p",null,"Now, let's consider what happens when we have empty slots in the caller array."),(0,a.yg)("p",null,"We'll add a couple of empty items to ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDouble")," and remove the mutations from ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const numbers = [1, 2, 3, 4, 5];\nconst numbersDoubled = [2, 4, , 6, 8, , 10];\n\nconst divisible = function (element, index, array) {\n  console.log(array);\n  return element % this?.divisor === 0;\n};\n\nconst areAllDoubledEven = numbersDoubled.every(divisible, { divisor: 2 });\nconsole.log(areAllDoubledEven);\nconsole.log("Caller length: " + numbersDoubled.length);\n/*\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n  true\n  [ 2, 4, <1 empty item>, 6, 8, <1 empty item>, 10 ]\n*/\n')),(0,a.yg)("p",null,"As we can see, we have two empty slots and the length of the caller array is 7. However, the ",(0,a.yg)("inlineCode",{parentName:"p"},"numbersDoubled")," is logged 5 times, indicating 5 calls to ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()"),". This is because ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible()")," was not invoked for the empty items."),(0,a.yg)("h3",{id:"using-javascript-every-with-empty-arrays"},"Using JavaScript ",(0,a.yg)("inlineCode",{parentName:"h3"},"every")," With Empty Arrays"),(0,a.yg)("p",null,"If we call ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"divisible")," on an empty array, it returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const emptyArray = [];\n\nconst divisible = (element) => {\n  return element % this?.divisor === 0;\n};\n\nconst testEmptyArray = emptyArray.every(divisible, { divisor: 2 });\n\nconsole.log(testEmptyArray); // true\n")),(0,a.yg)("p",null,'This is so because "all items" in an empty array vacuously satisfy the condition that they are even or anything else. Supposedly.'),(0,a.yg)("h2",{id:"difference-between-some-and-every-in-javascript"},"Difference Between Some and Every in JavaScript?"),(0,a.yg)("p",null,"In JavaScript, ",(0,a.yg)("inlineCode",{parentName:"p"},"some()")," returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," if any array element meets a condition, while ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," checks if all elements do. Neither modifies the original array."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"some()"),":")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Checks if at least one element in an array meets a condition.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," if any element passes the test, otherwise ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Stops checking once it finds a passing element.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"JavaScript ",(0,a.yg)("inlineCode",{parentName:"p"},"every()"),":"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Checks if every element in an array meets a condition."),(0,a.yg)("li",{parentName:"ul"},"Returns ",(0,a.yg)("inlineCode",{parentName:"li"},"true")," only if all elements pass the test, otherwise ",(0,a.yg)("inlineCode",{parentName:"li"},"false"),"."),(0,a.yg)("li",{parentName:"ul"},"Stops checking once it finds a failing element.")))),(0,a.yg)("h2",{id:"when-should-you-use-the-javascript-every-method"},"When Should You Use the JavaScript every Method?"),(0,a.yg)("h3",{id:"data-validation"},"Data Validation"),(0,a.yg)("p",null,"Use it to check if all form fields are filled in:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const fields = ["email@example.com", "password123"];\nconst allFieldsFilled = fields.every((field) => field.trim() !== "");\nconsole.log(allFieldsFilled); // true if no empty fields\n')),(0,a.yg)("h3",{id:"check-data-types"},"Check Data Types"),(0,a.yg)("p",null,"Confirm that an array contains only numbers:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const data = [1, 2, 3];\nconst allNumbers = data.every((item) => typeof item === "number");\nconsole.log(allNumbers); // true\n')),(0,a.yg)("h3",{id:"team-permissions"},"Team Permissions"),(0,a.yg)("p",null,"Verify if all team members have admin roles:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const team = [{ role: "admin" }, { role: "admin" }];\nconst allAdmins = team.every((member) => member.role === "admin");\nconsole.log(allAdmins); // true\n')),(0,a.yg)("h2",{id:"faqs-about-the-javascript-every-method"},"FAQs About the JavaScript every Method"),(0,a.yg)("h3",{id:"1-what-is-the-purpose-of-the-every-method-in-javascript"},"1. What is the purpose of the every method in JavaScript?"),(0,a.yg)("p",null,"This checks whether all the elements in an array pass a test provided in a callback function. If all pass, it returns true; otherwise, false."),(0,a.yg)("h3",{id:"2-does-the-every-method-work-for-empty-arrays"},"2. Does the every method work for empty arrays?"),(0,a.yg)("p",null,"Yes, this always returns true for empty arrays since there are no elements that could fail the condition."),(0,a.yg)("h3",{id:"3-can-the-every-method-modify-the-array"},"3. Can the every method modify the array?"),(0,a.yg)("p",null,"No, the method itself doesn't change the array. However, the array can change inside the callback function."),(0,a.yg)("h3",{id:"4-what-is-the-difference-between-every-and-some"},"4. What is the difference between every and some?"),(0,a.yg)("p",null,"every checks if all elements meet the condition, while some checks if at least one element meets the condition."),(0,a.yg)("h3",{id:"5-does-the-every-method-work-with-objects"},"5. Does the every Method Work with Objects?"),(0,a.yg)("p",null,"Yes, but you would need to access the object properties in the callback function to test them."),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this article, we explored in depth the ",(0,a.yg)("strong",{parentName:"p"},"JavaScript every")," which helps us test whether all items in an array pass the test we implement in a callback function. We saw with examples that the callback function can take three arguments, and additional arguments can be bound to its execution context by setting its ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," value with a ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"every()")," as the second argument."),(0,a.yg)("p",null,"We also found out that if we use arrow syntax to declare the callback function, its lexical environment disrupts the binding of ",(0,a.yg)("inlineCode",{parentName:"p"},"thisArg")," argument to its ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," object. So, we should be using non-arrow functions to declare a callback that uses ",(0,a.yg)("inlineCode",{parentName:"p"},"this"),"."))}h.isMDXComponent=!0}}]);