"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[43659],{58860:(e,a,t)=>{t.d(a,{xA:()=>s,yg:()=>u});var r=t(37953);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),d=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},s=function(e){var a=d(e.components);return r.createElement(l.Provider,{value:a},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},y=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),g=d(t),y=n,u=g["".concat(l,".").concat(y)]||g[y]||m[y]||i;return t?r.createElement(u,o(o({ref:a},s),{},{components:t})):r.createElement(u,o({ref:a},s))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=y;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=e,p[g]="string"==typeof e?e:n,o[1]=p;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},18518:(e,a,t)=>{t.d(a,{Ay:()=>d});t(37953);var r=t(58860);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})),e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}const p={toc:[]},l="wrapper";function d(e){var{components:a}=e,t=o(e,["components"]);return(0,r.yg)(l,i(function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(a){n(e,a,t[a])}))}return e}({},p,t),{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Refine")," supports many data providers. To include them in your project, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"npm install [packageName]")," or you can select the preferred data provider with the ",(0,r.yg)("inlineCode",{parentName:"p"},"npm create refine-app@latest projectName")," during the project creation phase with CLI. This will allow you to easily use these data providers in your project."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/simple-rest"},"Simple REST API")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/graphql"},"GraphQL")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/nestjsx-crud"},"NestJS CRUD")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/nestjs-query"},"Nestjs-Query")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/airtable"},"Airtable")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/packages/strapi"},"Strapi")," - ",(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/strapi-v4"},"Strapi v4")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/supabase"},"Supabase")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/hasura"},"Hasura")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/data/packages/appwrite"},"Appwrite")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/packages/medusa"},"Medusa"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Community \u2764\ufe0f")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-graphql"},"Elide GraphQL")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/usegen/refine-use-generated"},"useGenerated")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/usegen"},"usegen")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://hygraph.com/"},"Hygraph")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/acomagu/refine-hygraph"},"acomagu")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.sanity.io"},"Sanity")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/hirenf14/refine-sanity"},"hirenf14")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.sqlite.org/index.html"},"SQLite")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/mateusabelli/refine-sqlite"},"mateusabelli")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://jsonapi.org/"},"JSON:API")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/MahirMahdi/refine-jsonapi"},"mahirmahdi")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://pocketbase.io/"},"PocketBase")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/kruschid"},"kruschid")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/ffimnsr/refine-postgrest-ts"},"PostgREST")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/ffimnsr"},"ffimnsr")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/medz/refine-sqlx"},"Refine SQL X")," by ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/medz"},"Seven Du (@medz)"))),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"If you have created a custom data provider and would like to share it with the community, feel free to create a PR. We would be happy to include it on this page for others to use.")))}d.isMDXComponent=!0},81301:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>m});t(37953);var r=t(58860),n=t(18518);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})),e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}const l={id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},d=void 0,s={unversionedId:"api-reference/core/providers/data-provider",id:"version-3.xx.xx/api-reference/core/providers/data-provider",title:"Data Provider",description:"The\xa0data provider\xa0acts as a data layer for your app that makes the HTTP requests and encapsulates how the data is retrieved. refine consumes these methods via data hooks.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/core/providers/data-provider.md",sourceDirName:"api-reference/core/providers",slug:"/api-reference/core/providers/data-provider",permalink:"/docs/3.xx.xx/api-reference/core/providers/data-provider",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/core/providers/data-provider.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1711375201,formattedLastUpdatedAt:"Mar 25, 2024",frontMatter:{id:"data-provider",title:"Data Provider",sidebar_label:"Data Provider"},sidebar:"someSidebar",previous:{title:"Audit Log Provider",permalink:"/docs/3.xx.xx/api-reference/core/providers/audit-log-provider"},next:{title:"i18n Provider",permalink:"/docs/3.xx.xx/api-reference/core/providers/i18n-provider"}},g={},m=[{value:"Usage",id:"usage",level:2},{value:"Multiple Data Providers",id:"multiple-data-providers",level:2},{value:"Methods",id:"methods",level:2},{value:"getList <PropTag required />",id:"getlist-",level:3},{value:"create <PropTag required/>",id:"create-",level:3},{value:"update <PropTag required />",id:"update-",level:3},{value:"deleteOne <PropTag required />",id:"deleteone-",level:3},{value:"getOne <PropTag required />",id:"getone-",level:3},{value:"getApiUrl <PropTag required />",id:"getapiurl-",level:3},{value:"custom",id:"custom",level:3},{value:"Bulk Actions",id:"bulk-actions",level:2},{value:"getMany",id:"getmany",level:3},{value:"createMany",id:"createmany",level:3},{value:"deleteMany",id:"deletemany",level:3},{value:"updateMany",id:"updatemany",level:3},{value:"Error Format",id:"error-format",level:2},{value:"metaData Usage",id:"metadata-usage",level:2},{value:"Supported Data Providers",id:"supported-data-providers",level:2},{value:"Supported Hooks",id:"supported-hooks",level:2},{value:"FAQ",id:"faq",level:2},{value:"How can I create a custom data provider?",id:"how-can-i-create-a-custom-data-provider",level:3},{value:"How can I customize existing data providers?",id:"how-can-i-customize-existing-data-providers",level:3},{value:"How I can override a specific method of Data Providers?",id:"how-i-can-override-a-specific-method-of-data-providers",level:3}],y=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",a)},u=y("DocThumbsUpDownFeedbackWidget"),c=y("PropTag"),h={toc:m},N="wrapper";function f(e){var{components:a}=e,t=p(e,["components"]);return(0,r.yg)(N,o(function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(a){i(e,a,t[a])}))}return e}({},h,t),{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The\xa0data provider\xa0acts as a data layer for your app that makes the HTTP requests and encapsulates how the data is retrieved. ",(0,r.yg)("strong",{parentName:"p"},"refine")," consumes these methods via data hooks."),(0,r.yg)("p",null,"You don't need to worry about creating data providers from scratch. ",(0,r.yg)("strong",{parentName:"p"},"refine")," offers built-in data provider support for the most popular ",(0,r.yg)("a",{parentName:"p",href:"#supported-data-providers"},"API providers"),". So you can use one of them or you can ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/create-dataprovider/"},"create your own data provider")," according to your needs."),(0,r.yg)("div",null,(0,r.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/providers/data-provider/api-consuming-flow.png"})),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Data hooks use ",(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query"},"TanStack Query")," to manage data fetching. It handles important concerns like caching, invalidation, loading states, etc.")),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(u,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To activate the data provider in refine, we have to pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@pankod/refine-core";\n\nimport dataProvider from "./dataProvider";\n\nconst App: React.FC = () => {\n  return <Refine dataProvider={dataProvider} />;\n};\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/index/"},"Refer to the Data Provider tutorial for more information and usage examples \u2192"))),(0,r.yg)("h2",{id:"multiple-data-providers"},"Multiple Data Providers"),(0,r.yg)(u,{id:"multiple-data-providers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," gives you the ability to use multiple data providers in your app. All you need to do is to pass key, value pairs to the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," prop of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine />")," component in a form of value being the data provider and the key being the name of the data provider."),(0,r.yg)("p",null,"Here is an example of using multiple data providers in your app:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts previewHeight=420px",live:!0,hideCode:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setRefineProps({ Sider: () => null });\n// visible-block-start\nimport { Refine, useList } from "@pankod/refine-core";\nimport { Layout, Collapse, Tag } from "@pankod/refine-antd";\nimport dataProvider from "@pankod/refine-simple-rest";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst FINE_FOODS_API_URL = "https://api.finefoods.refine.dev";\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n\ninterface IProduct {\n  id: number;\n  name: string;\n  price: number;\n}\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      Layout={Layout}\n      // highlight-start\n      dataProvider={{\n        default: dataProvider(API_URL),\n        fineFoods: dataProvider(FINE_FOODS_API_URL),\n      }}\n      // highlight-end\n      resources={[\n        {\n          // highlight-next-line\n          // **refine** will use the `default` data provider for this resource\n          name: "posts",\n          list: PostList,\n        },\n        {\n          name: "products",\n          options: {\n            // highlight-next-line\n            // **refine** will use the `fineFoods` data provider for this resource\n            dataProviderName: "fineFoods",\n          },\n        },\n      ]}\n    />\n  );\n};\n\nconst PostList: React.FC = () => {\n  const { data: posts } = useList<IPost>({\n    resource: "posts",\n    // highlight-start\n    // Data provider can be selected through props\n    dataProviderName: "default",\n    // highlight-end\n  });\n  // highlight-start\n  // We\'ve defined the data provider for this resource as "fineFoods" in its config so we don\'t need to pass it here\n  const { data: products } = useList<IProduct>({ resource: "products" });\n  // highlight-end\n\n  console.log({\n    posts,\n    products,\n  });\n\n  return (\n    <Collapse defaultActiveKey={["products"]}>\n      <Collapse.Panel header="Posts" key="posts">\n        {posts?.data.map((post) => (\n          <div\n            key={post.title}\n            style={{\n              display: "flex",\n              flexDirection: "row",\n              gap: "0.5rem",\n              marginBottom: "0.25rem",\n            }}\n          >\n            {post.title}\n            <Tag>{post.status}</Tag>\n          </div>\n        ))}\n      </Collapse.Panel>\n      <Collapse.Panel header="Products" key="products">\n        {products?.data.map((product) => (\n          <div\n            key={product.name}\n            style={{\n              display: "flex",\n              flexDirection: "row",\n              gap: "0.5rem",\n              marginBottom: "0.25rem",\n            }}\n          >\n            {product.name}\n            <Tag>{product.price / 10}</Tag>\n          </div>\n        ))}\n      </Collapse.Panel>\n    </Collapse>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"default")," key is required for the default data provider and it will be used as the default data provider."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"const App = () => {\n  return (\n    <Refine\n      dataProvider={{\n        default: defaultDataProvider,\n        example: exampleDataProvider,\n      }}\n    />\n  );\n};\n"))),(0,r.yg)("p",null,"You can pick data providers in two ways:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Using ",(0,r.yg)("inlineCode",{parentName:"strong"},"dataProviderName")," prop in the data hooks and all data-related components/functions."))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n  dataProviderName: "example",\n});\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Using ",(0,r.yg)("inlineCode",{parentName:"strong"},"options.dataProviderName")," property in your resource config"))),(0,r.yg)("p",null,"This will be the default data provider for the specified resource but you can still override it in the data hooks and components."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const App = () => {\n  return (\n    <Refine\n      dataProvider={{\n        default: defaultDataProvider,\n        example: exampleDataProvider,\n      }}\n      resources={[\n        {\n          // **refine** will use the `default` data provider for this resource\n          name: "posts",\n        },\n        {\n          name: "products",\n          options: {\n            // **refine** will use the `exampleDataProvider` data provider for this resource\n            dataProviderName: "exampleDataProvider",\n          },\n        },\n      ]}\n    />\n  );\n};\n'))),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)(u,{id:"methods",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Data provider's methods are expected to return a Promise. So, you can use these async methods to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/create-dataprovider/"},"create a data provider"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider } from "@pankod/refine-core";\n\nconst dataProvider: DataProvider = {\n  // required methods\n  getList: ({ resource, pagination, hasPagination, sort, filters, metaData }) =>\n    Promise,\n  create: ({ resource, variables, metaData }) => Promise,\n  update: ({ resource, id, variables, metaData }) => Promise,\n  deleteOne: ({ resource, id, variables, metaData }) => Promise,\n  getOne: ({ resource, id, metaData }) => Promise,\n  getApiUrl: () => "",\n  // optional methods\n  getMany: ({ resource, ids, metaData }) => Promise,\n  createMany: ({ resource, variables, metaData }) => Promise,\n  deleteMany: ({ resource, ids, variables, metaData }) => Promise,\n  updateMany: ({ resource, ids, variables, metaData }) => Promise,\n  custom: ({ url, method, filters, sort, payload, query, headers, metaData }) =>\n    Promise,\n};\n')),(0,r.yg)("admonition",{type:"info-tip"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"refine")," consumes data provider methods using ",(0,r.yg)("a",{parentName:"p",href:"#supported-hooks"},"data hooks"),"."),(0,r.yg)("p",{parentName:"admonition"},"Data hooks are used to operate CRUD actions like creating a new record, listing a resource or deleting a record, etc.")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/index/"},"Refer to the Data Provider tutorial for more information and usage examples \u2192"))),(0,r.yg)("h3",{id:"getlist-"},"getList ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"getlist-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method is used to get a list of resources with sorting, filtering, and pagination features.\nIt takes ",(0,r.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"sort"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination"),", and, ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," as parameters and returns ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"total"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useList/"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," or ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useInfiniteList/"},(0,r.yg)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"getList: async ({\n  resource,\n  hasPagination,\n  pagination,\n  sort,\n  filter,\n  metaData,\n}) => {\n  const { current, pageSize } = pagination;\n  const { field, order } = sort;\n  const { field, operator, value } = filter;\n\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n    total,\n  };\n};\n")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"getList")," also can support cursor-based pagination. Refer to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useInfiniteList/#how-to-use-cursor-based-pagination"},"this example")," for more information.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"hasPagination?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")," ",(0,r.yg)("em",{parentName:"td"},"(defaults to ",(0,r.yg)("inlineCode",{parentName:"em"},"true"),")"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"pagination?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#pagination"},(0,r.yg)("inlineCode",{parentName:"a"},"Pagination")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sort?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#crudsorting"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"filters?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#crudfilters"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))))))),(0,r.yg)("h3",{id:"create-"},"create ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"create-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," method creates a new record with the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreate/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"create: async ({ resource, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreate#type-parameters"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreate"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h3",{id:"update-"},"update ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"update-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," method updates the record with the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"id"),", and, ",(0,r.yg)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdate/"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"update: async ({ resource, id, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"id"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdate#type-parameters"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdate"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h3",{id:"deleteone-"},"deleteOne ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"deleteone-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"deleteOne")," method delete the record with the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," parameters."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"deleteOne")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDelete/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDelete"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"deleteOne: async ({ resource, id, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"id"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDelete/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDelete"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h3",{id:"getone-"},"getOne ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"getone-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"getOne")," method gets the record with the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," parameters."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"getOne")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useOne/"},(0,r.yg)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"getOne: async ({ resource, id, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"id"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null}))))),(0,r.yg)("h3",{id:"getapiurl-"},"getApiUrl ",(0,r.yg)(c,{required:!0,mdxType:"PropTag"})),(0,r.yg)(u,{id:"getapiurl-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"getApiUrl")," method returns the ",(0,r.yg)("inlineCode",{parentName:"p"},"apiUrl")," value."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"getApiUrl")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useApiUrl/"},(0,r.yg)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@pankod/refine-core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  getApiUrl: () => apiUrl,\n  // ...\n});\n'))),(0,r.yg)("h3",{id:"custom"},"custom"),(0,r.yg)(u,{id:"custom",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"An optional method named ",(0,r.yg)("inlineCode",{parentName:"p"},"custom")," can be added to handle requests with custom parameters like URL, CRUD methods, and configurations.\nIt's useful if you have non-standard REST API endpoints or want to make a connection with external resources."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"custom")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCustom/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"custom: async ({\n  url,\n  method,\n  filters,\n  sort,\n  payload,\n  query,\n  headers,\n  metaData,\n}) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"url"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"method"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"get"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"delete"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"head"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"options"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"post"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"put"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"patch"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sort?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#crudsorting"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"filters?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#crudfilters"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"payload?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"query?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"headers?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))))))),(0,r.yg)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,r.yg)(u,{id:"bulk-actions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Bulk actions are actions that can be performed on multiple items at once. Performing bulk actions is a common pattern in admin panels. If your API supports bulk actions, you can implement them in your data provider."),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Bulk operations are a way to perform many database operations at once, improving speed and efficiency. They can be used for data ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/import-export/useImport/"},(0,r.yg)("inlineCode",{parentName:"a"},"import"))," and ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/import-export/useExport/"},(0,r.yg)("inlineCode",{parentName:"a"},"export")),", and have the added benefit of being atomic, meaning that they are treated as a single unit."))),(0,r.yg)("h3",{id:"getmany"},"getMany"),(0,r.yg)(u,{id:"getmany",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"getMany")," method gets the records with the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"ids")," parameters. Implementation of this method is optional. If you don't implement it, refine will use ",(0,r.yg)("a",{parentName:"p",href:"#getone"},(0,r.yg)("inlineCode",{parentName:"a"},"getOne"))," method to handle multiple requests."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"getMany")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"getMany: async ({ resource, ids, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ids"),(0,r.yg)("td",{parentName:"tr",align:null},"[",(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null}))))),(0,r.yg)("h3",{id:"createmany"},"createMany"),(0,r.yg)(u,{id:"createmany",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This method allows us to create multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,r.yg)("a",{parentName:"p",href:"#create"},(0,r.yg)("inlineCode",{parentName:"a"},"create"))," method to handle multiple requests."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"createMany")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"createMany: async ({ resource, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameter Types:")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreateMany"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h3",{id:"deletemany"},"deleteMany"),(0,r.yg)(u,{id:"deletemany",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This method allows us to delete multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,r.yg)("a",{parentName:"p",href:"#deleteone"},(0,r.yg)("inlineCode",{parentName:"a"},"deleteOne"))," method to handle multiple requests."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"deleteMany")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDeleteMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"deleteMany: async ({ resource, ids, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ids"),(0,r.yg)("td",{parentName:"tr",align:null},"[",(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDeleteMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDeleteMany"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h3",{id:"updatemany"},"updateMany"),(0,r.yg)(u,{id:"updatemany",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This method allows us to update multiple items in a resource. Implementation of this method is optional. If you don't implement it, refine will use ",(0,r.yg)("a",{parentName:"p",href:"#update"},(0,r.yg)("inlineCode",{parentName:"a"},"update"))," method to handle multiple requests."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume this ",(0,r.yg)("inlineCode",{parentName:"p"},"updateMany")," method using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"updateMany: async ({ resource, ids, variables, metaData }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"resource"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ids"),(0,r.yg)("td",{parentName:"tr",align:null},"[",(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#basekey"},"BaseKey"),"]"),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"variables"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TVariables[]")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"metaData?"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#metadataquery"},(0,r.yg)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdateMany"))," to type ",(0,r.yg)("inlineCode",{parentName:"p"},"variables"),"."))),(0,r.yg)("h2",{id:"error-format"},"Error Format"),(0,r.yg)(u,{id:"error-format",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," expects errors to be extended from ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences/#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")),"."),(0,r.yg)("p",null,"Here is a basic example of how to implement error handling in your data provider."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider, HttpError } from "@pankod/refine-core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  getOne: async ({ resource, id }) => {\n    try {\n      const response = await fetch(`https://api.example.com/${resource}/${id}`);\n\n      // highlight-start\n      if (!response.ok) {\n        const error: HttpError = {\n          message: response.statusText,\n          statusCode: response.status,\n        };\n        return Promise.reject(error);\n      }\n      // highlight-end\n\n      return {\n        data: response.data,\n      };\n    } catch (error) {\n      // highlight-start\n      const error: HttpError = {\n        message: error?.message || "Something went wrong",\n        statusCode: error?.status || 500,\n      };\n      return Promise.reject(error);\n      // highlight-end\n    }\n  },\n  // ...\n});\n')),(0,r.yg)("p",null,"Also, Axios interceptor can be used to transform the error from the response before Axios returns the response to your code. Interceptors are methods that are triggered before the main method."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'// highlight-start\nimport axios from "axios";\nimport { DataProvider, HttpError } from "@pankod/refine-core";\n// highlight-end\nimport { stringify } from "query-string";\n\n// highlight-start\n// Error handling with axios interceptors\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  },\n);\n// highlight-end\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  // Methods\n});\n'))),(0,r.yg)("h2",{id:"metadata-usage"},"metaData Usage"),(0,r.yg)(u,{id:"metadata-usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When using APIs, you may wish to include custom parameters, such as a custom header. To accomplish this, you can utilize the ",(0,r.yg)("inlineCode",{parentName:"p"},"metaData")," field, which allows the sent parameter to be easily accessed by the data provider."),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"metaData")," parameter can be used in all data, form, and table hooks.")),(0,r.yg)("p",null,"Here is an example of how to send a custom header parameter to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getOne")," method using ",(0,r.yg)("inlineCode",{parentName:"p"},"metaData"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Send a custom header parameter to the ",(0,r.yg)("a",{parentName:"li",href:"#getone"},(0,r.yg)("inlineCode",{parentName:"a"},"getOne"))," method using ",(0,r.yg)("inlineCode",{parentName:"li"},"metaData"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="post/edit.tsx"',title:'"post/edit.tsx"'},'import { useOne } from "@pankod/refine-core";\n\nuseOne({\n  resource: "post",\n  id: "1",\n  metaData: {\n    headers: {\n      "x-custom-header": "hello world",\n    },\n  },\n});\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Get the ",(0,r.yg)("inlineCode",{parentName:"li"},"metaData")," parameter from the data provider.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@pankod/refine-core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  ...\n  getOne: async ({ resource, id, variables, metaData }) => {\n    // highlight-next-line\n    const { headers } = metaData;\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    // highlight-start\n    httpClient.defaults.headers = {\n      ...headers,\n    };\n    // highlight-end\n\n    const { data } = await httpClient.get(url, variables);\n\n    return {\n      data,\n    };\n  },\n});\n'))),(0,r.yg)("h2",{id:"supported-data-providers"},"Supported Data Providers"),(0,r.yg)(u,{id:"supported-data-providers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(n.Ay,{mdxType:"SupportedDataProviders"})),(0,r.yg)("h2",{id:"supported-hooks"},"Supported Hooks"),(0,r.yg)(u,{id:"supported-hooks",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"refine")," will consume:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#getlist"},(0,r.yg)("inlineCode",{parentName:"a"},"getList"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useList/"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," or ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useInfiniteList/"},(0,r.yg)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#create"},(0,r.yg)("inlineCode",{parentName:"a"},"create"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreate/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#update"},(0,r.yg)("inlineCode",{parentName:"a"},"update"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdate/"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#deleteone"},(0,r.yg)("inlineCode",{parentName:"a"},"deleteOne"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDelete/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDeleteOne"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#getone"},(0,r.yg)("inlineCode",{parentName:"a"},"getOne"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useOne/"},(0,r.yg)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#getapiurl"},(0,r.yg)("inlineCode",{parentName:"a"},"getApiUrl"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useApiUrl/"},(0,r.yg)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#custom"},(0,r.yg)("inlineCode",{parentName:"a"},"custom"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCustom/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#getmany"},(0,r.yg)("inlineCode",{parentName:"a"},"getMany"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#createmany"},(0,r.yg)("inlineCode",{parentName:"a"},"createMany"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useCreateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#deletemany"},(0,r.yg)("inlineCode",{parentName:"a"},"deleteMany"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDeleteMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#updatemany"},(0,r.yg)("inlineCode",{parentName:"a"},"updateMany"))," method using the ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useUpdateMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook."))),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-can-i-create-a-custom-data-provider"},"How can I create a custom data provider?"),(0,r.yg)(u,{id:"how-can-i-create-a-custom-data-provider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/create-dataprovider/"},'Refer to the "Create Data Provider From Scratch" section in the tutorial for more information \u2192'))),(0,r.yg)("h3",{id:"how-can-i-customize-existing-data-providers"},"How can I customize existing data providers?"),(0,r.yg)(u,{id:"how-can-i-customize-existing-data-providers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/tutorial/understanding-dataprovider/swizzle/"},'Refer to the "Create Data Provider with Swizzle" section in the tutorial for more information \u2192'))),(0,r.yg)("h3",{id:"how-i-can-override-a-specific-method-of-data-providers"},"How I can override a specific method of Data Providers?"),(0,r.yg)(u,{id:"how-i-can-override-a-specific-method-of-data-providers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"In some cases, you may need to override the method of ",(0,r.yg)("strong",{parentName:"p"},"refine")," data providers. The simplest way to do this is to use the ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"Spread syntax")),(0,r.yg)("p",null,"For example, Let's override the ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," function of the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/v3/packages/simple-rest"},(0,r.yg)("inlineCode",{parentName:"a"},"@pankod/refine-simple-rest")),". ",(0,r.yg)("inlineCode",{parentName:"p"},"@pankod/refine-simple-rest")," uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"PATCH")," HTTP method for ",(0,r.yg)("inlineCode",{parentName:"p"},"update"),", let's change it to ",(0,r.yg)("inlineCode",{parentName:"p"},"PUT")," without forking the whole data provider."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import dataProvider from "@pankod/refine-simple-rest";\n\nconst simpleRestProvider = dataProvider("API_URL");\nconst myDataProvider = {\n  ...simpleRestProvider,\n  update: async ({ resource, id, variables }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { data } = await httpClient.put(url, variables);\n\n    return {\n      data,\n    };\n  },\n};\n\n<Refine dataProvider={myDataProvider} />;\n'))))}f.isMDXComponent=!0}}]);