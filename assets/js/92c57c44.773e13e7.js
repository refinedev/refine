"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7828],{58860:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>M,contentTitle:()=>L,default:()=>_,frontMatter:()=>U,metadata:()=>W,toc:()=>V});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={toc:[]},p="wrapper";function s(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(p,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},l,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport { useAutocomplete } from "@refinedev/mui";\nimport { Autocomplete, TextField } from "@mui/material";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: "categories",\n  });\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder="Select a category"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label="Category"\n          margin="normal"\n          variant="outlined"\n          required\n        />\n      )}\n    />\n  );\n};\n// visible-block-end\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          create: "posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}s.isMDXComponent=!0;const m={toc:[]},g="wrapper";function y(e){var{components:t}=e,n=d(e,["components"]);return(0,r.yg)(g,c(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){u(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useAutocomplete } from "@refinedev/mui";\nimport { Autocomplete, TextField } from "@mui/material";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: "categories",\n    // highlight-next-line\n    defaultValue: 11,\n  });\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder="Select a category"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label="Category"\n          margin="normal"\n          variant="outlined"\n          required\n        />\n      )}\n    />\n  );\n};\n// visible-block-end\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          create: "posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function b(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}y.isMDXComponent=!0;const v={toc:[]},N="wrapper";function O(e){var{components:t}=e,n=b(e,["components"]);return(0,r.yg)(N,f(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){h(e,t,n[t])}))}return e}({},v,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=400px",live:!0,url:"http://localhost:3000",previewHeight:"400px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport { Box, Autocomplete, TextField } from "@mui/material";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { formLoading, query },\n    register,\n    control,\n    formState: { errors },\n  } = useForm<IPost, HttpError, IPost & { category: ICategory }>();\n\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: "categories",\n  });\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <Box component="form">\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          render={({ field }) => (\n            <Autocomplete\n              //highlight-next-line\n              {...autocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={({ title }) => title}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              placeholder="Select a category"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!errors.category}\n                  helperText={errors.category?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Create>\n  );\n};\n// visible-block-end\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          create: "posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function x(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}O.isMDXComponent=!0;const P={toc:[]},k="wrapper";function D(e){var{components:t}=e,n=x(e,["components"]);return(0,r.yg)(k,C(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){w(e,t,n[t])}))}return e}({},P,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useAutocomplete } from "@refinedev/mui";\nimport { Autocomplete, Button, TextField } from "@mui/material";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const [order, setOrder] = React.useState<"asc" | "desc">("asc");\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: "categories",\n    // highlight-start\n    sorters: [\n      {\n        field: "title",\n        order,\n      },\n    ],\n    // highlight-end\n  });\n\n  return (\n    <>\n      <Autocomplete\n        {...autocompleteProps}\n        getOptionLabel={(item) => item.title}\n        isOptionEqualToValue={(option, value) =>\n          value === undefined ||\n          option?.id?.toString() === (value?.id ?? value)?.toString()\n        }\n        placeholder="Select a category"\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label="Category"\n            margin="normal"\n            variant="outlined"\n            required\n          />\n        )}\n      />\n      <Button\n        onClick={() => setOrder(order === "asc" ? "desc" : "asc")}\n        variant="contained"\n        size="small"\n      >\n        Toggle Order\n      </Button>\n    </>\n  );\n};\n// visible-block-end\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          create: "posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function j(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function R(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}D.isMDXComponent=!0;const q={toc:[]},S="wrapper";function A(e){var{components:t}=e,n=R(e,["components"]);return(0,r.yg)(S,j(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){T(e,t,n[t])}))}return e}({},q,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useAutocomplete } from "@refinedev/mui";\nimport { Autocomplete, TextField } from "@mui/material";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { autocompleteProps } = useAutocomplete<ICategory>({\n    resource: "categories",\n    // highlight-start\n    onSearch: (value) => [\n      {\n        field: "title",\n        operator: "contains",\n        value,\n      },\n    ],\n    // highlight-end\n  });\n\n  return (\n    <Autocomplete\n      {...autocompleteProps}\n      getOptionLabel={(item) => item.title}\n      isOptionEqualToValue={(option, value) =>\n        value === undefined ||\n        option?.id?.toString() === (value?.id ?? value)?.toString()\n      }\n      placeholder="Select a category"\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label="Category"\n          margin="normal"\n          variant="outlined"\n          required\n        />\n      )}\n    />\n  );\n};\n// visible-block-end\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          create: "posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function E(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}A.isMDXComponent=!0;const U={title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/main/packages/mui/src/hooks/useAutocomplete/index.ts"},L=void 0,W={unversionedId:"ui-integrations/material-ui/hooks/use-auto-complete/index",id:"version-4.xx.xx/ui-integrations/material-ui/hooks/use-auto-complete/index",title:"useAutocomplete",description:"useAutocomplete hook allows you to manage Material UI's `` component when records in a resource needs to be used as select options.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/hooks/use-auto-complete/index.md",sourceDirName:"ui-integrations/material-ui/hooks/use-auto-complete",slug:"/ui-integrations/material-ui/hooks/use-auto-complete/",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/hooks/use-auto-complete/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/hooks/use-auto-complete/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/main/packages/mui/src/hooks/useAutocomplete/index.ts"},sidebar:"mainSidebar",previous:{title:"Url",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/fields/url-field/"},next:{title:"useDataGrid",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/hooks/use-data-grid/"}},M={},V=[{value:"Usage",id:"usage",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"resource <PropTag required />",id:"resource-",level:3},{value:"sorters",id:"sorters",level:3},{value:"filters",id:"filters",level:3},{value:"<code>defaultValue</code>",id:"defaultvalue",level:3},{value:"selectedOptionsOrder",id:"selectedoptionsorder",level:3},{value:"debounce",id:"debounce",level:3},{value:"queryOptions",id:"queryoptions",level:3},{value:"pagination",id:"pagination",level:3},{value:"current",id:"current",level:4},{value:"pageSize",id:"pagesize",level:4},{value:"mode",id:"mode",level:4},{value:"defaultValueQueryOptions",id:"defaultvaluequeryoptions",level:3},{value:"onSearch",id:"onsearch",level:3},{value:"Client-side filtering",id:"client-side-filtering",level:4},{value:"meta",id:"meta",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"successNotification",id:"successnotification",level:3},{value:"errorNotification",id:"errornotification",level:3},{value:"liveMode",id:"livemode",level:3},{value:"onLiveEvent",id:"onliveevent",level:3},{value:"liveParams",id:"liveparams",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"<del>sort</del> <PropTag deprecated />",id:"sort-",level:3},{value:"<del>hasPagination</del> <PropTag deprecated />",id:"haspagination-",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to ensure <code>defaultValue</code> is included in the options?",id:"how-to-ensure-defaultvalue-is-included-in-the-options",level:3},{value:"Can I create the options manually?",id:"can-i-create-the-options-manually",level:3},{value:"How do I use it with <code>CRUD</code> components and <code>useForm</code>?",id:"how-do-i-use-it-with-crud-components-and-useform",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2}],B=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},H=B("DocThumbsUpDownFeedbackWidget"),Q=B("PropTag"),X=B("PropsTable"),z=B("CodeSandboxExample"),Y={toc:V},$="wrapper";function _(e){var{components:t}=e,n=E(e,["components"]);return(0,r.yg)($,F(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){I(e,t,n[t])}))}return e}({},Y,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook allows you to manage Material UI's ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/"},(0,r.yg)("inlineCode",{parentName:"a"},"<Autocomplete>"))," component when records in a resource needs to be used as select options."),(0,r.yg)("p",null,"This hook uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook for fetching data. ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-list"},"Refer to useList hook for details. \u2192")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(H,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Here is a basic example of how to use ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook."),(0,r.yg)(s,{mdxType:"BasicUsageLivePreview"})),(0,r.yg)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.yg)(H,{id:"realtime-updates",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"When ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook is mounted, it passes some parameters (",(0,r.yg)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," etc.) to the ",(0,r.yg)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"liveProvider"),".\nIt is useful when you want to subscribe to the live updates.")),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"resource-"},"resource ",(0,r.yg)(Q,{required:!0,mdxType:"PropTag"})),(0,r.yg)(H,{id:"resource-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. The parameter is usually used as an API endpoint path. It all depends on how to handle the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method. See the ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/data-provider#creating-a-data-provider"},"creating a data provider")," section for an example of how resources are handled."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  resource: "categories",\n});\n')),(0,r.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,r.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,r.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,r.yg)("h3",{id:"sorters"},"sorters"),(0,r.yg)(H,{id:"sorters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It allows to show the options in the desired order. ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," query parameters to the API."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/interface-references#crudsorting"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  sorters: [\n    {\n      field: "title",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.yg)(D,{mdxType:"SortLivePreview"})),(0,r.yg)("h3",{id:"filters"},"filters"),(0,r.yg)(H,{id:"filters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"filters")," is used to show options by filtering them. ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send filter query parameters to the API."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  filters: [\n    {\n      field: "isActive",\n      operator: "eq",\n      value: true,\n    },\n  ],\n});\n'))),(0,r.yg)("h3",{id:"defaultvalue"},(0,r.yg)("inlineCode",{parentName:"h3"},"defaultValue")),(0,r.yg)(H,{id:"defaultvalue",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Is used to fetch extra options from the API."),(0,r.yg)("p",null,"If there are many ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>")," options and pagination is needed, the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," might not be in the visible list. This can break the ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>")," component. To prevent this, a separate ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany")," query fetches the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," from the backend and adds it to the options, ensuring it exists in the list. Since it uses ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," can be a single value or an array:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  defaultValue: 1, // or [1, 2]\n});\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," ",(0,r.yg)("strong",{parentName:"p"},"does not")," set a default selection. It only ensures the default value exists in the options."),(0,r.yg)("p",{parentName:"admonition"},"To set a default selection, pass ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"value")," prop of ",(0,r.yg)("inlineCode",{parentName:"p"},"<Autocomplete>")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"useForm"),":"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const form = useForm({\n  defaultValues: {\n    category: { id: 1 }, // Default selected value\n  },\n});\n\nconst { autocompleteProps } = useAutocomplete({\n  resource: "categories",\n  defaultValue: [1], // Ensures the default value is included in options\n});\n')))),(0,r.yg)("h3",{id:"selectedoptionsorder"},"selectedOptionsOrder"),(0,r.yg)(H,{id:"selectedoptionsorder",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"selectedOptionsOrder")," allows us to sort ",(0,r.yg)("inlineCode",{parentName:"p"},"selectedOptions")," on ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue"),". It can be:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"in-place"'),": sort ",(0,r.yg)("inlineCode",{parentName:"li"},"selectedOptions")," at the bottom. It is by default."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"selected-first"'),": sort ",(0,r.yg)("inlineCode",{parentName:"li"},"selectedOptions")," at the top.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  defaultValue: 1, // or [1, 2]\n  selectedOptionsOrder: "selected-first", // in-place | selected-first\n});\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-many"},(0,r.yg)("inlineCode",{parentName:"a"},"useMany")," documentation ","\u2192")))),(0,r.yg)("h3",{id:"debounce"},"debounce"),(0,r.yg)(H,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It allows us to ",(0,r.yg)("inlineCode",{parentName:"p"},"debounce")," the ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  debounce: 500,\n});\n"))),(0,r.yg)("h3",{id:"queryoptions"},"queryOptions"),(0,r.yg)(H,{id:"queryoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"useQuery")," documentation ","\u2192"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  queryOptions: {\n    retry: 3,\n  },\n});\n"))),(0,r.yg)("h3",{id:"pagination"},"pagination"),(0,r.yg)(H,{id:"pagination",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(H,{id:"autocompletereturnvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter. It is used to send pagination query parameters to the API.")),(0,r.yg)("h4",{id:"current"},"current"),(0,r.yg)(H,{id:"current",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    current: 2,\n  },\n});\n"))),(0,r.yg)("h4",{id:"pagesize"},"pageSize"),(0,r.yg)(H,{id:"pagesize",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    pageSize: 20,\n  },\n});\n"))),(0,r.yg)("h4",{id:"mode"},"mode"),(0,r.yg)(H,{id:"mode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It can be ",(0,r.yg)("inlineCode",{parentName:"p"},'"off"'),", ",(0,r.yg)("inlineCode",{parentName:"p"},'"client"')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'"server"'),". It is used to determine whether to use server-side pagination or not."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  pagination: {\n    mode: "off",\n  },\n});\n'))),(0,r.yg)("h3",{id:"defaultvaluequeryoptions"},"defaultValueQueryOptions"),(0,r.yg)(H,{id:"defaultvaluequeryoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," property is given, the ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany")," data hook is called for the selected records. With this property, you can change the options of this query. If not given, the values given in ",(0,r.yg)("inlineCode",{parentName:"p"},"queryOptions")," will be used."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  resource: "categories",\n  defaultValueQueryOptions: {\n    onSuccess: (data) => {\n      console.log("triggers when on query return on success");\n    },\n  },\n});\n'))),(0,r.yg)("h3",{id:"onsearch"},"onSearch"),(0,r.yg)(H,{id:"onsearch",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It allows us to ",(0,r.yg)("inlineCode",{parentName:"p"},"AutoComplete")," the ",(0,r.yg)("inlineCode",{parentName:"p"},"options"),"."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.yg)(A,{mdxType:"OnSearchLivePreview"}),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," is used, it will override the existing ",(0,r.yg)("inlineCode",{parentName:"p"},"filters"),".")),(0,r.yg)("h4",{id:"client-side-filtering"},"Client-side filtering"),(0,r.yg)(H,{id:"client-side-filtering",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Sometimes, you may want to filter the options on the client-side. You can do this by passing ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," function as ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined"),". This will disable the server-side filtering and will filter the options on the client-side."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nimport { createFilterOptions } from "@mui/material";\n\nconst { autocompleteProps } = useAutocomplete({\n  resource: "categories",\n});\n\n// highlight-start\nconst filterOptions = createFilterOptions({\n  matchFrom: "start",\n  stringify: (option: any) => option.title,\n});\n// highlight-end\n\n<Autocomplete\n  {...autocompleteProps}\n  getOptionLabel={(item) => item.title}\n  // highlight-start\n  onInputChange={(event, value) => {}}\n  filterOptions={filterOptions}\n  // highlight-end\n  isOptionEqualToValue={(option, value) =>\n    value === undefined ||\n    option?.id?.toString() === (value?.id ?? value)?.toString()\n  }\n  placeholder="Select a category"\n  renderInput={(params) => (\n    <TextField\n      {...params}\n      label="Category"\n      margin="normal"\n      variant="outlined"\n      required\n    />\n  )}\n/>;\n'))),(0,r.yg)("h3",{id:"meta"},"meta"),(0,r.yg)(H,{id:"meta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,r.yg)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/guides-concepts/general-concepts/#meta-concept"},(0,r.yg)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation ","\u2192"))),(0,r.yg)("p",null,"In the following example, we pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.yg)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  // highlight-start\n  meta: {\n    headers: { "x-meta-data": "true" },\n  },\n  // highlight-end\n});\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    sorters,\n    filters,\n    // highlight-next-line\n    meta,\n  }) => {\n    // highlight-next-line\n    const headers = meta?.headers ?? {};\n    const url = `${apiUrl}/${resource}`;\n    //...\n    //...\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers });\n    return {\n      data,\n    };\n  },\n  //...\n};\n'))),(0,r.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,r.yg)(H,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If there is more than one ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProviderName")," prop. It is useful when you have a different data provider for different resources."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  dataProviderName: "second-data-provider",\n});\n'))),(0,r.yg)("h3",{id:"successnotification"},"successNotification"),(0,r.yg)(H,{id:"successnotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data is fetched successfully, ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," can call ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: "Success with no errors",\n      type: "success",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"errornotification"},"errorNotification"),(0,r.yg)(H,{id:"errornotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data fetching is failed, ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," will call ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a error notification. With this prop, you can customize the error notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: "Error",\n      type: "error",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"livemode"},"liveMode"),(0,r.yg)(H,{id:"livemode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.'),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, please refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider#livemode"},"Live / Realtime documentation"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  liveMode: "auto",\n});\n'))),(0,r.yg)("h3",{id:"onliveevent"},"onLiveEvent"),(0,r.yg)(H,{id:"onliveevent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"The callback function that is executed when new events from a subscription are arrived."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n"))),(0,r.yg)("h3",{id:"liveparams"},"liveParams"),(0,r.yg)(H,{id:"liveparams",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"Params to pass to liveProvider's ",(0,r.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider#subscribe"},"subscribe")," method.")),(0,r.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,r.yg)(H,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want loading overtime for the request, you can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,r.yg)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,r.yg)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,r.yg)("p",null,"Return ",(0,r.yg)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,r.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useAutocomplete({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n"))),(0,r.yg)("h3",{id:"sort-"},(0,r.yg)("del",{parentName:"h3"},"sort")," ",(0,r.yg)(Q,{deprecated:!0,mdxType:"PropTag"})),(0,r.yg)(H,{id:"sort-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"sorters")," instead.")),(0,r.yg)("h3",{id:"haspagination-"},(0,r.yg)("del",{parentName:"h3"},"hasPagination")," ",(0,r.yg)(Q,{deprecated:!0,mdxType:"PropTag"})),(0,r.yg)(H,{id:"haspagination-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination.mode")," instead.")),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-to-ensure-defaultvalue-is-included-in-the-options"},"How to ensure ",(0,r.yg)("inlineCode",{parentName:"h3"},"defaultValue")," is included in the options?"),(0,r.yg)(H,{id:"how-to-ensure-defaultvalue-is-included-in-the-options",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"In some cases we only have ",(0,r.yg)("inlineCode",{parentName:"p"},"id"),", it may be necessary to show it selected in the selection box. This hook sends the request via ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-many"},(0,r.yg)("inlineCode",{parentName:"a"},"useMany")),", gets the data and mark as selected."),(0,r.yg)(y,{mdxType:"DefaultValueLivePreview"})),(0,r.yg)("h3",{id:"can-i-create-the-options-manually"},"Can I create the options manually?"),(0,r.yg)(H,{id:"can-i-create-the-options-manually",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can create a new ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," object with ",(0,r.yg)("inlineCode",{parentName:"p"},"query"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { autocompleteProps, query } = useAutocomplete();\n\nconst options = query.data?.data.map((item) => ({\n  title: item.title,\n  value: item.id,\n}));\n\nreturn <Autocomplete {...autocompleteProps} options={options || []} />;\n"))),(0,r.yg)("h3",{id:"how-do-i-use-it-with-crud-components-and-useform"},"How do I use it with ",(0,r.yg)("inlineCode",{parentName:"h3"},"CRUD")," components and ",(0,r.yg)("inlineCode",{parentName:"h3"},"useForm"),"?"),(0,r.yg)(H,{id:"how-do-i-use-it-with-crud-components-and-useform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(O,{mdxType:"CrudLivePreview"}),(0,r.yg)("p",null,"The use of ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," with ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," is demonstrated in the code above. You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook independently of the ",(0,r.yg)("inlineCode",{parentName:"p"},"useForm")," hook."),(0,r.yg)("p",null,"By default, Refine does the search using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," hook and passes it to the search parameter. If you get a problem you should check your ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," function in your Data Provider. If you want to change this behavior to make client-side filtering, you can examine ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#search-as-you-type"},"this")," documentation.")),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(H,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(X,{module:"@refinedev/mui/useAutocomplete",mdxType:"PropsTable"})),(0,r.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.yg)(H,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")))))),(0,r.yg)("h3",{id:"return-values"},"Return values"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"autocompleteProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Material UI Autocomplete props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#autocompletereturnvalues"},(0,r.yg)("inlineCode",{parentName:"a"},"AutoCompleteReturnValues")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"query"),(0,r.yg)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultValueQuery"),(0,r.yg)("td",{parentName:"tr",align:null},"Result of the query of a ",(0,r.yg)("inlineCode",{parentName:"td"},"defaultValue")," record"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultValueQueryOnSuccess"),(0,r.yg)("td",{parentName:"tr",align:null},"Default value onSuccess method"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"overtime"),(0,r.yg)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))))),(0,r.yg)("blockquote",null,(0,r.yg)("h4",{parentName:"blockquote",id:"autocompletereturnvalues"},"AutoCompleteReturnValues"),(0,r.yg)("table",{parentName:"blockquote"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"options"),(0,r.yg)("td",{parentName:"tr",align:null},"Array of options"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"loading"),(0,r.yg)("td",{parentName:"tr",align:null},"Loading state"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"onInputChange"),(0,r.yg)("td",{parentName:"tr",align:null},"Callback fired when the input value changes"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(event: React.SyntheticEvent, value: string, reason: string) => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"filterOptions"),(0,r.yg)("td",{parentName:"tr",align:null},"Determines the filtered options to be rendered on search."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(options: TData, state: object) => TData"))))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(H,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(z,{path:"field-material-ui-use-autocomplete",mdxType:"CodeSandboxExample"})))}_.isMDXComponent=!0}}]);