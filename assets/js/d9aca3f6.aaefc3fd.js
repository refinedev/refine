"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[54134],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var i=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,g=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return t?i.createElement(g,r(r({ref:n},d),{},{components:t})):i.createElement(g,r({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},72247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});t(37953);var i=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function r(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={title:"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II",description:"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.",slug:"refine-invoice-generator",authors:"melih",tags:["refine","react","strapi"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},l=void 0,c={permalink:"/blog/refine-invoice-generator",source:"@site/blog/2022-03-01-refine-invoice-generator-p2.md",title:"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II",description:"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.",date:"2022-03-01T00:00:00.000Z",formattedDate:"March 1, 2022",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"react",permalink:"/blog/tags/react"},{label:"strapi",permalink:"/blog/tags/strapi"}],readingTime:13.395,hasTruncateMarker:!0,authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],frontMatter:{title:"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II",description:"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.",slug:"refine-invoice-generator",authors:"melih",tags:["refine","react","strapi"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},prevItem:{title:"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application",permalink:"/blog/best-internal-tool-react-frameworks"},nextItem:{title:"Develop your Own Customizable Invoice Generator with Refine and Strapi | Part I",permalink:"/blog/refine-react-admin-invoice-generator"},relatedPosts:[{title:"Using SVGs in React",description:"Let's talk about React SVG and how it makes the process of adding and handling images on modern websites more versatile and fun.",permalink:"/blog/react-svg",formattedDate:"January 7, 2025",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:15.405,date:"2025-01-07T00:00:00.000Z"},{title:"Build internal tools using Low-Code with Refine, React-based framework",description:"Why you should be using low-code app Refine to build internal tools? Learn how to build low-code apps using Refine, React and Ant Design.",permalink:"/blog/build-internal-tools-using-low-code-with-refine",formattedDate:"February 21, 2022",authors:[{name:"Salih \xd6zdemir",title:"Software Developer",url:"https://github.com/salihozdemir",imageURL:"https://github.com/salihozdemir.png",key:"salih"}],readingTime:9.65,date:"2022-02-21T00:00:00.000Z"},{title:"React Slick Examples - Creating a carousel",description:"We'll see how to use React Slick in your React projects through a step-by-step guide and hands-on demo.",permalink:"/blog/react-slick",formattedDate:"January 2, 2025",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:20.7,date:"2025-01-02T00:00:00.000Z"}],authorPosts:[{title:"How to Import CSV File with React",description:"In this guide, I will show you how to import CSV files using React and JavaScript.",permalink:"/blog/how-to-import-csv",formattedDate:"January 18, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:4.365,date:"2022-01-18T00:00:00.000Z"},{title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",permalink:"/blog/refine-react-ant-design-admin-panel-framework",formattedDate:"February 21, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:12.565,date:"2022-02-21T00:00:00.000Z"},{title:"How to Multipart File Upload Using FormData with HTML",description:"In this guide, I'm going to show you how to multipart files upload with using HTML and JavaScript",permalink:"/blog/how-to-multipart-upload",formattedDate:"December 27, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:2.515,date:"2021-12-27T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Create New Strapi Collections",id:"create-new-strapi-collections",level:2},{value:"Refine Missions Page",id:"refine-missions-page",level:2},{value:"Refine Missions Create Page",id:"refine-missions-create-page",level:3},{value:"Refine Invoices Page",id:"refine-invoices-page",level:2},{value:"Refine Create Invoice Page",id:"refine-create-invoice-page",level:3},{value:"View and Download Invoice as PDF",id:"view-and-download-invoice-as-pdf",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3},{value:"Example",id:"example",level:2},{value:"Conclusion",id:"conclusion",level:2}],m=(u="CodeSandboxExample",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",e)});var u;const g={toc:p},y="wrapper";function h(e){var{components:n}=e,t=r(e,["components"]);return(0,i.yg)(y,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),i.forEach((function(n){o(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,i.yg)("strong",{parentName:"p"},"Refine"),". Although we plan to update it with the latest version of ",(0,i.yg)("strong",{parentName:"p"},"Refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,i.yg)("p",{parentName:"admonition"},"You should know that ",(0,i.yg)("strong",{parentName:"p"},"Refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),"."),(0,i.yg)("p",{parentName:"admonition"},"Just be aware that the source code example in this post have been updated to version 4.x.x.")),(0,i.yg)("p",null,"Looking for an invoice generator that is easy to use and lets you customize your invoices? With ",(0,i.yg)("strong",{parentName:"p"},"Refine")," simple and intuitive interface, you can create your own invoices in few hours. Plus, we offer a wide range of templates and customization options so you can get the exact look you want. Learn more about our invoice generator here!"),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"We are almost ready to launch our ",(0,i.yg)("strong",{parentName:"p"},"Refine")," Invoice Generator. In this Part II article, we'll customize it just a little more and then take an in-depth look at what you can do with the finished ",(0,i.yg)("strong",{parentName:"p"},"Refine")," product!"),(0,i.yg)("p",null,"In this part, we will create a missions part for the services your company provides. Then we will create our invoice page using these missions and the clients and contacts we created in Part I. In addition, you will not only be able to create your invoices, but you will also be able to view and download these invoices as PDF."),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"This article is written as a continuation of our ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-react-admin-invoice-generator/"},"Develop your Own Customizable Invoice Generator with Refine")," article. If you have not read Part I, we recommend that you read Part I before reading this article.")),(0,i.yg)("p",null,"Let's see together how easily and in a short time we can develop our project with its Refine features."),(0,i.yg)("h2",{id:"create-new-strapi-collections"},"Create New Strapi Collections"),(0,i.yg)("p",null,"In our Part I article, we created our company, contact and client collections. In this section, let's create the ",(0,i.yg)("inlineCode",{parentName:"p"},"Missions")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Invoice")," ",(0,i.yg)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi")," collections for the missions and invoices pages."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Mission Collection:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Mission(Mission Title): Text"),(0,i.yg)("li",{parentName:"ul"},"Mission_description: Text"),(0,i.yg)("li",{parentName:"ul"},"Day: Number"),(0,i.yg)("li",{parentName:"ul"},"Daily_rate: Number")),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/missions.png",alt:"Strapi Mission Collection"}),(0,i.yg)("br",null),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Invoice Collection:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Name: Text"),(0,i.yg)("li",{parentName:"ul"},"Date: Date"),(0,i.yg)("li",{parentName:"ul"},"Company : Relation with Company"),(0,i.yg)("li",{parentName:"ul"},"Discount : Number"),(0,i.yg)("li",{parentName:"ul"},"Tax: Number"),(0,i.yg)("li",{parentName:"ul"},"Custom_id: Text"),(0,i.yg)("li",{parentName:"ul"},"Contact: Relation with Contact"),(0,i.yg)("li",{parentName:"ul"},"Missions: Relation with Mission")),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/invoice.png",alt:"Strapi Mission Collection"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"We created our missions and invoice collections fields. Our goal here is to define the products or services you offer specifically to your company and to create invoices based on them. By determining how many working days a product or service will last and its price on a daily basis, the total will be automatically reflected on your invoice. Now let's create our ",(0,i.yg)("strong",{parentName:"p"},"Refine")," Missions page using this collection. And let's understand better by creating an example missions with ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"."),(0,i.yg)("h2",{id:"refine-missions-page"},"Refine Missions Page"),(0,i.yg)("p",null,"Let's use the refine-antd package's ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/hooks/table/useTable/"},"useTable")," hook to create our page, and let's define the fields in our Table Component."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/MissionList.tsx"',title:'"src/pages/MissionList.tsx"'},'import {\n  List,\n  Table,\n  useTable,\n  TagField,\n  useModalForm,\n  EditButton,\n} from "@refinedev/antd";\n\nimport { IMission } from "interfaces";\n\nexport const MissionList: React.FC = () => {\n  //highlight-next-line\n  const { tableProps } = useTable<IMission>();\n\n  return (\n    <List>\n      <Table {...tableProps}>\n        //highlight-start\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="mission" title="Mission" />\n        <Table.Column\n          dataIndex="mission_description"\n          title="Mission Description"\n        />\n        <Table.Column dataIndex="day" title="Day(s)" />\n        <Table.Column\n          dataIndex="daily_rate"\n          title="Daily Rate"\n          render={(value) => <TagField value={value} color="red" />}\n        />\n        <Table.Column<IMission>\n          title="Total"\n          render={(_, record) => {\n            return (\n              <TagField\n                value={`${record.daily_rate * record.day} $`}\n                color="green"\n              />\n            );\n          }}\n        />\n        <Table.Column<IMission>\n          title="Actions"\n          dataIndex="actions"\n          key="actions"\n          render={(_value, record) => (\n            <EditButton\n              hideText\n              size="small"\n              recordItemId={record.id}\n              onClick={() => editShow(record.id)}\n            />\n          )}\n        />\n        //highlight-end\n      </Table>\n    </List>\n  );\n};\n')),(0,i.yg)("p",null,"We defined the fields we created on the strapi side with the ",(0,i.yg)("strong",{parentName:"p"},"Refine")," Table and created our table. Let's take a look at how our table looks like."),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/mission_page.png",alt:"Refine Missions Page"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"As you can see, we were able to create and display our table very simply thanks to the ",(0,i.yg)("strong",{parentName:"p"},"Refine"),". Let's learn how to create a Mission from our Refine interface now."),(0,i.yg)("h3",{id:"refine-missions-create-page"},"Refine Missions Create Page"),(0,i.yg)("p",null,"Let's create a modal component for our ",(0,i.yg)("inlineCode",{parentName:"p"},"Mission Create")," page. Let's connect our fields using Modal and Form from the ",(0,i.yg)("inlineCode",{parentName:"p"},"refine-antd")," package."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Show Code"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/mission/CreateMission.tsx"',title:'"src/components/mission/CreateMission.tsx"'},'import {\n  //highlight-start\n  Modal,\n  Form,\n  //highlight-end\n  Input,\n  ModalProps,\n  FormProps,\n  InputNumber,\n} from "@refinedev/antd";\n\ntype CreateMissionProps = {\n  modalProps: ModalProps;\n  formProps: FormProps;\n};\n\nexport const CreateMission: React.FC<CreateMissionProps> = ({\n  modalProps,\n  formProps,\n}) => {\n  return (\n    //highlight-start\n    <Modal {...modalProps} title="Create Contact">\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Title"\n          name="mission"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item label="Description" name="mission_description">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Day(s)" name="day">\n          <InputNumber defaultValue={1} />\n        </Form.Item>\n        <Form.Item label="Daily Rate" name="daily_rate">\n          <InputNumber defaultValue={1} />\n        </Form.Item>\n      </Form>\n    </Modal>\n    //highlight-end\n  );\n};\n')))),(0,i.yg)("p",null,"Let's define the ",(0,i.yg)("inlineCode",{parentName:"p"},"CreateMission")," component we created above in our ",(0,i.yg)("inlineCode",{parentName:"p"},"MissionList")," and fill its props with ",(0,i.yg)("strong",{parentName:"p"},"Refine")," ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/hooks/form/useModalForm/"},(0,i.yg)("strong",{parentName:"a"},"useModalForm")),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/MissionList.tsx"',title:'"src/pages/MissionList.tsx"'},'import { List, Table, useTable, TagField, useModalForm } from "@refinedev/antd";\n\nimport { IMission } from "interfaces";\nimport { CreateMission, EditMission } from "components/mission";\n\nexport const MissionList: React.FC = () => {\n  const { tableProps } = useTable<IMission>();\n\n  //highlight-start\n  const { formProps, modalProps, show } = useModalForm({\n    resource: "missions",\n    action: "create",\n  });\n  //highlight-end\n\n  return (\n    <>\n      <List\n        //highlight-start\n        createButtonProps={{\n          onClick: () => {\n            show();\n          },\n        }}\n        //highlight-end\n      >\n        <Table {...tableProps}>\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="mission" title="Mission" />\n          <Table.Column\n            dataIndex="mission_description"\n            title="Mission Description"\n          />\n          <Table.Column dataIndex="day" title="Day(s)" />\n          <Table.Column\n            dataIndex="daily_rate"\n            title="Daily Rate"\n            render={(value) => <TagField value={value} color="red" />}\n          />\n          <Table.Column<IMission>\n            title="Total"\n            render={(_, record) => {\n              return (\n                <TagField\n                  value={`${record.daily_rate * record.day} $`}\n                  color="green"\n                />\n              );\n            }}\n          />\n        </Table>\n      </List>\n      //highlight-start\n      <CreateMission modalProps={modalProps} formProps={formProps} />\n      //highlight-end\n    </>\n  );\n};\n')),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/mission_create.gif",alt:"Refine Mission Create Page"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"Missions Page is now ready, you can create and manage your business's products or services here with ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"."),(0,i.yg)("p",null,"Our next step is to create invoices according to these tasks and clients. Let's create, organize and display invoices with ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"."),(0,i.yg)("h2",{id:"refine-invoices-page"},"Refine Invoices Page"),(0,i.yg)("p",null,"Let's put the ",(0,i.yg)("inlineCode",{parentName:"p"},"Invoice Collections")," fields that we created with Strapi into our Table by fetch the refine-antd useTable. Our Invoice collection has a relation with the client, company and missions collections."),(0,i.yg)("p",null,"Thanks to the ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/data-providers/strapi-v4/#relations-population"},"refine-strapi-v4 dataProvider"),", we can use the data of collections that are related to each other."),(0,i.yg)("p",null,"In order to use the fields of the collections that are related to each other, we must populate the collections in ",(0,i.yg)("inlineCode",{parentName:"p"},"meta"),"."),(0,i.yg)("p",null,"Populate the contacts, companies and missions related with our Invoice collection in meta."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Show Code"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/InvoiceList.tsx"',title:'"src/pages/InvoiceList.tsx"'},'import {\n  List,\n  Table,\n  useTable,\n  DateField,\n  TagField,\n  EmailField,\n  Space,\n  DeleteButton,\n  EditButton,\n  Icons,\n  Button,\n  Modal,\n} from "@refinedev/antd";\n\nimport { IInvoice } from "interfaces";\nimport { PdfLayout } from "components/pdf";\n\nconst { FilePdfOutlined } = Icons;\n\nexport const InvoiceList: React.FC = () => {\n  //highlight-start\n  const { tableProps } = useTable<IInvoice>({\n    meta: {\n      populate: {\n        contact: { populate: ["client"] },\n        company: { populate: ["logo"] },\n        missions: "*",\n      },\n    },\n  });\n  //highlight-end\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps}>\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column<IInvoice>\n            dataIndex="name"\n            title="Invoice Name"\n            render={(_, record) => {\n              return `Invoice_#${record.id}${record.name}`;\n            }}\n          />\n          <Table.Column<IInvoice>\n            dataIndex="date"\n            title="Invoice Date"\n            render={(value) => <DateField format="LL" value={value} />}\n          />\n          <Table.Column dataIndex={["company", "name"]} title="Your Company" />\n          <Table.Column\n            dataIndex={"missions"}\n            title="Missions"\n            render={(value) => {\n              return value.map((item: any) => {\n                return <TagField color="blue" value={item.mission} />;\n              });\n            }}\n          />\n          <Table.Column\n            dataIndex="discount"\n            title="Discount(%)"\n            render={(value) => <TagField color="blue" value={value} />}\n          />\n          <Table.Column\n            dataIndex="tax"\n            title="Tax(%)"\n            render={(value) => <TagField color="cyan" value={value} />}\n          />\n          <Table.Column dataIndex="custom_id" title="Custom Invoice ID" />\n\n          <Table.Column\n            dataIndex={["contact", "email"]}\n            title="Contact"\n            render={(value) => <EmailField value={value} />}\n          />\n          <Table.Column<IInvoice>\n            title="Actions"\n            dataIndex="actions"\n            render={(_, record) => {\n              return (\n                <Space>\n                  <EditButton hideText size="small" recordItemId={record.id} />\n                  <DeleteButton\n                    hideText\n                    size="small"\n                    recordItemId={record.id}\n                  />\n                </Space>\n              );\n            }}\n          />\n        </Table>\n      </List>\n    </>\n  );\n};\n')))),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/invoice_list.png",alt:"Refine Invoice List Page"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"As you can see, we were able to list invoices with ",(0,i.yg)("strong",{parentName:"p"},"Refine"),". Using the Invoice collection and the fields associated with it, we can create a fully featured Invoice."),(0,i.yg)("p",null,"Our invoice contains all the information. With ",(0,i.yg)("inlineCode",{parentName:"p"},"Refine Invoice Generator")," you can define the company issuing the invoice, discount percentage, tax percentage, customId and similar information in a single invoice."),(0,i.yg)("p",null,"Let's understand better by creating an invoice example from our ",(0,i.yg)("strong",{parentName:"p"},"Refine")," UI."),(0,i.yg)("h3",{id:"refine-create-invoice-page"},"Refine Create Invoice Page"),(0,i.yg)("p",null,"Here, we first fetch the company, contacts and missions using the ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"'s ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/hooks/field/useSelect/"},"useSelect")," hook, and by giving it to the Select component, we create selectable components to detail our invoice."),(0,i.yg)("p",null,"Then, we fill our Refine ",(0,i.yg)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/components/basic-views/create/"},"Create")," and Form components with the fields of the collection in the strap to perform a creation process as we did in our previous examples."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Show Code"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/invoice/CreateInvoice"',title:'"src/pages/invoice/CreateInvoice"'},'import {\n  Create,\n  Form,\n  Input,\n  Select,\n  useForm,\n  useSelect,\n  DatePicker,\n} from "@refinedev/antd";\n\nimport { ICompany, IContact, IMission, IInvoice } from "interfaces";\n\nexport const CreateInvoice = () => {\n  const { formProps, saveButtonProps } = useForm<IInvoice>();\n\n  const { selectProps: companySelectProps } = useSelect<ICompany>({\n    resource: "companies",\n    optionLabel: "name",\n  });\n\n  const { selectProps: contactSelectProps } = useSelect<IContact>({\n    resource: "contacts",\n    optionLabel: "first_name",\n  });\n\n  const { selectProps: missionSelectProps } = useSelect<IMission>({\n    resource: "missions",\n    optionLabel: "mission",\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item label="Invoice Name" name="name">\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Select Your Company"\n          name="company"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...companySelectProps} />\n        </Form.Item>\n\n        <Form.Item\n          label="Mission"\n          name="missions"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...missionSelectProps} mode="multiple" />\n        </Form.Item>\n        <Form.Item label="Discount(%)" name="discount">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Tax(%)" name="tax">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Custom ID" name="custom_id">\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label="Contact"\n          name="contact"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...contactSelectProps} />\n        </Form.Item>\n        <Form.Item label="Invoice Date" name="date">\n          <DatePicker style={{ width: "50%" }} />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n')))),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/create_invoice.gif",alt:"Refine Invoice Create"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"Our invoice generator is almost ready! As you can see, we can now create a fully featured invoice with ",(0,i.yg)("strong",{parentName:"p"},"Refine")," and display it in our table. As the last step, let's view and download the invoices we created as PDF."),(0,i.yg)("h2",{id:"view-and-download-invoice-as-pdf"},"View and Download Invoice as PDF"),(0,i.yg)("p",null,"In this example, we will use the ",(0,i.yg)("a",{parentName:"p",href:"https://react-pdf.org/"},"React-pdf")," package to view as PDF. Let's start our process by installing our package."),(0,i.yg)("p",null,"Let's start our process by installing our package."),(0,i.yg)("h3",{id:"installation"},"Installation"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"npm i @react-pdf/renderer\n")),(0,i.yg)("h3",{id:"usage"},"Usage"),(0,i.yg)("p",null,"To begin, let's create a pdf layout and add props to receive the data in our Invoice List."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/pdf/PdfLayout.tsx"',title:'"src/components/pdf/PdfLayout.tsx"'},'import { useRef } from "react";\n\n//highlight-next-line\nimport { IInvoice } from "interfaces";\n\n//highlight-start\ntype PdfProps = {\n  record: IInvoice | undefined;\n};\n//highlight-end\n\nexport const PdfLayout: React.FC<PdfProps> = ({ record }) => {\n  return <></>;\n};\n')),(0,i.yg)("p",null,"Let's create a button to display our PDF arrangement in the Invoice List, as well as a modal component for this field to appear."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/invoice/InvoiceList.tsx"',title:'"src/pages/invoice/InvoiceList.tsx"'},'import { useState } from "react";\n//highlight-next-line\nimport { useModal } from "@refinedev/core";\nimport {\n  List,\n  Table,\n  useTable,\n  DateField,\n  TagField,\n  EmailField,\n  Space,\n  DeleteButton,\n  EditButton,\n  Icons,\n  Button,\n  Modal,\n} from "@refinedev/antd";\n\nimport { IInvoice } from "interfaces";\nimport { PdfLayout } from "components/pdf";\n\nconst { FilePdfOutlined } = Icons;\n\nexport const InvoiceList: React.FC = () => {\n  //highlight-next-line\n  const [record, setRecord] = useState<IInvoice>();\n\n  const { tableProps } = useTable<IInvoice>({\n    meta: {\n      populate: {\n        contact: { populate: ["client"] },\n        company: { populate: ["logo"] },\n        missions: "*",\n      },\n    },\n  });\n\n  //highlight-next-line\n  const { show, visible, close } = useModal();\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps}>\n          ...\n          <Table.Column<IInvoice>\n            title="Actions"\n            dataIndex="actions"\n            render={(_, record) => {\n              return (\n                <Space>\n                  <EditButton hideText size="small" recordItemId={record.id} />\n                  <DeleteButton\n                    hideText\n                    size="small"\n                    recordItemId={record.id}\n                  />\n                  //highlight-start\n                  <Button\n                    size="small"\n                    icon={<FilePdfOutlined />}\n                    onClick={() => {\n                      setRecord(record);\n                      show();\n                    }}\n                  />\n                  //highlight-end\n                </Space>\n              );\n            }}\n          />\n        </Table>\n      </List>\n      //highlight-start\n      <Modal visible={visible} onCancel={close} width="80%" footer={null}>\n        <PdfLayout record={record} />\n      </Modal>\n      //highlight-end\n    </>\n  );\n};\n')),(0,i.yg)("p",null,"We`ve created a button in our Invoice List and when this button is pressed, we show the Modal component that contains the PdfLayout we created. Finally, as you can see, we passed the record data in the Invoice List as PdfLayout props."),(0,i.yg)("p",null,"Now that we have the data of the Invoices we can edit the PdfLayout."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Show Code"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/pdf/PdfLayout.tsx"',title:'"src/components/pdf/PdfLayout.tsx"'},'import { useRef } from "react";\n\n//highlight-start\nimport {\n  Document,\n  Image,\n  Page,\n  StyleSheet,\n  View,\n  Text,\n  PDFViewer,\n} from "@react-pdf/renderer";\n//highlight-end\nimport { IInvoice } from "interfaces";\nimport { API_URL } from "../../constants";\n\ntype PdfProps = {\n  record: IInvoice | undefined;\n};\n\nexport const PdfLayout: React.FC<PdfProps> = ({ record }) => {\n  const total = record?.missions.reduce((prev: any, cur: any): any => {\n    return prev + cur.day * cur.daily_rate;\n  }, 0);\n\n  return (\n    //highlight-start\n    <PDFViewer style={styles.viewer}>\n      <Document>\n        <Page style={styles.page} size="A4">\n          <View>\n            <Image\n              src={API_URL + record?.company?.logo?.url}\n              style={{ width: "120px", height: "auto" }}\n            />\n            <View style={styles.invoiceTextNumberContainer}>\n              <Text\n                style={styles.invoiceText}\n              >{`Invoice: Invoice_#${record?.id}${record?.name}`}</Text>\n              <Text\n                style={styles.invoiceId}\n              >{`Invoice ID: INVOICE_#${record?.id}`}</Text>\n            </View>\n          </View>\n          <View style={styles.dividerLG} />\n\n          <View style={styles.invoiceForFromContainer}>\n            <View style={styles.invoiceFor}>\n              <Text style={styles.invoiceForFromTitle}>invoice For:</Text>\n              <View>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.contact?.client?.name}\n                </Text>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.contact?.first_name}\n                </Text>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.contact?.last_name}\n                </Text>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.contact?.email}\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.invoiceFrom}>\n              <Text style={styles.invoiceForFromTitle}>From:</Text>\n              <View>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.company.name}\n                </Text>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.company.city}\n                </Text>\n                <Text style={styles.invoiceForFromText}>\n                  {record?.company.address}, {record?.company.country}\n                </Text>\n              </View>\n              <View style={styles.dividerSM} />\n              <View>\n                <Text\n                  style={styles.invoiceForFromText}\n                >{`Invoice ID: ${record?.id}`}</Text>\n                <Text\n                  style={styles.invoiceForFromText}\n                >{`Invoice Custom ID: ${record?.custom_id}`}</Text>\n                <Text\n                  style={styles.invoiceForFromText}\n                >{`Invoice Date: ${record?.date}`}</Text>\n              </View>\n            </View>\n          </View>\n\n          <View style={styles.table}>\n            <View style={styles.tableHeader}>\n              <Text style={[styles.tableHeaderItem, { width: "40%" }]}>\n                Mission\n              </Text>\n              <Text style={[styles.tableHeaderItem, { width: "20%" }]}>\n                Day\n              </Text>\n              <Text style={[styles.tableHeaderItem, { width: "20%" }]}>\n                Day Rate\n              </Text>\n              <Text style={[styles.tableHeaderItem, { width: "20%" }]}>\n                Total\n              </Text>\n            </View>\n            {record?.missions.map((item) => {\n              return (\n                <View key={item.id} style={styles.tableRow}>\n                  <Text style={[styles.tableCol, { width: "40%" }]}>\n                    {item.mission}\n                  </Text>\n                  <Text style={[styles.tableCol, { width: "20%" }]}>\n                    {item.day}\n                  </Text>\n                  <Text style={[styles.tableCol, { width: "20%" }]}>\n                    {item.daily_rate}\n                  </Text>\n                  <Text style={[styles.tableCol, { width: "20%" }]}>\n                    {item.daily_rate * item.day}\n                  </Text>\n                </View>\n              );\n            })}\n          </View>\n\n          <View style={styles.signatureTotalContainer}>\n            <View style={styles.signatureContainer}>\n              <Text style={styles.signatureText}>\n                Signature: ________________\n              </Text>\n              <Text style={styles.signatureText}>\n                Date: {record?.date.toString()}\n              </Text>\n            </View>\n\n            <View style={styles.totalContainer}>\n              <Text style={styles.totalText}>SUBTOTAL: {subtotal}</Text>\n              <Text style={styles.totalText}>\n                Discount(%): {record?.discount}\n              </Text>\n              <Text style={styles.totalText}>Tax(%): {record?.tax}</Text>\n              <Text style={styles.totalText}>\n                Total($):\n                {subtotal +\n                  (subtotal * (record?.tax as number)) / 100 -\n                  (subtotal * (record?.discount as number)) / 100}\n              </Text>\n            </View>\n          </View>\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>{record?.company.city}</Text>\n            <Text style={styles.footerText}>\n              {record?.company.address}, {record?.company.country}\n            </Text>\n          </View>\n        </Page>\n      </Document>\n    </PDFViewer>\n    //highlight-end\n  );\n};\n\n//highlight-start\nconst styles = StyleSheet.create({\n  viewer: {\n    paddingTop: 32,\n    width: "100%",\n    height: "80vh",\n    border: "none",\n  },\n  page: {\n    display: "flex",\n    padding: "0.4in 0.4in",\n    fontSize: 12,\n    color: "#333",\n    backgroundColor: "#fff",\n  },\n  invoiceTextNumberContainer: {\n    display: "flex",\n    flexDirection: "row",\n    alignItems: "center",\n    justifyContent: "space-between",\n  },\n  invoiceText: {\n    color: "#3aabf0",\n  },\n  invoiceId: {\n    textAlign: "center",\n  },\n  invoiceForFromContainer: {\n    display: "flex",\n    flexDirection: "row",\n    justifyContent: "space-between",\n  },\n  invoiceForFromTitle: {\n    marginBottom: 24,\n  },\n  invoiceFor: {\n    flex: 1.5,\n  },\n  invoiceFrom: {\n    flex: 1,\n  },\n  invoiceForFromText: {\n    color: "#787878",\n    lineHeight: 1.5,\n  },\n  dividerSM: {\n    width: "100%",\n    height: 1,\n    marginTop: 12,\n    marginBottom: 12,\n    backgroundColor: "#e5e5e5",\n  },\n  dividerLG: {\n    width: "100%",\n    height: 1,\n    marginTop: 40,\n    marginBottom: 40,\n    backgroundColor: "#e5e5e5",\n  },\n  table: {\n    marginTop: 32,\n  },\n  tableHeader: {\n    display: "flex",\n    flexDirection: "row",\n    textAlign: "center",\n  },\n  tableHeaderItem: {\n    paddingVertical: 8,\n    border: "1px solid #000",\n    borderBottom: "none",\n  },\n  tableRow: {\n    display: "flex",\n    flexDirection: "row",\n  },\n  tableCol: {\n    paddingVertical: 8,\n    paddingHorizontal: 4,\n    border: "1px solid #000",\n  },\n  signatureTotalContainer: {\n    display: "flex",\n    flexDirection: "row",\n    justifyContent: "space-between",\n    marginTop: 32,\n  },\n  signatureContainer: {},\n  totalContainer: {},\n  signatureText: {\n    marginTop: 32,\n  },\n  totalText: {\n    marginTop: 16,\n  },\n  footer: {\n    borderTop: "1px solid #e5e5e5",\n    paddingTop: 8,\n    marginTop: "auto",\n  },\n  footerText: {\n    color: "#787878",\n    lineHeight: 1.5,\n  },\n});\n//highlight-end\n')))),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-01-refine-invoice-generator-p2/invoice_pdf.gif",alt:"Refine Invoice PDF Export"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("admonition",{title:"Demo Credentials",type:"note"},(0,i.yg)("ul",{parentName:"admonition"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Username"),": demo"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Password"),": demodemo"))),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"PDF download may not work in codeSandbox mode. With ",(0,i.yg)("a",{parentName:"p",href:"https://n59710.csb.app/invoices"},(0,i.yg)("strong",{parentName:"a"},"this"))," link, you can open the example in the browser and try it.")),(0,i.yg)(m,{path:"blog-invoice-generator",mdxType:"CodeSandboxExample"}),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"In this post, we've created a fully customizable and completely functional Invoice Generator app. If you want to construct an application similar to this, you may add any feature with ",(0,i.yg)("strong",{parentName:"p"},"Refine")," and personalize your invoice generator to your liking. We developed in very short amount of time, thanks to ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"'s features and the possibilities it provides for customization."),(0,i.yg)("p",null,"You can develop any web application or admin panel you want in a very short time with ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"."),(0,i.yg)("p",null,"With ",(0,i.yg)("strong",{parentName:"p"},"Refine"),"'s headless and SSR-Next.js features, it is possible and very easy to develop both ",(0,i.yg)("strong",{parentName:"p"},"B2B")," and ",(0,i.yg)("strong",{parentName:"p"},"B2C")," applications using a single framework."))}h.isMDXComponent=!0}}]);