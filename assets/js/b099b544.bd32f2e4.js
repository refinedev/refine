"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[12308],{58860:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var i=t(37953);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,m=d["".concat(l,".").concat(u)]||d[u]||g[u]||o;return t?i.createElement(m,r(r({ref:n},c),{},{components:t})):i.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},49697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>d});t(37953);var i=t(58860);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={title:"How to use Conditional Rendering in React",description:"We'll implement Conditional Rendering in React and the various ways to use it in your React applications.",slug:"react-conditional-rendering",authors:"deborah_emeni",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/social-2.png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/react-conditional-rendering",source:"@site/blog/2024-07-17-conditional-rendering.md",title:"How to use Conditional Rendering in React",description:"We'll implement Conditional Rendering in React and the various ways to use it in your React applications.",date:"2024-07-17T00:00:00.000Z",formattedDate:"July 17, 2024",tags:[{label:"react",permalink:"/blog/tags/react"}],readingTime:15.235,hasTruncateMarker:!1,authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],frontMatter:{title:"How to use Conditional Rendering in React",description:"We'll implement Conditional Rendering in React and the various ways to use it in your React applications.",slug:"react-conditional-rendering",authors:"deborah_emeni",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Unexpected token in JSON at position 0 error",permalink:"/blog/unexpected-token-in-json-at-position-0-error"},nextItem:{title:"How to Use Two Dimensional Layouts with CSS Grid?",permalink:"/blog/css-grid"},relatedPosts:[{title:"How to use Material UI Select in React",description:"We'll discover the Material UI select component with examples",permalink:"/blog/material-ui-select-component",formattedDate:"December 20, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:10.94,date:"2024-12-20T00:00:00.000Z"},{title:"Beginner's Guide to React Query",description:"We'll be looking at the basics of React Query, how to use it, and why you should use it.",permalink:"/blog/react-query-guide",formattedDate:"November 28, 2024",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:13.42,date:"2024-11-28T00:00:00.000Z"},{title:"How to use React Strict Mode in React 18",description:"What is Strict Mode in React 18 and how to use it to find and fix bugs in your React application.",permalink:"/blog/react-strict-mode-in-react-18",formattedDate:"July 10, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:10.835,date:"2024-07-10T00:00:00.000Z"}],authorPosts:[{title:"React Slick Examples - Creating a carousel",description:"We'll see how to use React Slick in your React projects through a step-by-step guide and hands-on demo.",permalink:"/blog/react-slick",formattedDate:"January 2, 2025",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:20.7,date:"2025-01-02T00:00:00.000Z"},{title:"The Important Differences between URI VS URL",description:"We'll be looking at the differences between URI and URL, and how they are used in web development.",permalink:"/blog/uri-vs-url",formattedDate:"September 18, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:14.455,date:"2024-09-18T00:00:00.000Z"},{title:"gRPC vs REST - A Brief Comparison",description:"We'll explore practical use cases of REST and gRPC to enable you to select the most appropriate API for your project.",permalink:"/blog/grpc-vs-rest",formattedDate:"September 24, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:22.01,date:"2024-09-24T00:00:00.000Z"}]},c={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is Conditional Rendering in React?",id:"what-is-conditional-rendering-in-react",level:2},{value:"Demo: Methods of Conditional Rendering in React",id:"demo-methods-of-conditional-rendering-in-react",level:2},{value:"Using If-else",id:"using-if-else",level:2},{value:"Rendering nothing with null",id:"rendering-nothing-with-null",level:2},{value:"Conditional rendering with switch statements",id:"conditional-rendering-with-switch-statements",level:2},{value:"Using ternary operators",id:"using-ternary-operators",level:2},{value:"Using Logical AND (&amp;&amp;) and OR (||) operators (Short Circuit Evaluation)",id:"using-logical-and--and-or--operators-short-circuit-evaluation",level:2},{value:"Common Pitfalls in Conditional Rendering",id:"common-pitfalls-in-conditional-rendering",level:2},{value:"Overusing Conditional Logic",id:"overusing-conditional-logic",level:3},{value:"State Management Issues",id:"state-management-issues",level:3},{value:"Performance Degradation",id:"performance-degradation",level:3},{value:"Conditional Rendering of Large Components",id:"conditional-rendering-of-large-components",level:3},{value:"Ignoring Accessibility",id:"ignoring-accessibility",level:3},{value:"Inconsistent User Experience",id:"inconsistent-user-experience",level:3},{value:"Keep It Simple",id:"keep-it-simple",level:3},{value:"Use Descriptive Variable Names",id:"use-descriptive-variable-names",level:3},{value:"Optimize Performance",id:"optimize-performance",level:3},{value:"Implement Code-Splitting and Lazy Loading",id:"implement-code-splitting-and-lazy-loading",level:3},{value:"Consider Accessibility",id:"consider-accessibility",level:3},{value:"Maintain Consistent User Experience",id:"maintain-consistent-user-experience",level:3},{value:"Separate Logic from JSX",id:"separate-logic-from-jsx",level:3},{value:"Using IIFEs (Immediately Invoked Function Expressions)",id:"using-iifes-immediately-invoked-function-expressions",level:2},{value:"Use cases of conditional rendering",id:"use-cases-of-conditional-rendering",level:2},{value:"Best Practices for Testing Conditional Rendering in React",id:"best-practices-for-testing-conditional-rendering-in-react",level:2},{value:"Using Jest and React Testing Library",id:"using-jest-and-react-testing-library",level:3},{value:"Test Different States",id:"test-different-states",level:3},{value:"Mock Functions and Props",id:"mock-functions-and-props",level:3},{value:"Snapshots for UI Testing",id:"snapshots-for-ui-testing",level:3},{value:"Example Code",id:"example-code",level:3},{value:"Install Necessary Packages",id:"install-necessary-packages",level:3},{value:"Component Example",id:"component-example",level:3},{value:"Test File",id:"test-file",level:3},{value:"Testing with Mock Functions",id:"testing-with-mock-functions",level:3},{value:"Using Snapshots",id:"using-snapshots",level:3},{value:"Conclusion",id:"conclusion",level:2}],g={toc:d},u="wrapper";function m(e){var{components:n}=e,t=r(e,["components"]);return(0,i.yg)(u,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),i.forEach((function(n){a(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"This article was last updated on July 17, 2024, to add sections for Common Pitfalls and Best Practices in Conditional Rendering and Testing Conditional Rendering in React Applications.")),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,'One of the essential features in modern React applications is the dynamic rendering of User Interface (UI) components with JSX based on user interactions, which cause certain events to be triggered and specific actions to be performed. These events are typically defined in functional components while building the application and are carried out by "',(0,i.yg)("strong",{parentName:"p"},"Conditional Rendering"),'."'),(0,i.yg)("p",null,"Developers can use React to define a number of distinct functional components that are only rendered when a specific condition is passed. This is a useful feature that has provided several benefits in a variety of areas, including user personalization, defining authentication roles, and implementing Authorization."),(0,i.yg)("p",null,"In this article, you'll learn about Conditional Rendering in React and the various ways to use it in your React applications."),(0,i.yg)("p",null,"Steps we'll cover:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#what-is-conditional-rendering-in-react"},"What is Conditional Rendering in React?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#demo-methods-of-conditional-rendering-in-react"},"Demo: Methods of Conditional Rendering in React")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#using-if-else"},"Using If-else")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#rendering-nothing-with-null"},"Rendering nothing with null")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#conditional-rendering-with-switch-statements"},"Conditional rendering with switch statements")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#using-ternary-operators"},"Using ternary operators")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#using-logical-and--and-or--operators-short-circuit-evaluation"},"Using Logical AND (\\&\\&) and OR (||) operators (Short Circuit Evaluation)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#common-pitfalls-in-conditional-rendering"},"Common Pitfalls in Conditional Rendering")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#using-iifes-immediately-invoked-function-expressions"},"Using IIFEs (Immediately Invoked Function Expressions)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#use-cases-of-conditional-rendering"},"Use cases of conditional rendering")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#best-practices-for-testing-conditional-rendering-in-react"},"Best Practices for Testing Conditional Rendering in React"))),(0,i.yg)("h2",{id:"what-is-conditional-rendering-in-react"},"What is Conditional Rendering in React?"),(0,i.yg)("p",null,"When developing applications, you must consider the experience of your application's users. You may want to show or deliver certain functionalities to your users based on their interaction with your application. In other words, depending on the state of your application, you may want your users to have access to specific content or functionalities built into your app. All of these are made possible by conditional rendering."),(0,i.yg)("p",null,"In React, creating and rendering functional components in JSX is the order of the day, hence conditional rendering is the most feasible way of providing an easy user flow or customer experience based on certain events in your application."),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"Next, you\u2019ll learn various common and useful methods of conditional rendering.")),(0,i.yg)("h2",{id:"demo-methods-of-conditional-rendering-in-react"},"Demo: Methods of Conditional Rendering in React"),(0,i.yg)("p",null,"React provides users with a much more functional approach to development, along with the advantages of using only Javascript. This section will demonstrate how to perform conditional rendering in React in a variety of ways. You'll be writing and testing code in the ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/"},"codesandbox")," environment."),(0,i.yg)("p",null,"To begin, create a new React application on your ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/"},"codesandbox"),"."),(0,i.yg)("h2",{id:"using-if-else"},"Using If-else"),(0,i.yg)("p",null,"Conditional rendering in React works similarly to the if-else statement in JavaScript, and each functional component returns a JSX value (which stands for JavaScript XML) that is rendered.\nThe following example shows how to render JSX conditionally using the ",(0,i.yg)("inlineCode",{parentName:"p"},"if-else")," syntax. You can accomplish this by using a variable or encapsulating the changing JSX in a wrapping function that is added to the return statement."),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"The code example is available on")," ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/using-if-else-for-conditional-rendering-6506hl"},(0,i.yg)("em",{parentName:"a"},"codesandbox")),(0,i.yg)("em",{parentName:"p"},".")),(0,i.yg)("p",null,"First, you'll create two components: a ",(0,i.yg)("strong",{parentName:"p"},"HeaderComponent.js")," file that contains the JSX that will be rendered when the user logs in, as shown below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"export default function HeaderComponent(props) {\n  return (\n    <>\n      <h1> Welcome {props.username}! </h1>\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n    </>\n  );\n}\n")),(0,i.yg)("p",null,"Create a ",(0,i.yg)("strong",{parentName:"p"},"NotLoggedIn.js")," file to house the JSX that will be rendered when the user is not logged in, as shown below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"export default function NotLoggedIn(props) {\n  return <h2> No User Found </h2>;\n}\n")),(0,i.yg)("p",null,"Then, import the two components into the ",(0,i.yg)("strong",{parentName:"p"},"app.js")," file and add an ",(0,i.yg)("inlineCode",{parentName:"p"},"if-else")," condition before the ",(0,i.yg)("inlineCode",{parentName:"p"},"return")," statement that will assign either of the components to the ",(0,i.yg)("inlineCode",{parentName:"p"},"{template}")," depending on whether the ",(0,i.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," state is ",(0,i.yg)("strong",{parentName:"p"},"true")," or ",(0,i.yg)("strong",{parentName:"p"},"false"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import HeaderComponent from "./HeaderComponent";\nimport NotLoggedIn from "./NotLoggedIn";\nimport React from "react";\n\nimport "./styles.css";\n\nexport default function App() {\n  const [isloggedIn, setIsLoggedIn] = React.useState(false);\n  let template;\n  if (isloggedIn) {\n    template = <HeaderComponent username="Debby" />;\n  } else {\n    template = <NotLoggedIn />;\n  }\n  return <div className="App">{template}</div>;\n}\n')),(0,i.yg)("p",null,"When a user logs in, the state is set to ",(0,i.yg)("strong",{parentName:"p"},"true"),", and the ",(0,i.yg)("strong",{parentName:"p"},"welcome message")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"HeaderComponent")," is displayed to the user as follows:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-1.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"If the user is not logged in, the state is set to ",(0,i.yg)("strong",{parentName:"p"},"false"),", and the following ",(0,i.yg)("strong",{parentName:"p"},"message")," is displayed from the ",(0,i.yg)("inlineCode",{parentName:"p"},"NotloggedIn")," component:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-2.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"rendering-nothing-with-null"},"Rendering nothing with null"),(0,i.yg)("p",null,"On occasion, you may want to limit the contents or pages that are rendered to your users based on their preferences, time, location, demography, and other interests in order to improve your application's user experience or personalization. In such a case, you would not want to bore or stress your users with irrelevant content."),(0,i.yg)("p",null,"When rendering JSX, conditional rendering in React gives you the option of not rendering a specific piece of content or anything to your users. A good example is the ",(0,i.yg)("a",{parentName:"p",href:"https://www.paypal.com/us/business"},"Paypal business site"),", where users are unable to access certain PayPal businesses because the template is not being rendered."),(0,i.yg)("p",null,"To implement such functionality in React, use 'null' as the rendered template. Using 'null' will result in nothing being rendered and will also prevent errors due to no template being returned.\nAs an example, suppose you have a \"food ordering\" application that only renders a page to edit orders for specific users with permission rights, while users with none are rendered nothing."),(0,i.yg)("p",null,"Create another react application on codesandbox or clone the code example ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/rendering-nothing-with-nulll-bg5ks9?file=/src/App.js"},"here"),"."),(0,i.yg)("p",null,"Then, create an ",(0,i.yg)("strong",{parentName:"p"},"EditComponent.js")," file that will contain a welcome message and a button interface for editing food orders:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'export default function HeaderComponent(props) {\n  return (\n    <>\n      <h1> Welcome {props.username}! </h1>\n      <button style={{ padding: "10px", background: "green", color: "white" }}>\n        {" "}\n        Edit{" "}\n      </button>\n    </>\n  );\n}\n')),(0,i.yg)("p",null,"Import the ",(0,i.yg)("inlineCode",{parentName:"p"},"EditComponent")," into the ",(0,i.yg)("strong",{parentName:"p"},"App.js")," file and add a state ",(0,i.yg)("inlineCode",{parentName:"p"},"isHasPermission")," to check if the user has the permission to edit. Then, add a condition that checks if the user has editing permission and returns the ",(0,i.yg)("inlineCode",{parentName:"p"},"EditComponent")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," depending on whether the state is ",(0,i.yg)("strong",{parentName:"p"},"true")," or ",(0,i.yg)("strong",{parentName:"p"},"false"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import EditComponent from "./EditComponent";\nimport React from "react";\n\nimport "./styles.css";\n\nexport default function App() {\n  const [isHasPermission, setIsHasPermission] = React.useState(true);\n  let template;\n  if (isHasPermission) {\n    template = <EditComponent username="Debby" />;\n  } else {\n    template = null;\n  }\n  return (\n    <div className="App">\n      <div>\n        <ul>\n          <li> Food </li>\n          <li> Rice </li>\n          <li> Goat </li>\n          <li> Food </li>\n        </ul>\n      </div>\n      {template}\n    </div>\n  );\n}\n')),(0,i.yg)("p",null,"If the user has permission, the state is set to ",(0,i.yg)("strong",{parentName:"p"},"true")," and the ",(0,i.yg)("inlineCode",{parentName:"p"},"EditComponent")," is rendered as follows:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-3.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("p",null,"If the user has no permission, the state is set to ",(0,i.yg)("strong",{parentName:"p"},"false")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," is rendered as the ",(0,i.yg)("inlineCode",{parentName:"p"},"template"),":"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-4.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"conditional-rendering-with-switch-statements"},"Conditional rendering with switch statements"),(0,i.yg)("p",null,"There are times when you may want to show a different UI to users based on the state of the application, such as the user's value. The ",(0,i.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"},"JavaScript Switch statement")," is ideal for this functionality."),(0,i.yg)("p",null,"Switch statements are not part of the JSX syntax, and so they cannot be used directly within React. You can, however, use the Switch statements in a subcomponent before using the component in the main component."),(0,i.yg)("p",null,"In the following example, you will use Switch statements to render different content based on a specific case. You will create an input that takes the user's value and renders the components the user requests."),(0,i.yg)("p",null,"What is rendered to the user is determined by what the user enters as the case. Type the following code into your ",(0,i.yg)("strong",{parentName:"p"},"app.js")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import "./styles.css";\nimport { useState } from "react";\n\nfunction SwitchComponent(props) {\n  switch (props.route) {\n    case "home":\n      return <h1> You are Home </h1>;\n    case "about-us":\n      return <h1> Check Us Out </h1>;\n    case "learn":\n      return <h1> Come and Learn the mind blowing stuffs </h1>;\n    default:\n      return null;\n  }\n}\n\nexport default function App() {\n  const [path, setPath] = useState("");\n  return (\n    <div className="App">\n      <input onChange={(e) => setPath(e.target.value)} />\n      <h1>Hello CodeSandbox</h1>\n      <SwitchComponent route={path} />\n    </div>\n  );\n}\n')),(0,i.yg)("p",null,"The component will render based on what the users enter as follows:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-5.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"using-ternary-operators"},"Using ternary operators"),(0,i.yg)("p",null,"The ternary operator is synonymous with the 'if-else' operator. The only difference between the ternary operator and the 'if-else' statement is in the implementation, as JSX supports the use of ternary operators. That is, ternary operators can be easily added to the template to be rendered\nYou can use the ternary operators to seamlessly render your components within the JSX syntax based on a specific condition."),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"The sample code can be found")," ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/using-ternary-operators-for-conditional-rendering-qqfn3l?file=/src/App.js"},(0,i.yg)("em",{parentName:"a"},"here")),(0,i.yg)("em",{parentName:"p"},".")),(0,i.yg)("p",null,"Consider the following example, which renders different content based on the client's existence or state in the application:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},'import "./styles.css";\n\nexport default function App() {\n  const isExistingClient = false;\n  return (\n    <div className="App">\n      {isExistingClient ? (\n        <>\n          <h1>Hello CodeSandbox</h1>\n          <h2>Start editing to see some magic happen!</h2>\n        </>\n      ) : (\n        <>\n          <h1> Hi!, New User </h1>\n          <h3> Welcome to our palace </h3>\n        </>\n      )}\n    </div>\n  );\n}\n')),(0,i.yg)("h2",{id:"using-logical-and--and-or--operators-short-circuit-evaluation"},"Using Logical AND (&&) and OR (||) operators (Short Circuit Evaluation)"),(0,i.yg)("p",null,"Short-circuiting is how JavaScript handles logical expression evaluation, but the logical && and || operators work slightly differently in React. When the left-hand expression returns ",(0,i.yg)("strong",{parentName:"p"},"false"),", the right-hand expression is evaluated and returns ",(0,i.yg)("strong",{parentName:"p"},"true"),". If the left-hand expression is false, the evaluation of the second expression will be returned."),(0,i.yg)("p",null,"For example, suppose you have a store application; when the store is open, it should return true and render a specific message to users; when the store is closed, it should return false and render nothing. Also, when the AND (&&) operator is true or open, the right-hand-side expression is evaluated or rendered; if it is not true, it is rendered null."),(0,i.yg)("p",null,"See the code example ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/using-logical-and-and-or-for-conditional-rendering-kuseun"},"here"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},'import "./styles.css";\n\nexport default function App() {\n  const isOpen = true;\n  const isAvailable = false;\n  return (\n    <div className="App">\n      {isOpen && (\n        <>\n          <h1>Hello CodeSandbox</h1>\n          <h2>Start editing to see some magic happen!</h2>\n        </>\n      )}\n\n      {isAvailable || (\n        <>\n          <h2> Sorry I am not available </h2>\n          <button> Make Available </button>\n        </>\n      )}\n    </div>\n  );\n}\n')),(0,i.yg)("h2",{id:"common-pitfalls-in-conditional-rendering"},"Common Pitfalls in Conditional Rendering"),(0,i.yg)("p",null,"I wanted to share some insights on common pitfalls and best practices for conditional rendering in React. I hope you find these tips useful for our projects."),(0,i.yg)("h3",{id:"overusing-conditional-logic"},"Overusing Conditional Logic"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Too much conditional logic can make the code hard to read and maintain.\nAvoid multiple nested ternary operators in the render function.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"// Avoid this\nreturn condition1 ? (\n  condition2 ? (\n    <ComponentA />\n  ) : (\n    <ComponentB />\n  )\n) : (\n  <ComponentC />\n);\n")),(0,i.yg)("h3",{id:"state-management-issues"},"State Management Issues"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Improper state management can cause unexpected behavior.\nEnsure the state is updated correctly before re-rendering.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"// Properly update state\nconst handleClick = () => {\n  setState((prevState) => ({ ...prevState, key: newValue }));\n};\n")),(0,i.yg)("h3",{id:"performance-degradation"},"Performance Degradation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Unoptimized conditional rendering can slow down performance.\nUse memoization to avoid frequent re-renders.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const MemoizedComponent = React.memo(() => {\n  return <ExpensiveComponent />;\n});\n")),(0,i.yg)("h3",{id:"conditional-rendering-of-large-components"},"Conditional Rendering of Large Components"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Rendering large components without optimization can affect load time.\nUse lazy loading for large components.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'const LazyComponent = React.lazy(() => import("./LargeComponent"));\n\nconst App = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <LazyComponent />\n  </Suspense>\n);\n')),(0,i.yg)("h3",{id:"ignoring-accessibility"},"Ignoring Accessibility"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Not considering accessibility can make the app difficult to use.\nProvide alternative text and manage focus properly.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'const AccessibleComponent = ({ isVisible }) =>\n  isVisible ? <div aria-live="polite">Content is visible</div> : null;\n')),(0,i.yg)("h3",{id:"inconsistent-user-experience"},"Inconsistent User Experience"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Issue: Inconsistent UI due to poor handling of conditions.\nUse loading indicators consistently and reset states appropriately.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const LoadingIndicator = ({ isLoading }) =>\n  isLoading ? <Spinner /> : <Content />;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Best Practices in Conditional Rendering")),(0,i.yg)("h3",{id:"keep-it-simple"},"Keep It Simple"),(0,i.yg)("p",null,"Use simple and readable conditional statements.\nPrefer if-else statements or ternary operators for clarity."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const SimpleConditional = ({ isTrue }) =>\n  isTrue ? <ComponentA /> : <ComponentB />;\n")),(0,i.yg)("h3",{id:"use-descriptive-variable-names"},"Use Descriptive Variable Names"),(0,i.yg)("p",null,"Use meaningful variable names to make conditions clear.\nName variables to describe the condition precisely."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const isUserLoggedIn = true;\nreturn isUserLoggedIn ? <Dashboard /> : <Login />;\n")),(0,i.yg)("h3",{id:"optimize-performance"},"Optimize Performance"),(0,i.yg)("p",null,"Use React.memo, useMemo, and useCallback to prevent unnecessary re-renders.\nMemoize components that are conditionally rendered."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const OptimizedComponent = React.memo(() => {\n  return <ExpensiveComponent />;\n});\n")),(0,i.yg)("h3",{id:"implement-code-splitting-and-lazy-loading"},"Implement Code-Splitting and Lazy Loading"),(0,i.yg)("p",null,"Load components only when needed using React.lazy and Suspense.\nLazy load large components to improve performance."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'const LazyComponent = React.lazy(() => import("./LargeComponent"));\n\nconst App = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <LazyComponent />\n  </Suspense>\n);\n')),(0,i.yg)("h3",{id:"consider-accessibility"},"Consider Accessibility"),(0,i.yg)("p",null,"Ensure conditional rendering doesn\u2019t compromise accessibility.\nUse ARIA attributes and manage focus for screen readers."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'const AccessibleComponent = ({ isVisible }) =>\n  isVisible ? <div aria-live="polite">Content is visible</div> : null;\n')),(0,i.yg)("h3",{id:"maintain-consistent-user-experience"},"Maintain Consistent User Experience"),(0,i.yg)("p",null,"Provide a consistent and predictable UI and state.\nUse loading spinners or placeholders for better UX."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const LoadingIndicator = ({ isLoading }) =>\n  isLoading ? <Spinner /> : <Content />;\n")),(0,i.yg)("h3",{id:"separate-logic-from-jsx"},"Separate Logic from JSX"),(0,i.yg)("p",null,"Move conditional logic outside the JSX for readability.\nUse helper functions or variables for managing conditions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"const renderContent = (isLoggedIn) => {\n  if (isLoggedIn) {\n    return <Dashboard />;\n  } else {\n    return <Login />;\n  }\n};\n\nconst App = () => {\n  const isLoggedIn = true;\n  return <div>{renderContent(isLoggedIn)}</div>;\n};\n")),(0,i.yg)("h2",{id:"using-iifes-immediately-invoked-function-expressions"},"Using IIFEs (Immediately Invoked Function Expressions)"),(0,i.yg)("p",null,"IIFEs are self-invoking functions (functions that call themselves immediately after they have been created). They allow you to use your ",(0,i.yg)("inlineCode",{parentName:"p"},"if...else")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"switch")," statements within the JSX you are returning. This opens up the possibility of using the previously mentioned ",(0,i.yg)("inlineCode",{parentName:"p"},"switch")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"if-else")," method in the JSX."),(0,i.yg)("p",null,"In the following example, you have a state called ",(0,i.yg)("inlineCode",{parentName:"p"},"isLoggedIn,")," and the content is rendered based on whether the user is logged in or not. In addition, based on the ",(0,i.yg)("inlineCode",{parentName:"p"},"isLoggedIn")," state, an input field is rendered or a welcome user message is displayed.\nThe code example can be found on ",(0,i.yg)("a",{parentName:"p",href:"https://codesandbox.io/s/using-iifes-s4bm0n?file=/src/App.js"},"codesanbox"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import "./styles.css";\n\nexport default function App() {\n  const isLoggedIn = false;\n  const user = "Debby";\n\n  return (\n    <div className="App">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n\n      {(() => {\n        if (isLoggedIn) {\n          return <h1> Welcome {user} </h1>;\n        } else {\n          return (\n            <>\n              <label style={{ textAlign: "left !important" }}>Username: </label>\n              <br />\n              <input />\n            </>\n          );\n        }\n      })()}\n    </div>\n  );\n}\n')),(0,i.yg)("p",null,"The result is shown below:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-12-14-conditional-rendering/screen-6.png",alt:"conditional rendering react"}),(0,i.yg)("br",null),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"Next, you\u2019ll see some use cases of conditional rendering.")),(0,i.yg)("h2",{id:"use-cases-of-conditional-rendering"},"Use cases of conditional rendering"),(0,i.yg)("p",null,"Conditional rendering has so many use cases. To list a few:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Authentication"),": Typically, authentication usually requires access to a user's view of a specific resource. You can derive from the understanding of conditional rendering and previous examples in this article that it can be used to authenticate users for your application.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Personalization"),": Giving customers a personalized experience is what personalization entails. To accomplish this, many templates must be customized based on the personalization conditions specified.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Authorization"),": When developing applications, you may need to hide certain actions or information from the user. This is possible by using the null method, as previously mentioned. Depending on the user's role, you can hide or render certain features."))),(0,i.yg)("h2",{id:"best-practices-for-testing-conditional-rendering-in-react"},"Best Practices for Testing Conditional Rendering in React"),(0,i.yg)("p",null,"I wanted to share some best practices for testing conditional rendering in our React applications. Effective testing ensures our components behave as expected under different conditions. Here are the key points and examples:"),(0,i.yg)("h3",{id:"using-jest-and-react-testing-library"},"Using Jest and React Testing Library"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Jest and React Testing Library are popular tools for testing React components. They provide a simple and efficient way to test conditional rendering.")),(0,i.yg)("h3",{id:"test-different-states"},"Test Different States"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ensure you cover all possible states and conditions in your tests.")),(0,i.yg)("h3",{id:"mock-functions-and-props"},"Mock Functions and Props"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use mock functions and props to simulate different scenarios.")),(0,i.yg)("h3",{id:"snapshots-for-ui-testing"},"Snapshots for UI Testing"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use snapshots to ensure the UI renders correctly based on conditions.")),(0,i.yg)("h3",{id:"example-code"},"Example Code"),(0,i.yg)("p",null,"Here\u2019s how you can set up tests for conditional rendering using Jest and React Testing Library:"),(0,i.yg)("h3",{id:"install-necessary-packages"},"Install Necessary Packages"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sh"},"   npm install --save-dev @testing-library/react @testing-library/jest-dom jest\n")),(0,i.yg)("h3",{id:"component-example"},"Component Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'// MyComponent.js\nimport React from "react";\n\nconst MyComponent = ({ isLoggedIn }) => {\n  return (\n    <div>{isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please log in.</h1>}</div>\n  );\n};\n\nexport default MyComponent;\n')),(0,i.yg)("h3",{id:"test-file"},"Test File"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'// MyComponent.test.js\nimport React from "react";\nimport { render, screen } from "@testing-library/react";\nimport "@testing-library/jest-dom/extend-expect";\nimport MyComponent from "./MyComponent";\n\ntest("renders welcome message if user is logged in", () => {\n  render(<MyComponent isLoggedIn={true} />);\n  expect(screen.getByText("Welcome back!")).toBeInTheDocument();\n});\n\ntest("renders log in message if user is not logged in", () => {\n  render(<MyComponent isLoggedIn={false} />);\n  expect(screen.getByText("Please log in.")).toBeInTheDocument();\n});\n')),(0,i.yg)("h3",{id:"testing-with-mock-functions"},"Testing with Mock Functions"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'// MyComponentWithFunction.js\nimport React from "react";\n\nconst MyComponentWithFunction = ({ isLoggedIn, handleLogin }) => {\n  return (\n    <div>\n      {isLoggedIn ? (\n        <h1>Welcome back!</h1>\n      ) : (\n        <>\n          <h1>Please log in.</h1>\n          <button onClick={handleLogin}>Log In</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MyComponentWithFunction;\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'// MyComponentWithFunction.test.js\nimport React from "react";\nimport { render, screen, fireEvent } from "@testing-library/react";\nimport "@testing-library/jest-dom/extend-expect";\nimport MyComponentWithFunction from "./MyComponentWithFunction";\n\ntest("calls handleLogin when login button is clicked", () => {\n  const handleLogin = jest.fn();\n  render(\n    <MyComponentWithFunction isLoggedIn={false} handleLogin={handleLogin} />,\n  );\n\n  fireEvent.click(screen.getByText("Log In"));\n  expect(handleLogin).toHaveBeenCalledTimes(1);\n});\n')),(0,i.yg)("h3",{id:"using-snapshots"},"Using Snapshots"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},'// MyComponentWithSnapshot.test.js\nimport React from "react";\nimport renderer from "react-test-renderer";\nimport MyComponent from "./MyComponent";\n\ntest("renders correctly when logged in", () => {\n  const tree = renderer.create(<MyComponent isLoggedIn={true} />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\ntest("renders correctly when not logged in", () => {\n  const tree = renderer.create(<MyComponent isLoggedIn={false} />).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n')),(0,i.yg)("p",null,"Testing conditional rendering in React applications ensures that our components display the correct content under various conditions. By using Jest and React Testing Library, we can efficiently test different states, mock functions, and props, and utilize snapshots for UI consistency."),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"In this article, you covered what Conditional Rendering is in React, as well as several methods of Conditional Rendering in React, such as using ",(0,i.yg)("inlineCode",{parentName:"p"},"if...else"),", rendering nothing with ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),", conditional rendering with ",(0,i.yg)("inlineCode",{parentName:"p"},"switch")," statements, using ternary operators, using logical AND (&&) and OR (||) operators (Short Circuit Evaluation), and Using IIFEs. You also learned about some conditional rendering use cases."))}m.isMDXComponent=!0}}]);