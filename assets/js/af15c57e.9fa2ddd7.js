"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[43588],{51606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>d,default:()=>y,frontMatter:()=>l,metadata:()=>c,toc:()=>u});t(37953);var a=t(58860),r=t(82433),i=t(47191);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={title:"Setting Up the Invoicer App",description:"We start with setting up the Invoicer app by choosing Ant Design as a UI framework and Strapi as a dataprovider",slug:"refine-react-invoice-generator-2",authors:"abdullah_numan",tags:["refine-week","refine","strapi","ant-design"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/social.png",hide_table_of_contents:!1},d=void 0,c={permalink:"/blog/refine-react-invoice-generator-2",source:"@site/blog/2023-04-11-refine-invoicer-2.md",title:"Setting Up the Invoicer App",description:"We start with setting up the Invoicer app by choosing Ant Design as a UI framework and Strapi as a dataprovider",date:"2023-04-11T00:00:00.000Z",formattedDate:"April 11, 2023",tags:[{label:"refine-week",permalink:"/blog/tags/refine-week"},{label:"refine",permalink:"/blog/tags/refine"},{label:"strapi",permalink:"/blog/tags/strapi"},{label:"ant-design",permalink:"/blog/tags/ant-design"}],readingTime:19.145,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Setting Up the Invoicer App",description:"We start with setting up the Invoicer app by choosing Ant Design as a UI framework and Strapi as a dataprovider",slug:"refine-react-invoice-generator-2",authors:"abdullah_numan",tags:["refine-week","refine","strapi","ant-design"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/social.png",hide_table_of_contents:!1},prevItem:{title:"Adding CRUD Pages",permalink:"/blog/refine-react-invoice-generator-3"},nextItem:{title:"Pilot & Refine architecture",permalink:"/blog/refine-react-invoice-generator-1"},relatedPosts:[{title:"React-admin vs Refine - Which React Framework is Best for B2B Apps?",description:"We'll compare the architectural structures of two web development frameworks - Refine and React-admin.",permalink:"/blog/react-admin-vs-refine",formattedDate:"August 12, 2023",authors:[{name:"Ali Emir",title:"Software Developer",imageURL:"https://github.com/aliemir.png",key:"ali_emir"}],readingTime:36.885,date:"2023-08-12T00:00:00.000Z"},{title:"Adding CRUD Actions and Authentication",description:"We'll initialize our Pixels app using Refine and get familiar with the boilerplate code to be created with the create refine-app CLI tool.",permalink:"/blog/refine-pixels-3",formattedDate:"February 16, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:29.96,date:"2023-02-16T00:00:00.000Z"},{title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",permalink:"/blog/refine-react-ant-design-admin-panel-framework",formattedDate:"February 21, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:12.565,date:"2022-02-21T00:00:00.000Z"}],authorPosts:[{title:"Form Schema Validation with Zod and React Hook Form",description:"We'll explore how to use Zod schema validation with React Hook Form in a TypeScript based React application.",permalink:"/blog/zod-typescript",formattedDate:"May 21, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:22.145,date:"2024-05-21T00:00:00.000Z"},{title:"Pilot & Refine architecture",description:"We'll be taking a look at the architecture of Refine and how week of RefineWeek series will be structured.",permalink:"/blog/refine-react-invoice-generator-1",formattedDate:"April 10, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:9.195,date:"2023-04-10T00:00:00.000Z"},{title:"A Definitive guide on JavaScript every Method",description:"We expound with examples what the JavaScript every method is, how it works and when to use it.",permalink:"/blog/javascript-every-method",formattedDate:"January 17, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:14.22,date:"2025-01-17T00:00:00.000Z"}]},g={authorsImageUrls:[void 0]},u=[{value:"RefineWeek ft. Strapi series",id:"refineweek-ft-strapi-series",level:3},{value:"Overview",id:"overview",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Exploring the App",id:"exploring-the-app",level:2},{value:"The <code>&lt;Refine /&gt;</code> Component",id:"the-refine--component",level:3},{value:"<code>&lt;Refine /&gt;</code>&#39;s <code>dataProvider</code> Prop",id:"refine-s-dataprovider-prop",level:3},{value:"Strapi Client",id:"strapi-client",level:2},{value:"<code>&lt;Refine /&gt;</code>&#39;s <code>authProvider</code> Prop",id:"refine-s-authprovider-prop",level:3},{value:"Refine with a Strapi Backend",id:"refine-with-a-strapi-backend",level:2},{value:"Setting Up Strapi Instance",id:"setting-up-strapi-instance",level:3},{value:"Setting Up Admin User for Strapi",id:"setting-up-admin-user-for-strapi",level:3},{value:"Creating Strapi Collections",id:"creating-strapi-collections",level:3},{value:"Companies Collection",id:"companies-collection",level:3},{value:"Clients Collection",id:"clients-collection",level:3},{value:"Contacts Collection",id:"contacts-collection",level:3},{value:"Setting Up App Roles for Strapi",id:"setting-up-app-roles-for-strapi",level:3},{value:"Summary",id:"summary",level:2}],m={toc:u},h="wrapper";function y(e){var{components:n}=e,t=p(e,["components"]);return(0,a.yg)(h,s(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},m,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"In this episode, we initialize our ",(0,a.yg)("strong",{parentName:"p"},"Pdf Invoice Generator")," app using with the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," CLI Wizard and get familiar with the boilerplate code created. We also initialize our ",(0,a.yg)("a",{parentName:"p",href:"https://strapi.io/"},(0,a.yg)("strong",{parentName:"a"},"Strapi"))," backend server and create the database collections we need."),(0,a.yg)("p",null,"This is Day 2 of the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/week-of-refine-strapi/"},(0,a.yg)("strong",{parentName:"a"},"#RefineWeek"))," series. This five-part tutorial that aims to help developers learn the ins-and-outs of ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},(0,a.yg)("strong",{parentName:"a"},"Refine")),"'s powerful capabilities and get going with ",(0,a.yg)("strong",{parentName:"p"},"Refine")," within a week."),(0,a.yg)("h3",{id:"refineweek-ft-strapi-series"},"RefineWeek ft. Strapi series"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Day 1 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-react-invoice-generator-1/"},"Pilot & Refine architecture"))),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"In the previous post, we got a preview of ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},(0,a.yg)("strong",{parentName:"a"},"Refine")),"'s underlying architecture, especially on how ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s core modules abstract and divide an app's logic inside individual providers and allow their methods to be easily accessed and invoked with hooks from inside consumer components. This abstraction at the providers layer is where ",(0,a.yg)("strong",{parentName:"p"},"Refine")," shines and require extensive configuration to begin with."),(0,a.yg)("p",null,"In this part, we will get into the details of two important providers: namely, ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/data/data-provider"},(0,a.yg)("inlineCode",{parentName:"a"},"dataProvider"))," and ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/authentication/auth-provider/"},(0,a.yg)("inlineCode",{parentName:"a"},"authProvider"))," that are passed to the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/components/refine-config/"},(0,a.yg)("inlineCode",{parentName:"a"},"<Refine />"))," component. We will be building on this knowledge in the coming episodes."),(0,a.yg)("p",null,"These two providers will be generated by the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," CLI wizard which allows us to interactively choose desired supplementary packages for our project. We'll use ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," for our backend and ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," for the UI. So, let's start off with setting up the ",(0,a.yg)("strong",{parentName:"p"},"Pdf Invoice Generator")," app right away."),(0,a.yg)("h2",{id:"project-setup"},"Project Setup"),(0,a.yg)("p",null,"For this project, we are using ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," as our backend service. ",(0,a.yg)("strong",{parentName:"p"},"Refine")," comes with an optional package for ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," that gives us ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," definitions out-of-the-box for handling requests related to CRUD actions, authentication and authorization against models hosted in a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," instance."),(0,a.yg)("p",null,"We are going to include ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s Ant Design package for the UI side."),(0,a.yg)("p",null,"We have two options for bootstrapping a new ",(0,a.yg)("strong",{parentName:"p"},"Refine")," application: ",(0,a.yg)("a",{parentName:"p",href:"https://refine.new/"},"https://refine.new/")," browser tool and ",(0,a.yg)("inlineCode",{parentName:"p"},"create refine-app")," CLI tool. You can choose whichever you prefer."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"refine-new",label:"refine.new",default:!0,mdxType:"TabItem"},(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.new/"},"refine.new")," is a powerful open-source tool that lets you create React-based, headless UI enterprise applications right in your browser. You have the ability to preview, modify, and download your project immediately, thereby streamlining the development process."),(0,a.yg)("p",null,"Building Refine CRUD apps with refine.new is very straight forward. You can choose the libraries and frameworks you want to work with, and the tool will generate a boilerplate code for you."),(0,a.yg)("p",null,"For this tutorial, we'll be select the following options:\n",(0,a.yg)("strong",{parentName:"p"},"React Platform"),": Create React App\n",(0,a.yg)("strong",{parentName:"p"},"UI Framework"),": Ant Design\n",(0,a.yg)("strong",{parentName:"p"},"Backend"),": Strapi\n",(0,a.yg)("strong",{parentName:"p"},"Authentication Provider"),": Strapi"),(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/refine-new.gif",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"After complete the step you can download the project and run it locally.")),(0,a.yg)(i.A,{value:"CLI",label:"create refine-app",mdxType:"TabItem"},"You can also use the Refine CLI Wizard command to interactively initialize the project.",(0,a.yg)("p",null,"Let's go ahead and use the ",(0,a.yg)("inlineCode",{parentName:"p"},"npm create refine-app")," command to interactively initialize the project. Navigate to a folder of your choice and run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm create refine-app@latest pdf-invoice-generator\n")),(0,a.yg)("p",null,"The CLI wizard presents us with a set of questions for choosing the libraries and frameworks we want to work with. We'll initialize a ",(0,a.yg)("strong",{parentName:"p"},"Refine")," project with ",(0,a.yg)("inlineCode",{parentName:"p"},"CRA"),". We would like to generate some example pages so that we can use the boilerplate code to add our own ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," and route definitions. So, I went ahead and chose the following options:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"\u2714 Choose a project template \xb7 refine-react\n\u2714 What would you like to name your project?: \xb7 blog-pdf-invoice-generator\n\u2714 Choose your backend service to connect: \xb7 Strapi\n\u2714 Do you want to use a UI Framework?: \xb7 Ant Design\n\u2714 Do you want to add example pages?: \xb7 Yes\n\u2714 Do you need i18n (Internationalization) support?: \xb7 No\n\u2714 Choose a package manager: \xb7 npm\n\u2714 Would you mind sending us your choices so that we can improve create refine-app? \xb7 yes\n")),(0,a.yg)("p",null,"This should create a rudimentary ",(0,a.yg)("strong",{parentName:"p"},"Refine")," app that supports ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," in the UI and ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," in the backend."))),(0,a.yg)("p",null,"If we open the app in our code editor, we can see that ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s optional packages for ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," and ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," are added to ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"dependencies": {\n    "@ant-design/icons": "5.0.1",\n    "@react-pdf/renderer": "^3.1.8",\n    // highlight-start\n    "@refinedev/antd": "^5.3.10",\n    // highlight-end\n    "@refinedev/cli": "^2.1.2",\n    "@refinedev/core": "^4.5.6",\n    "@refinedev/inferencer": "^3.0.0",\n    "@refinedev/kbar": "^1.0.0",\n    "@refinedev/react-router-v6": "^4.0.0",\n    // highlight-start\n    "@refinedev/strapi-v4": "^4.0.0",\n    "antd": "^5.0.5",\n    "axios": "^1.6.2",\n    // highlight-end\n    "react": "^18.0.0",\n    "react-dom": "^18.0.0",\n    "react-router-dom": "^6.8.1",\n    "react-scripts": "^5.0.0"\n  },\n')),(0,a.yg)("p",null,"We are going to use ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," components for our UI thanks to the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"antd")," packages. ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/strapi-v4")," module allows us to use ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," auth and data providers."),(0,a.yg)("p",null,"We'll cover these ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," related providers more extensively as we add features to our app in the upcoming episodes. However, let's try building the app for now, and check what we have in the browser after running the development server. In the terminal, run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,a.yg)("p",null,"After that, if we navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000"),", and we should have a ",(0,a.yg)("strong",{parentName:"p"},"Refine")," app asking us to log in:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/login.png",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"If we log in with the default values, we should be able to view a dashboard with the following ",(0,a.yg)("inlineCode",{parentName:"p"},"blog posts")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"categories")," resources:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/welcome.png",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"exploring-the-app"},"Exploring the App"),(0,a.yg)("p",null,"Let's now see what ",(0,a.yg)("strong",{parentName:"p"},"Refine")," scaffolded for us during initialization."),(0,a.yg)("p",null,"Our main point of focus is the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder. And for now, especially the ",(0,a.yg)("inlineCode",{parentName:"p"},"<App />")," component."),(0,a.yg)("p",null,"If we look inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file, we can see among others a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component crowded with passed in ",(0,a.yg)("strong",{parentName:"p"},"props")," and a child ",(0,a.yg)("inlineCode",{parentName:"p"},"<Routes />")," component housing a series of ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route />")," subcomponents:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Authenticated, GitHubBanner, Refine } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport {\n  AuthPage,\n  ErrorComponent,\n  ThemedLayout,\n  useNotificationProvider,\n} from "@refinedev/antd";\nimport "@refinedev/antd/dist/reset.css";\n\nimport routerBindings, {\n  CatchAllNavigate,\n  NavigateToResource,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport { DataProvider } from "@refinedev/strapi-v4";\nimport {\n  BlogPostCreate,\n  BlogPostEdit,\n  BlogPostList,\n  BlogPostShow,\n} from "pages/blog-posts";\nimport {\n  CategoryCreate,\n  CategoryEdit,\n  CategoryList,\n  CategoryShow,\n} from "pages/categories";\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\nimport { authProvider, axiosInstance } from "./authProvider";\nimport { Header } from "./components/header";\nimport { API_URL } from "./constants";\nimport { ColorModeContextProvider } from "./contexts/color-mode";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <RefineKbarProvider>\n        <ColorModeContextProvider>\n          <Refine\n            authProvider={authProvider}\n            dataProvider={DataProvider(API_URL + `/api`, axiosInstance)}\n            notificationProvider={useNotificationProvider}\n            routerProvider={routerBindings}\n            resources={[\n              {\n                name: "blog-posts",\n                list: "/blog-posts",\n                create: "/blog-posts/create",\n                edit: "/blog-posts/edit/:id",\n                show: "/blog-posts/show/:id",\n                meta: {\n                  canDelete: true,\n                },\n              },\n              {\n                name: "categories",\n                list: "/categories",\n                create: "/categories/create",\n                edit: "/categories/edit/:id",\n                show: "/categories/show/:id",\n                meta: {\n                  canDelete: true,\n                },\n              },\n            ]}\n            options={{\n              syncWithLocation: true,\n              warnWhenUnsavedChanges: true,\n            }}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayout Header={Header}>\n                      <Outlet />\n                    </ThemedLayout>\n                  </Authenticated>\n                }\n              >\n                <Route\n                  index\n                  element={<NavigateToResource resource="blog-posts" />}\n                />\n                <Route path="/blog-posts">\n                  <Route index element={<BlogPostList />} />\n                  <Route path="create" element={<BlogPostCreate />} />\n                  <Route path="edit/:id" element={<BlogPostEdit />} />\n                  <Route path="show/:id" element={<BlogPostShow />} />\n                </Route>\n                <Route path="/categories">\n                  <Route index element={<CategoryList />} />\n                  <Route path="create" element={<CategoryCreate />} />\n                  <Route path="edit/:id" element={<CategoryEdit />} />\n                  <Route path="show/:id" element={<CategoryShow />} />\n                </Route>\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                <Route\n                  path="/login"\n                  element={\n                    <AuthPage\n                      type="login"\n                      formProps={{\n                        initialValues: {\n                          email: "demo@refine.dev",\n                          password: "demodemo",\n                        },\n                      }}\n                    />\n                  }\n                />\n              </Route>\n              <Route\n                element={\n                  <Authenticated>\n                    <ThemedLayout Header={Header}>\n                      <Outlet />\n                    </ThemedLayout>\n                  </Authenticated>\n                }\n              >\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n\n            <RefineKbar />\n            <UnsavedChangesNotifier />\n          </Refine>\n        </ColorModeContextProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"Take an early note of the ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," prop. The resources and their corresponding routes are added as part of the examples that we opted for while initializing the project with the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," CLI Wizard. We are going to remove these resources and route definitions and add our own in the coming episodes."),(0,a.yg)("p",null,"Note also the presentation of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<AuthPage />")," component at the ",(0,a.yg)("inlineCode",{parentName:"p"},"/login")," path. We will come to this in a section related to authentication on Day 3."),(0,a.yg)("p",null,"For the most part, the meat of an app is configured and built around the above indicated props and routes. Today, we'll examine a few of these props so that we are ready to move to the next episode. But let's begin with the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component first."),(0,a.yg)("h3",{id:"the-refine--component"},"The ",(0,a.yg)("inlineCode",{parentName:"h3"},"<Refine />")," Component"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component is the entry point of a ",(0,a.yg)("strong",{parentName:"p"},"Refine")," app. In order to leverage the power of ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s abstraction layers, we need to have the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.yg)("p",null,"Then we have to configure the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component with the provider objects we want to use in our app. We can see that CLI Wizard already added the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," props for us inside ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," out-of-the-box. We will be using them in our app. Some provider objects like the ",(0,a.yg)("inlineCode",{parentName:"p"},"notificationProvider")," or the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," are defined for us by ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s core or support modules and some like the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/providers/accessControl-provider/"},(0,a.yg)("inlineCode",{parentName:"a"},"accessControlProvider"))," have to be defined by ourselves."),(0,a.yg)("p",null,"Besides, some providers such as the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," ",(0,a.yg)("em",{parentName:"p"},(0,a.yg)("strong",{parentName:"em"},"can / have"))," to be tailored according to our app's needs and some like the ",(0,a.yg)("strong",{parentName:"p"},"Strapi"),"-specific ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," by ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/strapi-v4")," come packaged completely and cannot be extended or modified."),(0,a.yg)("h3",{id:"refine-s-dataprovider-prop"},(0,a.yg)("inlineCode",{parentName:"h3"},"<Refine />"),"'s ",(0,a.yg)("inlineCode",{parentName:"h3"},"dataProvider")," Prop"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s ",(0,a.yg)("strong",{parentName:"p"},"data provider")," is the context which allows the app to communicate with a backend API via a ",(0,a.yg)("inlineCode",{parentName:"p"},"HTTP")," client. It subsequently makes response data returned from HTTP requests available to consumer components via a set of ",(0,a.yg)("strong",{parentName:"p"},"Refine")," data hooks."),(0,a.yg)("p",null,"If we look closely, the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," prop derives a value from a call to ",(0,a.yg)("inlineCode",{parentName:"p"},"DataProvider()")," function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"// Inside App.tsx\n    dataProvider={DataProvider(API_URL + `/api`, axiosInstance)}\n")),(0,a.yg)("p",null,"The returned object, called the ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"dataProvider")," object"),", has the following signature:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show dataProvider.ts code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'// Data provider object signature\n\nconst dataProvider: DataProvider = {\n  // required methods\n  getList: ({ resource, pagination, sorters, filters, meta }) => Promise,\n  create: ({ resource, variables, meta }) => Promise,\n  update: ({ resource, id, variables, meta }) => Promise,\n  deleteOne: ({ resource, id, variables, meta }) => Promise,\n  getOne: ({ resource, id, meta }) => Promise,\n  getApiUrl: () => "",\n\n  // optional methods\n  getMany: ({ resource, ids, meta }) => Promise,\n  createMany: ({ resource, variables, meta }) => Promise,\n  deleteMany: ({ resource, ids, variables, meta }) => Promise,\n  updateMany: ({ resource, ids, variables, meta }) => Promise,\n  custom: ({ url, method, filters, sorters, payload, query, headers, meta }) =>\n    Promise,\n};\n')))),(0,a.yg)("p",null,"Each item in this object is a method that has to be defined by us or ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s data provider packages."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Refine")," supports ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/integrations/"},"15+ backend")," ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," integrations as optional packages that come with distinct definitions of these methods that handle CRUD operations according to their underlying architectures. The full list can be found ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/list-of-packages/#data-provider-packages"},"here"),"."),(0,a.yg)("p",null,"Normally, for our own backend API, we have to define each method we need for sending ",(0,a.yg)("inlineCode",{parentName:"p"},"http")," requests inside a ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," object as above. But since we are using ",(0,a.yg)("strong",{parentName:"p"},"Strap")," as our backend and the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/strapi-v4")," package to communicate with it, ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider={DataProvider(API_URL + "),"/api",(0,a.yg)("inlineCode",{parentName:"p"},", axiosInstance)}")," makes the following object available to us:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show Strapi data provider source code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="node_modules/@refinedev/strapi-v4/src/dataProvider.ts"',title:'"node_modules/@refinedev/strapi-v4/src/dataProvider.ts"'},'// version 4.1.0\n\nexport const DataProvider = (\n  apiUrl: string,\n  httpClient: AxiosInstance = axiosInstance,\n): Required<IDataProvider> => ({\n  getList: async ({ resource, pagination, filters, sorters, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { current = 1, pageSize = 10, mode = "server" } = pagination ?? {};\n\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n    const publicationState = meta?.publicationState;\n\n    const quertSorters = generateSort(sorters);\n    const queryFilters = generateFilter(filters);\n\n    const query = {\n      ...(mode === "server"\n        ? {\n            "pagination[page]": current,\n            "pagination[pageSize]": pageSize,\n          }\n        : {}),\n      locale,\n      publicationState,\n      fields,\n      populate,\n      sort: quertSorters.length > 0 ? quertSorters.join(",") : undefined,\n    };\n\n    const { data } = await httpClient.get(\n      `${url}?${stringify(query, {\n        encodeValuesOnly: true,\n      })}&${queryFilters}`,\n    );\n\n    return {\n      data: normalizeData(data),\n      // added to support pagination on client side when using endpoints that provide only data (see https://github.com/refinedev/refine/issues/2028)\n      total: data.meta?.pagination?.total || normalizeData(data)?.length,\n    };\n  },\n\n  getMany: async ({ resource, ids, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n    const publicationState = meta?.publicationState;\n\n    const queryFilters = generateFilter([\n      {\n        field: "id",\n        operator: "in",\n        value: ids,\n      },\n    ]);\n\n    const query = {\n      locale,\n      fields,\n      populate,\n      publicationState,\n      "pagination[pageSize]": ids.length,\n    };\n\n    const { data } = await httpClient.get(\n      `${url}?${stringify(query, {\n        encodeValuesOnly: true,\n      })}&${queryFilters}`,\n    );\n\n    return {\n      data: normalizeData(data),\n    };\n  },\n\n  create: async ({ resource, variables }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    let dataVariables: any = { data: variables };\n\n    if (resource === "users") {\n      dataVariables = variables;\n    }\n\n    const { data } = await httpClient.post(url, dataVariables);\n    return {\n      data,\n    };\n  },\n\n  update: async ({ resource, id, variables }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    let dataVariables: any = { data: variables };\n\n    if (resource === "users") {\n      dataVariables = variables;\n    }\n\n    const { data } = await httpClient.put(url, dataVariables);\n    return {\n      data,\n    };\n  },\n\n  updateMany: async ({ resource, ids, variables }) => {\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        let dataVariables: any = { data: variables };\n\n        if (resource === "users") {\n          dataVariables = variables;\n        }\n        const { data } = await httpClient.put(url, dataVariables);\n        return data;\n      }),\n    );\n\n    return { data: response };\n  },\n\n  createMany: async ({ resource, variables }) => {\n    const response = await Promise.all(\n      variables.map(async (param) => {\n        const { data } = await httpClient.post(`${apiUrl}/${resource}`, {\n          data: param,\n        });\n        return data;\n      }),\n    );\n\n    return { data: response };\n  },\n\n  getOne: async ({ resource, id, meta }) => {\n    const locale = meta?.locale;\n    const fields = meta?.fields;\n    const populate = meta?.populate;\n\n    const query = {\n      locale,\n      fields,\n      populate,\n    };\n\n    const url = `${apiUrl}/${resource}/${id}?${stringify(query, {\n      encode: false,\n    })}`;\n\n    const { data } = await httpClient.get(url);\n\n    return {\n      data: normalizeData(data),\n    };\n  },\n\n  deleteOne: async ({ resource, id }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { data } = await httpClient.delete(url);\n\n    return {\n      data,\n    };\n  },\n\n  deleteMany: async ({ resource, ids }) => {\n    const response = await Promise.all(\n      ids.map(async (id) => {\n        const { data } = await httpClient.delete(`${apiUrl}/${resource}/${id}`);\n        return data;\n      }),\n    );\n    return { data: response };\n  },\n\n  getApiUrl: () => {\n    return apiUrl;\n  },\n\n  custom: async ({\n    url,\n    method,\n    filters,\n    sorters,\n    payload,\n    query,\n    headers,\n  }) => {\n    let requestUrl = `${url}?`;\n\n    if (sorters) {\n      const sortQuery = generateSort(sorters);\n      if (sortQuery.length > 0) {\n        requestUrl = `${requestUrl}&${stringify({\n          sort: sortQuery.join(","),\n        })}`;\n      }\n    }\n\n    if (filters) {\n      const filterQuery = generateFilter(filters);\n      requestUrl = `${requestUrl}&${filterQuery}`;\n    }\n\n    if (query) {\n      requestUrl = `${requestUrl}&${stringify(query)}`;\n    }\n\n    if (headers) {\n      httpClient.defaults.headers = {\n        ...httpClient.defaults.headers,\n        ...headers,\n      };\n    }\n\n    let axiosResponse;\n    switch (method) {\n      case "put":\n      case "post":\n      case "patch":\n        axiosResponse = await httpClient[method](url, payload);\n        break;\n      case "delete":\n        axiosResponse = await httpClient.delete(url, {\n          data: payload,\n        });\n        break;\n      default:\n        axiosResponse = await httpClient.get(requestUrl);\n        break;\n    }\n\n    const { data } = axiosResponse;\n\n    return Promise.resolve({ data });\n  },\n});\n')))),(0,a.yg)("p",null,"This overwhelming and intimidating, but if we skim over closely, the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," object above has pretty much every method we need to perform all CRUD operations against a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," backend. Under the hood, all these methods implement RESTful conventions and are tied up with appropriate RESTful resources and routes thanks to ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s sensible defaults."),(0,a.yg)("p",null,"Notable methods that we are going to use in our app are: ",(0,a.yg)("inlineCode",{parentName:"p"},"create()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"getList()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"update()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"delete()"),". Also notice that the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/strapi-4")," package uses ",(0,a.yg)("a",{parentName:"p",href:"https://axios-http.com"},(0,a.yg)("inlineCode",{parentName:"a"},"axios"))," to communicate with the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," server."),(0,a.yg)("p",null,"For the details of how these methods work, please take your time to scan through the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/providers/data-provider/"},(0,a.yg)("inlineCode",{parentName:"a"},"dataProvider")," API reference"),"."),(0,a.yg)("h2",{id:"strapi-client"},"Strapi Client"),(0,a.yg)("p",null,"In order to get the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," object to deliver, we have to pass an ",(0,a.yg)("inlineCode",{parentName:"p"},"axios")," instance and the ",(0,a.yg)("inlineCode",{parentName:"p"},"API_URL")," of the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," server we are running as our backend."),(0,a.yg)("p",null,"For the ",(0,a.yg)("inlineCode",{parentName:"p"},"DataProvider")," function above, inside ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," we are importing ",(0,a.yg)("inlineCode",{parentName:"p"},"axiosInstance")," from the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider.ts")," file. For the ",(0,a.yg)("inlineCode",{parentName:"p"},"API_URL"),", we will have to set up a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," server before we can modify the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/constants.ts")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/constants.ts"',title:'"src/constants.ts"'},'export const API_URL = "https://api.strapi-v4.refine.dev";\nexport const TOKEN_KEY = "strapi-jwt-token";\n')),(0,a.yg)("p",null,"We'll come to this in on Day 3, but let's look at the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," prop now."),(0,a.yg)("h3",{id:"refine-s-authprovider-prop"},(0,a.yg)("inlineCode",{parentName:"h3"},"<Refine />"),"'s ",(0,a.yg)("inlineCode",{parentName:"h3"},"authProvider")," Prop"),(0,a.yg)("p",null,"We can clearly see in our ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component that the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," CLI Wizard already enabled the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," prop by passing in the corresponding object for us:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"<Refine authProvider={authProvider} />\n")),(0,a.yg)("p",null,"Earlier on, the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," object was created by the CLI Wizard inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider.ts")," file:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show AuthProvider code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\nimport { AuthHelper } from "@refinedev/strapi-v4";\n\nimport { API_URL, TOKEN_KEY } from "./constants";\n\nimport axios from "axios";\n\nexport const axiosInstance = axios.create();\nconst strapiAuthHelper = AuthHelper(API_URL + "/api");\n\nexport const authProvider: AuthProvider = {\n  login: async ({ email, password }) => {\n    const { data, status } = await strapiAuthHelper.login(email, password);\n    if (status === 200) {\n      localStorage.setItem(TOKEN_KEY, data.jwt);\n\n      // set header axios instance\n      axiosInstance.defaults.headers.common[\n        "Authorization"\n      ] = `Bearer ${data.jwt}`;\n\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    }\n    return {\n      success: false,\n      error: new Error("Invalid username or password"),\n    };\n  },\n  logout: async () => {\n    localStorage.removeItem(TOKEN_KEY);\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  check: async () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (token) {\n      axiosInstance.defaults.headers.common[\n        "Authorization"\n      ] = `Bearer ${token}`;\n      return {\n        authenticated: true,\n      };\n    }\n\n    return {\n      authenticated: false,\n      error: new Error("Not authenticated"),\n      logout: true,\n      redirectTo: "/login",\n    };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) {\n      return null;\n    }\n\n    const { data, status } = await strapiAuthHelper.me(token);\n    if (status === 200) {\n      const { id, username, email } = data;\n      return {\n        id,\n        name: username,\n        email,\n      };\n    }\n\n    return null;\n  },\n};\n')))),(0,a.yg)("p",null,"This object has all the methods we need to implement an email / password based authentication and authorization system in our app."),(0,a.yg)("p",null,"Notice, as mentioned before, that ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," relies on ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," ",(0,a.yg)("inlineCode",{parentName:"p"},"API_URL")," to connect to our ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," database. So, in this case, our ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," was generated as part of the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," package."),(0,a.yg)("p",null,"As we can infer by now, although we have stated that ",(0,a.yg)("strong",{parentName:"p"},"Refine")," performs and manages a lot of heavylifting and simplifies the app logic by dividing concerns into separate contexts, providers and hooks, ",(0,a.yg)("em",{parentName:"p"},"configuring")," all these providers is a heavy task itself."),(0,a.yg)("p",null,"It, fortunately, makes configuration easier by composing individual providers inside a single object."),(0,a.yg)("p",null,"These are pretty much the essentials we should get familiar with in order to start adding ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component. Prior to that though, let's go ahead and spin up a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," server add some collections to store our data."),(0,a.yg)("h2",{id:"refine-with-a-strapi-backend"},"Refine with a Strapi Backend"),(0,a.yg)("p",null,"For this app, we are going to have several collections in stored with the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," backend server. The entity relational diagram looks like this:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/database.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"We deal with the ",(0,a.yg)("inlineCode",{parentName:"p"},"missions")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"invoices")," collections on Day 4, but today we are concerned with setting up only the ",(0,a.yg)("inlineCode",{parentName:"p"},"companies"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"clients")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts")," collections. The relationship between a ",(0,a.yg)("inlineCode",{parentName:"p"},"client")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts")," is also ",(0,a.yg)("inlineCode",{parentName:"p"},"has many")," optional, i.e., a ",(0,a.yg)("inlineCode",{parentName:"p"},"client")," can have many ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts"),"."),(0,a.yg)("p",null,"With this in mind, let's go ahead and initialize a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," project."),(0,a.yg)("h3",{id:"setting-up-strapi-instance"},"Setting Up Strapi Instance"),(0,a.yg)("p",null,"We'll initialize a local ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," project first and then create the above mentioned collections. In order to create a local ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," instance, go to the folder of your choice and run the following command from the terminal:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx create-strapi-app@latest pdf-invoice-generator --quickstart\n")),(0,a.yg)("p",null,"Useful details for creating a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," project is available in this ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/quick-start"},"quickstart guide"),"."),(0,a.yg)("p",null,"After successful initialization, this will have a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," project created and spun up at ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:1337"),"."),(0,a.yg)("h3",{id:"setting-up-admin-user-for-strapi"},"Setting Up Admin User for Strapi"),(0,a.yg)("p",null,"Next, we have to be able to access the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," Admin UI that is hosted locally in our machine. So, we have to register an admin user. If you are not already familiar with creating an admin user, please follow ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/quick-start#step-2-register-the-first-administrator-user"},"this section of the guide"),"."),(0,a.yg)("p",null,"The admin dashboard at ",(0,a.yg)("inlineCode",{parentName:"p"},"/admin")," after signing up and logging in should look something like this:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/strapi_welcome.png",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Having access to the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," admin dashboard, we are ready to go ahead and create our collections."),(0,a.yg)("h3",{id:"creating-strapi-collections"},"Creating Strapi Collections"),(0,a.yg)("p",null,"We can create collections using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Content-Type Builder")," plugin available in the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," admin dashboard. More details are available in ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/quick-start#step-1-create-collection-types-with-the-content-type-builder"},"this section")," of the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," quickstart guide."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Users Collection")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"users")," collection is already created when we initialize a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," instance. It is available under the ",(0,a.yg)("inlineCode",{parentName:"p"},"users-permissions.user")," collection type."),(0,a.yg)("h3",{id:"companies-collection"},"Companies Collection"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"companies")," collection should look like this:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/company_collection.png",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"clients-collection"},"Clients Collection"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"clients")," collection looks like this:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/client.png",alt:"react invoice generator"}),(0,a.yg)("br",null),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"clients")," has a ",(0,a.yg)("inlineCode",{parentName:"p"},"has many")," optional relation with ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts"),". So, its relation with ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts")," looks like this:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/edit_contact.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"contacts-collection"},"Contacts Collection"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"contacts")," collection should look as below:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/contacts_collection.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"And a contact has a ",(0,a.yg)("inlineCode",{parentName:"p"},"has one")," association with client:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/contacts_hasmany.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"With these set up, we need to create an app user and set roles for authenticated users to access the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," data. Let's do that next."),(0,a.yg)("h3",{id:"setting-up-app-roles-for-strapi"},"Setting Up App Roles for Strapi"),(0,a.yg)("p",null,"For the authentication credentials presented in the form to work, we have to create a user at the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," app running at ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:1337"),". We can do that by logging in to the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," dashboard and then to ",(0,a.yg)("inlineCode",{parentName:"p"},"Content Manager >> Users")," section. Let's create a user with the same email and password as in the ",(0,a.yg)("strong",{parentName:"p"},"Refine")," login form we had above:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-TypeScript"},"email: demo@refine.dev\npassword: demodemo\n")),(0,a.yg)("p",null,"After creating the app user, we need to set the value of its ",(0,a.yg)("inlineCode",{parentName:"p"},"role")," field to ",(0,a.yg)("inlineCode",{parentName:"p"},"Authenticated"),":"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/demo.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"We only want our app users to access the CRUD actions when ",(0,a.yg)("inlineCode",{parentName:"p"},"Authenticated"),". So, let's set the appropriate permissions from ",(0,a.yg)("inlineCode",{parentName:"p"},"Settings >> USERS & PERMISSIONS >> Roles"),". More details are available in ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/quick-start#step-3-set-roles--permissions"},"this section of the ",(0,a.yg)("strong",{parentName:"a"},"Strapi")," quickstart guide"),"."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-04-11-refine-invoicer-2/authenticated.png",alt:"react invoice generator"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"We need to set up permissions for each of our resources. So, please go ahead and do them for all the others."),(0,a.yg)("p",null,"With these completed, we are now ready to start adding ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," to our ",(0,a.yg)("strong",{parentName:"p"},"Refine")," app."),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this post, we went through the process of initializing our ",(0,a.yg)("strong",{parentName:"p"},"Pdf Invoice Generator")," app with a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," backend and ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," UI framework."),(0,a.yg)("p",null,"We then explored the boilerplate code created by ",(0,a.yg)("strong",{parentName:"p"},"Refine")," CLI Wizard, especially the files related to ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," props of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component. We touched on setting up a ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," ",(0,a.yg)("inlineCode",{parentName:"p"},"axiosInstance")," which is used by these providers to send HTTP requests to the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," backend."),(0,a.yg)("p",null,"We also set up the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," backend app, its API Token, most of our collections and also specified permissions for the ",(0,a.yg)("inlineCode",{parentName:"p"},"authenticated")," role."),(0,a.yg)("p",null,"In the next episode, we add ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," so that we can connect our ",(0,a.yg)("strong",{parentName:"p"},"Refine")," app to the ",(0,a.yg)("strong",{parentName:"p"},"Strapi")," server and then implement CRUD operations on our ",(0,a.yg)("strong",{parentName:"p"},"Pdf Invoice Generator")," app."))}y.isMDXComponent=!0}}]);