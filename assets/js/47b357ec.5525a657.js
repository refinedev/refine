"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[90125],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(37953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,m=d["".concat(l,".").concat(c)]||d[c]||g[c]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},82790:(e,t,n)=>{n.d(t,{Ay:()=>u});n(37953);var r=n(58860);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={toc:[]},l="wrapper";function u(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(l,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},s,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"You can use the following auth provider examples as a starting point for your own auth provider or you can use them as it is. Check the links below to see the details of each example."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/authentication/headless/"},"Basic")," - A basic auth provider example."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/enterprise-edition/okta"},"Okta")," - Okta, the enterprise-grade identity management service."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/auth-provider/keycloak"},"Keycloak")," - An auth provider example with Keycloak."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/auth-provider/auth0"},"Auth0")," - An auth provider example with Auth0."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/auth-provider/google-auth"},"Google Auth")," - An auth provider example with Google Auth."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/auth-provider/otpLogin"},"OTP Login")," - An auth provider example with OTP Login."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/data-provider/appwrite"},"Appwrite")," - An auth provider example with Appwrite."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/data-provider/supabase"},"Supabase")," - An auth provider example with Supabase."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/data-provider/strapi-v4"},"Strapi")," - An auth provider example with Strapi."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/next-js/"},"Basic with Nextjs")," - A basic auth provider example with Nextjs."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/remix/remix-headless"},"Basic with Remix")," - A basic auth provider example with Remix."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/examples/auth-provider/kinde"},"Kinde")," - An auth provider example with Kinde.")))}u.isMDXComponent=!0},22620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>g});n(37953);var r=n(58860),a=n(82790);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={title:"Auth Provider"},u=void 0,p={unversionedId:"authentication/auth-provider/index",id:"authentication/auth-provider/index",title:"Auth Provider",description:"Auth provider is an object that contains methods to handle authentication and access control in your app by having Refine consume them. These methods expect to return a promise, so they can be used with async methods.",source:"@site/docs/authentication/auth-provider/index.md",sourceDirName:"authentication/auth-provider",slug:"/authentication/auth-provider/",permalink:"/docs/authentication/auth-provider/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/authentication/auth-provider/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1711375201,formattedLastUpdatedAt:"Mar 25, 2024",frontMatter:{title:"Auth Provider"},sidebar:"mainSidebar",previous:{title:"Authentication with remix-auth",permalink:"/docs/examples/remix/remix-auth"},next:{title:"<Authenticated />",permalink:"/docs/authentication/components/authenticated/"}},d={},g=[{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Methods",id:"methods",level:2},{value:"Required Methods",id:"required-methods",level:2},{value:"login",id:"login",level:3},{value:"check",id:"check",level:3},{value:"logout",id:"logout",level:3},{value:"onError",id:"onerror",level:3},{value:"Optional Methods",id:"optional-methods",level:2},{value:"getPermissions",id:"getpermissions",level:3},{value:"getIdentity",id:"getidentity",level:3},{value:"register",id:"register",level:3},{value:"forgotPassword",id:"forgotpassword",level:3},{value:"updatePassword",id:"updatepassword",level:3},{value:"Legacy Auth Provider",id:"legacy-auth-provider",level:2},{value:"FAQ",id:"faq",level:2},{value:"How can I create an auth provider?",id:"how-can-i-create-an-auth-provider",level:3},{value:"How can I set authorization credentials?",id:"how-can-i-set-authorization-credentials",level:3},{value:"How can I implement refresh token mechanism?",id:"how-can-i-implement-refresh-token-mechanism",level:3}],c=(m="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var m;const h={toc:g},y="wrapper";function f(e){var{components:t}=e,n=s(e,["components"]);return(0,r.yg)(y,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},h,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Auth provider is an object that contains methods to handle authentication and access control in your app by having Refine consume them. These methods expect to return a promise, so they can be used with async methods."),(0,r.yg)("admonition",{title:"Good to know",type:"simple"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"You can use any third-party authentication service like ",(0,r.yg)("a",{parentName:"li",href:"#examples"},"Auth0, Okta, etc.")," or your own custom methods while creating an auth provider from scratch."),(0,r.yg)("li",{parentName:"ul"},"Auth Provider is not required for Refine to work, if it is not provided, your application will not have any authentication capabilities. As a result, you will not be able to use any of the auth hooks or components."),(0,r.yg)("li",{parentName:"ul"},"To learn more about how to create your own auth provider, refer to the ",(0,r.yg)("a",{parentName:"li",href:"/docs/guides-concepts/authentication"},"Create an Auth Provider tutorial ","\u2192"),"."))),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(c,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To activate authentication in your app, you need to pass an ",(0,r.yg)("inlineCode",{parentName:"p"}," authProvider")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine/>")," as a prop:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n\n// highlight-next-line\nimport authProvider from "./auth-provider";\n\nconst App = () => {\n  // highlight-next-line\n  return <Refine authProvider={authProvider} />;\n};\n'))),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)(c,{id:"examples",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(a.Ay,{mdxType:"AuthProviderExamplesLinks"})),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)(c,{id:"methods",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"An ",(0,r.yg)("inlineCode",{parentName:"p"},"authProvider")," can contain the following methods:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import type { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n    // required methods\n    login: async (params: any): AuthActionResponse,\n    check: async (params: any): CheckResponse,\n    logout: async (params: any): AuthActionResponse,\n    onError: async (params: any): OnErrorResponse,\n    // optional methods\n    register: async (params: any): AuthActionResponse,\n    forgotPassword: async (params: any): AuthActionResponse,\n    updatePassword: async (params: any): AuthActionResponse,\n    getPermissions: async (params: any): unknown,\n    getIdentity: async (params: any): unknown,\n};\n')),(0,r.yg)("p",null,"All methods can have any parameters that you want to pass to them. However, the return types of the methods are fixed. You can find the details below.")),(0,r.yg)("h2",{id:"required-methods"},"Required Methods"),(0,r.yg)("h3",{id:"login"},"login"),(0,r.yg)(c,{id:"login",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"login")," method is used to authenticate users. It expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean;\n  redirectTo?: string;\n  error?: Error;\n  [key: string]: unknown;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"As an example, let's create a simple ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method that checks if the user exists in the mock data. If the user exists, we will save the user's data to the local storage and redirect the user to the home page. If the user doesn't exist, we will return an error."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst mockUsers = [{ email: "john@mail.com" }, { email: "jane@mail.com" }];\n\nconst authProvider: AuthProvider = {\n  login: async ({ email, password }) => {\n    // Suppose we actually send a request to the back end here.\n    const user = mockUsers.find((item) => item.email === email);\n\n    if (user) {\n      localStorage.setItem("auth", JSON.stringify(user));\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    }\n\n    return {\n      success: false,\n      error: {\n        message: "Login Error",\n        name: "Invalid email or password",\n      },\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogin")," hook which is used for login operations."),(0,r.yg)("p",null,"For example, if we call the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useLogin } from "@refinedev/core";\n\nconst { mutate } = useLogin();\n\nmutate({ email: "john@mail.com", password: "123456" });\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method will get the mutation's parameters as arguments."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-login"},(0,r.yg)("inlineCode",{parentName:"a"},"useLogin"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"Can I pass any parameters to the ",(0,r.yg)("code",null,"login")," method?")),(0,r.yg)("p",null,"You can pass any parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method. ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogin")," hook's mutation will pass the mutation's parameters to the method without any type constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useLogin<{\n  username: string;\n  password: string;\n  foo: string;\n  remember: boolean;\n}>();\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after login?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the promise with an object that has the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  login: async () => {\n    // ---\n    if (user) {\n      return {\n        success: true,\n        redirectTo: "/custom-page",\n      };\n    } else {\n      return {\n        success: false,\n        redirectTo: "/register",\n      };\n    }\n  },\n};\n')),(0,r.yg)("p",null,"You can also use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogin")," hook's for this purpose:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const { mutate } = useLogin();\n\nmutate({ redirectPath: "/custom-page" });\n')),(0,r.yg)("p",null,"Then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method to redirect the user to the specific page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  login: async ({ redirectPath }) => {\n    //---\n    return {\n      success: false,\n      redirectTo: redirectPath,\n    };\n  },\n};\n")),(0,r.yg)("p",null,"If you don't want to redirect the user anywhere, you can resolve the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method's promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  login: async () => {\n    // ---\n    return {\n      success: false,\n      redirectTo: undefined,\n    };\n  },\n};\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I customize the error message?")),(0,r.yg)("p",null,"Refine automatically displays an error notification when the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method resolves the promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the promise with an ",(0,r.yg)("inlineCode",{parentName:"p"},"error")," object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  login: async ({ email, password }) => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: "Login Failed!",\n        message:\n          "The email or password that you\'ve entered doesn\'t match any account.",\n      },\n    };\n  },\n  // ---\n};\n')))),(0,r.yg)("h3",{id:"check"},"check"),(0,r.yg)(c,{id:"check",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"check")," method is used to check if the user is authenticated. It is internally called when the user navigates to a page that requires authentication. This method expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type CheckResponse = {\n  authenticated: boolean;\n  redirectTo?: string;\n  logout?: boolean;\n  error?: Error;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"authenticated"),": A boolean value indicating whether the user is authenticated or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": A string value indicating the URL to redirect to if authentication is required."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"logout"),": A boolean value indicating whether the user should be logged out."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An Error object representing any errors that may have occurred during the check.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"Since we saved the user data to the local storage in the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method, we will check that to determine if the user is authenticated:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // ---\n  check: async () => {\n    const user = localStorage.getItem("auth");\n\n    if (user) {\n      return {\n        authenticated: true,\n      };\n    }\n\n    return {\n      authenticated: false,\n      logout: true,\n      redirectTo: "/login",\n      error: {\n        message: "Check failed",\n        name: "Unauthorized",\n      },\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useIsAuthenticated")," hook which is used for checking if the user is authenticated."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useIsAuthenticated } from "@refinedev/core";\n\nconst { data, isSuccess, isLoading, isError } = useIsAuthenticated();\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-is-authenticated"},(0,r.yg)("inlineCode",{parentName:"a"},"useIsAuthenticated"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user if they are not authenticated?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  check: async () => {\n    // ---\n    return {\n      authenticated: false,\n      redirectTo: "/custom-page",\n    };\n  },\n};\n')))),(0,r.yg)("h3",{id:"logout"},"logout"),(0,r.yg)(c,{id:"logout",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method is used to log out users. It expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean;\n  redirectTo?: string;\n  error?: Error;\n  [key: string]: unknown;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"Opposite to what we did in the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method, we now need to remove the user data from the local storage upon log out:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // ---\n  logout: async () => {\n    localStorage.removeItem("auth");\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogout")," hook which is used for logging out users."),(0,r.yg)("p",null,"For example, if we call the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useLogout } from "@refinedev/core";\n\nconst { mutate } = useLogout();\n\nmutate({ userId: "123" });\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method will get the mutation's parameters as an argument."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-logout"},(0,r.yg)("inlineCode",{parentName:"a"},"useLogout"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"Can I pass any parameters to the ",(0,r.yg)("code",null,"logout")," method?")),(0,r.yg)("p",null,"Yes, you can pass any parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method. The ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogout")," hook's mutation will pass the mutation's parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method without any type constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useLogout<{\n  id: string;\n  name: string;\n}>();\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after logout?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the promise with an object that has the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  logout: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n};\n')),(0,r.yg)("p",null,"You can also use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useLogout")," hook for this purpose:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const { mutate } = useLogout();\n\nmutate({ redirectPath: "/custom-page" });\n')),(0,r.yg)("p",null,"Then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method to redirect the user to the specific page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  logout: ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    };\n  },\n};\n")),(0,r.yg)("p",null,"If you don't want to redirect the user to anywhere, you can resolve the ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method's Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  logout: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: undefined,\n    };\n  },\n};\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I customize the error message?")),(0,r.yg)("p",null,"Refine automatically displays an error notification when the ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method resolves the Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,r.yg)("inlineCode",{parentName:"p"},"error")," object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  logout: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: "Logout Failed!",\n        message: "Something went wrong.",\n      },\n    };\n  },\n  // ---\n};\n')))),(0,r.yg)("h3",{id:"onerror"},"onError"),(0,r.yg)(c,{id:"onerror",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"onError")," method is called when you get an error response from the API. You can create your own business logic to handle the error such as refreshing the token, logging out the user, etc."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"onError")," method expects to return a Promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type OnErrorResponse = {\n  redirectTo?: string;\n  logout?: boolean;\n  error?: Error;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": If has a value, the app will be redirected to the given URL."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"logout"),": If is ",(0,r.yg)("inlineCode",{parentName:"li"},"true"),", useOnError calls the ",(0,r.yg)("inlineCode",{parentName:"li"},"logout")," method."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An Error object representing any errors that may have occurred during the operation.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"We'll use the ",(0,r.yg)("inlineCode",{parentName:"p"},"onError")," method to log out the user if the API returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"401")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"403")," error. If ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," is set, ",(0,r.yg)("inlineCode",{parentName:"p"},"logout")," method will be called with the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // ---\n  onError: async (error) => {\n    if (error.status === 401 || error.status === 403) {\n      return {\n        logout: true,\n        redirectTo: "/login",\n        error,\n      };\n    }\n\n    return {};\n  },\n  // ---\n};\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useOnError")," hook which is used for handling errors."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useOnError } from "@refinedev/core";\n\nconst { mutate } = useOnError();\n\nfetch("http://example.com/payment")\n  .then(() => console.log("Success"))\n  .catch((error) => mutate(error));\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-on-error"},(0,r.yg)("inlineCode",{parentName:"a"},"useOnError"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after logout?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the promise with an object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  onError: async (error) => {\n    if (error.status === 401 || error.status === 403) {\n      return {\n        redirectTo: "/custom-page",\n      };\n    }\n\n    return {};\n  },\n  // ---\n};\n')))),(0,r.yg)("h2",{id:"optional-methods"},"Optional Methods"),(0,r.yg)("h3",{id:"getpermissions"},"getPermissions"),(0,r.yg)(c,{id:"getpermissions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"getPermissions")," method is used to get the user's permissions. It expects to return a resolved promise."),(0,r.yg)("p",null,"We will use the ",(0,r.yg)("inlineCode",{parentName:"p"},"getPermissions")," method to get the user's permissions from the ",(0,r.yg)("inlineCode",{parentName:"p"},"localStorage"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst mockUsers = [\n  { email: "john@mail.com", roles: ["admin"] },\n  { email: "jane@mail.com", roles: ["editor"] },\n];\n\nconst authProvider: AuthProvider = {\n  // You can also pass a parameter but it is optional\n  getPermissions: (params) => {\n    if (params) {\n      // do some logic or make a request to server\n    } else {\n      const user = localStorage.getItem("auth");\n\n      if (user) {\n        const { roles } = JSON.parse(user);\n\n        return roles;\n      }\n    }\n\n    return null;\n  },\n  // ---\n};\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"usePermissions")," hook which is used for getting the user's permissions."),(0,r.yg)("p",null,"For example, if you want to check if the user has a specific permission, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"usePermissions")," hook like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { usePermissions } from "@refinedev/core";\n\nconst { data } = usePermissions();\n\nif (data?.includes("admin")) {\n  console.log("User has admin permissions");\n}\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-permissions"},(0,r.yg)("inlineCode",{parentName:"a"},"usePermissions"))," documentation.")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Though ",(0,r.yg)("inlineCode",{parentName:"p"},"usePermissions")," hook can be used for simple authorization purposes, if you need more complex authorization logic, we recommend using the access control provider."),(0,r.yg)("p",{parentName:"admonition"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"accessControlProvider")," documentation","\u2192")))),(0,r.yg)("h3",{id:"getidentity"},"getIdentity"),(0,r.yg)(c,{id:"getidentity",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"getIdentity")," method is used to get the user's identity. It expects to return a resolved promise."),(0,r.yg)("p",null,"To get the user's identity from the local storage and resolve the promise:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst mockUsers = [\n  { email: "john@mail.com", roles: ["admin"] },\n  { email: "jane@mail.com", roles: ["editor"] },\n];\n\nconst authProvider: AuthProvider = {\n  // ---\n  getIdentity: async () => {\n    const user = localStorage.getItem("auth");\n\n    if (user) {\n      const { email, roles } = JSON.parse(user);\n\n      return { email, roles };\n    }\n\n    return null;\n  },\n  // ---\n};\n')),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useGetIdentity")," hook which is used for getting the user's identity."),(0,r.yg)("p",null,"For example, if you want to get the user's email, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useGetIdentity")," hook like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useGetIdentity } from "@refinedev/core";\n\nconst { data } = useGetIdentity();\n\nif (data) {\n  console.log(data.email);\n}\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-get-identity"},(0,r.yg)("inlineCode",{parentName:"a"},"useGetIdentity"))," documentation."))),(0,r.yg)("h3",{id:"register"},"register"),(0,r.yg)(c,{id:"register",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"register")," method is used to register a new user. It is similar to the ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," method. It expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean;\n  redirectTo?: string;\n  error?: Error;\n  [key: string]: unknown;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"We'll register a new user and resolve the promise."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst mockUsers = [{ email: "john@mail.com" }, { email: "jane@mail.com" }];\n\nconst authProvider: AuthProvider = {\n  // ---\n  register: async ({ email }) => {\n    const user = mockUsers.find((user) => user.email === email);\n\n    if (user) {\n      return {\n        success: false,\n        error: {\n          name: "Register Error",\n          message: "User already exists",\n        },\n      };\n    }\n\n    mockUsers.push({ email });\n\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useRegister")," hook which is used for registering a new user."),(0,r.yg)("p",null,"For example, if you want to register a new user, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useRegister")," hook like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useRegister } from "@refinedev/core";\n\nconst { mutate } = useRegister();\n\nconst handleRegister = (values) => {\n  mutate(values);\n};\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method will get the mutation's parameters as arguments."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-register"},(0,r.yg)("inlineCode",{parentName:"a"},"useRegister"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"Can I pass any parameters to the ",(0,r.yg)("code",null,"register")," method?")),(0,r.yg)("p",null,"Yes, you can pass any parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method. ",(0,r.yg)("inlineCode",{parentName:"p"},"useRegister")," hook's mutation will pass the mutation's parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method without any type constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useRegister<{\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  remember: boolean;\n}>();\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after registration?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: "/custom-page",\n    };\n  },\n};\n')),(0,r.yg)("p",null,"You can also use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useRegister")," hook's for this purpose:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const { mutate } = useRegister();\n\nmutate({ redirectPath: "/custom-page" });\n')),(0,r.yg)("p",null,"Then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method to redirect the user to the specific page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  register: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: redirectPath,\n    };\n  },\n};\n")),(0,r.yg)("p",null,"If you don't want to redirect the user to anywhere, you can resolve the ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method's Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo: undefined"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: true, // or false\n      redirectTo: undefined,\n    };\n  },\n};\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I customize the error message?")),(0,r.yg)("p",null,"Refine automatically displays an error notification when the ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," method resolves the Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,r.yg)("inlineCode",{parentName:"p"},"error")," object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'const authProvider: AuthProvider = {\n  // ---\n  register: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: "Error",\n        message: "Something went wrong!",\n      },\n    };\n  },\n};\n')))),(0,r.yg)("h3",{id:"forgotpassword"},"forgotPassword"),(0,r.yg)(c,{id:"forgotpassword",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method is used to send a password reset link to the user's email address. It expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean;\n  redirectTo?: string;\n  error?: Error;\n  [key: string]: unknown;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"To send a password reset link to the user's email address and resolve the promise:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // ---\n  forgotPassword: async ({ email }) => {\n    // send password reset link to the user\'s email address here\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n\n    // if request is not successful\n    return {\n      success: false,\n      error: {\n        name: "Forgot Password Error",\n        message: "Email address does not exist",\n      },\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useForgotPassword")," hook which is used for sending a password reset link to the user's email address."),(0,r.yg)("p",null,"For example, if you want to send a password reset link to the user's email address, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useForgotPassword")," hook like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForgotPassword } from "@refinedev/core";\n\nconst { mutate } = useForgotPassword();\n\nconst handleForgotPassword = (values) => {\n  mutate(values);\n};\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method will get the mutation's parameters as arguments."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-forgot-password"},(0,r.yg)("inlineCode",{parentName:"a"},"useForgotPassword"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"Can I pass any parameters to the ",(0,r.yg)("code",null,"forgotPassword")," method?")),(0,r.yg)("p",null,"Yes, you can pass any parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method. ",(0,r.yg)("inlineCode",{parentName:"p"},"useForgotPassword")," hook's mutation will pass the mutation's parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method without any type constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useForgotPassword<{\n  email: string;\n}>();\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after sending the password reset link?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method's Promise with the path of the page."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  forgotPassword: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n};\n')),(0,r.yg)("p",null,"Also, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useForgotPassword")," hook's for this purpose."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = useForgotPassword();\n\nuseForgotPassword({ redirectPath: "/custom-page" });\n')),(0,r.yg)("p",null,"Then, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method to redirect the user to the specific page."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  forgotPassword: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    };\n  },\n};\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I customize the error message?")),(0,r.yg)("p",null,"Refine automatically displays an error notification when the ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," method resolves the Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'const authProvider: AuthProvider = {\n  // ---\n  forgotPassword: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: "Error",\n        message: "Something went wrong!",\n      },\n    };\n  },\n};\n')))),(0,r.yg)("h3",{id:"updatepassword"},"updatePassword"),(0,r.yg)(c,{id:"updatepassword",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method is used to update the user's password. It expects to return a resolved promise with the following type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type AuthActionResponse = {\n  success: boolean;\n  redirectTo?: string;\n  error?: Error;\n  [key: string]: unknown;\n};\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"success"),": Determines whether the operation is successful or not."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"redirectTo"),": The path of the page that the user will be redirected to after the operation is completed."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"error"),": An object containing details about any errors encountered during the operation."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"[key: string]"),": Any additional data you wish to include in the response, keyed by a string identifier.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"To update the user's password and resolve the promise:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // ---\n  updatePassword: async ({ password }) => {\n    // update the user\'s password here\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n\n    // if request is not successful\n    return {\n      success: false,\n      error: {\n        name: "Forgot Password Error",\n        message: "Email address does not exist",\n      },\n    };\n  },\n  // ---\n};\n')),(0,r.yg)("p",null,"Refine will consume this method using the ",(0,r.yg)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook which is used to update the user's password."),(0,r.yg)("p",null,"For example, if you want to update the user's password, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useUpdatePassword } from "@refinedev/core";\n\nconst { mutate } = useUpdatePassword();\n\nconst handleUpdatePassword = ({ password, confirmPassword }) => {\n    mutate({ password, confirmPassword }});\n};\n')),(0,r.yg)("p",null,"Additionally, the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method will take query parameters as arguments from the URL."),(0,r.yg)("p",null,"If we assume that the URL is ",(0,r.yg)("inlineCode",{parentName:"p"},"http://localhost:3000/reset-password?token=123"),", the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method will get the mutation's parameters as arguments and the ",(0,r.yg)("inlineCode",{parentName:"p"},"token")," query parameter as well."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  updatePassword: async ({ password, confirmPassword, token }) => {\n    console.log(token); // 123\n\n    // if request is successful\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n};\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-update-password"},(0,r.yg)("inlineCode",{parentName:"a"},"useUpdatePassword"))," documentation.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"FAQ")),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"Can I pass any parameters to the ",(0,r.yg)("code",null,"updatePassword")," method?")),(0,r.yg)("p",null,"Yes, you can pass any parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method. ",(0,r.yg)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook's mutation will pass the mutation's parameters to the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method without any type constraints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = useUpdatePassword<{\n  password: string;\n  newPassword: string;\n}>();\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I redirect the user to a specific page after updating the password?")),(0,r.yg)("p",null,"If you want to redirect the user to a specific page, you can resolve the Promise with an object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectTo")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const authProvider: AuthProvider = {\n  // ---\n  updatePassword: async () => {\n    // ---\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n};\n')),(0,r.yg)("p",null,"You can also use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useUpdatePassword")," hook's for this purpose:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = useUpdatePassword();\n\nuseUpdatePassword({ redirectPath: "/custom-page" });\n')),(0,r.yg)("p",null,"Then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"redirectPath")," parameter in the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method to redirect the user to the specific page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const authProvider: AuthProvider = {\n  // ---\n  updatePassword: async ({ redirectPath }) => {\n    // ---\n    return {\n      success: true,\n      redirectTo: redirectPath,\n    };\n  },\n};\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("strong",null,"How can I customize the error message?")),(0,r.yg)("p",null,"Refine automatically displays an error notification when the ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," method resolves the Promise with ",(0,r.yg)("inlineCode",{parentName:"p"},"success: false"),". If you want to customize the error message, you can resolve the Promise with an ",(0,r.yg)("inlineCode",{parentName:"p"},"error")," object that has ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," properties."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'const authProvider: AuthProvider = {\n  // ---\n  updatePassword: async () => {\n    // ---\n    return {\n      success: false,\n      error: {\n        name: "Error",\n        message: "Something went wrong!",\n      },\n    };\n  },\n};\n')))),(0,r.yg)("h2",{id:"legacy-auth-provider"},"Legacy Auth Provider"),(0,r.yg)(c,{id:"legacy-auth-provider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Refine's v4 release is backward compatible and supports legacy auth provider implementations until v5."),(0,r.yg)("p",null,"If you want to use a legacy auth provider, you can pass them to the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine />")," component using the ",(0,r.yg)("inlineCode",{parentName:"p"},"legacyAuthProvider")," prop."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/migration-guide/auth-provider/"},"Refer to the Migration Guide for more information. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { LegacyAuthProvider, Refine } from "@refinedev/core";\n\nconst legacyAuthProvider: LegacyAuthProvider = {\n  /* --- */\n};\n\nconst App = () => {\n  return (\n    <Refine\n      // ---\n      legacyAuthProvider={legacyAuthProvider}\n    >\n      {/* --- */}\n    </Refine>\n  );\n};\n'))),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-can-i-create-an-auth-provider"},"How can I create an auth provider?"),(0,r.yg)(c,{id:"how-can-i-create-an-auth-provider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/guides-concepts/authentication"},'Refer to the "Create Auth Provider From Scratch" section in the tutorial for more information ',"\u2192"))),(0,r.yg)("h3",{id:"how-can-i-set-authorization-credentials"},"How can I set authorization credentials?"),(0,r.yg)(c,{id:"how-can-i-set-authorization-credentials",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/guides-concepts/authentication"},'Refer to the "Setting Authorization Credentials" section in the tutorial for more information ',"\u2192"))),(0,r.yg)("h3",{id:"how-can-i-implement-refresh-token-mechanism"},"How can I implement refresh token mechanism?"),(0,r.yg)(c,{id:"how-can-i-implement-refresh-token-mechanism",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/guides-concepts/authentication"},'Refer to the "Implementing Refresh Token Mechanism" section in the tutorial for more information ',"\u2192"))))}f.isMDXComponent=!0}}]);