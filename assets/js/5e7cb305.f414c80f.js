"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[46583],{58860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>c});var a=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),g=r,c=p["".concat(s,".").concat(g)]||p[g]||m[g]||o;return t?a.createElement(c,l(l({ref:n},u),{},{components:t})):a.createElement(c,l({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},77766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>N,frontMatter:()=>i,metadata:()=>d,toc:()=>p});t(37953);var a=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const i={title:"useModalForm"},s=void 0,d={unversionedId:"ui-integrations/mantine/hooks/use-modal-form/index",id:"version-4.xx.xx/ui-integrations/mantine/hooks/use-modal-form/index",title:"useModalForm",description:"useModalForm hook also allows you to manage a form inside a modal component. It provides some useful methods to handle the form modal.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/mantine/hooks/use-modal-form/index.md",sourceDirName:"ui-integrations/mantine/hooks/use-modal-form",slug:"/ui-integrations/mantine/hooks/use-modal-form/",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-modal-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/mantine/hooks/use-modal-form/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useModalForm"},sidebar:"mainSidebar",previous:{title:"useDrawerForm",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-drawer-form/"},next:{title:"useStepsForm",permalink:"/docs/4.xx.xx/ui-integrations/mantine/hooks/use-steps-form/"}},u={},p=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"refineCoreProps",id:"refinecoreprops",level:3},{value:"initialValues",id:"initialvalues",level:3},{value:"defaultVisible",id:"defaultvisible",level:3},{value:"autoSubmitClose",id:"autosubmitclose",level:3},{value:"autoResetForm",id:"autoresetform",level:3},{value:"autoResetFormWhenClose",id:"autoresetformwhenclose",level:3},{value:"syncWithLocation",id:"syncwithlocation",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"invalidateOnClose",id:"invalidateonclose",level:4},{value:"Return Values",id:"return-values",level:2},{value:"visible",id:"visible",level:3},{value:"title",id:"title",level:3},{value:"close",id:"close",level:3},{value:"submit",id:"submit",level:3},{value:"show",id:"show",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},g=m("DocThumbsUpDownFeedbackWidget"),c=m("Tabs"),y=m("TabItem"),h=m("CodeSandboxExample"),f={toc:p},b="wrapper";function N(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(b,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},f,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," hook also allows you to manage a form inside a modal component. It provides some useful methods to handle the form modal."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," hook from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/mantine"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/mantine"))," package. This means that you can use all the features of ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(g,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"We will show three examples, ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"'),", ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,a.yg)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,a.yg)(y,{value:"create",mdxType:"TabItem"},(0,a.yg)("p",null,"In this example, we will show you how to ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"')," a record with ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  Box,\n  Group,\n  Modal,\n  Pagination,\n  ScrollArea,\n  Select,\n  Table,\n  TextInput,\n} from "@mantine/core";\nimport { List, SaveButton, useModalForm } from "@refinedev/mantine";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nconst PostList: React.FC = () => {\n  // highlight-start\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useModalForm({\n    refineCoreProps: { action: "create" },\n    initialValues: {\n      title: "",\n      status: "",\n      content: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n  });\n  // highlight-end\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQuery: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  return (\n    <>\n      {/* highlight-start */}\n      <Modal opened={visible} onClose={close} title={title}>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n          {...getInputProps("status")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n          <SaveButton {...saveButtonProps} />\n        </Box>\n      </Modal>\n      {/* highlight-end */}\n      <ScrollArea>\n        {/* highlight-next-line */}\n        <List createButtonProps={{ onClick: () => show() }}>\n          <Table highlightOnHover>\n            <thead>\n              {getHeaderGroups().map((headerGroup) => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <th key={header.id}>\n                        {!header.isPlaceholder && (\n                          <Group spacing="xs" noWrap>\n                            <Box>\n                              {flexRender(\n                                header.column.columnDef.header,\n                                header.getContext(),\n                              )}\n                            </Box>\n                          </Group>\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {getRowModel().rows.map((row) => {\n                return (\n                  <tr key={row.id}>\n                    {row.getVisibleCells().map((cell) => {\n                      return (\n                        <td key={cell.id}>\n                          {flexRender(\n                            cell.column.columnDef.cell,\n                            cell.getContext(),\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <br />\n          <Pagination\n            position="right"\n            total={pageCount}\n            page={current}\n            onChange={setCurrent}\n          />\n        </List>\n      </ScrollArea>\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n'))),(0,a.yg)(y,{value:"edit",mdxType:"TabItem"},(0,a.yg)("p",null,"In this example, we will show you how to ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," a record with ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  Box,\n  Group,\n  Modal,\n  Pagination,\n  ScrollArea,\n  Select,\n  Table,\n  TextInput,\n} from "@mantine/core";\nimport { EditButton, List, SaveButton, useModalForm } from "@refinedev/mantine";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nconst PostList: React.FC = () => {\n  // highlight-start\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useModalForm({\n    refineCoreProps: { action: "edit" },\n    initialValues: {\n      title: "",\n      status: "",\n      content: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n  });\n  // highlight-end\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n      {\n        id: "actions",\n        header: "Actions",\n        accessorKey: "id",\n        enableColumnFilter: false,\n        enableSorting: false,\n        cell: function render({ getValue }) {\n          return (\n            <Group spacing="xs" noWrap>\n              {/* highlight-start */}\n              <EditButton hideText onClick={() => show(getValue() as number)} />\n              {/* highlight-end */}\n            </Group>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQuery: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  return (\n    <>\n      {/* highlight-start */}\n      <Modal opened={visible} onClose={close} title={title}>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n          {...getInputProps("status")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n          <SaveButton {...saveButtonProps} />\n        </Box>\n      </Modal>\n      {/* highlight-end */}\n      <ScrollArea>\n        <List>\n          <Table highlightOnHover>\n            <thead>\n              {getHeaderGroups().map((headerGroup) => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <th key={header.id}>\n                        {!header.isPlaceholder && (\n                          <Group spacing="xs" noWrap>\n                            <Box>\n                              {flexRender(\n                                header.column.columnDef.header,\n                                header.getContext(),\n                              )}\n                            </Box>\n                          </Group>\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {getRowModel().rows.map((row) => {\n                return (\n                  <tr key={row.id}>\n                    {row.getVisibleCells().map((cell) => {\n                      return (\n                        <td key={cell.id}>\n                          {flexRender(\n                            cell.column.columnDef.cell,\n                            cell.getContext(),\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <br />\n          <Pagination\n            position="right"\n            total={pageCount}\n            page={current}\n            onChange={setCurrent}\n          />\n        </List>\n      </ScrollArea>\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n')),(0,a.yg)("p",null,"Refine doesn't automatically add a ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList>")," which opens ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.yg)("p",null,"So, we have to put the ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list for ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," to be able to fetch data by the record ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const columns = React.useMemo<ColumnDef<IPost>[]>(\n  () => [\n    // --\n    {\n      id: "actions",\n      header: "Actions",\n      accessorKey: "id",\n      enableColumnFilter: false,\n      enableSorting: false,\n      cell: function render({ getValue }) {\n        return (\n          <Group spacing="xs" noWrap>\n            <EditButton hideText onClick={() => show(getValue() as number)} />\n          </Group>\n        );\n      },\n    },\n  ],\n  [],\n);\n\nconst table = useTable({\n  columns,\n});\n')),(0,a.yg)("p",null,"Don't forget to pass the record ",(0,a.yg)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," forms.")),(0,a.yg)(y,{value:"clone",mdxType:"TabItem"},(0,a.yg)("p",null,"In this example, we will show you how to ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," a record with ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  Box,\n  Group,\n  Modal,\n  Pagination,\n  ScrollArea,\n  Select,\n  Table,\n  TextInput,\n} from "@mantine/core";\nimport {\n  CloneButton,\n  List,\n  SaveButton,\n  useModalForm,\n} from "@refinedev/mantine";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport React from "react";\n\nconst PostList: React.FC = () => {\n  // highlight-start\n  const {\n    getInputProps,\n    saveButtonProps,\n    modal: { show, close, title, visible },\n  } = useModalForm({\n    refineCoreProps: { action: "clone" },\n    initialValues: {\n      title: "",\n      status: "",\n    },\n    validate: {\n      title: (value) => (value.length < 2 ? "Too short title" : null),\n      status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n  });\n  // highlight-end\n\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        header: "ID",\n        accessorKey: "id",\n      },\n      {\n        id: "title",\n        header: "Title",\n        accessorKey: "title",\n        meta: {\n          filterOperator: "contains",\n        },\n      },\n      {\n        id: "status",\n        header: "Status",\n        accessorKey: "status",\n        meta: {\n          filterElement: function render(props: FilterElementProps) {\n            return (\n              <Select\n                defaultValue="published"\n                data={[\n                  { label: "Published", value: "published" },\n                  { label: "Draft", value: "draft" },\n                  { label: "Rejected", value: "rejected" },\n                ]}\n                {...props}\n              />\n            );\n          },\n          filterOperator: "eq",\n        },\n      },\n      {\n        id: "actions",\n        header: "Actions",\n        accessorKey: "id",\n        enableColumnFilter: false,\n        enableSorting: false,\n        cell: function render({ getValue }) {\n          return (\n            <Group spacing="xs" noWrap>\n              {/* highlight-start */}\n              <CloneButton\n                hideText\n                onClick={() => show(getValue() as number)}\n              />\n              {/* highlight-end */}\n            </Group>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQuery: { data: tableData },\n    },\n  } = useTable({\n    columns,\n  });\n\n  return (\n    <>\n      {/* highlight-start */}\n      <Modal opened={visible} onClose={close} title={title}>\n        <TextInput\n          mt={8}\n          label="Title"\n          placeholder="Title"\n          {...getInputProps("title")}\n        />\n        <Select\n          mt={8}\n          label="Status"\n          placeholder="Pick one"\n          data={[\n            { label: "Published", value: "published" },\n            { label: "Draft", value: "draft" },\n            { label: "Rejected", value: "rejected" },\n          ]}\n          {...getInputProps("status")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n          <SaveButton {...saveButtonProps} />\n        </Box>\n      </Modal>\n      {/* highlight-end */}\n      <ScrollArea>\n        <List>\n          <Table highlightOnHover>\n            <thead>\n              {getHeaderGroups().map((headerGroup) => (\n                <tr key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <th key={header.id}>\n                        {!header.isPlaceholder && (\n                          <Group spacing="xs" noWrap>\n                            <Box>\n                              {flexRender(\n                                header.column.columnDef.header,\n                                header.getContext(),\n                              )}\n                            </Box>\n                          </Group>\n                        )}\n                      </th>\n                    );\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody>\n              {getRowModel().rows.map((row) => {\n                return (\n                  <tr key={row.id}>\n                    {row.getVisibleCells().map((cell) => {\n                      return (\n                        <td key={cell.id}>\n                          {flexRender(\n                            cell.column.columnDef.cell,\n                            cell.getContext(),\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n          <br />\n          <Pagination\n            position="right"\n            total={pageCount}\n            page={current}\n            onChange={setCurrent}\n          />\n        </List>\n      </ScrollArea>\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineMantineDemo />);\n')),(0,a.yg)("p",null,"Refine doesn't automatically add a ",(0,a.yg)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList>")," which opens ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.yg)("p",null,"So, we have to put the ",(0,a.yg)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list for ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," form in ",(0,a.yg)("inlineCode",{parentName:"p"},"<Modal>")," to be able to fetch data by the record ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const columns = React.useMemo<ColumnDef<IPost>[]>(\n  () => [\n    // --\n    {\n      id: "actions",\n      header: "Actions",\n      accessorKey: "id",\n      enableColumnFilter: false,\n      enableSorting: false,\n      cell: function render({ getValue }) {\n        return (\n          <Group spacing="xs" noWrap>\n            <CloneButton hideText onClick={() => show(getValue() as number)} />\n          </Group>\n        );\n      },\n    },\n  ],\n  [],\n);\n\nconst table = useTable({\n  columns,\n});\n')),(0,a.yg)("p",null,"Don't forget to pass the record ",(0,a.yg)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.yg)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.yg)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.yg)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,a.yg)("h2",{id:"properties"},"Properties"),(0,a.yg)("h3",{id:"refinecoreprops"},"refineCoreProps"),(0,a.yg)(g,{id:"refinecoreprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," properties are also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#properties"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," documentation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  refineCoreProps: {\n    action: "edit",\n    resource: "posts",\n    id: "1",\n  },\n});\n'))),(0,a.yg)("h3",{id:"initialvalues"},"initialValues"),(0,a.yg)(g,{id:"initialvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed. This property is only available for ",(0,a.yg)("inlineCode",{parentName:"p"},'"create"')," action."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  initialValues: {\n    title: "Hello World",\n  },\n});\n'))),(0,a.yg)("h3",{id:"defaultvisible"},"defaultVisible"),(0,a.yg)(g,{id:"defaultvisible",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", modal will be visible by default. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    defaultVisible: true,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autosubmitclose"},"autoSubmitClose"),(0,a.yg)(g,{id:"autosubmitclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", modal will be closed after successful submit. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.yg)(g,{id:"modalpropstype",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoSubmitClose: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autoresetform"},"autoResetForm"),(0,a.yg)(g,{id:"modalreturnvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(g,{id:"autoresetform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", form will be reset after successful submit. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoResetForm: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"autoresetformwhenclose"},"autoResetFormWhenClose"),(0,a.yg)(g,{id:"autoresetformwhenclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", form will be reset when modal closes. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  modalProps: {\n    autoResetFormWhenClose: false,\n  },\n});\n"))),(0,a.yg)("h3",{id:"syncwithlocation"},"syncWithLocation"),(0,a.yg)(g,{id:"syncwithlocation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", the modals visibility state and the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.yg)("p",null,"This property can also be set as an object ",(0,a.yg)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.yg)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  syncWithLocation: { key: "my-modal", syncId: true },\n});\n'))),(0,a.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,a.yg)(g,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.yg)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,a.yg)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.yg)("p",null,"Return ",(0,a.yg)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n"))),(0,a.yg)("h3",{id:"autosave"},"autoSave"),(0,a.yg)(g,{id:"autosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.yg)("p",null,"By default the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.yg)("p",null,"It also supports ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.yg)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed.")),(0,a.yg)("h4",{id:"enabled"},"enabled"),(0,a.yg)(g,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"To enable the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.yg)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),". Default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"debounce"},"debounce"),(0,a.yg)(g,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Set the debounce time for the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," prop. Default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      debounce: 2000,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,a.yg)(g,{id:"invalidateonunmount",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. Default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnUnmount: true,\n    },\n  },\n});\n"))),(0,a.yg)("h4",{id:"invalidateonclose"},"invalidateOnClose"),(0,a.yg)(g,{id:"invalidateonclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the modal is closed. By default, it invalidates the ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. Default value is ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnClose: true,\n    },\n  },\n});\n"))),(0,a.yg)("h2",{id:"return-values"},"Return Values"),(0,a.yg)(g,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,a.yg)("p",null,"All ",(0,a.yg)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"mantine useForm"))," return values also available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.yg)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"mantine"))," docs.")),(0,a.yg)("h3",{id:"visible"},"visible"),(0,a.yg)(g,{id:"visible",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Current visibility state of the modal."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  defaultVisible: true,\n});\n\nconsole.log(modalForm.modal.visible); // true\n"))),(0,a.yg)("h3",{id:"title"},"title"),(0,a.yg)(g,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Title of the modal. Based on resource and action values"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  modal: { title },\n} = useModalForm({\n  refineCoreProps: {\n    resource: "posts",\n    action: "create",\n  },\n});\n\nconsole.log(title); // "Create Post"\n'))),(0,a.yg)("h3",{id:"close"},"close"),(0,a.yg)(g,{id:"close",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A function that can close the modal. It's useful when you want to close the modal manually."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  modal: { close, visible, title },\n} = useModalForm();\n\nreturn (\n  <Modal opened={visible} onClose={close} title={title}>\n    <TextInput\n      mt={8}\n      label="Title"\n      placeholder="Title"\n      {...getInputProps("title")}\n    />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <SaveButton {...saveButtonProps} />\n      <Button onClick={close}>Cancel</Button>\n    </Box>\n  </Modal>\n);\n'))),(0,a.yg)("h3",{id:"submit"},"submit"),(0,a.yg)(g,{id:"submit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  modal: { submit },\n} = useModalForm();\n\n// ---\n\nreturn (\n  <Modal opened={visible} onClose={close} title={title}>\n    <TextInput\n      mt={8}\n      label="Title"\n      placeholder="Title"\n      {...getInputProps("title")}\n    />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <Button onClick={submit}>Save</Button>\n    </Box>\n  </Modal>\n);\n'))),(0,a.yg)("h3",{id:"show"},"show"),(0,a.yg)(g,{id:"show",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"show")," is a function that can show the modal."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  getInputProps,\n  modal: { close, visible, title, show },\n} = useModalForm();\n\nconst onFinishHandler = (values) => {\n  onFinish(values);\n  show();\n};\n\nreturn (\n  <>\n    <Button onClick={}>Show Modal</Button>\n    <Modal opened={visible} onClose={close} title={title}>\n      <TextInput\n        mt={8}\n        label="Title"\n        placeholder="Title"\n        {...getInputProps("title")}\n      />\n      <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n        <SaveButton {...saveButtonProps} />\n      </Box>\n    </Modal>\n  </>\n);\n'))),(0,a.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,a.yg)(g,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"saveButtonProps"),' contains all the props needed by the "submit" button within the modal (disabled,loading etc.). You can manually pass these props to your custom button.'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const { getInputProps, modal, saveButtonProps } = useModalForm();\n\nreturn (\n  <Modal {...modal}>\n    <TextInput\n      mt={8}\n      label="Title"\n      placeholder="Title"\n      {...getInputProps("title")}\n    />\n    <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n      <Button\n        {...saveButtonProps}\n        onClick={(e) => {\n          // -- your custom logic\n          saveButtonProps.onClick(e);\n        }}\n      />\n    </Box>\n  </Modal>\n);\n'))),(0,a.yg)("h3",{id:"overtime"},"overtime"),(0,a.yg)(g,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n"))),(0,a.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,a.yg)(g,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.yg)("inlineCode",{parentName:"p"},"data"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," properties from mutation.")),(0,a.yg)("h2",{id:"faq"},"FAQ"),(0,a.yg)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.yg)(g,{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"You may need to modify the form data before it is sent to the API."),(0,a.yg)("p",null,"For example, let's send the values we received from the user in two separate inputs, ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.yg)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import React from "react";\nimport { useModalForm } from "@refinedev/mantine";\nimport { TextInput, Modal } from "@mantine/core";\n\nconst UserCreate: React.FC = () => {\n    const {\n        getInputProps,\n        saveButtonProps,\n        modal: { show, close, title, visible },\n    } = useModalForm({\n        refineCoreProps: { action: "create" },\n        initialValues: {\n            name: "",\n            surname: "",\n        },\n        // highlight-start\n        transformValues: (values) => ({\n            fullName: `${values.name} ${values.surname}`,\n        }),\n        // highlight-end\n    });\n\n    return (\n        <Modal opened={visible} onClose={close} title={title}>\n            <TextInput\n                mt={8}\n                label="Name"\n                placeholder="Name"\n                {...getInputProps("name")}\n            />\n            <TextInput\n                mt={8}\n                label="Surname"\n                placeholder="Surname"\n                {...getInputProps("surname")}\n            />\n            <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n                <Button\n                    {...saveButtonProps}\n                    onClick={(e) => {\n                        // -- your custom logic\n                        saveButtonProps.onClick(e);\n                    }}\n                />\n            </Box>\n        </Drawer>\n    );\n};\n'))),(0,a.yg)("h2",{id:"api-reference"},"API Reference"),(0,a.yg)("h3",{id:"properties-1"},"Properties"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"modalProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Configuration object for the modal or drawer"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#modalpropstype"},(0,a.yg)("inlineCode",{parentName:"a"},"ModalPropsType")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"refineCoreProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Configuration object for the core of the ",(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#properties"},(0,a.yg)("inlineCode",{parentName:"a"},"UseFormProps")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.yg)("inlineCode",{parentName:"td"},"useForm")," properties"),(0,a.yg)("td",{parentName:"tr",align:null},"See ",(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/mantine/hooks/use-form"},"useForm")," documentation"),(0,a.yg)("td",{parentName:"tr",align:null})))),(0,a.yg)("br",null),(0,a.yg)("blockquote",null,(0,a.yg)("ul",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("h4",{parentName:"li",id:"modalpropstype"},"ModalPropsType"))),(0,a.yg)("table",{parentName:"blockquote"},(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultVisible"),(0,a.yg)("td",{parentName:"tr",align:null},"Initial visibility state of the modal"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"false"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"autoSubmitClose"),(0,a.yg)("td",{parentName:"tr",align:null},"Whether the form should be submitted when the modal is closed"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"autoResetForm"),(0,a.yg)("td",{parentName:"tr",align:null},"Whether the form should be reset when the form is submitted"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"true"))))))),(0,a.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.yg)(g,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,a.yg)("td",{parentName:"tr",align:null},"Form values for mutation function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Record<string, unknown>"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TTransformed"),(0,a.yg)("td",{parentName:"tr",align:null},"Form values after transformation for mutation function"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TVariables"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TData"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,a.yg)("h3",{id:"return-values-1"},"Return values"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"modal"),(0,a.yg)("td",{parentName:"tr",align:null},"Relevant states and methods to control the modal or drawer"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#modalreturnvalues"},(0,a.yg)("inlineCode",{parentName:"a"},"ModalReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"refineCore"),(0,a.yg)("td",{parentName:"tr",align:null},"The return values of the ",(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#return-values"},(0,a.yg)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.yg)("inlineCode",{parentName:"td"},"useForm")," return values"),(0,a.yg)("td",{parentName:"tr",align:null},"See ",(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/mantine/hooks/use-form"},"useForm")," documentation"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"overtime"),(0,a.yg)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},'"success" }'))))),(0,a.yg)("br",null),(0,a.yg)("blockquote",null,(0,a.yg)("ul",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("h4",{parentName:"li",id:"modalreturnvalues"},"ModalReturnValues"))),(0,a.yg)("table",{parentName:"blockquote"},(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"visible"),(0,a.yg)("td",{parentName:"tr",align:null},"State of modal visibility"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"show"),(0,a.yg)("td",{parentName:"tr",align:null},"Sets the visible state to true"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"close"),(0,a.yg)("td",{parentName:"tr",align:null},"Sets the visible state to false"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"() => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"submit"),(0,a.yg)("td",{parentName:"tr",align:null},"Submits the form"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(values: TVariables) => void"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"title"),(0,a.yg)("td",{parentName:"tr",align:null},"Modal title based on resource and action value"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ disabled: boolean, onClick: (e: React.FormEvent<HTMLFormElement>) => void; }"))))))),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(g,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(h,{path:"form-mantine-use-modal-form",mdxType:"CodeSandboxExample"})))}N.isMDXComponent=!0}}]);