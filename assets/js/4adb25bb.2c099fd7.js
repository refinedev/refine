"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8887],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var o=n(37953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(g,i(i({ref:t},p),{},{components:n})):o.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61107:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>u});n(37953);var o=n(58860);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={title:"A Guide to useContext and React Context API",description:"Share data across components with React Context in TypeScript and\xa0Next.js",slug:"usecontext-and-react-context",authors:"chibuzor_otuokwu",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-10-23-react-context/social-2.png",hide_table_of_contents:!1},c=void 0,l={permalink:"/blog/usecontext-and-react-context",source:"@site/blog/2024-10-30-react-context.md",title:"A Guide to useContext and React Context API",description:"Share data across components with React Context in TypeScript and\xa0Next.js",date:"2024-10-30T00:00:00.000Z",formattedDate:"October 30, 2024",tags:[{label:"react",permalink:"/blog/tags/react"}],readingTime:22.57,hasTruncateMarker:!1,authors:[{name:"Chibuzor Otuokwu",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"chibuzor_otuokwu"}],frontMatter:{title:"A Guide to useContext and React Context API",description:"Share data across components with React Context in TypeScript and\xa0Next.js",slug:"usecontext-and-react-context",authors:"chibuzor_otuokwu",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-10-23-react-context/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Error Handling With try, catch and finally Blocks in JavaScript",permalink:"/blog/javascript-try-catch-finally"},nextItem:{title:"Synchronous vs. Asynchronous Programming",permalink:"/blog/synchronous-vs-asynchronous"},relatedPosts:[{title:"A Guide on React Lazy Loading",description:"We will be looking at what lazy loading is, how it works, and how it can be used to improve the performance of React applications.",permalink:"/blog/react-lazy-loading",formattedDate:"July 12, 2024",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:16.045,date:"2024-07-12T00:00:00.000Z"},{title:"Essentials of Managing Form State with React Hook Form",description:"This post covers the essentials of form state management with React Hook Form library.",permalink:"/blog/react-hook-form",formattedDate:"November 6, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:32.685,date:"2024-11-06T00:00:00.000Z"},{title:"Introduction to Mantine UI",description:"Let's explore Mantine UI React Component Library.",permalink:"/blog/mantine-ui-react",formattedDate:"September 9, 2024",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:18.305,date:"2024-09-09T00:00:00.000Z"}],authorPosts:[]},p={authorsImageUrls:[void 0]},u=[{value:"What is prop drilling?",id:"what-is-prop-drilling",level:2},{value:"What is React Context API?",id:"what-is-react-context-api",level:2},{value:"Why React Context?",id:"why-react-context",level:2},{value:"Use cases of the React Context API",id:"use-cases-of-the-react-context-api",level:2},{value:"Managing application theme",id:"managing-application-theme",level:3},{value:"Managing user authentication",id:"managing-user-authentication",level:3},{value:"Managing localization",id:"managing-localization",level:3},{value:"Manage routing",id:"manage-routing",level:3},{value:"How to use the React context API with functional components",id:"how-to-use-the-react-context-api-with-functional-components",level:2},{value:"How to create\xa0Context in React",id:"how-to-createcontext-in-react",level:3},{value:"How to consume Context in React",id:"how-to-consume-context-in-react",level:3},{value:"How to use the React context API with class components",id:"how-to-use-the-react-context-api-with-class-components",level:2},{value:"How to use the React context API in a Next.js project",id:"how-to-use-the-react-context-api-in-a-nextjs-project",level:2},{value:"Set up the project",id:"set-up-the-project",level:3},{value:"Exploring Context in Complex State Management: Using Reducers and Middlewares with Context API",id:"exploring-context-in-complex-state-management-using-reducers-and-middlewares-with-context-api",level:2},{value:"Using Reducers with Context API",id:"using-reducers-with-context-api",level:3},{value:"Adding Middleware to Context for Logging and Async Actions",id:"adding-middleware-to-context-for-logging-and-async-actions",level:3},{value:"Building the Product\xa0Listings",id:"building-the-productlistings",level:3},{value:"Custom Hooks and Optimizations with React.memo and useCallback",id:"custom-hooks-and-optimizations-with-reactmemo-and-usecallback",level:2},{value:"Creating Custom Hooks for Context Access",id:"creating-custom-hooks-for-context-access",level:3},{value:"Optimizing Context with React.memo and useCallback",id:"optimizing-context-with-reactmemo-and-usecallback",level:3},{value:"Share Data using the context API",id:"share-data-using-the-context-api",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:u},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,o.yg)(m,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){a(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"This article was last updated on October 30, 2024 to include sections on optimizing context performance, testing React Context, managing state with context in complex applications, and security considerations with context data.")),(0,o.yg)("p",null,"When building React applications, we typically pass data from parent to child components via props. It would be easy if we had few layers of components. However, some components are deeply nested."),(0,o.yg)("p",null,"Things become complex as you introduce more components with several nesting levels. Keeping track of state and props can become cumbersome."),(0,o.yg)("p",null,"The ",(0,o.yg)("strong",{parentName:"p"},"React Context API")," provides functionality for passing data from a parent component to its descendants without prop drilling."),(0,o.yg)("p",null,"In this tutorial, you will learn the context API and build a mini e-commerce store to illustrate how to use the context API in a real-world application."),(0,o.yg)("br",null),(0,o.yg)("p",null,"Steps we'll cover:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#what-is-prop-drilling"},"What is prop drilling?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#what-is-react-context-api"},"What is React Context API?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#why-react-context"},"Why React Context?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#use-cases-of-the-react-context-api"},"Use cases of the React Context API")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#how-to-use-the-react-context-api-with-functional-components"},"How to use the React context API with functional components")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#how-to-use-the-react-context-api-with-class-components"},"How to use the React context API with class components")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#how-to-use-the-react-context-api-in-a-nextjs-project"},"How to use the React context API in a Next.js project")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#exploring-context-in-complex-state-management-using-reducers-and-middlewares-with-context-api"},"Exploring Context in Complex State Management: Using Reducers and Middlewares with Context API")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#custom-hooks-and-optimizations-with-reactmemo-and-usecallback"},"Custom Hooks and Optimizations with React.memo and useCallback"))),(0,o.yg)("h2",{id:"what-is-prop-drilling"},"What is prop drilling?"),(0,o.yg)("p",null,"React is a declarative, component-based UI framework. You will almost always need to compose two or more components when building UIs. In React, a parent component can primarily share data with its children via props."),(0,o.yg)("p",null,"However it becomes more complex if your app has several nesting levels and you have to pass data from the topmost to the innermost component."),(0,o.yg)("p",null,"As an example, assume ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentA")," renders ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentB")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentB")," renders ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentC"),". If you want the topmost component to share data with the innermost component, you need to pass ",(0,o.yg)("inlineCode",{parentName:"p"},"props")," from ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentA")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentB")," and then finally from ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentB")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"ComponentC"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"function ComponentA() {\n  const [counter, setCounter] = useState(0);\n\n  return <ComponentB counter={counter} />;\n}\n\nfunction ComponentB({ counter }) {\n  return <ComponentC counter={counter} />;\n}\n\nfunction ComponentC({ counter }) {\n  return <p>{counter}</p>;\n}\n")),(0,o.yg)("p",null,"In React, prop drilling refers to passing data via props through multiple layers of nested components, as in the above example. Props are useful for basic data sharing between a component and its children."),(0,o.yg)("p",null,"However, drilling props through several layers of nesting can make your components less readable, difficult to maintain, and reuse. You can solve this prop drilling problem using the React context API."),(0,o.yg)("h2",{id:"what-is-react-context-api"},"What is React Context API?"),(0,o.yg)("p",null,"The React Context API is one of the built-in APIs in React. You can use it to pass data from a parent component to its descendants without prop drilling."),(0,o.yg)("p",null,"You can create a context by invoking the ",(0,o.yg)("inlineCode",{parentName:"p"},"createContext")," function with an optional default value as in the example below. The default argument can be of any type."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { createContext } from "react";\nconst ContextObject = createContext(defaultValue);\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"createContext")," function returns a context object. The returned object has the ",(0,o.yg)("inlineCode",{parentName:"p"},"Provider")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Consumer")," properties. These properties are React components and are usually referred to as context providers and consumers respectively."),(0,o.yg)("p",null,"You can use the context provider to wrap the nested components that need to access the context data like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { createContext, useContext, useState } from "react";\n\nconst Context = createContext(1);\n\nfunction App() {\n  const [count, setCount] = useState(1);\n\n  return (\n    <>\n      <Context.Provider value={count}>\n        <NestedComponent />\n      </Context.Provider>\n    </>\n  );\n}\n')),(0,o.yg)("p",null,"As in the above example, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"value")," attribute of the context ",(0,o.yg)("inlineCode",{parentName:"p"},"Provider")," component to make the context data available to the nested components ."),(0,o.yg)("p",null,"Any nested functional component, no matter the nesting level, will be able to access or consume the context data via the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useContext } from "react";\nimport { Context } from "./App";\n\nfunction NestedComponent() {\n  const contextValue = useContext(Context);\n\n  return <p>{contextValue}</p>;\n}\n')),(0,o.yg)("p",null,"Instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook to consume context, you can also use the ",(0,o.yg)("inlineCode",{parentName:"p"},"Context.Consumer")," component as in the example below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"function NestedComponent() {\n  return (\n    <>\n      <Context.Consumer>\n        {(contextValue) => {\n          return <p>{contextValue}</p>;\n        }}\n      </Context.Consumer>\n    </>\n  );\n}\n")),(0,o.yg)("p",null,"However, this is a legacy method for consuming context. Always stick with the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook in functional components. Use the ",(0,o.yg)("inlineCode",{parentName:"p"},"Context.Consumer")," method in class components where you can't use hooks."),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"why-react-context"},"Why React Context?"),(0,o.yg)("p",null,"As hinted above, one of the primary reasons for using the context API is to reduce the downsides of prop drilling. Passing props through deeply nested component tree can result in complex, tightly coupled, and difficult-to-maintain code."),(0,o.yg)("p",null,"The context API comes in handy if your code requires passing data through several levels of component hierarchy. It makes your code easier to read and maintain."),(0,o.yg)("h2",{id:"use-cases-of-the-react-context-api"},"Use cases of the React Context API"),(0,o.yg)("p",null,"There are several use-cases of the React context API. Below are some of the use-cases you might encounter often."),(0,o.yg)("h3",{id:"managing-application-theme"},"Managing application theme"),(0,o.yg)("p",null,"Most websites and web apps have built-in theme switching functionality. In managing application theme, you can wrap the root component in a theme context provider. Any nested component in the component hierarchy can read the context value."),(0,o.yg)("p",null,"A user can switch the theme and the context provider will make the currently selected theme available to all its descendants."),(0,o.yg)("h3",{id:"managing-user-authentication"},"Managing user authentication"),(0,o.yg)("p",null,"You can use the context API to manage user authentication. You can provide information about the currently logged in user to all components via context."),(0,o.yg)("h3",{id:"managing-localization"},"Managing localization"),(0,o.yg)("p",null,"Most modern applications may need to support multiple languages so that a user can switch to a language they know. You can wrap the root component in a context provider. Any nested component can read the selected language and render content in the user's locale of choice."),(0,o.yg)("h3",{id:"manage-routing"},"Manage routing"),(0,o.yg)("p",null,"In the React ecosystem, most routing packages rely on the context API to hold information about the active route. Therefore, if you've ever used one of the front-end routing libraries, chances are high that it uses the context API under the hood."),(0,o.yg)("h2",{id:"how-to-use-the-react-context-api-with-functional-components"},"How to use the React context API with functional components"),(0,o.yg)("p",null,"In this section, we will explore how to use the context API in React functional components."),(0,o.yg)("h3",{id:"how-to-createcontext-in-react"},"How to create\xa0Context in React"),(0,o.yg)("p",null,"As hinted above, you can create context by invoking the built-in ",(0,o.yg)("inlineCode",{parentName:"p"},"createContext")," function with a default value as an argument."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { createContext } from "react";\nconst ExampleContext = createContext({} as any);\n')),(0,o.yg)("p",null,"In most real-world applications, you may want to create a dedicated directory for managing your application's context. You can create context in this directory and import them for your consumers and providers. Creating such a directory simplifies code maintenance."),(0,o.yg)("p",null,"The code below illustrates how to create a basic React context."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext } from "react";\n\nexport const ExampleContext = createContext({ username: "Israel" });\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ExampleProvider: React.FC<Props> = ({ children }) => {\n  return (\n    <ExampleContext.Provider value={{ username: "Chibuzor" }}>\n      {children}\n    </ExampleContext.Provider>\n  );\n};\n')),(0,o.yg)("p",null,"In the code above, we created a simple",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleContext")," with a default value. The ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleProvider")," component is our parent component. It will wrap multiple nested components that want to consume the data shared by the context."),(0,o.yg)("br",null),(0,o.yg)("h3",{id:"how-to-consume-context-in-react"},"How to consume Context in React"),(0,o.yg)("p",null,"Any component nested within a context provider can consume the shared data. In React functional components, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook to read the context value. The ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook takes the context as an argument and returns the context value as in the example below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/context/example.context.tsx"',title:'"src/context/example.context.tsx"'},'import React, { createContext, useContext } from "react";\n\nexport const ExampleContext = createContext({ username: "Israel" });\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ExampleProvider: React.FC<Props> = ({ children }) => {\n  return (\n    <ExampleContext.Provider value={{ username: "Chibuzor" }}>\n      {children}\n    </ExampleContext.Provider>\n  );\n};\n\nexport const Greet = () => {\n  const data = useContext(ExampleContext);\n  return <h1>Hello, {data.username}</h1>;\n};\n')),(0,o.yg)("p",null,"In the code above, we declared a simple context provider and a component that will consume the context data. The two components don't need to be in the same file."),(0,o.yg)("p",null,"You can now import and use the components we created above like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.tsx"',title:'"src/pages/index.tsx"'},'...\nimport { ExampleProvider, Greet } from "context/example.context";\n\nconst Home: NextPage = () => {\n ...\n  return (\n    <div className="container">\n      <main className="main-content">\n        <ExampleProvider>\n          <Greet />\n        </ExampleProvider>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n')),(0,o.yg)("p",null,'The abvoe component should now display the text "Hello Chibuzor". That\'s just about everything you need to know to create and consume context in React functional components.'),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"how-to-use-the-react-context-api-with-class-components"},"How to use the React context API with class components"),(0,o.yg)("p",null,"Creating context in React class components is similar to that in functional components. You use the ",(0,o.yg)("inlineCode",{parentName:"p"},"createContext")," function to create context and wrap your components in the context provider."),(0,o.yg)("p",null,"However, the difference is in consuming context because hooks only work with functional components. Therefore, you can't use the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook to consume context in class components."),(0,o.yg)("p",null,"With React class components, you use the ",(0,o.yg)("inlineCode",{parentName:"p"},"Context.Consumer")," component to consume the context data as in the example below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'import { Component } from "react";\nimport { Context } from "./Context";\n\nclass MyComponent extends Component {\n  render() {\n    return (\n      <>\n        <Context.Consumer>\n          {(contextValue) => {\n            return <p>{contextValue}</p>;\n          }}\n        </Context.Consumer>\n      </>\n    );\n  }\n}\n')),(0,o.yg)("h2",{id:"how-to-use-the-react-context-api-in-a-nextjs-project"},"How to use the React context API in a Next.js project"),(0,o.yg)("p",null,"In this section, we will build a simple e-commerce site using the context API."),(0,o.yg)("h3",{id:"set-up-the-project"},"Set up the project"),(0,o.yg)("p",null,"Run the command below to set up a simple Next.js project."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npx create-next-app react-context-tutorial --typescript\n")),(0,o.yg)("p",null,"The command above will bootstrap a Next.js app with TypeScript. Select the following options when prompted on the commandline."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-txt"},"\u2714 Would you like to use ESLint with this project? Yes\n\u2714 Would you like to use `src/` directory with this project? Yes\n\u2714 Would you like to use experimental `app/` directory with this project? No\n\u2714 What import alias would you like configured? @/*\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Open the tsconfig.json file and add the changes below to it."),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "noEmit": true,\n    "esModuleInterop": true,\n    "module": "esnext",\n    "moduleResolution": "bundler",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "jsx": "preserve",\n    "incremental": true,\n    // highlight-next-line\n    "baseUrl": "src",\n    "paths": {\n      "@/*": ["./src/*"]\n    }\n  },\n  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules"]\n}\n'))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Import styles in the ",(0,o.yg)("inlineCode",{parentName:"p"},"src/_app.tsx")," file using absolute path."))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/_app.tsx"',title:'"src/_app.tsx"'},'//highlight-next-line\nimport "styles/globals.css";\nimport type { AppProps } from "next/app";\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n\nexport default MyApp;\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Start the development server using the ",(0,o.yg)("inlineCode",{parentName:"li"},"npm run dev")," command"),(0,o.yg)("li",{parentName:"ul"},"Open your browser on ",(0,o.yg)("inlineCode",{parentName:"li"},"localhost")," on port 3000")),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"exploring-context-in-complex-state-management-using-reducers-and-middlewares-with-context-api"},"Exploring Context in Complex State Management: Using Reducers and Middlewares with Context API"),(0,o.yg)("p",null,"I thought it would be helpful to look at a couple of advanced patterns for managing complex state with React Context: using reducers within our Context API and incorporating middleware for more flexible state handling. These methods can give us more control, especially as our state management needs grow."),(0,o.yg)("h3",{id:"using-reducers-with-context-api"},"Using Reducers with Context API"),(0,o.yg)("p",null,"If we\u2019re managing a complex state structure, like in an e-commerce app with products, users, and orders, useReducer with Context can be a powerful combo. It allows us to handle multiple actions in a predictable way, similar to Redux but without the extra dependency."),(0,o.yg)("p",null,"Here\u2019s a basic example of using useReducer with Context:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext, useReducer, useContext } from "react";\n\n// Define initial state\nconst initialState = { cart: [], user: null };\n\n// Define actions\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case "ADD_TO_CART":\n      return { ...state, cart: [...state.cart, action.payload] };\n    case "SET_USER":\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = createContext();\n\n// Provider with reducer\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Custom hook for easier access\nexport const useAppContext = () => useContext(AppContext);\n')),(0,o.yg)("p",null,"With this setup, components can dispatch actions without directly managing state. Here\u2019s an example of how we\u2019d add an item to the cart:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useAppContext } from "../context/AppContext";\n\nconst Product = ({ product }) => {\n  const { dispatch } = useAppContext();\n\n  const addToCart = () => {\n    dispatch({ type: "ADD_TO_CART", payload: product });\n  };\n\n  return (\n    <div>\n      <h2>{product.name}</h2>\n      <button onClick={addToCart}>Add to Cart</button>\n    </div>\n  );\n};\n')),(0,o.yg)("p",null,"Using useReducer helps keep our state updates consistent and reduces the risk of bugs when managing complex data."),(0,o.yg)("h3",{id:"adding-middleware-to-context-for-logging-and-async-actions"},"Adding Middleware to Context for Logging and Async Actions"),(0,o.yg)("p",null,"Middleware can enhance our state management, especially for tasks like logging, analytics, or handling async actions. While Redux has built-in support for middleware, we can achieve similar functionality in React Context."),(0,o.yg)("p",null,"Below is an example of creating a simple logging middleware in our useReducer setup:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext, useReducer, useContext } from "react";\n\n// Initial state and reducer function\nconst initialState = { cart: [] };\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case "ADD_TO_CART":\n      return { ...state, cart: [...state.cart, action.payload] };\n    default:\n      return state;\n  }\n};\n\n// Middleware function for logging\nconst loggerMiddleware = (dispatch) => (action) => {\n  console.log("Dispatching action:", action);\n  return dispatch(action);\n};\n\n// Custom hook to initialize middleware\nconst useMiddlewareReducer = (reducer, initialState, middlewares = []) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Apply each middleware to dispatch function\n  const enhancedDispatch = middlewares.reduce(\n    (acc, middleware) => middleware(acc),\n    dispatch,\n  );\n\n  return [state, enhancedDispatch];\n};\n\n// Context and provider setup\nconst AppContext = createContext();\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useMiddlewareReducer(reducer, initialState, [\n    loggerMiddleware,\n  ]);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n')),(0,o.yg)("p",null,"With loggerMiddleware applied, every action dispatched will be logged to the console, which is useful for debugging. We can easily add other middlewares for additional functionality like handling async actions (e.g., API calls)."),(0,o.yg)("p",null,"To use this setup in a component:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useAppContext } from "../context/AppContext";\n\nconst Product = ({ product }) => {\n  const { dispatch } = useAppContext();\n\n  const addToCart = () => {\n    dispatch({ type: "ADD_TO_CART", payload: product });\n  };\n\n  return (\n    <div>\n      <h2>{product.name}</h2>\n      <button onClick={addToCart}>Add to Cart</button>\n    </div>\n  );\n};\n')),(0,o.yg)("h3",{id:"building-the-productlistings"},"Building the Product\xa0Listings"),(0,o.yg)("p",null,"In this section, we will build the UIs for the product list and share data across several components."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Replace the styles in the ",(0,o.yg)("inlineCode",{parentName:"p"},"styles/globals.css")," file with the styles below."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show the styles/globals.css file"),(0,o.yg)("p",null,(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="styles/globals.css"',title:'"styles/globals.css"'},"/**  css reset **/\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n/*main page content*/\n.main-content {\n  display: flex;\n  flex-direction: column;\n  min-height: 80vh;\n  margin-top: 100px;\n}\n\n/*product*/\n.product-container {\n  width: 800px;\n  margin: 16px auto;\n}\n\n.product-details {\n  display: flex;\n  margin-top: 2em;\n}\n\n.product-image,\n.product-info {\n  padding: 10px;\n}\n\n.product-image {\n  flex: 1;\n  font-size: 6em;\n  border: 1px solid #999;\n}\n\ntable.product-info {\n  border-collapse: collapse;\n  flex: 2;\n}\n\n.product-info td {\n  border: 1px solid #999;\n  padding: 0.5rem;\n  text-align: left;\n  letter-spacing: 2px;\n}\n\n.product-info td:last-child {\n  line-height: 18px;\n}\n\n.additional-info {\n  border-left: 2px solid purple;\n  padding-left: 4px;\n  margin-bottom: 4px;\n}\n\n.add-to-cart {\n  display: flex;\n  justify-content: flex-end;\n}\n.favorites h2 {\n  margin-bottom: 32px;\n}\n.favorites {\n  max-width: 600px;\n  margin: 32px auto;\n  text-align: center;\n}\n\n.favorites ul {\n  text-align: left;\n  margin: 16px;\n}\n\n.button {\n  padding: 4px;\n  margin: 4px;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n.update-quantity {\n  width: 124px;\n  display: flex;\n  padding: 2px;\n  margin-top: 0.4em;\n  background-color: #fdfefe;\n  box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0.5);\n}\n.quantity {\n  width: 40px;\n  text-align: center;\n  font-size: 20px;\n}\n.update-button {\n  width: 40px;\n  padding: 4px;\n  font-size: 20px;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n}\n")))))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Copy and paste the ",(0,o.yg)("inlineCode",{parentName:"li"},"products")," data below in the ",(0,o.yg)("inlineCode",{parentName:"li"},"products.ts")," file.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/constants/products.ts"',title:'"src/constants/products.ts"'},'const products = [\n  {\n    id: 1,\n    title: "Grape",\n  },\n  {\n    id: 2,\n    title: "ice cream",\n  },\n  {\n    id: 3,\n    title: "Tangerine",\n  },\n];\n\nexport default products;\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Create the ",(0,o.yg)("inlineCode",{parentName:"li"},"src/types/product.ts")," file. Copy and paste the code below into it. The ",(0,o.yg)("inlineCode",{parentName:"li"},"types")," directory doesn't exist yet. You need to first create it.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/types/product.ts"',title:'"src/types/product.ts"'},"export default interface Product {\n  id: number;\n  title: string;\n}\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Replace the contents of the ",(0,o.yg)("inlineCode",{parentName:"li"},"src/pages/index.tsx")," file with the code below.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.tsx"',title:'"src/pages/index.tsx"'},'import type { NextPage } from "next";\n\nconst Home: NextPage = () => {\n  return (\n    <div className="container">\n      <main className="main-content">\n        <h1 style={{ textAlign: "center" }}>Hello World</h1>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n')),(0,o.yg)("p",null,'The text "Hello World" will be displayed on the screen.'),(0,o.yg)("br",null),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Create the ",(0,o.yg)("em",{parentName:"li"},"favorites.tsx"),", ",(0,o.yg)("em",{parentName:"li"},"product-list.tsx"),", ",(0,o.yg)("em",{parentName:"li"},"product-item.tsx"),", and ",(0,o.yg)("em",{parentName:"li"},"product-details.tsx")," files in the ",(0,o.yg)("inlineCode",{parentName:"li"},"src/components")," directory. The ",(0,o.yg)("inlineCode",{parentName:"li"},"components")," directory doesn't exist yet. You need to create it yourself.")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show favorites.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/favorites.tsx"',title:'"src/components/favorites.tsx"'},'import Product from "types/product";\n\ninterface Props {\n  products: Product[];\n  favorites: number[];\n}\n\nconst Favorites: React.FC<Props> = ({ products, favorites }) => {\n  const myFavorites: Product[] = [];\n\n  favorites.forEach((fav) => {\n    const favorite = products.find((product) => product.id === fav);\n    if (favorite) {\n      myFavorites.push(favorite);\n    }\n  });\n\n  return (\n    <section className="favorites">\n      <h2>My Favorite products</h2>\n      {myFavorites.length ? (\n        <ul>\n          {myFavorites.map((favorite) => (\n            <li key={favorite.id}>{favorite.title}</li>\n          ))}\n        </ul>\n      ) : (\n        <div>\ud83d\ude02No favorite product!</div>\n      )}\n    </section>\n  );\n};\nexport default Favorites;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show product-list.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-list.tsx"',title:'"src/components/product-list.tsx"'},'import React from "react";\nimport ProductItem from "components/product-item";\nimport Product from "types/product";\n\ninterface Props {\n  favorites: number[];\n  products: Product[];\n  handleFavorite: (productId: number) => void;\n}\n\nconst ProductList: React.FC<Props> = ({\n  favorites,\n  products,\n  handleFavorite,\n}) => {\n  return (\n    <section className="product-container">\n      {products.map((product) => (\n        <ProductItem\n          key={product.id}\n          product={product}\n          handleFavorite={handleFavorite}\n          favorites={favorites}\n        />\n      ))}\n    </section>\n  );\n};\nexport default ProductList;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show product-item.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-item.tsx"',title:'"src/components/product-item.tsx"'},'import React from "react";\nimport ProductDetails from "components/product-details";\nimport Product from "types/product";\n\ninterface Props {\n  product: Product;\n  favorites: number[];\n  handleFavorite: (productId: number) => void;\n}\n\nconst ProductItem: React.FC<Props> = ({\n  product,\n  handleFavorite,\n  favorites,\n}) => {\n  return (\n    <div className="product-card">\n      <ProductDetails\n        product={product}\n        handleFavorite={handleFavorite}\n        favorites={favorites}\n      />\n    </div>\n  );\n};\nexport default ProductItem;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show product-details.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-details.tsx"',title:'"src/components/product-details.tsx"'},'import React from "react";\nimport Product from "types/product";\n\ninterface Props {\n  product: Product;\n  favorites: number[];\n  handleFavorite: (productId: number) => void;\n}\n\nconst ProductDetails: React.FC<Props> = ({\n  product,\n  handleFavorite,\n  favorites,\n}) => {\n  const isFavorite = favorites.includes(product.id);\n  return (\n    <div className="product-details-container">\n      <div className="product-details">\n        <div className="product-image">{product.title}</div>\n      </div>\n      <div className="add-to-cart">\n        <button\n          type="button"\n          className="button"\n          onClick={() => handleFavorite(product.id)}\n        >\n          <span>{isFavorite ? "\u2764\ufe0f" : "\u2764\ufe0e"}</span>\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default ProductDetails;\n')))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Update the index.tsx file in the ",(0,o.yg)("inlineCode",{parentName:"li"},"pages")," directory with the following code.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.tsx"',title:'"src/pages/index.tsx"'},'import { useState } from "react";\nimport type { NextPage } from "next";\nimport ProductList from "components/product-list";\nimport products from "constants/products";\nimport Favorites from "components/favorites";\n\nconst Home: NextPage = () => {\n  const [favorites, setFavorites] = useState<number[]>([]);\n\n  const handleFavorite = (productId: number) => {\n    if (favorites.includes(productId)) {\n      const newFavorites = favorites.filter((fav) => fav !== productId);\n      setFavorites(newFavorites);\n    } else {\n      setFavorites([...favorites, productId]);\n    }\n  };\n  return (\n    <div className="container">\n      <main className="main-content">\n        <Favorites products={products} favorites={favorites} />\n        <ProductList\n          products={products}\n          favorites={favorites}\n          handleFavorite={handleFavorite}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n')),(0,o.yg)("p",null,'If you click the favorite icon for each product, you should see it listed under the "My Favorite products" list.'),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-10-23-react-context/favorite-product-list.png",alt:"React context API favoriteProduct"}),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"custom-hooks-and-optimizations-with-reactmemo-and-usecallback"},"Custom Hooks and Optimizations with React.memo and useCallback"),(0,o.yg)("p",null,"I wanted to share some ideas on making our use of React Context more efficient and maintainable, especially for larger projects. Two approaches that can help us streamline context usage and improve performance are creating custom hooks for context and optimizing context updates with React.memo and useCallback. Here\u2019s a quick overview with examples for both."),(0,o.yg)("h3",{id:"creating-custom-hooks-for-context-access"},"Creating Custom Hooks for Context Access"),(0,o.yg)("p",null,"Instead of directly calling useContext throughout the app, we can create custom hooks to simplify context access. This keeps our codebase clean, ensures type safety, and helps us better control how the context is accessed."),(0,o.yg)("p",null,"Let\u2019s say we have a UserContext to share user data across components. Here\u2019s how we could set up a custom hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext, useContext, useState } from "react";\n\n// Step 1: Create the Context\nconst UserContext = createContext();\n\n// Step 2: Set up the Provider component\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  const login = (userData) => setUser(userData);\n  const logout = () => setUser(null);\n\n  return (\n    <UserContext.Provider value={{ user, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// Step 3: Create a custom hook\nexport const useUser = () => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error("useUser must be used within a UserProvider");\n  }\n  return context;\n};\n')),(0,o.yg)("p",null,"Now, instead of importing both UserContext and useContext in each component that needs access to the user data, we can just use useUser:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useUser } from "../context/UserContext";\n\nconst Profile = () => {\n  const { user, logout } = useUser();\n\n  return (\n    <div>\n      <p>Welcome, {user.name}!</p>\n      <button onClick={logout}>Log out</button>\n    </div>\n  );\n};\n')),(0,o.yg)("p",null,"This makes our components cleaner, and any updates to context usage only need to happen in the custom hook."),(0,o.yg)("h3",{id:"optimizing-context-with-reactmemo-and-usecallback"},"Optimizing Context with React.memo and useCallback"),(0,o.yg)("p",null,"One common issue with context is that when context updates, all components using that context can re-render, potentially impacting performance. To minimize unnecessary re-renders, we can use React.memo and useCallback where appropriate."),(0,o.yg)("p",null,"Let\u2019s say we have a ThemeContext that provides the current theme and a toggle function. We can use React.memo to wrap components that don\u2019t need to re-render unless the context value they use changes."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext, useContext, useState, useCallback } from "react";\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState("light");\n\n  // Using useCallback to memoize the toggle function\n  const toggleTheme = useCallback(() => {\n    setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n\n// Memoized component example\nconst ThemeButton = React.memo(() => {\n  const { toggleTheme } = useTheme();\n  console.log("ThemeButton rendered");\n\n  return <button onClick={toggleTheme}>Toggle Theme</button>;\n});\n')),(0,o.yg)("p",null,"By wrapping ThemeButton in React.memo, it will only re-render if toggleTheme changes. Since we used useCallback to memoize toggleTheme, it won\u2019t change on every re-render of the provider. This can significantly reduce unnecessary renders in large component trees."),(0,o.yg)("h3",{id:"share-data-using-the-context-api"},"Share Data using the context API"),(0,o.yg)("p",null,"In this section, we will refactor our code to use the React context API."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Create the ",(0,o.yg)("inlineCode",{parentName:"li"},"context/product.context.tsx")," file. Copy and paste the code below into it. The ",(0,o.yg)("inlineCode",{parentName:"li"},"context")," directory doesn't exist yet. You need to create it yourself.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/context/product.context.tsx"',title:'"src/context/product.context.tsx"'},'import React, { createContext, useContext, useReducer } from "react";\nimport products from "constants/products";\nimport Product from "types/product";\n\ntype ProductData = {\n  products: Product[];\n  favorites: number[];\n};\n\ntype ProductAction =\n  | {\n      type: "PRODUCTS";\n      products: Product[];\n    }\n  | {\n      type: "FAVORITES";\n      favorites: number;\n    };\n\nconst productReducer = (\n  state: ProductData,\n  action: ProductAction,\n): ProductData => {\n  switch (action.type) {\n    case "PRODUCTS":\n      return { ...state, products: action.products };\n    case "FAVORITES":\n      let favorites = state.favorites;\n\n      if (state.favorites.includes(action.favorites)) {\n        favorites = favorites.filter((fav) => fav !== action.favorites);\n      } else {\n        favorites = [...state.favorites, action.favorites];\n      }\n\n      return { ...state, favorites };\n    default:\n      return state;\n  }\n};\n\nconst defaultValues: ProductData = {\n  products,\n  favorites: [],\n};\n\nconst myProduct = {\n  product: defaultValues,\n  setProduct: (action: ProductAction): void => {},\n};\n\nconst ProductContext = createContext<{\n  product: ProductData;\n  setProduct: React.Dispatch<ProductAction>;\n}>(myProduct); //initialize context with default value\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ProductProvider: React.FC<Props> = ({ children }) => {\n  const [product, setProduct] = useReducer(productReducer, defaultValues);\n\n  return (\n    <ProductContext.Provider value={{ product, setProduct }}>\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\nexport const useProduct = () => useContext(ProductContext);\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"In the code above, we moved the logic for handling favorites into the ",(0,o.yg)("inlineCode",{parentName:"li"},"productReducer"),"."),(0,o.yg)("li",{parentName:"ul"},"We initialized the ",(0,o.yg)("inlineCode",{parentName:"li"},"ProductContext")," with a default value."),(0,o.yg)("li",{parentName:"ul"},"We exported a ",(0,o.yg)("inlineCode",{parentName:"li"},"useProduct")," function that exports ",(0,o.yg)("inlineCode",{parentName:"li"},"ProductContext"),". If we don't export the ",(0,o.yg)("inlineCode",{parentName:"li"},"useProduct")," function, we would have to call the ",(0,o.yg)("inlineCode",{parentName:"li"},"useContext")," and pass ",(0,o.yg)("inlineCode",{parentName:"li"},"ProductContext")," as its argument each time we want to consume the ",(0,o.yg)("inlineCode",{parentName:"li"},"ProductContext")," data."),(0,o.yg)("li",{parentName:"ul"},"We need to update our components (",(0,o.yg)("em",{parentName:"li"},"index.tsx"),", ",(0,o.yg)("em",{parentName:"li"},"favorites.tsx"),", ",(0,o.yg)("em",{parentName:"li"},"product-list.tsx"),", ",(0,o.yg)("em",{parentName:"li"},"product-item.tsx")," and ",(0,o.yg)("em",{parentName:"li"},"product-details.tsx"),") to consume the data in the ",(0,o.yg)("inlineCode",{parentName:"li"},"ProductContext"),".")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/index.tsx"',title:'"src/pages/index.tsx"'},'import type { NextPage } from "next";\nimport ProductList from "components/product-list";\nimport Favorites from "components/favorites";\nimport { ProductProvider } from "context/product.context";\n\nconst Home: NextPage = () => {\n  return (\n    <div className="container">\n      <main className="main-content">\n        <ProductProvider>\n          <Favorites />\n          <ProductList />\n        </ProductProvider>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n')),(0,o.yg)("br",null),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show the favorites.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/favorites.tsx"',title:'"src/components/favorites.tsx"'},'import Product from "types/product";\nimport { useProduct } from "context/product.context";\n\nconst Favorites: React.FC = () => {\n  const { product } = useProduct();\n  const myFavorites: Product[] = [];\n\n  product.favorites.forEach((fav) => {\n    const favorite = product.products.find((product) => product.id === fav);\n    if (favorite) {\n      myFavorites.push(favorite);\n    }\n  });\n\n  return (\n    <section className="favorites">\n      <h2>My Favorite products</h2>\n      {myFavorites.length ? (\n        <ul>\n          {myFavorites.map((favorite) => (\n            <li key={favorite.id}>{favorite.title}</li>\n          ))}\n        </ul>\n      ) : (\n        <div>\ud83d\ude02No favorite product!</div>\n      )}\n    </section>\n  );\n};\n\nexport default Favorites;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show the product-list.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-list.tsx"',title:'"src/components/product-list.tsx"'},'import React from "react";\nimport ProductItem from "components/product-item";\nimport { useProduct } from "context/product.context";\n\nconst ProductList: React.FC = () => {\n  const { product } = useProduct();\n  return (\n    <section className="product-container">\n      {product.products.map((product) => (\n        <ProductItem key={product.id} product={product} />\n      ))}\n    </section>\n  );\n};\n\nexport default ProductList;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show the product-item.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-item.tsx"',title:'"src/components/product-item.tsx"'},'import React from "react";\nimport ProductDetails from "components/product-details";\nimport Product from "types/product";\n\ninterface Props {\n  product: Product;\n}\nconst ProductItem: React.FC<Props> = ({ product }) => {\n  return (\n    <div className="product-card">\n      <ProductDetails product={product} />\n    </div>\n  );\n};\n\nexport default ProductItem;\n')))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show the product-details.tsx file"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/product-details.tsx"',title:'"src/components/product-details.tsx"'},'import React from "react";\nimport Product from "types/product";\nimport { useProduct } from "context/product.context";\n\ninterface Props {\n  product: Product;\n}\n\nconst ProductDetails: React.FC<Props> = ({ product }) => {\n  const { product: productData, setProduct } = useProduct();\n\n  const handleFavorite = (productId: number) => {\n    setProduct({ type: "FAVORITES", favorites: productId });\n  };\n\n  const isFavorite = productData.favorites.includes(product.id);\n\n  return (\n    <div className="product-details-container">\n      <div className="product-details">\n        <div className="product-image">{product.title}</div>\n      </div>\n      <div className="add-to-cart">\n        <button\n          type="button"\n          className="button"\n          onClick={() => handleFavorite(product.id)}\n        >\n          <span>{isFavorite ? "\u2764\ufe0f" : "\u2764\ufe0e"}</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductDetails;\n')))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"If you reload the browser, the app should work as expected.")),(0,o.yg)("p",null,"Our web application works as before, only this time the data is shared via the React Context API."),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"conclusion"},"Conclusion"),(0,o.yg)("p",null,"The context API comes in handy when passing data from a parent component to its deeply nested descendants."),(0,o.yg)("p",null,"In a typical React app, you create context by invoking the built-in ",(0,o.yg)("inlineCode",{parentName:"p"},"createContext")," function. It takes an initial value as an argument and returns a context object. The returned context object has a context provider and a context consumer."),(0,o.yg)("p",null,"You wrap your components in a context provider and use the ",(0,o.yg)("inlineCode",{parentName:"p"},"value")," attribute to share the context with the nested components that need it."),(0,o.yg)("p",null,"The nested components can access the context data using the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook. The ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook takes the context object as argument."))}g.isMDXComponent=!0}}]);