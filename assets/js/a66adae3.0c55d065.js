"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7136],{58860:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>h});var t=a(37953);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=t.createContext({}),c=function(e){var n=t.useContext(r),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(r.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),g=i,h=d["".concat(r,".").concat(g)]||d[g]||m[g]||o;return a?t.createElement(h,s(s({ref:n},p),{},{components:a})):t.createElement(h,s({ref:n},p))}));function h(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=g;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},54091:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});a(37953);var t=a(58860);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}const l={title:"Using Heroicons with TailwindCSS",description:"In this post, we see how to use Heroicons with TailwindCSS.",slug:"heroicons-with-tailwind",authors:"abdullah_numan",tags:["tailwind","css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-18-heroicons/social.png",hide_table_of_contents:!1},r=void 0,c={permalink:"/blog/heroicons-with-tailwind",source:"@site/blog/2024-08-19-heroicons.md",title:"Using Heroicons with TailwindCSS",description:"In this post, we see how to use Heroicons with TailwindCSS.",date:"2024-08-19T00:00:00.000Z",formattedDate:"August 19, 2024",tags:[{label:"tailwind",permalink:"/blog/tags/tailwind"},{label:"css",permalink:"/blog/tags/css"}],readingTime:14.115,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Using Heroicons with TailwindCSS",description:"In this post, we see how to use Heroicons with TailwindCSS.",slug:"heroicons-with-tailwind",authors:"abdullah_numan",tags:["tailwind","css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-18-heroicons/social.png",hide_table_of_contents:!1},prevItem:{title:"Using React Hot Toast as a Notification Provider for CRUD apps",permalink:"/blog/react-hot-toast"},nextItem:{title:"Tailwind Flex for Responsive React Components",permalink:"/blog/tailwind-flex"},relatedPosts:[{title:"Building components with Radix UI",description:"This post explains with examples how the keyof operator is used to define advanced types in TypeScript.",permalink:"/blog/radix-ui",formattedDate:"November 6, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:15.085,date:"2024-11-06T00:00:00.000Z"},{title:"Tailwind Animations with Examples",description:"Understanding the cleanup function of the useEffect hook in React. Learn how to clean up side effects in React components to prevent memory leaks and improve performance.",permalink:"/blog/tailwind-animations",formattedDate:"November 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:8.285,date:"2024-11-05T00:00:00.000Z"},{title:"How do you wrap text content in CSS?",description:"We'll look at the CSS features that allow us to wrap overflowing text in containers.",permalink:"/blog/css-text-wrap",formattedDate:"March 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:7.6,date:"2024-03-05T00:00:00.000Z"}],authorPosts:[{title:"Form Schema Validation with Zod and React Hook Form",description:"We'll explore how to use Zod schema validation with React Hook Form in a TypeScript based React application.",permalink:"/blog/zod-typescript",formattedDate:"May 21, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:22.145,date:"2024-05-21T00:00:00.000Z"},{title:"How to Use JavaScript Array some",description:"JavaScript some method implementation on Array with examples",permalink:"/blog/javascript-some-method",formattedDate:"November 4, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:14.44,date:"2024-11-04T00:00:00.000Z"},{title:"Error Handling With try, catch and finally Blocks in JavaScript",description:"We'll see how to handle errors in JavaScript using the try/catch/finally blocks.",permalink:"/blog/javascript-try-catch-finally",formattedDate:"October 30, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:15.29,date:"2024-10-30T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Preparation",id:"preparation",level:2},{value:"Install Heroicons",id:"install-heroicons",level:3},{value:"A Navbar with Heroicons",id:"a-navbar-with-heroicons",level:2},{value:"Styles",id:"styles",level:3},{value:"Adding and Styling Heroicons with TailwindCSS",id:"adding-and-styling-heroicons-with-tailwindcss",level:3},{value:"Using Regular TailwindCSS Utilities with Heroicons",id:"using-regular-tailwindcss-utilities-with-heroicons",level:3},{value:"Using <code>SVG</code> Related TailwindCSS Utilities with Heroicons",id:"using-svg-related-tailwindcss-utilities-with-heroicons",level:3},{value:"Using non-TailwindCSS Classes with Heroicons",id:"using-non-tailwindcss-classes-with-heroicons",level:3},{value:"Applying Native <code>&lt;svg&gt;</code> Properties to Heroicons",id:"applying-native-svg-properties-to-heroicons",level:3},{value:"Applying Responsive TailwindCSS Utils to Heroicons",id:"applying-responsive-tailwindcss-utils-to-heroicons",level:3},{value:"Customizing Heroicons",id:"customizing-heroicons",level:2},{value:"Advanced SVG Manipulations",id:"advanced-svg-manipulations",level:3},{value:"Theming Icons",id:"theming-icons",level:3},{value:"Optimizing Icon Performance",id:"optimizing-icon-performance",level:2},{value:"Use SVG Icons Over Icon Fonts",id:"use-svg-icons-over-icon-fonts",level:3},{value:"Optimize SVG Files",id:"optimize-svg-files",level:3},{value:"Lazy Load Icons",id:"lazy-load-icons",level:3},{value:"Minimize the Use of Multiple Icon Sets",id:"minimize-the-use-of-multiple-icon-sets",level:3},{value:"Leverage a CDN",id:"leverage-a-cdn",level:4},{value:"Sprite Sheets for Multiple Icons",id:"sprite-sheets-for-multiple-icons",level:4},{value:"Summary",id:"summary",level:2}],m={toc:d},g="wrapper";function h(e){var{components:n}=e,a=s(e,["components"]);return(0,t.yg)(g,o(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){i(e,n,a[n])}))}return e}({},m,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"This article was last updated on August 19, 2024, to add sections on Customizing Heroicons and Optimizing Icon Performance.")),(0,t.yg)("h2",{id:"introduction"},"Introduction"),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://heroicons.com"},"Heroicons")," are SVG-based icons packaged by the creators of TailwindCSS. They come in two size variants, ",(0,t.yg)("inlineCode",{parentName:"p"},"20"),", which is suitable for small buttons and form elements, and a ",(0,t.yg)("inlineCode",{parentName:"p"},"24")," size, that is useful for primary navigation buttons like call to action and hero sections. ",(0,t.yg)("inlineCode",{parentName:"p"},"24")," size comes as ",(0,t.yg)("inlineCode",{parentName:"p"},"solid")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"outline"),"."),(0,t.yg)("p",null,"A Heroicon is a React component that returns an ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," element with props passed to it. We are able to set values for the properties of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," element, such as ",(0,t.yg)("inlineCode",{parentName:"p"},"className"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"fill"),", by passing them to the Heroicon component."),(0,t.yg)("p",null,"TailwindCSS ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," classes such as ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke-{color}-{saturation}")," are very useful in styling regular ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," elements. Heroicons take it one step forward by allowing the ",(0,t.yg)("inlineCode",{parentName:"p"},"className")," prop to a Heroicon JSX element. This means we can pass TailwindCSS classes to a Heroicon component to style its ",(0,t.yg)("inlineCode",{parentName:"p"},"svg>")," element. For example, we can set the ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke")," color of a Heroicon ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," with TailwindCSS classes simply by adding ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke-{color}-{saturation}")," to the Heroicon component's ",(0,t.yg)("inlineCode",{parentName:"p"},"className"),"."),(0,t.yg)("p",null,"Besides, we can also pass regular properties such as ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"fill"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"height")," of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," to the Heroicon, which is assigned to the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," element."),(0,t.yg)("p",null,"In this post, we use Heroicons with both TailwindCSS and non-Tailwind classes. We'll work on an already built navbar that currently has Tailwind styled regular ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," icons (they are the same ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>"),"'s produced from the Heroicons we'll be using). We'll be replacing them with Heroicon React components and styling them accordingly."),(0,t.yg)("p",null,"The existing navbar is available in ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/anewman15/navbar-hero"},"this repository"),". As using Heroicons is pretty easy, to grasp how the examples work, it is enough just to follow the JSX. If you want to run the app and see what's going on in the browser when the style changes, please follow the steps below to clone the repo and run it locally."),(0,t.yg)("p",null,"Steps we'll cover:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#a-navbar-with-heroicons"},"A Navbar with Heroicons")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#customizing-heroicons"},"Customizing Heroicons")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#optimizing-icon-performance"},"Optimizing Icon Performance"))),(0,t.yg)("h2",{id:"preparation"},"Preparation"),(0,t.yg)("p",null,"Clone the repository ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/examples/blog-heroicons-example"},"here"),"."),(0,t.yg)("p",null,"Then open it in your code editor and run:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"npm install\nnpm run start\n")),(0,t.yg)("h3",{id:"install-heroicons"},"Install Heroicons"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @heroicons/react\n")),(0,t.yg)("p",null,"Then to compile newly added TailwindCSS classes, run the CSS compiler in ",(0,t.yg)("inlineCode",{parentName:"p"},"watch")," mode:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"npx tailwindcss -i ./src/styles/styles.css -o ./public/styles/styles.css --watch\n")),(0,t.yg)("h2",{id:"a-navbar-with-heroicons"},"A Navbar with Heroicons"),(0,t.yg)("p",null,"Currently, the ",(0,t.yg)("inlineCode",{parentName:"p"},"<Navbar />")," component looks like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/navbar/Navbar.tsx"',title:'"src/components/navbar/Navbar.tsx"'},'import React, { useState } from "react";\nimport TailzupLogo from "../icons/TailzupLogo";\nimport { Avatar } from "../icons/Avatar";\nimport { HamburgerIcon } from "../icons/HamburgerIcon";\nimport { SearchIcon } from "../icons/SearchIcon";\n\nconst Navbar = () => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const menuHidden = !isMobileMenuOpen ? "hidden md:block" : "";\n  return (\n    <nav className="navbar">\n      <div className="brand-wrapper">\n        <a className="brand" href="/">\n          <TailzupLogo color="orange" />\n        </a>\n      </div>\n      <div\n        className={`${menuHidden} border-t border-slate-500 text-amber-50 transition-all duration-1000 ease-in-out md:border-none`}\n      >\n        <div id="items" className="items-strip">\n          <div id="left" className="items-left">\n            <input\n              className="text-input"\n              type="email"\n              placeholder="Find Donald or something..."\n            />\n            <SearchIcon />\n          </div>\n          <div id="right">\n            <ul className="items-list">\n              <li className="nav-item md:order-last">\n                <a href="/">\n                  <Avatar />\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Home\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Friends\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Messages\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div\n        className={`absolute right-4 top-3 rounded border border-orange-400 p-1 text-slate-500 hover:bg-orange-200 hover:text-slate-300 md:hidden`}\n        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n      >\n        <a href="/">\n          <HamburgerIcon />\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n')),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"<SearchIcon />"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"<Avatar />")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"<HanburgerIcon />")," icons contain ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," elements produced from Heroicons. They are available in this folder: ",(0,t.yg)("inlineCode",{parentName:"p"},"src/components/icons/"),". However, we will be replacing them with actual Heroicon React components."),(0,t.yg)("h3",{id:"styles"},"Styles"),(0,t.yg)("p",null,"All the classes used on the components are styled with regular Tailwind and CSS classes. You can find them in this stylesheet:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"src/styles/styles.css"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css",metastring:'title="src/styles/styles.css"',title:'"src/styles/styles.css"'},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --primary-color: rgb(223, 232, 247);\n  --secondary-color: rgb(182, 76, 27);\n  --grayscale: rgb(226, 218, 218);\n  --friendly: green;\n  --neutral: blue;\n  --warning: yellow;\n  --danger: crimson;\n  --forbidden: black;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  min-width: 450px;\n}\n\n.navbar {\n  @apply sticky top-0 mx-auto flex h-auto w-full flex-col justify-start bg-slate-600 px-2 md:flex-row md:items-center md:justify-between;\n}\n\n.brand-wrapper {\n  @apply flex h-14 w-full flex-1 items-center justify-start self-start bg-slate-600;\n}\n\n.brand {\n  max-width: 12rem;\n  color: var(--primary-color);\n  @apply p-2 text-4xl;\n}\n\n.items-strip {\n  @apply my-2 flex flex-col items-start justify-start md:flex-row md:items-center md:justify-start;\n}\n\n.items-left {\n  @apply order-last mx-2 flex items-center justify-center p-2 md:order-none;\n}\n\n.items-list {\n  @apply flex flex-col md:flex-row md:items-center md:justify-start;\n}\n\n.nav-item {\n  @apply mx-2 w-full rounded p-1 transition-all hover:scale-105 hover:shadow hover:backdrop-brightness-125 lg:mx-8 lg:w-auto;\n}\n\n.nav-link {\n  @apply flex items-center justify-start p-1 text-center;\n}\n\n.text-input {\n  @apply rounded-l border px-2 py-0.5 text-slate-800;\n}\n\n.avatar {\n  width: 2rem;\n  height: 2rem;\n  color: whitesmoke;\n}\n\n.icon {\n  width: 1.5rem;\n  height: 1.5rem;\n  color: whitesmoke;\n}\n\n.tailzup-logo {\n  width: 4rem;\n  height: 4rem;\n}\n\n.glow {\n  animation: glow 0.8s alternate infinite;\n}\n\n@keyframes glow {\n  0% {\n    filter: drop-shadow(0 0 1px #fff) drop-shadow(0 0 2px #fff) drop-shadow(\n        0 0 3px #ff80b3\n      ) drop-shadow(0 0 4px #ff4d94) drop-shadow(0 0 5px #ff0066);\n  }\n  29% {\n    filter: drop-shadow(0 0 2px #fff) drop-shadow(0 0 4px #fff) drop-shadow(\n        0 0 6px #ff80b3\n      ) drop-shadow(0 0 8px #ff4d94) drop-shadow(0 0 10px #ff0066);\n  }\n\n  92% {\n    filter: drop-shadow(0 0 3px #fff) drop-shadow(0 0 6px #fff) drop-shadow(\n        0 0 9px #ff80b3\n      ) drop-shadow(0 0 12px #ff4d94) drop-shadow(0 0 15px #ff0066);\n  }\n}\n"))),(0,t.yg)("p",null,"The navbar now looks like this:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-18-heroicons/navbar-initial2.gif",alt:"tailwind flex"})),(0,t.yg)("br",null),(0,t.yg)("h3",{id:"adding-and-styling-heroicons-with-tailwindcss"},"Adding and Styling Heroicons with TailwindCSS"),(0,t.yg)("p",null,"We'll replace the existing icons with Heroicons components. So, let's import and replace:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title= "src/components/navbar/Navbar.tsx"',title:"",'"src/components/navbar/Navbar.tsx"':!0},'import React, { useState } from "react";\nimport TailzupLogo from "../icons/TailzupLogo";\n//highlight-next-line\nimport {\n  Bars4Icon,\n  MagnifyingGlassIcon,\n  UserIcon,\n} from "@heroicons/react/24/outline";\n\nconst Navbar = () => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const menuHidden = !isMobileMenuOpen ? "hidden md:block" : "";\n  return (\n    <nav className="navbar">\n      <div className="brand-wrapper">\n        <a className="brand" href="/">\n          <TailzupLogo color="orange" />\n        </a>\n      </div>\n      <div\n        className={`${menuHidden} border-t border-slate-500 text-amber-50 transition-all duration-1000 ease-in-out md:border-none`}\n      >\n        <div id="items" className="items-strip">\n          <div id="left" className="items-left">\n            <input\n              className="text-input"\n              type="email"\n              placeholder="Find donald trump or something..."\n            />\n            {/*highlight-next-line*/}\n            <MagnifyingGlassIcon className="mx-1 h-6 w-6 stroke-orange-400" />\n          </div>\n          <div id="right">\n            <ul className="items-list">\n              <li className="nav-item md:order-last">\n                <a href="/">\n                  {/*highlight-next-line*/}\n                  <UserIcon\n                    className="glow h-8 w-8"\n                    stroke="pink"\n                    strokeWidth={1.2}\n                  />\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Home\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Friends\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  Messages\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div\n        className={`absolute right-4 top-3 rounded border border-orange-400 p-1 text-slate-500 hover:bg-orange-200 hover:text-slate-300 md:hidden`}\n        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n      >\n        <a href="/">\n          {/*highlight-next-line*/}\n          <Bars4Icon className="h-6 w-6 stroke-orange-400" />\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n')),(0,t.yg)("p",null,"With the Heroicon Reract components, everything should remain unchanged."),(0,t.yg)("p",null,"Notice that we are passing CSS classes with the ",(0,t.yg)("inlineCode",{parentName:"p"},"className")," prop to the following Heroicons components: ",(0,t.yg)("inlineCode",{parentName:"p"},"<MagnifyingGlassIcon />"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"<UserIcon />")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"<Bars4Icon />"),". The classes then get relayed to the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," element produced by the Heroicon. Effortlessly."),(0,t.yg)("p",null,"As discussed below, we are using three types of CSS classes."),(0,t.yg)("h3",{id:"using-regular-tailwindcss-utilities-with-heroicons"},"Using Regular TailwindCSS Utilities with Heroicons"),(0,t.yg)("p",null,"We can use regular Tailwind CSS utilities like ",(0,t.yg)("inlineCode",{parentName:"p"},"h-6 w-6"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<MagnifyingGlassIcon className="mx-1 h-6 w-6 stroke-orange-400" />\n')),(0,t.yg)("p",null,"In this case, we are using spacing utilities for height, width and margin."),(0,t.yg)("h3",{id:"using-svg-related-tailwindcss-utilities-with-heroicons"},"Using ",(0,t.yg)("inlineCode",{parentName:"h3"},"SVG")," Related TailwindCSS Utilities with Heroicons"),(0,t.yg)("p",null,"We have also used a ",(0,t.yg)("inlineCode",{parentName:"p"},"SVG")," related TailwindCSS class in the ",(0,t.yg)("inlineCode",{parentName:"p"},"<MagnifyingGlassIcon />")," component - ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke-orange-400")," to set the stroke of the icon."),(0,t.yg)("p",null,"Another example is this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<Bars4Icon className="h-6 w-6 stroke-orange-400" />\n')),(0,t.yg)("p",null,"Internally, ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke-{color}-{saturation}")," value is relayed to the ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke")," property of the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>"),' element with `stroke= "currentColor```.'),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<svg fill="none" stroke="currentColor"></svg>\n')),(0,t.yg)("h3",{id:"using-non-tailwindcss-classes-with-heroicons"},"Using non-TailwindCSS Classes with Heroicons"),(0,t.yg)("p",null,"We can use non-Tailwind classes as well:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<UserIcon className="glow h-8 w-8" stroke="pink" strokeWidth={1.2} />\n')),(0,t.yg)("p",null,"For the ",(0,t.yg)("inlineCode",{parentName:"p"},"<UserIcon />"),", we are applying a ",(0,t.yg)("inlineCode",{parentName:"p"},"glow")," class that animates the icon with a glow ",(0,t.yg)("inlineCode",{parentName:"p"},"filter"),". It's completely custom CSS and looks like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-css"},".glow {\n  animation: glow 0.8s alternate infinite;\n}\n\n@keyframes glow {\n  0% {\n    filter: drop-shadow(0 0 1px #fff) drop-shadow(0 0 2px #fff) drop-shadow(\n        0 0 3px #ff80b3\n      ) drop-shadow(0 0 4px #ff4d94) drop-shadow(0 0 5px #ff0066);\n  }\n  29% {\n    filter: drop-shadow(0 0 2px #fff) drop-shadow(0 0 4px #fff) drop-shadow(\n        0 0 6px #ff80b3\n      ) drop-shadow(0 0 8px #ff4d94) drop-shadow(0 0 10px #ff0066);\n  }\n\n  92% {\n    filter: drop-shadow(0 0 3px #fff) drop-shadow(0 0 6px #fff) drop-shadow(\n        0 0 9px #ff80b3\n      ) drop-shadow(0 0 12px #ff4d94) drop-shadow(0 0 15px #ff0066);\n  }\n}\n")),(0,t.yg)("p",null,"With the above changes Heroicons and their styles, the navbar looks like this:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-18-heroicons/navbar-heroicons2.gif",alt:"tailwind flex"})),(0,t.yg)("br",null),(0,t.yg)("h3",{id:"applying-native-svg-properties-to-heroicons"},"Applying Native ",(0,t.yg)("inlineCode",{parentName:"h3"},"<svg>")," Properties to Heroicons"),(0,t.yg)("p",null,"Notice also that we are applying ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"strokeWidth")," to ",(0,t.yg)("inlineCode",{parentName:"p"},"<UserIcon />"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<UserIcon className="glow h-8 w-8" stroke="pink" strokeWidth={1.2} />\n')),(0,t.yg)("p",null,"Native ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," properties passed to Heroicons also get relayed to the ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>")," element inside."),(0,t.yg)("h3",{id:"applying-responsive-tailwindcss-utils-to-heroicons"},"Applying Responsive TailwindCSS Utils to Heroicons"),(0,t.yg)("p",null,"Okay. Now, we'll consider the case for responsive use of Heroicons. We want each nav item to have its own icon left of its text. Like this:"),(0,t.yg)("div",{className:"centered-image"},(0,t.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-18-heroicons/icon-items.gif",alt:"tailwind flex"})),(0,t.yg)("br",null),(0,t.yg)("p",null,"So, we'll go ahead and add the icons for each nav item:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Show Navbar.tsx"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/navbar/Navbar.tsx"',title:'"src/components/navbar/Navbar.tsx"'},'import React, { useState } from "react";\nimport TailzupLogo from "../icons/TailzupLogo";\nimport {\n  Bars4Icon,\n  ChatBubbleLeftRightIcon,\n  HomeIcon,\n  MagnifyingGlassIcon,\n  UserGroupIcon,\n  UserIcon,\n} from "@heroicons/react/24/outline";\n\nconst Navbar = () => {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const menuHidden = !isMobileMenuOpen ? "hidden md:block" : "";\n  return (\n    <nav className="navbar">\n      <div className="brand-wrapper">\n        <a className="brand" href="/">\n          <TailzupLogo color="orange" />\n        </a>\n      </div>\n      <div\n        className={`${menuHidden} border-t border-slate-500 text-amber-50 transition-all duration-1000 ease-in-out md:border-none`}\n      >\n        <div id="items" className="items-strip">\n          <div id="left" className="items-left">\n            <input\n              className="text-input"\n              type="email"\n              placeholder="Find Donald  or something..."\n            />\n            <MagnifyingGlassIcon className="mx-1 h-6 w-6 stroke-orange-400" />\n          </div>\n          <div id="right">\n            <ul className="items-list">\n              <li className="nav-item md:order-last">\n                <a href="/">\n                  <UserIcon\n                    className="glow h-8 w-8"\n                    stroke="pink"\n                    strokeWidth={1.2}\n                  />\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  {/*highlight-next-line*/}\n                  <HomeIcon className="h-6 w-6 md:hidden lg:block" />\n                  <span className="mx-2">Home</span>\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  {/*highlight-next-line*/}\n                  <UserGroupIcon className="h-6 w-6 md:hidden lg:block" />\n                  <span className="mx-2">Friends</span>\n                </a>\n              </li>\n              <li className="nav-item">\n                <a className="nav-link" href="/">\n                  {/*highlight-next-line*/}\n                  <ChatBubbleLeftRightIcon className="h-6 w-6 md:hidden lg:block" />\n                  <span className="mx-2">Messages</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div\n        className={`absolute right-4 top-3 rounded border border-orange-400 p-1 text-slate-500 hover:bg-orange-200 hover:text-slate-300 md:hidden`}\n        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n      >\n        <a href="/">\n          <Bars4Icon className="h-6 w-6 stroke-orange-400" />\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n'))),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"md:hidden lg:block")," we are changing the visibility of the icon using responsive classes for each nav item. At ",(0,t.yg)("inlineCode",{parentName:"p"},"md"),", we want the icon to be hidden and show up back at ",(0,t.yg)("inlineCode",{parentName:"p"},"lg"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<UserGroupIcon className="h-6 w-6 md:hidden lg:block" />\n')),(0,t.yg)("h2",{id:"customizing-heroicons"},"Customizing Heroicons"),(0,t.yg)("p",null,"Customizing Heroicons to your application's design and branding is possible, and here are a few advanced ways of enhancing them:"),(0,t.yg)("h3",{id:"advanced-svg-manipulations"},"Advanced SVG Manipulations"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Path Adjustments"),": Direct editing of SVG path data to create custom shapes or adjust a default one. It's done by editing the ",(0,t.yg)("inlineCode",{parentName:"li"},"d")," attribute within the ",(0,t.yg)("inlineCode",{parentName:"li"},"<path>")," tag of an SVG that describes the outline for the icon.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nconst CustomIcon = () => (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0 0 24 24"\n    fill="none"\n    stroke="currentColor"\n    className="h-6 w-6"\n  >\n    <path\n      d="M12 2a10 10 0 110 20 10 10 0 010-20zm1 14h-2v-2h2v2zm0-4h-2V7h2v5z"\n      strokeLinecap="round"\n      strokeLinejoin="round"\n      strokeWidth={2}\n    />\n  </svg>\n);\n\nexport default CustomIcon;\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Transformations"),": By applying a few transformations such as scaling, rotation, or skewing, you can change some elements in an SVG. For this purpose, the ",(0,t.yg)("inlineCode",{parentName:"li"},"transform")," attribute is used. To rotate an icon, for example, the ",(0,t.yg)("inlineCode",{parentName:"li"},"<svg>")," element could have ",(0,t.yg)("inlineCode",{parentName:"li"},'transform="rotate(45)"'),". This would rotate the icon by 45\xb0.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { ArrowPathIcon } from "@heroicons/react/24/outline";\n\nconst RotatedIcon = () => (\n  <ArrowPathIcon className="h-8 w-8" transform="rotate(45)" stroke="blue" />\n);\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Animations"),": You can animate your Heroicons using CSS or JavaScript. For example, you can create an animation with a ",(0,t.yg)("inlineCode",{parentName:"li"},"stroke-width")," or continuous rotation by applying CSS properties to ",(0,t.yg)("inlineCode",{parentName:"li"},"@keyframes"),".")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { ArrowRightIcon } from "@heroicons/react/24/outline";\n\nconst AnimatedIcon = () => (\n  <ArrowRightIcon className="h-8 w-8 animate-bounce text-red-500" />\n);\n')),(0,t.yg)("h3",{id:"theming-icons"},"Theming Icons"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Dynamic Styling with TailwindCSS"),": You're able to do dynamic classes with TailwindCSS, which means you toggle classes depending on some user actions or the state of your app. For example, you can change the color of an icon when it is hovered over, or if some condition is true, by using conditional class names.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { StarIcon } from "@heroicons/react/24/solid";\n\nconst ThemedIcon = ({ isActive }) => (\n  <StarIcon\n    className={`h-6 w-6 ${isActive ? "text-yellow-500" : "text-gray-300"}`}\n  />\n);\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Dark Mode"),": Implement dark mode support. This can easily be done in TailwindCSS with the ",(0,t.yg)("inlineCode",{parentName:"li"},"dark:")," modifier. You can, for instance, define fill colors as ",(0,t.yg)("inlineCode",{parentName:"li"},"fill-current text-gray-900 dark:text-gray-100")," for both light and dark modes.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { MoonIcon } from "@heroicons/react/24/outline";\n\nconst DarkModeIcon = () => (\n  <MoonIcon className="h-6 w-6 text-gray-900 dark:text-gray-100" />\n);\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Custom Themes"),": TailwindCSS can also be extended by adding custom themes that allow imposing specific styles onto the Heroicons. This is done by defining new color schemes, stroke widths, and various other properties inside a Tailwind configuration file, then applying those new properties to the Heroicon.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'// tailwind.config.js\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        customBlue: "#1fb6ff",\n      },\n    },\n  },\n};\n')),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'import { CogIcon } from "@heroicons/react/24/solid";\n\nconst CustomThemedIcon = () => <CogIcon className="text-customBlue h-6 w-6" />;\n')),(0,t.yg)("p",null,"This way, you will be able to design unique branded icons that are fully integrated into the design language of your application, thus boosting the general user experience."),(0,t.yg)("h2",{id:"optimizing-icon-performance"},"Optimizing Icon Performance"),(0,t.yg)("p",null,"The point of icon performance optimization, especially in web applications, is to improve user experience and speed up the time taken to load. Here are a few ways to go about that with some practical examples:"),(0,t.yg)("h3",{id:"use-svg-icons-over-icon-fonts"},"Use SVG Icons Over Icon Fonts"),(0,t.yg)("p",null,"SVG icons are typically more performant compared to icon fonts because they don't carry the overhead of loading an entire set of fonts when you need just a few icons. Additionally, SVGs are much more scalable and customizable."),(0,t.yg)("p",null,"Avoid using FontAwesome, and instead use SVGs directly or libraries like Heroicons."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-jsx"},'import { StarIcon } from "@heroicons/react/24/solid";\n\nconst ExampleIcon = () => <StarIcon className="h-6 w-6 text-yellow-500" />;\n')),(0,t.yg)("p",null,"Here, ",(0,t.yg)("inlineCode",{parentName:"p"},"StarIcon")," is used as an SVG so that only the necessary icon is loaded, minimizing load times and improving performance."),(0,t.yg)("h3",{id:"optimize-svg-files"},"Optimize SVG Files"),(0,t.yg)("p",null,"Reducing file size means optimizing SVG files: removing unnecessary metadata, lowering the precision of paths, and simplifying shapes."),(0,t.yg)("p",null,"Use tools like ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/svg/svgo"},"SVGO")," to optimize SVG files beforehand."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"npx svgo input.svg -o output.svg\n")),(0,t.yg)("p",null,"This command reduces the size of the ",(0,t.yg)("inlineCode",{parentName:"p"},"input.svg")," file by optimizing it and removing unnecessary elements."),(0,t.yg)("h3",{id:"lazy-load-icons"},"Lazy Load Icons"),(0,t.yg)("p",null,"In an application that uses a large number of icons, lazy loading ensures that only the necessary icons are loaded when needed rather than all at once, improving performance."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { Suspense, lazy } from "react";\n\nconst StarIcon = lazy(() => import("@heroicons/react/24/solid/StarIcon"));\n\nconst LazyLoadedIcon = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <StarIcon className="h-6 w-6 text-yellow-500" />\n  </Suspense>\n);\n')),(0,t.yg)("p",null,"This approach defers loading the ",(0,t.yg)("inlineCode",{parentName:"p"},"StarIcon")," until it\u2019s actually needed, reducing the initial load time."),(0,t.yg)("h3",{id:"minimize-the-use-of-multiple-icon-sets"},"Minimize the Use of Multiple Icon Sets"),(0,t.yg)("p",null,"Loading multiple icon libraries together can significantly increase your JavaScript bundle size. Stick to a single icon set whenever possible, or simply use the ones you really need."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-jsx"},'import { HomeIcon, UserIcon } from "@heroicons/react/24/outline";\n\nconst Navbar = () => (\n  <nav>\n    <HomeIcon className="h-6 w-6 text-blue-500" />\n    <UserIcon className="h-6 w-6 text-green-500" />\n  </nav>\n);\n')),(0,t.yg)("p",null,"This approach avoids unnecessary imports, keeping the bundle size minimal."),(0,t.yg)("h4",{id:"leverage-a-cdn"},"Leverage a CDN"),(0,t.yg)("p",null,"If you are using popular icon sets like Heroicons or FontAwesome, consider loading your icons with a CDN. This can cache the contents effectively and reduce the load on your server."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-html"},'<link\n  rel="stylesheet"\n  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"\n/>\n')),(0,t.yg)("p",null,"This method serves icons from a globally distributed CDN, reducing latency and improving load times."),(0,t.yg)("h4",{id:"sprite-sheets-for-multiple-icons"},"Sprite Sheets for Multiple Icons"),(0,t.yg)("p",null,"When dealing with projects that require lots of icons, combining them all into a single SVG sprite sheet is recommended. This approach saves multiple HTTP requests, which ultimately decreases page load times."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},'<svg class="hidden">\n  <symbol id="icon-home" viewBox="0 0 24 24">\n\x3c!-- SVG Path --\x3e\n  </symbol>\n  <symbol id="icon-user" viewBox="0 0 24 24">\n\x3c!-- SVG Path --\x3e\n  </symbol>\n </svg>\n\n <svg class="icon">\n  <use xlink:href="#icon-home"></use>\n </svg>\n <svg class="icon">\n  <use xlink:href="#icon-user"></use>\n </svg>\n')),(0,t.yg)("p",null,"This technique allows multiple icons to be loaded in a single HTTP request, reducing overall load time."),(0,t.yg)("h2",{id:"summary"},"Summary"),(0,t.yg)("p",null,"In this post, we quickly picked how to use Heroicons with TailwindCSS and non-Tailwind classes. We found that Heroicons produce an ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg")," element which receives styles from the JSX component via ",(0,t.yg)("inlineCode",{parentName:"p"},"className"),", and other native properties like ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"fill"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"height"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"width"),", etc. We saw that, in order to style a Heroicon ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>"),", we can pass related TailwindCSS classes like ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke-{color}-{saturation}")," and non Tailwind classes to ",(0,t.yg)("inlineCode",{parentName:"p"},"className")," prop of the Heroicon component. We can also pass properties like ",(0,t.yg)("inlineCode",{parentName:"p"},"stroke"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"fill"),", etc., to a Heroicon to style its ",(0,t.yg)("inlineCode",{parentName:"p"},"<svg>"),". As usual, Heroicons can also be manipulated using responsive classes."))}h.isMDXComponent=!0}}]);