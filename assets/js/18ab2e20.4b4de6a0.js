"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[79516],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>c});var a=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),g=r,c=u["".concat(l,".").concat(g)]||u[g]||m[g]||i;return t?a.createElement(c,o(o({ref:n},d),{},{components:t})):a.createElement(c,o({ref:n},d))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},89208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>u});t(37953);var a=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={title:"Creating an Admin Dashboard with Refine",description:"We'll be building a admin backend app for the Pixels client app.",slug:"refine-pixels-5",authors:"abdullah_numan",tags:["refine-week","refine","supabase"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-18-refine-pixels-5%2Fsocial.png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/refine-pixels-5",source:"@site/blog/2023-02-18-refine-pixels-5.md",title:"Creating an Admin Dashboard with Refine",description:"We'll be building a admin backend app for the Pixels client app.",date:"2023-02-18T00:00:00.000Z",formattedDate:"February 18, 2023",tags:[{label:"refine-week",permalink:"/blog/tags/refine-week"},{label:"refine",permalink:"/blog/tags/refine"},{label:"supabase",permalink:"/blog/tags/supabase"}],readingTime:18.84,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Creating an Admin Dashboard with Refine",description:"We'll be building a admin backend app for the Pixels client app.",slug:"refine-pixels-5",authors:"abdullah_numan",tags:["refine-week","refine","supabase"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-18-refine-pixels-5%2Fsocial.png",hide_table_of_contents:!1},prevItem:{title:"Implementing Role Based Access Control",permalink:"/blog/refine-pixels-6"},nextItem:{title:"Adding Realtime Collaboration",permalink:"/blog/refine-pixels-4"},relatedPosts:[{title:"Low Code Limitations - Exploring the Risk of Vendor Lock-In",description:"We discuss the limitations and risks associated with low-code platforms and how to avoid getting stuck with one vendor.",permalink:"/blog/low-code-tools",formattedDate:"April 19, 2024",authors:[{name:"Necati \xd6zmen",title:"Head of Growth at Refine",url:"https://github.com/necatiozmen",description:"Feeling Irie",github:"https://github.com/necatiozmen",twitter:"https://twitter.com/necatiozmen3",linkedin:"https://www.linkedin.com/in/necatiozmen/",imageURL:"https://github.com/necatiozmen.png",key:"necati"}],readingTime:7.255,date:"2024-04-19T00:00:00.000Z"},{title:"refine vs RedwoodJS",description:"We will compare two open source React frameworks, that can be used to build CRUD applications",permalink:"/blog/refine-vs-redwood-js",formattedDate:"January 23, 2023",authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],readingTime:26.61,date:"2023-01-23T00:00:00.000Z"},{title:"Adding Realtime Collaboration",description:"We'll implement realtime broadcast and subscription of pixels updates in Pixels app.",permalink:"/blog/refine-pixels-4",formattedDate:"February 17, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:10.17,date:"2023-02-17T00:00:00.000Z"}],authorPosts:[{title:"Error Handling With try, catch and finally Blocks in JavaScript",description:"We'll see how to handle errors in JavaScript using the try/catch/finally blocks.",permalink:"/blog/javascript-try-catch-finally",formattedDate:"October 30, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:15.29,date:"2024-10-30T00:00:00.000Z"},{title:"Essentials of TypeScript Classes",description:"TypeScript classes are a superset of JavaScript classes. This post covers the fundamentals of type annotations in TypeScript Classes and their associated quirks.",permalink:"/blog/typescript-classes",formattedDate:"January 13, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:22.96,date:"2025-01-13T00:00:00.000Z"},{title:"How to Use Two Dimensional Layouts with CSS Grid?",description:"We'll explore how to create two dimensional layouts using CSS Grid.",permalink:"/blog/css-grid",formattedDate:"July 17, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:41.51,date:"2024-07-17T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},u=[{value:"RefineWeek series",id:"refineweek-series",level:3},{value:"Overview",id:"overview",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Setting Up Supabase Config",id:"setting-up-supabase-config",level:2},{value:"Adding required files",id:"adding-required-files",level:2},{value:"Creating a Table View With Refine and Ant Design",id:"creating-a-table-view-with-refine-and-ant-design",level:2},{value:"Refine Ant Design <code>useTable()</code> Hook",id:"refine-ant-design-usetable-hook",level:3},{value:"Refine Ant Design <code>&lt;List /&gt;</code> Component",id:"refine-ant-design-list--component",level:3},{value:"Refine Ant Design <code>&lt;Table /&gt;</code> Component",id:"refine-ant-design-table--component",level:3},{value:"Refine Ant Design <code>&lt;Table.Column /&gt;</code> Children",id:"refine-ant-design-tablecolumn--children",level:3},{value:"Adding <code>resources</code>",id:"adding-resources",level:2},{value:"Adding routes",id:"adding-routes",level:2},{value:"<code>&lt;AuthPage /&gt;</code> Customization",id:"authpage--customization",level:2},{value:"Editable Table Using Refine and Ant Design",id:"editable-table-using-refine-and-ant-design",level:2},{value:"Refine Ant Design <code>useEditableTable()</code> Hook",id:"refine-ant-design-useeditabletable-hook",level:3},{value:"Refine Ant Design <code>&lt;DeleteButton /&gt;</code>",id:"refine-ant-design-deletebutton-",level:3},{value:"<code>&lt;Table.Column /&gt;</code>&#39;s <code>render</code> Prop",id:"tablecolumn-s-render-prop",level:3},{value:"Adding <code>&lt;CanvasList&gt;</code> to the <code>resources</code>",id:"adding-canvaslist-to-the-resources",level:2},{value:"Summary",id:"summary",level:2}],m={toc:u},g="wrapper";function c(e){var{components:n}=e,t=o(e,["components"]);return(0,a.yg)(g,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},m,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This post is the first part of an admin dashboard app built using ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},(0,a.yg)("strong",{parentName:"a"},"Refine")),". The dashboard is an admin backend for the ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," client that we built previously in the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/week-of-refine/"},(0,a.yg)("strong",{parentName:"a"},"RefineWeek"))," series. We are using the same ",(0,a.yg)("a",{parentName:"p",href:"https://supabase.com/"},(0,a.yg)("strong",{parentName:"a"},"Supabase"))," database for this app and have ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/"},(0,a.yg)("strong",{parentName:"a"},"Ant Design"))," as the UI framework."),(0,a.yg)("p",null,"This is Day 5, and ",(0,a.yg)("strong",{parentName:"p"},"RefineWeek")," is a seven-part tutorial series that aims to help developers learn the ins-and-outs of ",(0,a.yg)("strong",{parentName:"p"},"Refine"),"'s powerful capabilities within a week."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"You can find the complete source code for the ",(0,a.yg)("strong",{parentName:"li"},"Pixels Admin")," app on ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin"},"GitHub")),(0,a.yg)("li",{parentName:"ul"},"Also ",(0,a.yg)("strong",{parentName:"li"},"Pixel Client")," app source code from previous days can be found ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels"},"here"))),(0,a.yg)("h3",{id:"refineweek-series"},"RefineWeek series"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Day 1 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-1/"},"Pilot & Refine architecture")),(0,a.yg)("li",{parentName:"ul"},"Day 2 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-2/"},"Setting Up the Client App")),(0,a.yg)("li",{parentName:"ul"},"Day 3 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-3/"},"Adding CRUD Actions and Authentication")),(0,a.yg)("li",{parentName:"ul"},"Day 4 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-4/"},"Adding Realtime Collaboration")),(0,a.yg)("li",{parentName:"ul"},"Day 5 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-5/"},"Creating an Admin Dashboard with Refine")),(0,a.yg)("li",{parentName:"ul"},"Day 6 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-6/"},"Implementing Role Based Access Control")),(0,a.yg)("li",{parentName:"ul"},"Day 7 - ",(0,a.yg)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-7/"},"Audit Log With Refine"))),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"In this episode, we implement user authentication and CRUD functionalities of the dashboard. As it was in the case of the ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," client app, for this app also, we implement an email-based authentication along with social logins with Google and GitHub."),(0,a.yg)("p",null,"We use the same ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," client for connecting to the database we already have in place for the ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," app."),(0,a.yg)("p",null,"The dashboard shows a list of all users. It also has a list for canvases."),(0,a.yg)("p",null,"The user list is read only and the canvas list will eventually allow editors and admins - particular to their roles - to manipulate their subject data. We will implement proper authorization for editor and admin roles on Day 6, but for now we will implement relevant CRUD operations that will apply to any authenticated user."),(0,a.yg)("p",null,"For the API requests, we will be using the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," object ",(0,a.yg)("strong",{parentName:"p"},"Refine")," gave us for ",(0,a.yg)("strong",{parentName:"p"},"Supabase"),". Since we covered CRUD related concepts and architecture in depth on ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-3/"},"Day 3"),", in this post, we'll focus more on the ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," components side."),(0,a.yg)("p",null,"Let's begin with the project set up."),(0,a.yg)("h2",{id:"project-setup"},"Project Setup"),(0,a.yg)("p",null,"As done previously in the client app, let's initialize our admin app with ",(0,a.yg)("inlineCode",{parentName:"p"},"create refine-app"),". We will choose the interactive option by answering necessary questions. Let's run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm create refine-app@latest pixels-admin\n")),(0,a.yg)("p",null,"We will use ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," for our backend, and ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," for our UI. We want to be able to customize the ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," theme and layout. So, we have the below answers related to ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," and ",(0,a.yg)("strong",{parentName:"p"},"Ant Design"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"\u2714 Choose a project template \xb7 Refine(Vite)\n\u2714 What would you like to name your project?: \xb7 pixels-admin\n\u2714 Choose your backend service to connect: \xb7 Supabase\n\u2714 Do you want to use a UI Framework?: \xb7 Ant Design\n\u2714 Do you want to add example pages?: \xb7 no\n\u2714 Do you need i18n (Internationalization) support?: \xb7 no\n\u2714 Choose a package manager: \xb7 npm\n")),(0,a.yg)("p",null,"After completion of the initialization process, we should have the same ",(0,a.yg)("strong",{parentName:"p"},"Refine"),", ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," and ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," boilerplate code generated for us like before."),(0,a.yg)("p",null,"We'll start tweaking the relevant code straight away as we add features to our app - since we have already explored the boilerplate code in significant depth on Day 2 in ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-2/"},"Setting Up the Client App")," and on Day 3 in ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-3/"},"Adding CRUD Actions and Authentication"),". This will give us more time to focus on related ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," components and what they handle for us in the background."),(0,a.yg)("p",null,"Prior to that, let's just navigate to the project folder and run the dev server:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,a.yg)("p",null,"And prepare ourselves to the call-to-action at ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:5173"),":"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-18-refine-pixels-5/welcome.jpg",alt:"react supabase CRUD App"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file should be familiar from ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-2/"},"Day 2"),". It looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { GitHubBanner, Refine, WelcomePage } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport { useNotificationProvider } from "@refinedev/antd";\nimport "@refinedev/antd/dist/reset.css";\n\nimport routerProvider, {\n  DocumentTitleHandler,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport { dataProvider, liveProvider } from "@refinedev/supabase";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\nimport authProvider from "./authProvider";\nimport { ColorModeContextProvider } from "./contexts/color-mode";\nimport { supabaseClient } from "./utility";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <RefineKbarProvider>\n        <ColorModeContextProvider>\n          <Refine\n            dataProvider={dataProvider(supabaseClient)}\n            liveProvider={liveProvider(supabaseClient)}\n            authProvider={authProvider}\n            routerProvider={routerProvider}\n            notificationProvider={useNotificationProvider}\n            options={{\n              syncWithLocation: true,\n              warnWhenUnsavedChanges: true,\n            }}\n          >\n            <Routes>\n              <Route index element={<WelcomePage />} />\n            </Routes>\n            <RefineKbar />\n            <UnsavedChangesNotifier />\n            <DocumentTitleHandler />\n          </Refine>\n        </ColorModeContextProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"Let's start modifying the existing code to meet our requirements."),(0,a.yg)("h2",{id:"setting-up-supabase-config"},"Setting Up Supabase Config"),(0,a.yg)("p",null,"For the admin app, we'll connect to the same PostgreSQL database already up and running on ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," for the ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," client app."),(0,a.yg)("p",null,"So, we need to get the access credentials for our server from the ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," dashboard. We can avail them by following ",(0,a.yg)("a",{parentName:"p",href:"https://supabase.com/docs/guides/with-react#get-the-api-keys"},"this section in the ",(0,a.yg)("strong",{parentName:"a"},"Supabase")," quickstart guide"),". Let's store them in an ",(0,a.yg)("inlineCode",{parentName:"p"},".env")," file."),(0,a.yg)("p",null,"We'll go ahead and update the ",(0,a.yg)("inlineCode",{parentName:"p"},"supabaseClient.ts")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/supabaseClient.ts"',title:'"src/utility/supabaseClient.ts"'},'import { createClient } from "@refinedev/supabase";\n\nconst SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL ?? "";\nconst SUPABASE_KEY = import.meta.env.VITE_SUPABASE_KEY ?? "";\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\n')),(0,a.yg)("p",null,"Now we have enabled ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," methods to connect to our ",(0,a.yg)("strong",{parentName:"p"},"Supabase")," database with ",(0,a.yg)("inlineCode",{parentName:"p"},"supabaseClient()"),"."),(0,a.yg)("h2",{id:"adding-required-files"},"Adding required files"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin"},"Here is the finalized version of what we\u2019ll be building in this article:")),(0,a.yg)("p",null,"Before we move on, you need to add required page and components to the project if you want build the app by following the article . Please add the following components and files into src folder in the project:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"pages: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/pages"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/pages")),(0,a.yg)("li",{parentName:"ul"},"components: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/components"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/components")),(0,a.yg)("li",{parentName:"ul"},"providers: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/providers"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/providers")),(0,a.yg)("li",{parentName:"ul"},"utility: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/utility"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/utility")),(0,a.yg)("li",{parentName:"ul"},"casbin: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/casbin"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/casbin")),(0,a.yg)("li",{parentName:"ul"},"types: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/types"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/src/types")),(0,a.yg)("li",{parentName:"ul"},"assets: ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/public"},"https://github.com/refinedev/refine/tree/main/examples/pixels-admin/public"))),(0,a.yg)("admonition",{title:"Important",type:"danger"},(0,a.yg)("p",{parentName:"admonition"},"In order to run the app without warnings you need to follow ",(0,a.yg)("a",{parentName:"p",href:"/blog/refine-pixels-6/#casbin-installation"},"Casbin RBAC system installation step(Browser Fallbacks for Casbin)."))),(0,a.yg)("p",null,"After creating files above you need to add some imports and ",(0,a.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"routes")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"src/App.tsx")," file. Simply add replace your App.tsx with following."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show App.tsx code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import {\n  Authenticated,\n  CanAccess,\n  GitHubBanner,\n  Refine,\n} from "@refinedev/core";\nimport {\n  ErrorComponent,\n  ThemedLayout,\n  useNotificationProvider,\n} from "@refinedev/antd";\nimport { ConfigProvider } from "antd";\nimport { dataProvider, liveProvider } from "@refinedev/supabase";\nimport routerProvider, {\n  NavigateToResource,\n  UnsavedChangesNotifier,\n  DocumentTitleHandler,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { Title } from "./components/layout";\nimport { supabaseClient } from "./utility";\nimport {\n  auditLogProvider,\n  authProvider,\n  accessControlProvider,\n} from "./providers";\nimport { CanvasList, UserList } from "./pages";\nimport { AuthPage } from "./pages/auth";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: "#3ecf8e",\n            colorText: "#80808a",\n            colorError: "#fa541c",\n            colorBgLayout: "#f0f2f5",\n            colorLink: "#3ecf8e",\n            colorLinkActive: "#3ecf8e",\n            colorLinkHover: "#3ecf8e",\n          },\n        }}\n      >\n        <Refine\n          auditLogProvider={auditLogProvider}\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          accessControlProvider={accessControlProvider}\n          routerProvider={routerProvider}\n          notificationProvider={useNotificationProvider}\n          resources={[\n            {\n              name: "users",\n              list: "/users",\n            },\n            {\n              name: "canvases",\n              list: "/canvases",\n            },\n          ]}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout Title={Title}>\n                    <CanAccess>\n                      <Outlet />\n                    </CanAccess>\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource />} />\n              <Route path="/users" element={<UserList />} />\n              <Route path="/canvases" element={<CanvasList />} />\n            </Route>\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="users" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={<AuthPage type="login" registerLink={false} />}\n              />\n              <Route\n                path="/forgot-password"\n                element={<AuthPage type="forgotPassword" />}\n              />\n              <Route\n                path="/update-password"\n                element={<AuthPage type="updatePassword" />}\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,a.yg)("inlineCode",{parentName:"a"},"<Refine />"))," comes with ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/theming#switching-to-dark-theme"},"dark mode support")," out-of-the-box. However, we will not be using it in this series. So, after copied ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," you will see that we have already replaced ",(0,a.yg)("inlineCode",{parentName:"p"},"ColorModeContextProvider")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"ConfigProvider"),"."),(0,a.yg)("p",{parentName:"admonition"},"Also, you can remove ",(0,a.yg)("inlineCode",{parentName:"p"},"src/context/color-mode")," that comes with ",(0,a.yg)("inlineCode",{parentName:"p"},"create refine-app"),".")),(0,a.yg)("h2",{id:"creating-a-table-view-with-refine-and-ant-design"},"Creating a Table View With Refine and Ant Design"),(0,a.yg)("p",null,"Our ",(0,a.yg)("inlineCode",{parentName:"p"},"<UserList />")," component looks like this:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show UserList code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/users/list.tsx"',title:'"pages/users/list.tsx"'},'import { useTable, List } from "@refinedev/antd";\nimport { Table, Avatar } from "antd";\nimport { UserOutlined } from "@ant-design/icons";\n\nimport { TUser } from "../../types/user";\n\nexport const UserList = () => {\n  const { tableProps } = useTable<TUser>();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey={"id"}>\n        <Table.Column\n          dataIndex="avatar_url"\n          title={\n            <h4 style={{ textAlign: "center", fontWeight: "bold" }}>Avatar</h4>\n          }\n          render={(_, record: TUser) => (\n            <Avatar\n              icon={<UserOutlined />}\n              src={record.avatar_url}\n              size={{ xs: 24, sm: 32, md: 40 }}\n            />\n          )}\n        />\n        <Table.Column\n          dataIndex="id"\n          title={\n            <h4 style={{ textAlign: "center", fontWeight: "bold" }}>ID</h4>\n          }\n          render={(_, record: TUser) => (\n            <p style={{ textAlign: "center" }}>{record?.id}</p>\n          )}\n        />\n        <Table.Column\n          dataIndex="email"\n          title={\n            <h4 style={{ textAlign: "center", fontWeight: "bold" }}>Email</h4>\n          }\n          render={() => <p style={{ textAlign: "center" }}>Not listed</p>}\n        />\n        <Table.Column\n          dataIndex="full_name"\n          title={\n            <h4 style={{ textAlign: "center", fontWeight: "bold" }}>\n              Full Name\n            </h4>\n          }\n          render={(_, record: TUser) =>\n            record.full_name ? (\n              <p\n                style={{\n                  textAlign: "center",\n                }}\n              >\n                {record.full_name}\n              </p>\n            ) : (\n              <p\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                --\n              </p>\n            )\n          }\n        />\n        <Table.Column\n          dataIndex="username"\n          title={\n            <h4 style={{ textAlign: "center", fontWeight: "bold" }}>\n              Username\n            </h4>\n          }\n          render={(_, record: TUser) =>\n            record.username ? (\n              <p\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                {record.username}\n              </p>\n            ) : (\n              <p\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                --\n              </p>\n            )\n          }\n        />\n      </Table>\n    </List>\n  );\n};\n')))),(0,a.yg)("p",null,"The components tree looks very plain, but there is plenty going on in there. Firstly, the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," hook that handles all the data fetching stuff with ",(0,a.yg)("strong",{parentName:"p"},"React Query")," in the background. The ",(0,a.yg)("inlineCode",{parentName:"p"},"<List />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />")," components also do intense secret service for us. We'll go over them one by one below."),(0,a.yg)("h3",{id:"refine-ant-design-usetable-hook"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"useTable()")," Hook"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/hooks/table/useTable/"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable()"))," is a ",(0,a.yg)("strong",{parentName:"p"},"Refine")," ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," hook served to us from the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package. As we can see above, it returns us a ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," object:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps } = useTable<TUser>();\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," is built on top of ",(0,a.yg)("strong",{parentName:"p"},"Refine")," core's ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/hooks/data/useMany/"},(0,a.yg)("inlineCode",{parentName:"a"},"useMany()"))," data hook. ",(0,a.yg)("inlineCode",{parentName:"p"},"useMany()"),", in turn, invokes the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/providers/data-provider/#getmany"},(0,a.yg)("inlineCode",{parentName:"a"},"getMany()"))," data provider method."),(0,a.yg)("p",null,"Here, we did not need to set any configuration for our API request and the returned response. The ",(0,a.yg)("inlineCode",{parentName:"p"},"resource.name")," was figured by ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable")," from the ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," prop that was passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />"),". It is possible to set options for ",(0,a.yg)("strong",{parentName:"p"},"sorting"),", ",(0,a.yg)("strong",{parentName:"p"},"filtering"),", ",(0,a.yg)("strong",{parentName:"p"},"pagination"),", etc. with an object passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()"),"."),(0,a.yg)("p",null,"For all the features that come with the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," hook, visit ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/hooks/table/useTable/"},"the API reference here"),"."),(0,a.yg)("p",null,"The properties of the ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," object produced are intended to be passed to a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />")," component, which we'll consider after ",(0,a.yg)("inlineCode",{parentName:"p"},"<List />"),"."),(0,a.yg)("h3",{id:"refine-ant-design-list--component"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"<List />")," Component"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/components/basic-views/list/"},(0,a.yg)("inlineCode",{parentName:"a"},"<List />"))," component represents a list view. It is a wrapper around the contents of the list. It accepts a number of relevant props and comes with their sensible defaults, such as for ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," name and ",(0,a.yg)("inlineCode",{parentName:"p"},"title")," of the page."),(0,a.yg)("p",null,"In our case, we don't have to pass in any prop because ",(0,a.yg)("strong",{parentName:"p"},"Refine")," figures the ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," name and ",(0,a.yg)("inlineCode",{parentName:"p"},"title")," from the ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," prop. In other words, the ",(0,a.yg)("inlineCode",{parentName:"p"},"<List />")," component above is conveniently equivalent to this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<List resource="users" title="Users">\n  // Content here...\n</List>\n')),(0,a.yg)("p",null,"For more on the usage of ",(0,a.yg)("inlineCode",{parentName:"p"},"<List />"),", look into ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/components/basic-views/list/"},"the details here"),"."),(0,a.yg)("h3",{id:"refine-ant-design-table--component"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"<Table />")," Component"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/hooks/table/useTable/"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable()"))," hook's ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," is specifically configured to match the props of ",(0,a.yg)("strong",{parentName:"p"},"Ant Design"),"'s native ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />")," component. ",(0,a.yg)("strong",{parentName:"p"},"Refine")," makes ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />")," available to us with the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," module."),(0,a.yg)("p",null,"Besides passing in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," object to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />"),", we are required to provide a unique ",(0,a.yg)("inlineCode",{parentName:"p"},"rowKey")," prop to identify each row in the table:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Table {...tableProps} rowKey="id">\n  // React nodes here...\n</Table>\n')),(0,a.yg)("p",null,"The records inside ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," are placed inside ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table.Column />"),"s of a row of the table - one record per row. If you're new to this, feel free to dive into the ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/components/table"},(0,a.yg)("strong",{parentName:"a"},"Ant Design")," docs for ",(0,a.yg)("inlineCode",{parentName:"a"},"<Table />")),"."),(0,a.yg)("h3",{id:"refine-ant-design-tablecolumn--children"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"<Table.Column />")," Children"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"<Table.Column />"),"s represent individual columns in the table. A column header is set by ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table.Column />"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"title")," prop. The value of a field in a record is set by the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataIndex")," prop. For example, for the following column, ",(0,a.yg)("inlineCode",{parentName:"p"},'dataIndex="email"')," tells our app to fill the ",(0,a.yg)("inlineCode",{parentName:"p"},"Email")," column of a row associated with a particular ",(0,a.yg)("inlineCode",{parentName:"p"},"record")," with the value of the record's ",(0,a.yg)("inlineCode",{parentName:"p"},"email")," property:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column dataIndex="email" title="Email" />\n')),(0,a.yg)("p",null,"We can also customize what content to render inside a table cell. We'll examine two such instances in the next section on ",(0,a.yg)("inlineCode",{parentName:"p"},"<CanvasList />")," view, which involves an editable table."),(0,a.yg)("h2",{id:"adding-resources"},"Adding ",(0,a.yg)("inlineCode",{parentName:"h2"},"resources")),(0,a.yg)("p",null,"We have covered adding CRUD operations on ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-3/"},"Day 3")," in significant depth. So, here we'll quickly add both ",(0,a.yg)("inlineCode",{parentName:"p"},"users")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"canvases")," resources to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'// ...\nimport { Refine } from "@refinedev/core";\nimport { UserList } from "pages";\n\nreturn (\n  <Refine\n    // ...\n    //highlight-start\n    resources={[\n      {\n        name: "users",\n        list: "/users",\n      },\n      {\n        name: "canvases",\n        list: "/canvases",\n      },\n    ]}\n    //highlight-end\n  />\n);\n')),(0,a.yg)("h2",{id:"adding-routes"},"Adding routes"),(0,a.yg)("p",null,"After adding resources we need to create routes for them. For the routes, we'll use the ",(0,a.yg)("inlineCode",{parentName:"p"},"<UserList/>")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<CanvasList/>")," components we created earlier."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/introduction"},"Refer to the CRUD Pages tutorial for more information. \u2192")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'// ...\n\nimport { Authenticated, CanAccess, Refine } from "@refinedev/core";\nimport { ErrorComponent, ThemedLayout } from "@refinedev/antd";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\n\nimport { CanvasList, UserList } from "./pages";\nimport { AuthPage } from "./pages/auth";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      {/* ... */}\n      <Refine\n        // ...\n        routerProvider={routerProvider}\n      >\n        <Routes>\n          <Route\n            element={\n              <Authenticated>\n                <ThemedLayout Title={Title}>\n                  <CanAccess>\n                    <Outlet />\n                  </CanAccess>\n                </ThemedLayout>\n              </Authenticated>\n            }\n          >\n            <Route index element={<NavigateToResource />} />\n            <Route path="/users" element={<UserList />} />\n            <Route path="/canvases" element={<CanvasList />} />\n          </Route>\n          <Route\n            element={\n              <Authenticated fallback={<Outlet />}>\n                <NavigateToResource resource="users" />\n              </Authenticated>\n            }\n          >\n            <Route\n              path="/login"\n              element={<AuthPage type="login" registerLink={false} />}\n            />\n            <Route\n              path="/forgot-password"\n              element={<AuthPage type="forgotPassword" />}\n            />\n            <Route\n              path="/update-password"\n              element={<AuthPage type="updatePassword" />}\n            />\n          </Route>\n\n          <Route\n            element={\n              <Authenticated>\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              </Authenticated>\n            }\n          >\n            <Route path="*" element={<ErrorComponent />} />\n          </Route>\n        </Routes>\n        {/* ... */}\n      </Refine>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("h2",{id:"authpage--customization"},(0,a.yg)("inlineCode",{parentName:"h2"},"<AuthPage />")," Customization"),(0,a.yg)("p",null,"At this point, it is helpful that we customize our ",(0,a.yg)("strong",{parentName:"p"},"Ant Design")," theme, the content of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<AuthPage />")," and implement GitHub authentication. We won't cover these here, as they are relatively straight forward and were covered on ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-3/"},"Day 3"),"."),(0,a.yg)("p",null,"Remember, we've already replaced ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tx")," code with the following:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show App.tsx code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import {\n  Authenticated,\n  CanAccess,\n  GitHubBanner,\n  Refine,\n} from "@refinedev/core";\nimport {\n  ErrorComponent,\n  ThemedLayout,\n  useNotificationProvider,\n} from "@refinedev/antd";\nimport { ConfigProvider } from "antd";\nimport { dataProvider, liveProvider } from "@refinedev/supabase";\nimport routerProvider, {\n  NavigateToResource,\n  UnsavedChangesNotifier,\n  DocumentTitleHandler,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { Title } from "./components/layout";\nimport { supabaseClient } from "./utility";\nimport {\n  auditLogProvider,\n  authProvider,\n  accessControlProvider,\n} from "./providers";\nimport { CanvasList, UserList } from "./pages";\nimport { AuthPage } from "./pages/auth";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <ConfigProvider\n        theme={{\n          token: {\n            colorPrimary: "#3ecf8e",\n            colorText: "#80808a",\n            colorError: "#fa541c",\n            colorBgLayout: "#f0f2f5",\n            colorLink: "#3ecf8e",\n            colorLinkActive: "#3ecf8e",\n            colorLinkHover: "#3ecf8e",\n          },\n        }}\n      >\n        <Refine\n          auditLogProvider={auditLogProvider}\n          dataProvider={dataProvider(supabaseClient)}\n          liveProvider={liveProvider(supabaseClient)}\n          authProvider={authProvider}\n          accessControlProvider={accessControlProvider}\n          routerProvider={routerProvider}\n          notificationProvider={useNotificationProvider}\n          resources={[\n            {\n              name: "users",\n              list: "/users",\n            },\n            {\n              name: "canvases",\n              list: "/canvases",\n            },\n          ]}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout Title={Title}>\n                    <CanAccess>\n                      <Outlet />\n                    </CanAccess>\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route index element={<NavigateToResource />} />\n              <Route path="/users" element={<UserList />} />\n              <Route path="/canvases" element={<CanvasList />} />\n            </Route>\n            <Route\n              element={\n                <Authenticated fallback={<Outlet />}>\n                  <NavigateToResource resource="users" />\n                </Authenticated>\n              }\n            >\n              <Route\n                path="/login"\n                element={<AuthPage type="login" registerLink={false} />}\n              />\n              <Route\n                path="/forgot-password"\n                element={<AuthPage type="forgotPassword" />}\n              />\n              <Route\n                path="/update-password"\n                element={<AuthPage type="updatePassword" />}\n              />\n            </Route>\n\n            <Route\n              element={\n                <Authenticated>\n                  <ThemedLayout>\n                    <Outlet />\n                  </ThemedLayout>\n                </Authenticated>\n              }\n            >\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')))),(0,a.yg)("p",null,"Since ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," prop is already passed in by default, after we added the above resources and granted we are connected to the Internet, we will be redirected to the login page:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-18-refine-pixels-5/login.jpg",alt:"react supabase CRUD App"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"From the ",(0,a.yg)("inlineCode",{parentName:"p"},"/login")," route, logging in should work perfectly with an account already created with the ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," client app. If we log in, we should be directed to ",(0,a.yg)("inlineCode",{parentName:"p"},"/users")," - the default root route of the admin app."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},'name: "users"')," property in our first resource is used to define the ",(0,a.yg)("inlineCode",{parentName:"p"},"/users")," route, and ",(0,a.yg)("inlineCode",{parentName:"p"},"list: UserList")," property specifies that ",(0,a.yg)("inlineCode",{parentName:"p"},"<UserList />")," component should be rendered at ",(0,a.yg)("inlineCode",{parentName:"p"},"/users"),"."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Since we are using our example Supabase backend, we will see the following users list."),(0,a.yg)("p",{parentName:"admonition"},"If you wish to use our example Supabase backend, you can do so by using the provided ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/main/examples/pixels-admin/src/utility/supabaseClient.ts"},"Supabase credentials"),"."),(0,a.yg)("p",{parentName:"admonition"},"You can log into the application with the following account:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"email: demo@refine.dev\npassword: demodemo\n"))),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-18-refine-pixels-5/user-list.jpg",alt:"react supabase CRUD App"}),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"editable-table-using-refine-and-ant-design"},"Editable Table Using Refine and Ant Design"),(0,a.yg)("p",null,"For our ",(0,a.yg)("inlineCode",{parentName:"p"},"<CanvasList />")," view, we want to allow ",(0,a.yg)("strong",{parentName:"p"},"editors")," and ",(0,a.yg)("strong",{parentName:"p"},"admins")," to promote or delete a ",(0,a.yg)("inlineCode",{parentName:"p"},"canvas")," item. This means, we need to be able to send ",(0,a.yg)("inlineCode",{parentName:"p"},"POST"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"PUT"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"PATCH")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"DELETE")," requests. ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," hook makes life beautiful for us."),(0,a.yg)("p",null,"We have a ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," hook in action inside our ",(0,a.yg)("inlineCode",{parentName:"p"},"<CanvasList />")," component:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"CanvasList code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/canvases/list.tsx"',title:'"pages/canvases/list.tsx"'},'import { useState } from "react";\nimport { useUpdate } from "@refinedev/core";\nimport {\n  List,\n  useEditableTable,\n  useModal,\n  DeleteButton,\n} from "@refinedev/antd";\nimport { Table, Form, Button, Space, Tag, Modal, Avatar } from "antd";\n\nimport { TCanvas } from "../../types/canvas";\nimport { LogList } from "../../components/logs";\nimport { CanvasItem } from "../../components/canvas";\n\ntype TCanvasPromoteResult = {\n  id: number;\n  featured: boolean;\n};\n\nexport const CanvasList = () => {\n  const [currentCanvas, setCurrentCanvas] = useState({});\n  const { modalProps, show, close } = useModal();\n  const { tableProps, formProps } = useEditableTable<TCanvas>({\n    liveMode: "auto",\n    sorters: {\n      initial: [\n        {\n          field: "created_at",\n          order: "desc",\n        },\n      ],\n    },\n    meta: {\n      select: "*, pixels(id, canvas_id, user_id, x, y, color)",\n    },\n  });\n  const { mutate } = useUpdate<TCanvasPromoteResult>();\n\n  return (\n    <List>\n      <Form {...formProps}>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column<TCanvas>\n            key="id"\n            dataIndex="id"\n            title={\n              <h4\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                Canvas\n              </h4>\n            }\n            render={(_, record) => (\n              <Avatar\n                shape="square"\n                size={64}\n                style={{\n                  display: "flex",\n                  justifyContent: "center",\n                  alignItems: "center",\n                }}\n                icon={\n                  <CanvasItem\n                    canvas={record}\n                    pixels={record?.pixels}\n                    border={true}\n                    scale={5 / record?.width}\n                    active={false}\n                  />\n                }\n              />\n            )}\n          />\n          <Table.Column<TCanvas>\n            key="name"\n            dataIndex="name"\n            title={\n              <h4\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                Name\n              </h4>\n            }\n          />\n          <Table.Column<TCanvas>\n            key="is_featured"\n            dataIndex="is_featured"\n            title={\n              <h4\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                Featured\n              </h4>\n            }\n            render={(_, record) =>\n              record.is_featured ? (\n                <Tag\n                  color="success"\n                  style={{\n                    display: "flex",\n                    justifyContent: "center",\n                    alignItems: "center",\n                  }}\n                >\n                  Yes\n                </Tag>\n              ) : (\n                <Tag\n                  color="warning"\n                  style={{\n                    display: "flex",\n                    justifyContent: "center",\n                    alignItems: "center",\n                  }}\n                >\n                  No\n                </Tag>\n              )\n            }\n          />\n          <Table.Column<TCanvas>\n            title={\n              <h4\n                style={{\n                  textAlign: "center",\n                  fontWeight: "bold",\n                }}\n              >\n                Actions\n              </h4>\n            }\n            dataIndex="actions"\n            render={(_, record) => (\n              <Space\n                style={{\n                  display: "flex",\n                  justifyContent: "center",\n                }}\n              >\n                <Button\n                  size="small"\n                  style={{ width: "100px" }}\n                  type={record.is_featured ? "ghost" : "primary"}\n                  onClick={() =>\n                    mutate({\n                      resource: "canvases",\n                      id: record.id,\n                      values: {\n                        is_featured: !record.is_featured,\n                      },\n                      meta: {\n                        canvas: record,\n                      },\n                    })\n                  }\n                >\n                  {record.is_featured ? "Unpromote" : "Promote"}\n                </Button>\n                <>\n                  <Button\n                    size="small"\n                    type="primary"\n                    onClick={() => {\n                      setCurrentCanvas(record);\n                      show();\n                    }}\n                  >\n                    View Changes\n                  </Button>\n                </>\n                <DeleteButton size="small" recordItemId={record.id} />\n              </Space>\n            )}\n          />\n        </Table>\n      </Form>\n      <Modal\n        title={<h3 style={{ fontWeight: "bold" }}>Canvas Changes</h3>}\n        {...modalProps}\n        centered\n        destroyOnClose\n        onOk={close}\n        onCancel={() => {\n          close();\n          setCurrentCanvas({});\n        }}\n        footer={[\n          <Button type="primary" key="close" onClick={close}>\n            Close\n          </Button>,\n        ]}\n      >\n        <LogList currentCanvas={currentCanvas} />\n      </Modal>\n    </List>\n  );\n};\n')))),(0,a.yg)("h3",{id:"refine-ant-design-useeditabletable-hook"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"useEditableTable()")," Hook"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," hook is the extension of ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," hook. It returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"formProps")," object that we can pass to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />")," components in order to handle form actions, loading and displaying success and error messages."),(0,a.yg)("p",null,"Like ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()"),", the ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," hook also returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"tableProps")," object:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { tableProps, formProps } = useEditableTable<TCanvas>();\n")),(0,a.yg)("p",null,"The items of ",(0,a.yg)("inlineCode",{parentName:"p"},"formProps")," object are passed to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />")," component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<Form {...formProps}>// React nodes here...</Form>\n")),(0,a.yg)("p",null,"We can do much more with the ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," hook, like activating editing fields when a row is clicked . Here's the elaborate ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/hooks/table/useEditableTable/"},"documentation for ",(0,a.yg)("inlineCode",{parentName:"a"},"useEditableTable()"))),(0,a.yg)("h3",{id:"refine-ant-design-deletebutton-"},"Refine Ant Design ",(0,a.yg)("inlineCode",{parentName:"h3"},"<DeleteButton />")),(0,a.yg)("p",null,"Thanks to the ",(0,a.yg)("inlineCode",{parentName:"p"},"formProps")," being passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />"),", implementing ",(0,a.yg)("inlineCode",{parentName:"p"},"delete")," action becomes a piece of cake:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<DeleteButton size="small" recordItemId={record.id} />\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"<DeleteButton />")," leverages ",(0,a.yg)("strong",{parentName:"p"},"Ant Design"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"<Button />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<Popconfirm />")," components. It invokes the ",(0,a.yg)("inlineCode",{parentName:"p"},"delete()")," data provider method to send a ",(0,a.yg)("inlineCode",{parentName:"p"},"DELETE")," request to the ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," end point. The ",(0,a.yg)("inlineCode",{parentName:"p"},"resource.name")," is inferred from the ",(0,a.yg)("inlineCode",{parentName:"p"},"formProps")," passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />")," component."),(0,a.yg)("p",null,"For more details, visit the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/antd/components/buttons/delete-button/"},(0,a.yg)("inlineCode",{parentName:"a"},"<DeleteButton />")," docs.")),(0,a.yg)("h3",{id:"tablecolumn-s-render-prop"},(0,a.yg)("inlineCode",{parentName:"h3"},"<Table.Column />"),"'s ",(0,a.yg)("inlineCode",{parentName:"h3"},"render")," Prop"),(0,a.yg)("p",null,"We can customize the content inside our table cell by passing a function to the ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," prop of ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table.Column />"),". In our example, we have a conditional rendering, where the component being rendered depends on ",(0,a.yg)("inlineCode",{parentName:"p"},"record.is_featured"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<TCanvas>\n  key="is_featured"\n  dataIndex="is_featured"\n  title={<h4 style={{ textAlign: "center", fontWeight: "bold" }}>Featured</h4>}\n  render={(_, record) =>\n    record.is_featured ? (\n      <Tag\n        color="success"\n        style={{\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n        }}\n      >\n        Yes\n      </Tag>\n    ) : (\n      <Tag\n        color="warning"\n        style={{\n          display: "flex",\n          justifyContent: "center",\n          alignItems: "center",\n        }}\n      >\n        No\n      </Tag>\n    )\n  }\n/>\n')),(0,a.yg)("p",null,"We also grouped content inside a cell, with ",(0,a.yg)("inlineCode",{parentName:"p"},"<Button />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<DeleteButton />")," being sibling flex items:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<TCanvas>\n  title={<h4 style={{ textAlign: "center", fontWeight: "bold" }}>Actions</h4>}\n  dataIndex="actions"\n  render={(_, record) => (\n    <Space style={{ display: "flex", justifyContent: "center" }}>\n      <Button\n        size="small"\n        style={{ width: "100px" }}\n        type={record.is_featured ? "ghost" : "primary"}\n        onClick={() =>\n          mutate({\n            resource: "canvases",\n            id: record.id,\n            values: {\n              is_featured: !record.is_featured,\n            },\n            meta: {\n              canvas: record,\n            },\n          })\n        }\n      >\n        {record.is_featured ? "Unpromote" : "Promote"}\n      </Button>\n      <DeleteButton size="small" recordItemId={record.id} />\n    </Space>\n  )}\n/>\n')),(0,a.yg)("h2",{id:"adding-canvaslist-to-the-resources"},"Adding ",(0,a.yg)("inlineCode",{parentName:"h2"},"<CanvasList>")," to the ",(0,a.yg)("inlineCode",{parentName:"h2"},"resources")),(0,a.yg)("p",null,"We have covered adding CRUD operations on ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-3/"},"Day 3")," in significant depth. So, here we'll quickly add ",(0,a.yg)("inlineCode",{parentName:"p"},"canvases")," resources to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine />")," component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { CanvasList } from "pages";\n...\n\nreturn (\n  <Refine\n    ...\n    authProvider={authProvider}\n    // highlight-start\n    resources={[\n      {\n          name: "canvases",\n          list: "/canvases",\n        },\n    ]}\n    // highlight-end\n  />\n)\n')),(0,a.yg)("p",null,"With these additions, ",(0,a.yg)("inlineCode",{parentName:"p"},"/canvases")," looks like this:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-18-refine-pixels-5/canvas-list.jpg",alt:"react supabase CRUD App"}),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this post, we initialized an admin dashboard app for our ",(0,a.yg)("strong",{parentName:"p"},"Pixels")," client app which we built in the previous episodes in the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/week-of-refine/"},"RefineWeek")," series. We implemented list views for two ",(0,a.yg)("inlineCode",{parentName:"p"},"resources"),": ",(0,a.yg)("inlineCode",{parentName:"p"},"users")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"canvases"),"."),(0,a.yg)("p",null,"Inside the lists, we fetched data from these resources and rendered them inside tables. We implemented two types of tables using two distinct ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," hooks: ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," for regular tables and ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable()")," that allows data in the table to be mutated."),(0,a.yg)("p",null,"These hooks are supported by ",(0,a.yg)("strong",{parentName:"p"},"Refine")," core's ",(0,a.yg)("inlineCode",{parentName:"p"},"useMany()")," hook, which uses the ",(0,a.yg)("inlineCode",{parentName:"p"},"getMany()")," data provider method to interact with external API."),(0,a.yg)("p",null,"In the UI side, these hooks automatically make available appropriate props to be passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table />")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />")," components."),(0,a.yg)("p",null,"In the next post, we will focus on implementing Role Based Access Control to our dashboard based on ",(0,a.yg)("inlineCode",{parentName:"p"},"editor")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"admin")," roles."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/refine-pixels-6/"},'Click here to read "Implementing Role Based Access Control" article. ',"\u2192")))}c.isMDXComponent=!0}}]);