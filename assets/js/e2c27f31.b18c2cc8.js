"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[43122],{58860:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>c});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,c=s["".concat(d,".").concat(m)]||s[m]||u[m]||l;return n?a.createElement(c,i(i({ref:t},g),{},{components:n})):a.createElement(c,i({ref:t},g))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>b,frontMatter:()=>o,metadata:()=>p,toc:()=>s});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/data-table/data-table.tsx"},d="<DataTable />",p={unversionedId:"ui-integrations/shadcn/components/data-table/index",id:"ui-integrations/shadcn/components/data-table/index",title:"<DataTable />",description:"When you're building admin dashboards, you'll frequently need to display lists of data - whether it's posts, users, products, or any other resource. The DataTable component handles all the common table functionality you need: sorting columns, filtering data, pagination, and action buttons.",source:"@site/docs/ui-integrations/shadcn/components/data-table/index.md",sourceDirName:"ui-integrations/shadcn/components/data-table",slug:"/ui-integrations/shadcn/components/data-table/",permalink:"/docs/ui-integrations/shadcn/components/data-table/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/shadcn/components/data-table/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1758111044,formattedLastUpdatedAt:"Sep 17, 2025",frontMatter:{source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/data-table/data-table.tsx"},sidebar:"mainSidebar",previous:{title:"Forms",permalink:"/docs/ui-integrations/shadcn/components/forms/"},next:{title:"<ThemedLayout />",permalink:"/docs/ui-integrations/shadcn/components/themed-layout/"}},g={},s=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Advanced Example",id:"advanced-example",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Column Sorting",id:"column-sorting",level:3},{value:"Filtering Options",id:"filtering-options",level:3},{value:"Action Buttons",id:"action-buttons",level:3},{value:"Component Structure",id:"component-structure",level:2},{value:"Handling Relational Data",id:"handling-relational-data",level:2},{value:"Adding Filters and Sorting",id:"adding-filters-and-sorting",level:2},{value:"Text Search Filter",id:"text-search-filter",level:3},{value:"Dropdown/Select Filter",id:"dropdownselect-filter",level:3},{value:"Numeric Range Filter",id:"numeric-range-filter",level:3},{value:"Date Range Filter",id:"date-range-filter",level:3},{value:"Date Single Picker Filter",id:"date-single-picker-filter",level:3},{value:"Column Sorting",id:"column-sorting-1",level:3},{value:"Props",id:"props",level:2},{value:"DataTable",id:"datatable",level:3},{value:"DataTableSorter",id:"datatablesorter",level:3},{value:"DataTableFilterDropdownText",id:"datatablefilterdropdowntext",level:3},{value:"DataTableFilterCombobox",id:"datatablefiltercombobox",level:3},{value:"DataTableFilterDropdownNumeric",id:"datatablefilterdropdownnumeric",level:3},{value:"DataTableFilterDropdownDateRangePicker",id:"datatablefilterdropdowndaterangepicker",level:3},{value:"DataTableFilterDropdownDateSinglePicker",id:"datatablefilterdropdowndatesinglepicker",level:3}],u=(m="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var m;const c={toc:s},y="wrapper";function b(e){var{components:t}=e,n=i(e,["components"]);return(0,a.yg)(y,l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},c,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"datatable-"},(0,a.yg)("inlineCode",{parentName:"h1"},"<DataTable />")),(0,a.yg)("p",null,"When you're building admin dashboards, you'll frequently need to display lists of data - whether it's posts, users, products, or any other resource. The ",(0,a.yg)("inlineCode",{parentName:"p"},"DataTable")," component handles all the common table functionality you need: sorting columns, filtering data, pagination, and action buttons."),(0,a.yg)("p",null,"Built on TanStack Table, it integrates directly with Refine's data fetching hooks, so you get features like server-side sorting and filtering without extra configuration."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)(u,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Add the DataTable components to your project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest add https://ui.refine.dev/r/data-table.json\n")),(0,a.yg)("p",null,"This installs the main ",(0,a.yg)("inlineCode",{parentName:"p"},"DataTable")," component plus all the filtering, sorting, and pagination components you'll need. The CLI will automatically install the required dependencies like ",(0,a.yg)("inlineCode",{parentName:"p"},"@tanstack/react-table")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"react-day-picker"),".")),(0,a.yg)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.yg)(u,{id:"basic-usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Create a list view with a data table:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useMemo } from "react";\nimport { useTable } from "@refinedev/react-table";\nimport type { ColumnDef } from "@tanstack/react-table";\nimport { DataTable } from "@/components/refine-ui/data-table/data-table";\nimport { DataTableSorter } from "@/components/refine-ui/data-table/data-table-sorter";\nimport { DataTableFilterDropdownText } from "@/components/refine-ui/data-table/data-table-filter";\nimport {\n  ListView,\n  ListViewHeader,\n} from "@/components/refine-ui/views/list-view";\n\ntype Post = {\n  id: number;\n  title: string;\n  status: string;\n};\n\nexport default function PostList() {\n  const columns = useMemo<ColumnDef<Post>[]>(\n    () => [\n      {\n        // Column for ID field\n        id: "id",\n        accessorKey: "id", // Maps to the \'id\' field in your data\n        header: ({ column }) => (\n          <div className="flex items-center gap-1">\n            <span>ID</span>\n            <DataTableSorter column={column} />\n          </div>\n        ),\n      },\n      {\n        // Column for title field\n        id: "title",\n        accessorKey: "title", // Maps to the \'title\' field in your data\n        header: ({ column, table }) => (\n          <div className="flex items-center gap-1">\n            <span>Title</span>\n            <div>\n              <DataTableFilterDropdownText\n                defaultOperator="contains"\n                column={column}\n                table={table}\n                placeholder="Filter by title"\n              />\n            </div>\n          </div>\n        ),\n      },\n      {\n        // Column for status field\n        id: "status",\n        accessorKey: "status", // Maps to the \'status\' field in your data\n        header: "Status",\n      },\n    ],\n    [],\n  );\n\n  const table = useTable<Post>({\n    columns,\n    refineCoreProps: {\n      resource: "posts", // Your API resource name\n    },\n  });\n\n  return (\n    <ListView>\n      <ListViewHeader title="Posts" />\n      <DataTable table={table} />\n    </ListView>\n  );\n}\n'))),(0,a.yg)("h2",{id:"advanced-example"},"Advanced Example"),(0,a.yg)(u,{id:"advanced-example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Here's a comprehensive example showing how to create a data table with filtering, sorting, and pagination:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useMemo } from "react";\nimport { useTable } from "@refinedev/react-table";\nimport type { ColumnDef } from "@tanstack/react-table";\nimport { useList } from "@refinedev/core";\nimport { Button } from "@/components/ui/button";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { MoreHorizontal } from "lucide-react";\nimport { DataTable } from "@/components/refine-ui/data-table/data-table";\nimport { DataTableSorter } from "@/components/refine-ui/data-table/data-table-sorter";\nimport {\n  DataTableFilterDropdownText,\n  DataTableFilterCombobox,\n  DataTableFilterDropdownNumeric,\n} from "@/components/refine-ui/data-table/data-table-filter";\nimport {\n  EditButton,\n  DeleteButton,\n  ShowButton,\n} from "@/components/refine-ui/buttons";\nimport {\n  ListView,\n  ListViewHeader,\n} from "@/components/refine-ui/views/list-view";\n\ntype Post = {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n  createdAt: string;\n};\n\nexport default function PostList() {\n  // Fetch categories for the dropdown filter\n  const { data: categories } = useList({\n    resource: "categories",\n  });\n\n  const columns = useMemo<ColumnDef<Post>[]>(\n    () => [\n      {\n        // ID column with sorting capability\n        id: "id",\n        accessorKey: "id",\n        size: 80,\n        header: ({ column, table }) => (\n          <div className="flex items-center gap-1">\n            <span>ID</span>\n            <div>\n              <DataTableSorter column={column} />\n              <DataTableFilterDropdownNumeric\n                defaultOperator="eq"\n                column={column}\n                table={table}\n                placeholder="Filter by ID"\n              />\n            </div>\n          </div>\n        ),\n        cell: ({ getValue }) => getValue(),\n      },\n      {\n        // Title column with sorting and text filtering\n        id: "title",\n        accessorKey: "title",\n        size: 300,\n        header: ({ column, table }) => (\n          <div className="flex items-center gap-1">\n            <span>Title</span>\n            <div>\n              <DataTableFilterDropdownText\n                defaultOperator="contains"\n                column={column}\n                table={table}\n                placeholder="Filter by title"\n              />\n            </div>\n          </div>\n        ),\n      },\n      {\n        // Status column with dropdown filter for specific values\n        id: "status",\n        accessorKey: "status",\n        size: 120,\n        header: ({ column }) => (\n          <div className="flex items-center gap-1">\n            <span>Status</span>\n            <DataTableFilterCombobox\n              column={column}\n              defaultOperator="in"\n              multiple={true}\n              options={[\n                { label: "Published", value: "published" },\n                { label: "Draft", value: "draft" },\n                { label: "Rejected", value: "rejected" },\n              ]}\n            />\n          </div>\n        ),\n      },\n      {\n        // Actions column with edit/delete/show buttons\n        id: "actions",\n        size: 100,\n        enableSorting: false, // Disable sorting for action buttons\n        enableColumnFilter: false, // Disable filtering for action buttons\n        header: "Actions",\n        cell: ({ row }) => (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant="ghost" className="h-8 w-8 p-0">\n                <MoreHorizontal className="h-4 w-4" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align="end">\n              <ShowButton hideText size="sm" recordItemId={row.original.id} />\n              <EditButton hideText size="sm" recordItemId={row.original.id} />\n              <DeleteButton hideText size="sm" recordItemId={row.original.id} />\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ),\n      },\n    ],\n    [categories], // Re-create columns when categories data changes\n  );\n\n  const table = useTable<Post>({\n    columns,\n    refineCoreProps: {\n      resource: "posts",\n    },\n  });\n\n  return (\n    <ListView>\n      <ListViewHeader title="Posts" />\n      <DataTable table={table} />\n    </ListView>\n  );\n}\n')),(0,a.yg)("p",null,"This example demonstrates the key features: sortable columns, multiple filter types (text, numeric, dropdown), and action buttons in a dropdown menu.")),(0,a.yg)("h2",{id:"key-features"},"Key Features"),(0,a.yg)("h3",{id:"column-sorting"},"Column Sorting"),(0,a.yg)(u,{id:"column-sorting",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Click any column header to sort by that field. The DataTable automatically handles the sorting state and sends the appropriate parameters to your data provider.")),(0,a.yg)("h3",{id:"filtering-options"},"Filtering Options"),(0,a.yg)(u,{id:"filtering-options",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The DataTable supports several filter types:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Text filters"),": Search within text columns"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Numeric filters"),": Range filtering for numbers"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Dropdown filters"),": Select from predefined options"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Date filters"),": Date range selection"))),(0,a.yg)("h3",{id:"action-buttons"},"Action Buttons"),(0,a.yg)(u,{id:"action-buttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Add action buttons for each row using the dropdown menu pattern shown above.")),(0,a.yg)("h2",{id:"component-structure"},"Component Structure"),(0,a.yg)(u,{id:"component-structure",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The DataTable is built from several focused components:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"DataTable"),": Main table component that handles rendering"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"DataTableSorter"),": Column header sorting controls"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"DataTableFilter"),": Various filter components for different data types"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"DataTablePagination"),": Pagination controls"))),(0,a.yg)("h2",{id:"handling-relational-data"},"Handling Relational Data"),(0,a.yg)(u,{id:"handling-relational-data",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When your main data records (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"posts"),") contain references to other resources (e.g., a ",(0,a.yg)("inlineCode",{parentName:"p"},"category")," with an ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),"), you often need to fetch and display details from these related resources."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," package provides the ",(0,a.yg)("inlineCode",{parentName:"p"},"useMany")," hook, which is ideal for this scenario. You can collect all the foreign key IDs (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"category.id")," from all posts in the current table view) and pass them to ",(0,a.yg)("inlineCode",{parentName:"p"},"useMany")," to fetch all related categories in a single request."),(0,a.yg)("p",null,"The recommended way to make this related data available to your column cell renderers is by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"setOptions")," function returned by ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable")," (from ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-table"),") to add the fetched data to the table's ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," object.")),(0,a.yg)("h2",{id:"adding-filters-and-sorting"},"Adding Filters and Sorting"),(0,a.yg)(u,{id:"adding-filters-and-sorting",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"You can add different types of filters to your columns. Here are the most common ones:")),(0,a.yg)("h3",{id:"text-search-filter"},"Text Search Filter"),(0,a.yg)(u,{id:"text-search-filter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableFilterDropdownText } from "@/components/refine-ui/data-table/data-table-filter";\n\n// In your column definition:\nheader: ({ column, table }) => (\n  <div className="flex items-center gap-1">\n    <span>Title</span>\n    <div>\n      <DataTableFilterDropdownText\n        defaultOperator="contains"\n        column={column}\n        table={table}\n        placeholder="Filter by title"\n      />\n    </div>\n  </div>\n),\n'))),(0,a.yg)("h3",{id:"dropdownselect-filter"},"Dropdown/Select Filter"),(0,a.yg)(u,{id:"dropdownselect-filter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableFilterCombobox } from "@/components/refine-ui/data-table/data-table-filter";\n\n// In your column definition:\nheader: ({ column }) => (\n  <div className="flex items-center gap-1">\n    <span>Status</span>\n    <DataTableFilterCombobox\n      column={column}\n      defaultOperator="in"\n      multiple={true}\n      options={[\n        { label: "Published", value: "published" },\n        { label: "Draft", value: "draft" },\n      ]}\n    />\n  </div>\n),\n'))),(0,a.yg)("h3",{id:"numeric-range-filter"},"Numeric Range Filter"),(0,a.yg)(u,{id:"numeric-range-filter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableFilterDropdownNumeric } from "@/components/refine-ui/data-table/data-table-filter";\n\n// In your column definition:\nheader: ({ column, table }) => (\n  <div className="flex items-center gap-1">\n    <span>Price</span>\n    <div>\n      <DataTableSorter column={column} />\n      <DataTableFilterDropdownNumeric\n        defaultOperator="eq"\n        column={column}\n        table={table}\n        placeholder="Filter by price"\n      />\n    </div>\n  </div>\n),\n'))),(0,a.yg)("h3",{id:"date-range-filter"},"Date Range Filter"),(0,a.yg)(u,{id:"date-range-filter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableFilterDropdownDateRangePicker } from "@/components/refine-ui/data-table/data-table-filter";\n\n// In your column definition:\nheader: ({ column }) => (\n  <div className="flex items-center gap-1">\n    <span>Created</span>\n    <DataTableFilterDropdownDateRangePicker\n      column={column}\n      formatDateRange={(dateRange) => {\n        if (!dateRange?.from || !dateRange?.to) return undefined;\n        return [\n          dateRange.from.toISOString(),\n          dateRange.to.toISOString(),\n        ];\n      }}\n    />\n  </div>\n),\n'))),(0,a.yg)("h3",{id:"date-single-picker-filter"},"Date Single Picker Filter"),(0,a.yg)(u,{id:"date-single-picker-filter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableFilterDropdownDateSinglePicker } from "@/components/refine-ui/data-table/data-table-filter";\n\n// In your column definition:\nheader: ({ column }) => (\n  <div className="flex items-center gap-1">\n    <span>Updated At</span>\n    <DataTableFilterDropdownDateSinglePicker\n      column={column}\n      defaultOperator="eq"\n      formatDate={(date) => {\n        if (!date) return undefined;\n        return date.toISOString().split("T")[0];\n      }}\n    />\n  </div>\n),\n'))),(0,a.yg)("h3",{id:"column-sorting-1"},"Column Sorting"),(0,a.yg)(u,{id:"column-sorting-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { DataTableSorter } from "@/components/refine-ui/data-table/data-table-sorter";\n\n// In your column definition:\nheader: ({ column }) => (\n  <div className="flex items-center gap-1">\n    <span>Column Name</span>\n    <DataTableSorter column={column} />\n  </div>\n),\n'))),(0,a.yg)("h2",{id:"props"},"Props"),(0,a.yg)("h3",{id:"datatable"},"DataTable"),(0,a.yg)(u,{id:"datatable",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"table"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Table<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table instance from ",(0,a.yg)("inlineCode",{parentName:"td"},"useTable")," hook"))))),(0,a.yg)("h3",{id:"datatablesorter"},"DataTableSorter"),(0,a.yg)(u,{id:"datatablesorter",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance"))))),(0,a.yg)("h3",{id:"datatablefilterdropdowntext"},"DataTableFilterDropdownText"),(0,a.yg)(u,{id:"datatablefilterdropdowntext",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"table"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Table<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultOperator"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators")),(0,a.yg)("td",{parentName:"tr",align:null},"Default filter operator")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"operators"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators[]")),(0,a.yg)("td",{parentName:"tr",align:null},"Available filter operators")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"placeholder"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"Placeholder text for the input"))))),(0,a.yg)("h3",{id:"datatablefiltercombobox"},"DataTableFilterCombobox"),(0,a.yg)(u,{id:"datatablefiltercombobox",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"table"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Table<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table instance (optional)")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"options"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Array<{ label: string; value: string }>")),(0,a.yg)("td",{parentName:"tr",align:null},"Dropdown options")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultOperator"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators")),(0,a.yg)("td",{parentName:"tr",align:null},"Default filter operator")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"operators"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators[]")),(0,a.yg)("td",{parentName:"tr",align:null},"Available filter operators")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"placeholder"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"Placeholder text")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"noResultsText"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"Text when no results found")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"multiple"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean")),(0,a.yg)("td",{parentName:"tr",align:null},"Allow multiple selections"))))),(0,a.yg)("h3",{id:"datatablefilterdropdownnumeric"},"DataTableFilterDropdownNumeric"),(0,a.yg)(u,{id:"datatablefilterdropdownnumeric",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"table"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Table<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultOperator"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators")),(0,a.yg)("td",{parentName:"tr",align:null},"Default filter operator")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"operators"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators[]")),(0,a.yg)("td",{parentName:"tr",align:null},"Available filter operators")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"placeholder"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"Placeholder text for the input"))))),(0,a.yg)("h3",{id:"datatablefilterdropdowndaterangepicker"},"DataTableFilterDropdownDateRangePicker"),(0,a.yg)(u,{id:"datatablefilterdropdowndaterangepicker",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultOperator"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators")),(0,a.yg)("td",{parentName:"tr",align:null},"Default filter operator")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"formatDateRange"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(dateRange: { from: Date; to: Date } \\| undefined) => [string, string] \\| undefined")),(0,a.yg)("td",{parentName:"tr",align:null},"Function to format the selected date"))))),(0,a.yg)("h3",{id:"datatablefilterdropdowndatesinglepicker"},"DataTableFilterDropdownDateSinglePicker"),(0,a.yg)(u,{id:"datatablefilterdropdowndatesinglepicker",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"column"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Column<TData>")),(0,a.yg)("td",{parentName:"tr",align:null},"TanStack Table column instance")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"defaultOperator"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"CrudOperators")),(0,a.yg)("td",{parentName:"tr",align:null},"Default filter operator")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"formatDate"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(date: Date \\| undefined) => string \\| undefined")),(0,a.yg)("td",{parentName:"tr",align:null},"Function to format the selected date"))))))}b.isMDXComponent=!0}}]);