"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5566],{58860:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>h});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41311:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>y,frontMatter:()=>p,metadata:()=>s,toc:()=>u});t(37953);var r=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const p={id:"edit",title:"Edit",swizzle:!0},d=void 0,s={unversionedId:"api-reference/chakra-ui/components/basic-views/edit",id:"version-3.xx.xx/api-reference/chakra-ui/components/basic-views/edit",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/components/basic-views/edit.md",sourceDirName:"api-reference/chakra-ui/components/basic-views",slug:"/api-reference/chakra-ui/components/basic-views/edit",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/basic-views/edit",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/chakra-ui/components/basic-views/edit.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1710167091,formattedLastUpdatedAt:"Mar 11, 2024",frontMatter:{id:"edit",title:"Edit",swizzle:!0},sidebar:"someSidebar",previous:{title:"Create",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/basic-views/create"},next:{title:"List",permalink:"/docs/3.xx.xx/api-reference/chakra-ui/components/basic-views/list"}},l={},u=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>canDelete</code> and <code>deleteButtonProps</code>",id:"candelete-and-deletebuttonprops",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>mutationMode</code>",id:"mutationmode",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},m=c("DocThumbsUpDownFeedbackWidget"),h=c("PropsTable"),g={toc:u},f="wrapper";function y(e){var{components:n}=e,t=a(e,["components"]);return(0,r.yg)(f,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const { default: simpleRest } = RefineSimpleRest;\nsetRefineProps({\n  dataProvider: simpleRest("https://api.fake-rest.refine.dev"),\n  Layout: RefineChakra.Layout,\n  Sider: () => null,\n});\n\nconst Wrapper = ({ children }) => {\n  return (\n    <RefineChakra.ChakraProvider theme={RefineChakra.refineTheme}>\n      {children}\n    </RefineChakra.ChakraProvider>\n  );\n};\n\nconst DummyListPage = () => (\n  <RefineChakra.VStack alignItems="flex-start">\n    <RefineChakra.Text>This page is empty.</RefineChakra.Text>\n    <EditButton colorScheme="black" recordItemId="123">\n      Edit Item 123\n    </EditButton>\n  </RefineChakra.VStack>\n);\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,r.yg)("p",null,"We will show what ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport {\n  Edit,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Select,\n} from "@pankod/refine-chakra-ui";\nimport { useSelect } from "@pankod/refine-core";\nimport { useForm } from "@pankod/refine-react-hook-form";\n\nconst PostEdit: React.FC = () => {\n  const {\n    refineCore: { formLoading, queryResult },\n    saveButtonProps,\n    register,\n    formState: { errors },\n    resetField,\n  } = useForm<IPost>();\n\n  const { options } = useSelect({\n    resource: "categories",\n\n    defaultValue: queryResult?.data?.data.category.id,\n    queryOptions: { enabled: !!queryResult?.data?.data.category.id },\n  });\n\n  useEffect(() => {\n    resetField("category.id");\n  }, [options]);\n\n  return (\n    <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <FormControl mb="3" isInvalid={!!errors?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          id="title"\n          type="text"\n          {...register("title", { required: "Title is required" })}\n        />\n        <FormErrorMessage>{`${errors.title?.message}`}</FormErrorMessage>\n      </FormControl>\n      <FormControl mb="3" isInvalid={!!errors?.status}>\n        <FormLabel>Status</FormLabel>\n        <Select\n          id="content"\n          placeholder="Select Post Status"\n          {...register("status", {\n            required: "Status is required",\n          })}\n        >\n          <option>published</option>\n          <option>draft</option>\n          <option>rejected</option>\n        </Select>\n        <FormErrorMessage>{`${errors.status?.message}`}</FormErrorMessage>\n      </FormControl>\n      <FormControl mb="3" isInvalid={!!errors?.categoryId}>\n        <FormLabel>Category</FormLabel>\n        <Select\n          id="ca"\n          placeholder="Select Category"\n          {...register("category.id", {\n            required: true,\n          })}\n        >\n          {options?.map((option) => (\n            <option value={option.value} key={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <FormErrorMessage>{`${errors.categoryId?.message}`}</FormErrorMessage>\n      </FormControl>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      notificationProvider={RefineChakra.notificationProvider()}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("admonition",{title:"Swizzle",type:"info-tip"},(0,r.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/cli"},(0,r.yg)("strong",{parentName:"a"},"refine CLI")))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"title"},(0,r.yg)("inlineCode",{parentName:"h3"},"title")),(0,r.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It allows adding titles inside the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>"),' component. if you don\'t pass title props it uses the "Edit" prefix and singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit, Heading } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit title={<Heading size="lg">Custom Title</Heading>}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"savebuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,r.yg)(m,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button by default. If you want to customize this button you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," property like the code below."),(0,r.yg)("p",null,"Clicking on the save button will submit your form."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/buttons/save-button"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ colorScheme: "red" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"candelete-and-deletebuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,r.yg)("inlineCode",{parentName:"h3"},"deleteButtonProps")),(0,r.yg)(m,{id:"candelete-and-deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,r.yg)("inlineCode",{parentName:"p"},"canDelete")," property,refine adds the delete button by default. If you want to customize this button you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,r.yg)("p",null,"When clicked on, the delete button executes the ",(0,r.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/buttons/delete-button"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\nimport { usePermissions } from "@pankod/refine-core";\n\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ colorScheme: "orange" }}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  const simpleRestDataProvider = dataProvider(\n    "https://api.fake-rest.refine.dev",\n  );\n\n  const customDataProvider = {\n    ...simpleRestDataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n      return {\n        data: {},\n      };\n    },\n  };\n\n  const authProvider = {\n    login: () => Promise.resolve(),\n    logout: () => Promise.resolve(),\n    checkAuth: () => Promise.resolve(),\n    checkError: () => Promise.resolve(),\n    getPermissions: () => Promise.resolve("admin"),\n    getUserIdentity: () => Promise.resolve(),\n  };\n\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={customDataProvider}\n      authProvider={authProvider}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/auth/usePermissions"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"usePermission")," documentation for detailed usage. ","\u2192"))),(0,r.yg)("h3",{id:"resource"},(0,r.yg)("inlineCode",{parentName:"h3"},"resource")),(0,r.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. This default behavior will not work on custom pages. If you want to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component in a custom page, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/custom-pages"},"Refer to the custom pages documentation for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/custom/23 previewHeight=280px",live:!0,url:"http://localhost:3000/custom/23",previewHeight:"280px"},'setInitialRoutes(["/custom/23"]);\n\n// visible-block-start\nimport { Refine } from "@pankod/refine-core";\nimport { Layout, Edit } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="categories">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: "/custom/:id",\n          },\n        ],\n        // highlight-end\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[{ name: "posts" }]}\n    />\n  );\n};\n// visible-block-end\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"recorditemid"},(0,r.yg)("inlineCode",{parentName:"h3"},"recordItemId")),(0,r.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,r.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL(when used on a custom page, modal or drawer)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=350px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"350px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { useModalForm } from "@pankod/refine-react-hook-form";\nimport {\n  Edit,\n  Modal,\n  Button,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  ModalBody,\n} from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  const {\n    modal: { visible, close, show },\n    id,\n  } = useModalForm({\n    refineCoreProps: { action: "edit" },\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal isOpen={visible} onClose={close} size="xl">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Edit</ModalHeader>\n\n          <ModalBody>\n            {/* highlight-next-line */}\n            <Edit recordItemId={id}>\n              <p>Rest of your page here</p>\n            </Edit>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: () => (\n            <div>\n              <p>This page is empty.</p>\n              <EditButton recordItemId="23">Edit Item 23</EditButton>\n            </div>\n          ),\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," information for the ",(0,r.yg)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly."))),(0,r.yg)("h3",{id:"mutationmode"},(0,r.yg)("inlineCode",{parentName:"h3"},"mutationMode")),(0,r.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Determines which mode mutation will have while executing ",(0,r.yg)("inlineCode",{parentName:"p"},"<DeleteButton>"),"."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/advanced-tutorials/mutation-mode"},"Refer to the mutation mode docs for further information. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport {\n  Edit,\n  Input,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n} from "@pankod/refine-chakra-ui";\nimport { useForm } from "@pankod/refine-react-hook-form";\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    register,\n    formState: { errors },\n  } = useForm<IPost>();\n\n  return (\n    <Edit\n      //highlight-next-line\n      mutationMode="undoable"\n      canDelete\n      saveButtonProps={saveButtonProps}\n    >\n      <FormControl mb="3" isInvalid={!!errors?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          id="title"\n          type="text"\n          {...register("title", { required: "Title is required" })}\n        />\n        <FormErrorMessage>{`${errors.title?.message}`}</FormErrorMessage>\n      </FormControl>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      notificationProvider={RefineChakra.notificationProvider()}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"dataprovidername"},(0,r.yg)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.yg)(m,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@pankod/refine-core";\nimport { Edit } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// highlight-start\nconst PostEdit = () => {\n  return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n      resources={[{ name: "posts", edit: PostEdit }]}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"goback"},(0,r.yg)("inlineCode",{parentName:"h3"},"goBack")),(0,r.yg)(m,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nconst IconMoodSmile = (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    className="icon icon-tabler icon-tabler-mood-smile"\n    width={24}\n    height={24}\n    viewBox="0 0 24 24"\n    strokeWidth="2"\n    stroke="currentColor"\n    fill="none"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  >\n    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>\n    <circle cx={12} cy={12} r={9}></circle>\n    <line x1={9} y1={10} x2="9.01" y2={10}></line>\n    <line x1={15} y1={10} x2="15.01" y2={10}></line>\n    <path d="M9.5 15a3.5 3.5 0 0 0 5 0"></path>\n  </svg>\n);\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n/* highlight-next-line */\nimport { IconMoodSmile } from "@tabler/icons";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit goBack={IconMoodSmile}>\n      <p>Rest of your page here 2</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"isloading"},(0,r.yg)("inlineCode",{parentName:"h3"},"isLoading")),(0,r.yg)(m,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To toggle the loading state of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit isLoading={true}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"breadcrumb"},(0,r.yg)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,r.yg)(m,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,r.yg)("inlineCode",{parentName:"p"},"@pankod/refine-chakra-ui")," package."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/chakra-ui/components/breadcrumb"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation for detailed usage. ","\u2192")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit, Breadcrumb, Box } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      breadcrumb={\n        <Box borderColor="blue" borderStyle="dashed" borderWidth="2px">\n          <Breadcrumb />\n        </Box>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"wrapperprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,r.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the wrapper of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,r.yg)("inlineCode",{parentName:"p"},"@pankod/refine-chakra-ui")," wrapper element is ",(0,r.yg)("inlineCode",{parentName:"p"},"<Card>"),"s and ",(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,r.yg)("inlineCode",{parentName:"p"},"<Card>")," can get."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      wrapperProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"headerprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerProps")),(0,r.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the header of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"contentprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"contentProps")),(0,r.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to customize the content of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      contentProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"headerbuttons"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerButtons")),(0,r.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the buttons at the header by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,r.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit, Button, HStack, Box } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <HStack>\n          {defaultButtons}\n          <Button colorScheme="red">Custom Button</Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"headerbuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,r.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://chakra-ui.com/docs/components/box/usage"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit, Button } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtonProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n      headerButtons={\n        <Button variant="outline" colorScheme="green">\n          Custom Button\n        </Button>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"footerbuttons"},(0,r.yg)("inlineCode",{parentName:"h3"},"footerButtons")),(0,r.yg)(m,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,r.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,r.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit, Button, HStack } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <HStack borderColor="blue" borderStyle="dashed" borderWidth="2px" p="2">\n          {defaultButtons}\n          <Button colorScheme="red" variant="solid">\n            Custom Button\n          </Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h3",{id:"footerbuttonprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,r.yg)(m,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/space/"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"Space")," documentation from Ant Design for detailed usage. ","\u2192")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"280px"},'setInitialRoutes(["/posts/edit/123"]);\nimport { Refine } from "@pankod/refine-core";\nimport { EditButton } from "@pankod/refine-chakra-ui";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\n// visible-block-start\nimport { Edit } from "@pankod/refine-chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        float: "right",\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          edit: PostEdit,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"props"},"Props"),(0,r.yg)(m,{id:"props",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(h,{module:"@pankod/refine-chakra-ui/Edit","goBack-default":"`<IconArrowLeft />`","title-default":"`<Title order={3}>Edit {resource.name}</Title>`",mdxType:"PropsTable"})))}y.isMDXComponent=!0}}]);