"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[23653],{58860:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var a=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(n),h=o,g=p["".concat(l,".").concat(h)]||p[h]||c[h]||i;return n?a.createElement(g,r(r({ref:t},m),{},{components:n})):a.createElement(g,r({ref:t},m))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},38468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>p});n(37953);var a=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const s={title:"Form Schema Validation with Zod and React Hook Form",description:"We'll explore how to use Zod schema validation with React Hook Form in a TypeScript based React application.",slug:"zod-typescript",authors:"abdullah_numan",tags:["typescript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-05-21-zod/social.png",hide_table_of_contents:!1},l=void 0,d={permalink:"/blog/zod-typescript",source:"@site/blog/2024-05-21-zod.md",title:"Form Schema Validation with Zod and React Hook Form",description:"We'll explore how to use Zod schema validation with React Hook Form in a TypeScript based React application.",date:"2024-05-21T00:00:00.000Z",formattedDate:"May 21, 2024",tags:[{label:"typescript",permalink:"/blog/tags/typescript"}],readingTime:22.145,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Form Schema Validation with Zod and React Hook Form",description:"We'll explore how to use Zod schema validation with React Hook Form in a TypeScript based React application.",slug:"zod-typescript",authors:"abdullah_numan",tags:["typescript"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-05-21-zod/social.png",hide_table_of_contents:!1},prevItem:{title:"Material UI Grid System in React",permalink:"/blog/material-ui-grid"},nextItem:{title:"Beginner's Guide to React useId Hook",permalink:"/blog/react-useid"},relatedPosts:[{title:"A Detailed Guide on TypeScript Enum with Examples",description:"We'll explore TypeScript Enums with examples.",permalink:"/blog/typescript-enum",formattedDate:"January 6, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:16.055,date:"2025-01-06T00:00:00.000Z"},{title:"TypeScript Mapped Types in Depth",description:"This post provides an in-depth guide on how to derive mapped types in TypeScript.",permalink:"/blog/typescript-mapped-types",formattedDate:"February 29, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:11.19,date:"2024-02-29T00:00:00.000Z"},{title:"TypeScript Decorators in Brief",description:"We'll explore four main types of TypeScript Decorators with examples from a class that resembles those in typical class based TypeScript libraries.",permalink:"/blog/typescript-decorators",formattedDate:"January 9, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:12.845,date:"2025-01-09T00:00:00.000Z"}],authorPosts:[{title:"A Quick Introduction to Meta's Stylex",description:"This post quickly explores how to apply statically typed, atomic CSS styles to React components with Stylex APIs in a Next.js application.",permalink:"/blog/meta-stylex",formattedDate:"September 16, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:16.035,date:"2024-09-16T00:00:00.000Z"},{title:"Building a CRUD app with Shadcn UI and Refine",description:"We demonstrate how to integrate Shadcn UI components to build a collection of components and pages within a Refine app.",permalink:"/blog/shadcn-ui",formattedDate:"March 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:31.955,date:"2024-03-19T00:00:00.000Z"},{title:"A Detailed Guide on TypeScript Enum with Examples",description:"We'll explore TypeScript Enums with examples.",permalink:"/blog/typescript-enum",formattedDate:"January 6, 2025",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:16.055,date:"2025-01-06T00:00:00.000Z"}]},m={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"What is Zod ?",id:"what-is-zod-",level:2},{value:"Why We Should Use Form Schemas",id:"why-we-should-use-form-schemas",level:3},{value:"Why Zod is Special ?",id:"why-zod-is-special-",level:3},{value:"How Zod Works",id:"how-zod-works",level:3},{value:"Zod Resolver for React Hook Form",id:"zod-resolver-for-react-hook-form",level:3},{value:"Zod Schema Validation with TypeScript: How to Migrate from Plain React Hook Form",id:"zod-schema-validation-with-typescript-how-to-migrate-from-plain-react-hook-form",level:2},{value:"Starter Files",id:"starter-files",level:3},{value:"The <code>App.tsx</code> Component",id:"the-apptsx-component",level:4},{value:"Zod with React Hook Form: Installing Packages",id:"zod-with-react-hook-form-installing-packages",level:3},{value:"How to Implement Zod Schema Validation with React Hook Form",id:"how-to-implement-zod-schema-validation-with-react-hook-form",level:3},{value:"Zod with React Hook Form: How to Use an Object Schema",id:"zod-with-react-hook-form-how-to-use-an-object-schema",level:4},{value:"How to Declare Zod Validators",id:"how-to-declare-zod-validators",level:4},{value:"Zod Validator Syntax: Zod Primitives and Field Precision Validators",id:"zod-validator-syntax-zod-primitives-and-field-precision-validators",level:4},{value:"Zod Validation Rules Parsing",id:"zod-validation-rules-parsing",level:4},{value:"Zod <code>infer()</code>: How to Infer Schema Types",id:"zod-infer-how-to-infer-schema-types",level:4},{value:"Elaborate Zod Stuff with React Hook Form: An Edit Profile Example",id:"elaborate-zod-stuff-with-react-hook-form-an-edit-profile-example",level:3},{value:"Zod Default Values",id:"zod-default-values",level:4},{value:"Zod Schema Derivation",id:"zod-schema-derivation",level:4},{value:"Zod Refinements",id:"zod-refinements",level:4},{value:"Zod Field Value Transformations",id:"zod-field-value-transformations",level:4},{value:"Summary",id:"summary",level:2}],c=(h="EditProfile",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var h;const g={toc:p},u="wrapper";function f(e){var{components:t}=e,n=r(e,["components"]);return(0,a.yg)(u,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"Form field validation with schema is an important aspect of implementing advanced forms in a frontend application. A form schema helps define concrete shape of the data handled by a form."),(0,a.yg)("p",null,"In a TypeScript based React form, schema validation involves proper type declaration and annotation of the database entity handled. As data entities or resources in an application grows, type overlap, mapping, interconversion, derivation and other manipulation becomes inevitable. This makes static typing of form schema from scratch cumbersome in a growing codebase."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://zod.dev/"},"Zod")," is a TypeScript-first library that addresses these issues. It provides a comprehensive list of battle tested APIs for declaring and applying well typed form schema validations in a React based form. With its validator methods for declaring primitives, objects, and schema derivation APIs that mirror those in TypeScript, Zod makes static typing of form schema extremely versatile. Zod comes with handful of extra features for implementing highly specific validation rules with its validator precision, refinement and transformation methods. It is a dependency-free library that complements well with leading React based form solutions such as ",(0,a.yg)("a",{parentName:"p",href:"https://formik.org/"},"Formik")," and ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form"),"."),(0,a.yg)("p",null,"In this post, we demonstrate how to use some of the major Zod APIs for implementing properly typed form schema validations with Zod and React Hook Form, in a TypeScript based React application.\nThis post is about how to implement Zod schema validation with React Hook Form. We cover the basics with an example that adopts Zod on top of plain React Hook Form, as well as some important Zod APIs that allow more refined schema validations."),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"We first make sense of what a form schema is, its importance in large code bases and why we need proper static typing of form schema validations in a TypeScript based React application. We relate how Zod helps implement well typed form schema in a React application and discuss the role of the Zod resolver for React Hook Form in integrating Zod schemas into React Hook Form validations."),(0,a.yg)("p",null,"We cover Zod basics while migrating a form in an existing plain React Hook Form based app to Zod. We elaborate, with examples from a ",(0,a.yg)("inlineCode",{parentName:"p"},"Create Post")," form, what a ",(0,a.yg)("inlineCode",{parentName:"p"},"zod")," schema and validators are, and how to use Zod primitives (such as ",(0,a.yg)("inlineCode",{parentName:"p"},"string"),") to declare validators. We learn how they help compose complex data structures with the ",(0,a.yg)("inlineCode",{parentName:"p"},"object()")," method, and demonstrate examples of Zod's validator precision APIs such as ",(0,a.yg)("inlineCode",{parentName:"p"},"min()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"max()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"email()"),", etc. We explore how the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," method plays a central role in deciding the runtime schema used for validations. We also examine how Zod types are generated from a schema with the ",(0,a.yg)("inlineCode",{parentName:"p"},"infer()")," API."),(0,a.yg)("p",null,"In the later half of the post, we consider an ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditProfile />")," form component to implement Zod default values with the ",(0,a.yg)("inlineCode",{parentName:"p"},"default()")," method. We cover how Zod allows intuitive derivation of schemas via TypeScript-like utilities such as ",(0,a.yg)("inlineCode",{parentName:"p"},"partial()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"pick()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"omit()"),". We use them to help easily implement complex form field requirements that are normally time consuming otherwise."),(0,a.yg)("p",null,"Towards the end, we discuss Zod refinements and transformations. We examine examples of composing custom accurate rules with the ",(0,a.yg)("inlineCode",{parentName:"p"},"refine()")," method and transforming field values with ",(0,a.yg)("inlineCode",{parentName:"p"},"transform()"),"."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",null,"In order to properly follow this post and test out the examples, we expect that you come familiar with Formik or React Hook Form based React applications. If you have not worked with any of these yet, it would be useful to code along with the React Hook Form application in this Refinedev Blog post on ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/react-hook-form/"},"Essentials of Managing Form State with React Hook Form"),"."),(0,a.yg)("p",null,"It is also expected that you are familiar with basic type declaration, annotation in TypeScript as well as some type transformation utilities ",(0,a.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype"},"here"),"."),(0,a.yg)("p",null,"For this post, we start off with the code in ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/anewman15/rhf-zod"},"this repository"),". We make necessary changes during the adoption of Zod, and present relevant snippets while explaining underlying concepts."),(0,a.yg)("h2",{id:"what-is-zod-"},"What is Zod ?"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://zod.dev/"},"Zod")," is a Typescript-first form schema declaration and validation library. Zod can be used in any React application. It's API is dedicated to declaring and deriving type safe schemas for database entities that are commonly handled in typical resource based form applications."),(0,a.yg)("h3",{id:"why-we-should-use-form-schemas"},"Why We Should Use Form Schemas"),(0,a.yg)("p",null,"Form schemas in general are beneficial as they are focused on a data entity handled in a form. Schemas make form field declaration and validations easy to implement. Schemas are also useful for writing DRY (Don't Repeat Yourself). They contribute to code stability, maintainability and scalability by keeping declarations consistent as application entities increase."),(0,a.yg)("h3",{id:"why-zod-is-special-"},"Why Zod is Special ?"),(0,a.yg)("p",null,"Zod, as a well tested schema validation library, is useful in implementing feature rich form experiences with versatile solutions like Formik and React Hook Form."),(0,a.yg)("p",null,"Other schema validation libraries like ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/jquense/yup"},"Yup")," and ",(0,a.yg)("a",{parentName:"p",href:"https://joi.dev/"},"Joi")," exist. However, what sets Zod apart is its extensive static typing API surface that mirrors TypeScript's APIs for type declaration, derivation, inference and other sorts of manipulation that works in combination with the data itself. This makes Zod extremely friendly in growing TypeScript code-planets, where type mapping, derivation and data manipulation become unavoidable as application entities increase."),(0,a.yg)("h3",{id:"how-zod-works"},"How Zod Works"),(0,a.yg)("p",null,"Here's how Zod works:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Zod gives a Zod ",(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"instance"))," with the ",(0,a.yg)("inlineCode",{parentName:"li"},"zod")," object (or any other identifier) which exposes APIs for declaring validators."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Zod validators")," are individual validation declarations. The simplest of validators would be a primitive type and have relevant error messages. A validator in Zod typically represents a form field or property of a database entity. Zod's validators can add necessary precision rules, rule refinements and / or transformations."),(0,a.yg)("li",{parentName:"ul"},"Zod ",(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"primitives"))," are validator declaration methods that represent typical JS / TS primitives such as ",(0,a.yg)("inlineCode",{parentName:"li"},"string"),"s, ",(0,a.yg)("inlineCode",{parentName:"li"},"number"),"s, ",(0,a.yg)("inlineCode",{parentName:"li"},"boolean"),"s, etc. A ",(0,a.yg)("inlineCode",{parentName:"li"},"string")," validator is declared with the ",(0,a.yg)("inlineCode",{parentName:"li"},"string()")," method, a ",(0,a.yg)("inlineCode",{parentName:"li"},"number")," with the ",(0,a.yg)("inlineCode",{parentName:"li"},"number()")," method on the Zod instance, and so on."),(0,a.yg)("li",{parentName:"ul"},"Zod ",(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"object")," schemas")," represent a database entity with all its individual attributes. Zod object schemas are initialized with the ",(0,a.yg)("inlineCode",{parentName:"li"},"object()")," method and composed from primitives."),(0,a.yg)("li",{parentName:"ul"},"Data precision in Zod can be implemented with ",(0,a.yg)("strong",{parentName:"li"},"precision validator")," APIs. For example, we can implement a ",(0,a.yg)("inlineCode",{parentName:"li"},"string"),"'s precision with ",(0,a.yg)("inlineCode",{parentName:"li"},"min()"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"max()"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"email()")," and others."),(0,a.yg)("li",{parentName:"ul"},"Zod ",(0,a.yg)("strong",{parentName:"li"},"schema derivation / manipulation")," can be done according to need with full TypeScript support. For example, derivation with ",(0,a.yg)("inlineCode",{parentName:"li"},"partial()"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"pick()")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"omit()")," are common."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Validator refinements")," with custom requirements can be implemented to run nuanced form validations. Zod offers refinements with ",(0,a.yg)("inlineCode",{parentName:"li"},"refine()")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"superRefine()"),"."),(0,a.yg)("li",{parentName:"ul"},"Form field data can be transformed with ",(0,a.yg)("strong",{parentName:"li"},"Zod transformations"),". The ",(0,a.yg)("inlineCode",{parentName:"li"},"transform()")," method is used for this."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Type generation")," from a Zod schema are done with the ",(0,a.yg)("inlineCode",{parentName:"li"},"infer()")," method on the schema."),(0,a.yg)("li",{parentName:"ul"},"Zod ",(0,a.yg)("strong",{parentName:"li"},"validation runs")," are performed with the ",(0,a.yg)("inlineCode",{parentName:"li"},"parse()")," method. Running the validations checks for accuracy of the form field data according to declared validators. Any error is returned to Zod schema / form instance.")),(0,a.yg)("h3",{id:"zod-resolver-for-react-hook-form"},"Zod Resolver for React Hook Form"),(0,a.yg)("p",null,"When using Zod with React Hook Form, we need to use the Zod resolver for React Hook Form. React Hook Form supports Zod via its ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/react-hook-form/resolvers?tab=readme-ov-file#zod"},"Zod Resolver")," package. The job of the Zod resolver is to trigger validations in accordance with events taking place in a React Hook Form, translate executed validations and return the result (success or failures) to React Hook Form's instance."),(0,a.yg)("h2",{id:"zod-schema-validation-with-typescript-how-to-migrate-from-plain-react-hook-form"},"Zod Schema Validation with TypeScript: How to Migrate from Plain React Hook Form"),(0,a.yg)("p",null,"In this section, we adopt Zod schema validations in an existing plain React Hook Form based form. The code for the application is available in ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/anewman15/rhf-zod"},"this repository"),". We suggest you make a local clone and then code along from there."),(0,a.yg)("h3",{id:"starter-files"},"Starter Files"),(0,a.yg)("p",null,"The form we are going to apply Zod on is inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file. It contains a fully functioning RHF based ",(0,a.yg)("inlineCode",{parentName:"p"},"Create Post")," form. We expect you are already familiar with the code here."),(0,a.yg)("p",null,"If not, please follow this Refinedev blog post ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/blog/react-hook-form/"},"here"),"."),(0,a.yg)("h4",{id:"the-apptsx-component"},"The ",(0,a.yg)("inlineCode",{parentName:"h4"},"App.tsx")," Component"),(0,a.yg)("p",null,"The code for the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file is given below:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show App.tsx code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="./src/App.tsx"',title:'"./src/App.tsx"'},'import { useEffect } from "react";\nimport { useForm } from "react-hook-form";\nimport "./App.css";\n\nfunction App() {\n  const formInstance = useForm({\n    mode: "onChange",\n    defaultValues: {\n      title: "",\n      subtitle: "",\n      content: "",\n    },\n    criteriaMode: "all",\n    shouldFocusError: true,\n  });\n\n  useEffect(() => {\n    formInstance?.reset();\n  }, []);\n\n  return (\n    <div className="flex min-h-screen w-full items-center justify-center dark:bg-gray-950">\n      <div className="max-w-md rounded-lg bg-white px-8 py-6 shadow-md dark:bg-gray-900">\n        <h1 className="mb-4 text-center text-2xl font-bold dark:text-gray-200">\n          Create Post\n        </h1>\n        <form\n          onSubmit={formInstance?.handleSubmit((data) => {\n            setTimeout(() => {\n              console.log("data", data);\n              formInstance?.setError("subtitle", {\n                message: new Error("Server Error: Subtitle field is protected")\n                  .message,\n              });\n            }, 2000);\n          })}\n        >\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Title\n            </label>\n            <input\n              {...formInstance?.register("title", {\n                required: "Post title cannot be empty",\n              })}\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add post title"\n            />\n            {formInstance?.formState.errors?.title && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.title?.message}\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Subtitle\n            </label>\n            <input\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add a subtitle"\n              {...formInstance?.register("subtitle", {\n                maxLength: {\n                  value: 65,\n                  message: "Keep subtitle shorter",\n                },\n              })}\n            />\n            {formInstance?.formState.errors?.subtitle && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.subtitle?.message}\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Content\n            </label>\n            <textarea\n              cols={40}\n              rows={5}\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add content here"\n              {...formInstance?.register("content", {\n                required: "Content cannot be empty",\n                minLength: {\n                  value: 20,\n                  message: "Content should have enough information",\n                },\n                maxLength: {\n                  value: 1000,\n                  message:\n                    "Content has reached maximum limit of 1000 characters",\n                },\n              })}\n            ></textarea>\n            {formInstance?.formState.errors?.content && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.content?.message}\n              </span>\n            )}\n          </div>\n          <div className="flex justify-between">\n            <button\n              disabled={!formInstance?.formState?.isValid}\n              type="submit"\n              className="flex w-40 justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-300"\n            >\n              Create Post\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'))),(0,a.yg)("p",null,"This form uses a React Hook Form instance with the following configurations:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const formInstance = useForm({\n  mode: "onChange",\n  // highlight-start\n  defaultValues: {\n    title: "",\n    subtitle: "",\n    content: "",\n  },\n  // highlight-end\n  criteriaMode: "all",\n  shouldFocusError: true,\n});\n')),(0,a.yg)("p",null,"Notice, the form is in ",(0,a.yg)("inlineCode",{parentName:"p"},"onChange")," mode, which runs validations on each value change. More importantly, we have ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultValues")," set, which lets TypeScript infer the shape of the entire form's data -- in effect, the schema."),(0,a.yg)("p",null,"The form fields use React Hook Form's native validation rules set on each form field with the ",(0,a.yg)("inlineCode",{parentName:"p"},"register()")," API."),(0,a.yg)("p",null,"For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'<input\n  // highlight-start\n  {...formInstance?.register("title", {\n    required: "Post title cannot be empty",\n  })}\n  // highlight-end\n  type="text"\n  className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n  placeholder="Add post title"\n/>\n')),(0,a.yg)("p",null,"Notice also, that the React Hook Form ",(0,a.yg)("inlineCode",{parentName:"p"},"formInstance")," ",(0,a.yg)("inlineCode",{parentName:"p"},"handleSubmit()")," handler on the ",(0,a.yg)("inlineCode",{parentName:"p"},"onSubmit")," event in ",(0,a.yg)("inlineCode",{parentName:"p"},"<form>")," element:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'<form\n  onSubmit={formInstance?.handleSubmit((data) => {\n    setTimeout(() => {\n      console.log("data", data);\n      formInstance?.setError("subtitle", {\n        message: new Error("Server Error: Subtitle field is protected").message,\n      });\n    }, 2000);\n  })}\n></form>\n')),(0,a.yg)("p",null,"It would typically be some data fetching function that uses ",(0,a.yg)("inlineCode",{parentName:"p"},"fetch()")," API, React Query mutation, or Axios that performs a ",(0,a.yg)("inlineCode",{parentName:"p"},"POST")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"PUT/PATCH")," method. For the purpose of this demonstration, we emulate a dummy server side error integration on ",(0,a.yg)("inlineCode",{parentName:"p"},"subtitle")," field."),(0,a.yg)("p",null,"Please feel free to play around with the features and test out the validations. We'll compare them while replacing the rules with Zod schema validators:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-05-21-zod/zod-1.gif",alt:"typescript zod"})),(0,a.yg)("p",null,"In the following sections, we migrate the above React Hook Form based form to Zod. Before we make the necessary changes, we need to install the packages."),(0,a.yg)("h3",{id:"zod-with-react-hook-form-installing-packages"},"Zod with React Hook Form: Installing Packages"),(0,a.yg)("p",null,"We need to install the ",(0,a.yg)("inlineCode",{parentName:"p"},"npm")," package for Zod and its dependencies. Run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install zod @hookform/resolvers\n")),(0,a.yg)("p",null,"This should place both packages inside ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json"),". Take special note of ",(0,a.yg)("inlineCode",{parentName:"p"},"@hookform-resolvers")," package. This is an integration package for using schema validation libraries with React Hook Form. We need to use the Zod resolver from this package. Otherwise, Zod alone won't work with React Hook Form."),(0,a.yg)("h3",{id:"how-to-implement-zod-schema-validation-with-react-hook-form"},"How to Implement Zod Schema Validation with React Hook Form"),(0,a.yg)("p",null,"Now, let's make changes to the existing form. In the below adoption, we instantiate a Zod ",(0,a.yg)("inlineCode",{parentName:"p"},"object")," schema with individual validators declared for the form fields:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show updated `App.tsx` with Zod schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="./src/App.tsx"',title:'"./src/App.tsx"'},'import { useEffect } from "react";\nimport { useForm } from "react-hook-form";\nimport * as zod from "zod";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport "./App.css";\n\nfunction App() {\n  const subtitle = zod.string().max(65, { message: "Keep subtitle shorter" });\n  const content = zod\n    .string()\n    .min(20, { message: "Content should have enough information" })\n    .max(1000, {\n      message: "Content has reached maximum limit of 1000 characters",\n    });\n\n  const PostSchema = zod.object({\n    title: zod.string().min(1, { message: "Title cannot be empty" }),\n    subtitle,\n    content,\n  });\n\n  type TPost = zod.infer<typeof PostSchema>;\n\n  const formInstance = useForm({\n    resolver: zodResolver(PostSchema),\n    mode: "onChange",\n    defaultValues: {\n      title: "",\n      subtitle: "",\n      content: "",\n    },\n    criteriaMode: "all",\n    shouldFocusError: true,\n  });\n\n  useEffect(() => {\n    formInstance?.reset();\n  }, []);\n\n  return (\n    <div className="flex min-h-screen w-full items-center justify-center dark:bg-gray-950">\n      <div className="max-w-md rounded-lg bg-white px-8 py-6 shadow-md dark:bg-gray-900">\n        <h1 className="mb-4 text-center text-2xl font-bold dark:text-gray-200">\n          Create Post\n        </h1>\n        <form\n          onSubmit={formInstance?.handleSubmit((data) => {\n            setTimeout(() => {\n              console.log("data", data);\n              formInstance?.setError("subtitle", {\n                message: new Error("Server Error: Subtitle field is protected")\n                  .message,\n              });\n            }, 2000);\n          })}\n        >\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Title\n            </label>\n            <input\n              {...formInstance?.register("title")}\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add post title"\n            />\n            {formInstance?.formState.errors?.title && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.title?.message}\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Subtitle\n            </label>\n            <input\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add a subtitle"\n              {...formInstance?.register("subtitle")}\n            />\n            {formInstance?.formState.errors?.subtitle && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.subtitle?.message}\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Content\n            </label>\n            <textarea\n              cols={40}\n              rows={5}\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Add content here"\n              {...formInstance?.register("content")}\n            ></textarea>\n            {formInstance?.formState.errors?.content && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.content?.message}\n              </span>\n            )}\n          </div>\n          <div className="flex justify-between">\n            <button\n              disabled={!formInstance?.formState?.isValid}\n              type="submit"\n              className="flex w-40 justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-300"\n            >\n              Create Post\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n'))),(0,a.yg)("p",null,"Notice, we have applied Zod validation rules in a ",(0,a.yg)("inlineCode",{parentName:"p"},"PostSchema")," object and we have passed it to ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"resolver")," configuration property."),(0,a.yg)("p",null,"Later inside the JSX, we have removed React Hook Form native validation rules from each form field:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'<input\n  // highlight-next-line\n  {...formInstance?.register("title")} // Field needs to be only registered, with no rules passed\n  type="text"\n  placeholder="Add post title"\n/>\n')),(0,a.yg)("p",null,"This is because, React Hook Form now relies on the Zod Resolver to handle validations."),(0,a.yg)("p",null,"In the sections below, we examine the Zod related concepts and explain them in snippets."),(0,a.yg)("h4",{id:"zod-with-react-hook-form-how-to-use-an-object-schema"},"Zod with React Hook Form: How to Use an Object Schema"),(0,a.yg)("p",null,"In the above changes, we have instantiated a ",(0,a.yg)("inlineCode",{parentName:"p"},"PostSchema")," object with ",(0,a.yg)("inlineCode",{parentName:"p"},"zod.object()")," method:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const PostSchema = zod.object({\n  title: zod.string().min(1, { message: "Title cannot be empty" }),\n  subtitle,\n  content,\n});\n')),(0,a.yg)("p",null,"An object schema typically represents a database entity with its properties. So, the fields here stand for the properties of the data entity."),(0,a.yg)("p",null,"We have to then pass this Zod schema to ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," React Hook Form hook, to configure the value of the ",(0,a.yg)("inlineCode",{parentName:"p"},"resolver")," option with the ",(0,a.yg)("inlineCode",{parentName:"p"},"zodResolver()")," function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const formInstance = useForm({\n  resolver: zodResolver(PostSchema),\n  // other config options\n});\n")),(0,a.yg)("p",null,"Adding the schema declaration object to ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"zodResolver()")," integrates it to React Hook Form's form instance. All Zod validations are run according to React Hook Form configurations, and errors are returned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"formInstance"),"."),(0,a.yg)("h4",{id:"how-to-declare-zod-validators"},"How to Declare Zod Validators"),(0,a.yg)("p",null,"Notice, we have used a validator inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"PostSchema")," object."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'title: zod.string().min(1, { message: "Title cannot be empty" }),\n')),(0,a.yg)("p",null,"Zod validators help declare individual validation rules for form fields. They represent a single property in the database entity."),(0,a.yg)("p",null,"As you can see in the above ",(0,a.yg)("inlineCode",{parentName:"p"},"title")," attribute, we can declare a validator inside an ",(0,a.yg)("inlineCode",{parentName:"p"},"object")," schema."),(0,a.yg)("p",null,"We can declare field level schemas seprarately as well. As with ",(0,a.yg)("inlineCode",{parentName:"p"},"subtitle")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"content"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const subtitle = zod.string().max(65, { message: "Keep subtitle shorter" });\nconst content = zod\n  .string()\n  .min(20, { message: "Content should have enough information" })\n  .max(1000, {\n    message: "Content has reached maximum limit of 1000 characters",\n  });\n')),(0,a.yg)("p",null,"Notice, we can chain validators with their respectie methods. In ",(0,a.yg)("inlineCode",{parentName:"p"},"subtitle")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"content"),", we have chained the ",(0,a.yg)("inlineCode",{parentName:"p"},"min()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"max()")," validators to ",(0,a.yg)("inlineCode",{parentName:"p"},"string()"),"."),(0,a.yg)("h4",{id:"zod-validator-syntax-zod-primitives-and-field-precision-validators"},"Zod Validator Syntax: Zod Primitives and Field Precision Validators"),(0,a.yg)("p",null,"In the validator declarations above, we have used a ",(0,a.yg)("inlineCode",{parentName:"p"},"string()")," primitive method that represents the TypeScript ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," primitive type. Primitives decide the TypeScript type of the form field entry. Zod has support for all TypeScript primitive types. A full list can be found ",(0,a.yg)("a",{parentName:"p",href:"https://zod.dev/?id=primitives"},"here"),"."),(0,a.yg)("p",null,"On top of primitives, we can impose field precision rules with specifiers such as ",(0,a.yg)("inlineCode",{parentName:"p"},"min()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"max()"),". The syntax for each validator starts with the primitive, followed by chained precision validators."),(0,a.yg)("p",null,"Notice that a precision validator follows an intuitive syntax. It takes the ",(0,a.yg)("inlineCode",{parentName:"p"},"message")," in an object, after the specifier value:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'.min(20, { message: "Content should have enough information" })\n.max(1000, { message: "Content has reached maximum limit of 1000 characters" });\n')),(0,a.yg)("p",null,"With the changes above, we get the same validations we implemented in the original code. We have effectively replaced Reach Hook Form validation rules with Zod schemas."),(0,a.yg)("p",null,"Notice that, other features of React Hook Form, such as server error integration in the ",(0,a.yg)("inlineCode",{parentName:"p"},"handleSubmit")," callback we used on ",(0,a.yg)("inlineCode",{parentName:"p"},"onSubmit")," event, remain unaffected:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-05-21-zod/zod-2.png",alt:"typescript zod validator syntax"})),(0,a.yg)("h4",{id:"zod-validation-rules-parsing"},"Zod Validation Rules Parsing"),(0,a.yg)("p",null,"Zod parses validation rules according to configurations set in React Hook Form strategy and revalidation. By default, it invokes the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," method on configured React Hook Form events. Parsing takes place thanks to the ",(0,a.yg)("inlineCode",{parentName:"p"},"zodResolver")," which acts as middleman between Zod and hook."),(0,a.yg)("p",null,"Apart from that, validation runs can be triggered manually by calling ",(0,a.yg)("inlineCode",{parentName:"p"},"safeParse()")," . The ",(0,a.yg)("inlineCode",{parentName:"p"},"safeParse()")," method is called on the schema. It accepts the schema or form field data. If the data passes all validations, it returns an object with ",(0,a.yg)("inlineCode",{parentName:"p"},"success: true")," and associated data. Otherwise, it returns ",(0,a.yg)("inlineCode",{parentName:"p"},"success: false")," and the stack information without breaking the app:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'PostSchema.safeParse({\n  title: "General Zod of Candor",\n  subtitle: "Executing...",\n  content: "Kneel before Kal El.",\n}); // Returns { success: true, data: {...} }\n\nPostSchema.safeParse({\n  title: "General Zod of Candor",\n  subtitle: "Executing... Running now and forever",\n  content: "Kneel",\n}); // Returns { success: false, error: [...] }\n')),(0,a.yg)("admonition",{type:"warning"},(0,a.yg)("p",{parentName:"admonition"},"We can use the Zod ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," method to trigger validations. However, ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," is not safe as it throws a ZodError that breaks the application. In such a case, we have to handle errors gracefully inside a ",(0,a.yg)("inlineCode",{parentName:"p"},"try...catch")," block. You can find more information about ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," ",(0,a.yg)("a",{parentName:"p",href:"https://zod.dev/?id=parse"},"here"),".")),(0,a.yg)("h4",{id:"zod-infer-how-to-infer-schema-types"},"Zod ",(0,a.yg)("inlineCode",{parentName:"h4"},"infer()"),": How to Infer Schema Types"),(0,a.yg)("p",null,"Zod sets static types for all schema declared on the ",(0,a.yg)("inlineCode",{parentName:"p"},"zod")," instance. The type for a schema can be produced with the ",(0,a.yg)("inlineCode",{parentName:"p"},"infer<>")," method."),(0,a.yg)("p",null,"For example, we can store the static type for ",(0,a.yg)("inlineCode",{parentName:"p"},"PostSchema")," like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"type TPost = zod.infer<typeof PostSchema>;\n/*\n  {\n    title: string;\n    subtitle: string;\n    content: string;\n  }\n*/\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"TPost")," can then be used for annotating the ",(0,a.yg)("inlineCode",{parentName:"p"},"post")," resource elsewhere."),(0,a.yg)("h3",{id:"elaborate-zod-stuff-with-react-hook-form-an-edit-profile-example"},"Elaborate Zod Stuff with React Hook Form: An Edit Profile Example"),(0,a.yg)("p",null,"In this section, we work with a form for ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditProfile />")," component. While doing so, we explore some nuanced Zod schema features."),(0,a.yg)("p",null,"The code for the ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditProfile />")," component looks like this:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show `",(0,a.yg)(c,{mdxType:"EditProfile"}),"` component code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="./src/components/edit-profile.tsx"',title:'"./src/components/edit-profile.tsx"'},'import { ReactNode, useEffect } from "react";\nimport { useForm } from "react-hook-form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport * as zod from "zod";\n\nexport function EditProfile() {\n  const first_name = zod\n    .string()\n    .min(1, { message: "First name cannot be empty" })\n    .max(50, { message: "Really? This long ?" })\n    .default("Dru");\n\n  const last_name = zod\n    .string()\n    .min(1, { message: "Last name cannot be empty" })\n    .max(50, { message: "Really? This long ?" })\n    .default("Zod");\n\n  const email = zod\n    .string()\n    .email()\n    .refine((e) => e.slice(e.length - 3).includes(".kr"), {\n      message: "This should be a Kryptonian email",\n    })\n    .default("general.zod@candor.mil.kr");\n\n  const website = email.transform((e) => `https://${e.split("@")?.[1]}`);\n  const ProfileSchema = zod.object({\n    username: zod\n      .string()\n      .transform((u) => u.split(" ").join("_"))\n      .default("general_zod"),\n    first_name,\n    last_name,\n    email,\n  });\n\n  const formInstance = useForm({\n    resolver: zodResolver(ProfileSchema),\n    mode: "onChange",\n    defaultValues: ProfileSchema.parse({}),\n    criteriaMode: "all",\n    shouldFocusError: true,\n    reValidateMode: "onSubmit",\n  });\n\n  useEffect(() => {\n    formInstance?.reset();\n  }, []);\n\n  return (\n    <div className="flex min-h-screen w-full items-center justify-center dark:bg-gray-950">\n      <div className="max-w-md rounded-lg bg-white px-8 py-6 shadow-md dark:bg-gray-900">\n        <h1 className="mb-4 text-center text-2xl font-bold dark:text-gray-200">\n          Edit Profile\n        </h1>\n        <form\n          onSubmit={formInstance?.handleSubmit((data) => {\n            setTimeout(() => {\n              console.log("data", data);\n            }, 2000);\n          })}\n        >\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Username\n            </label>\n            <input\n              {...formInstance?.register("username")}\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Choose a username"\n            />\n            {formInstance?.formState.errors?.username && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.username?.message as ReactNode}\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              First Name\n            </label>\n            <input\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="First name"\n              {...formInstance?.register("first_name")}\n            />\n            {formInstance?.formState.errors?.first_name && (\n              <span className="text-xs text-red-500">\n                {\n                  formInstance?.formState.errors?.first_name\n                    ?.message as ReactNode\n                }\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Last Name\n            </label>\n            <input\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="Last name"\n              {...formInstance?.register("last_name")}\n            />\n            {formInstance?.formState.errors?.last_name && (\n              <span className="text-xs text-red-500">\n                {\n                  formInstance?.formState.errors?.last_name\n                    ?.message as ReactNode\n                }\n              </span>\n            )}\n          </div>\n          <div className="mb-4">\n            <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">\n              Email\n            </label>\n            <input\n              type="text"\n              className="w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500"\n              placeholder="email@exmaple.kr"\n              {...formInstance?.register("email")}\n            ></input>\n            {formInstance?.formState.errors?.email && (\n              <span className="text-xs text-red-500">\n                {formInstance?.formState.errors?.email?.message as ReactNode}\n              </span>\n            )}\n          </div>\n          <div className="flex justify-between">\n            <button\n              type="submit"\n              className="flex w-40 justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-300"\n            >\n              Save Changes\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n'))),(0,a.yg)("p",null,"You can import this component into ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," and then place it inside the JSX."),(0,a.yg)("p",null,"Let's now examine and discuss the Zod concepts implemented in this form."),(0,a.yg)("h4",{id:"zod-default-values"},"Zod Default Values"),(0,a.yg)("p",null,"In Zod, we have to specify default values on the validator itself, with the ",(0,a.yg)("inlineCode",{parentName:"p"},"default()")," method. Like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const first_name = zod\n  .string()\n  .min(1, { message: "First name cannot be empty" })\n  .max(50, { message: "Really? This long ?" })\n  // highlight-next-line\n  .default("Dru");\n\nconst last_name = zod\n  .string()\n  .min(1, { message: "Last name cannot be empty" })\n  .max(50, { message: "Really? This long ?" })\n  // highlight-next-line\n  .default("Zod");\n')),(0,a.yg)("p",null,"These, however, do not get relayed to React Hook Form's ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultValues")," attribute, so they do not get displayed on form fields."),(0,a.yg)("p",null,"For them to show up in the form fields, we have to parse the schema and then pass the output to ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()"),"'s ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultValues")," configuration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const formInstance = useForm({\n  resolver: zodResolver(ProfileSchema),\n  mode: "onChange",\n  // highlight-next-line\n  defaultValues: ProfileSchema.parse({}),\n  criteriaMode: "all",\n  shouldFocusError: true,\n  reValidateMode: "onSubmit",\n});\n')),(0,a.yg)("p",null,"With the empty object passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"ProfileSchema.parse({})"),", the default values specified with Zod ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultValue()")," before are set to their fields."),(0,a.yg)("h4",{id:"zod-schema-derivation"},"Zod Schema Derivation"),(0,a.yg)("p",null,"Zod supports schema derivation and related type manipulations. For example, in cases where we need to set some properties to ",(0,a.yg)("inlineCode",{parentName:"p"},"optional"),", we can apply the ",(0,a.yg)("inlineCode",{parentName:"p"},"partial()")," method to derive a new type:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const ProfileOptional = ProfileSchema.partial();\nconst ProfileOptionalLastName = ProfileSchema.partial({\n  last_name: true,\n});\n\ntype TProfileOptional = zod.infer<typeof ProfileOptional>;\n/*\n  type TProfileOptional = {\n    username?: string | undefined;\n    first_name?: string | undefined;\n    last_name?: string | undefined;\n    email?: string | undefined;\n  };\n*/\n\ntype TProfileOptionalLastName = zod.infer<typeof ProfileOptionalLastName>;\n/*\n  type TProfileOptionalLastName = {\n    username: string;\n    first_name: string;\n    email: string;\n    last_name?: string | undefined;\n  };\n*/\n")),(0,a.yg)("p",null,"Notice, with no arguments passed, we applied partial flag to all items. We can make an individual field optional by passing setting it to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Zod schema derivation utilities are used to manipulate form schema. They mirror TypeScript utilities with similar names and produce static types that they represent in TypeScript."),(0,a.yg)("p",{parentName:"admonition"},"For example, ",(0,a.yg)("inlineCode",{parentName:"p"},"pick()")," produces a type with the same type transformation impact as TypeScript ",(0,a.yg)("inlineCode",{parentName:"p"},"Pick<>"),". ",(0,a.yg)("inlineCode",{parentName:"p"},"omit()")," brings the same type derivations as TypeScript ",(0,a.yg)("inlineCode",{parentName:"p"},"Omit<>"),".")),(0,a.yg)("h4",{id:"zod-refinements"},"Zod Refinements"),(0,a.yg)("p",null,"Zod refinements allow us to attain fine grained specificity in validation rules, which is not normally possible with primitives and field precision methods."),(0,a.yg)("p",null,"For example, we imposed our ",(0,a.yg)("inlineCode",{parentName:"p"},"email")," field to be an ",(0,a.yg)("inlineCode",{parentName:"p"},"email()"),". And we want it to be only a Kryptonian email, with last three characters being ",(0,a.yg)("inlineCode",{parentName:"p"},".kr"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const email = zod\n  .string()\n  .email()\n  // highlight-next-line\n  .refine((e) => e.slice(e.length - 3).includes(".kr"), {\n    message: "This should be a Kryptonian email",\n  })\n  .default("general.zod@candor.mil.kr");\n')),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-05-21-zod/zod-3.png",alt:"typescript zod refinements"})),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"refine()")," method is a convenient method for implementing very specific validation rules. More verbose validators can be defined with the ",(0,a.yg)("inlineCode",{parentName:"p"},"superRefine()")," method."),(0,a.yg)("p",{parentName:"admonition"},"For details, see the docs ",(0,a.yg)("a",{parentName:"p",href:"https://zod.dev/?id=superrefine"},"here"),".")),(0,a.yg)("h4",{id:"zod-field-value-transformations"},"Zod Field Value Transformations"),(0,a.yg)("p",null,"Zod transformations allow us to transform the value of a form field."),(0,a.yg)("p",null,"For example, in the ",(0,a.yg)("inlineCode",{parentName:"p"},"username")," field, we want to convert ",(0,a.yg)("inlineCode",{parentName:"p"},"&nbsp;")," (space) into an ",(0,a.yg)("inlineCode",{parentName:"p"},"&lowbar;")," (underscore):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'const ProfileSchema = zod.object({\n  // highlight-next-line\n  username: zod\n    .string()\n    .transform((u) => u.split(" ").join("_"))\n    .default("general_zod"),\n  first_name,\n  last_name,\n  email,\n});\n')),(0,a.yg)("p",null,"In this snippet, we are transforming the input so that all spaces are replaced by an underscore. The transformed data is stored inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"formInstance"),". We have logged the form data to console inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"handleSubmit")," callback. You can verify this when you look at the console after submitting the form. The ",(0,a.yg)("inlineCode",{parentName:"p"},"username")," field does not contain any space -- as all of them are turned into a lowbar:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'{\n  // highlight-next-line\n  "username": "general_dru_zod",\n  "first_name": "Dru",\n  "last_name": "Zod",\n  "email": "general.zod@candor.mil.kr"\n}\n')),(0,a.yg)("p",null,"As you can see, Zod refinements and transformations are useful for easily implementing subtle form requirements that are difficult to implement from scratch."),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this post, we learned about how to implement Zod schema validations in a React Hook Form based application."),(0,a.yg)("p",null,"We first explored what schema validations are, why we need them and how Zod provides battle tested solutions for type safe schemas in a React Hook application with Zod Resolver."),(0,a.yg)("p",null,"With an example of migrating existing ",(0,a.yg)("inlineCode",{parentName:"p"},"Create Post")," React Hook Form based validations, we learned about how to declare Zod validators with ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," primitives and compose object schemas from them. We saw examples of using ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," related field precision validators such as ",(0,a.yg)("inlineCode",{parentName:"p"},"min()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"max()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"email()"),". We also made sense of how Zod produces TypeScript types from a schema with ",(0,a.yg)("inlineCode",{parentName:"p"},"infer()")," and how custom parsing is executed with the ",(0,a.yg)("inlineCode",{parentName:"p"},"parse()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"safeParse()")," methods."),(0,a.yg)("p",null,"Later on, we implemented subtle form features that are easily made possibly by Zod. We added default values the Zod way with the ",(0,a.yg)("inlineCode",{parentName:"p"},"default()")," method. With ",(0,a.yg)("inlineCode",{parentName:"p"},"refine()")," API, we implemented a custom validator that imposes an ",(0,a.yg)("inlineCode",{parentName:"p"},"email()")," field to belong to ",(0,a.yg)("inlineCode",{parentName:"p"},".kr"),". Finally, we learned how the ",(0,a.yg)("inlineCode",{parentName:"p"},"transform()")," method helps us convert a field data to something of our liking to be included in the form data set."))}f.isMDXComponent=!0}}]);