"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[40288],{88123:(e,n,r)=>{r.d(n,{O:()=>c});var t=r(68835),o=r(37953),i=r(86743),a=r(59451),s=r(62201);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,t.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function m(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),t.forEach((function(n){m(e,n,r[n])}))}return e}function u(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})),e}function p(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const c=e=>"nextjs"===(null==e?void 0:e.template)?o.createElement(y,e):o.createElement(f,e),f=e=>{var n,r,m,c,f,g,{startRoute:y,showNavigator:v,showLineNumbers:x,showOpenInCodeSandbox:b,initialPercentage:P=50,dependencies:T,showReadOnly:w,options:R={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,t.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,t.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,t.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,t.A)("h-full","!gap-0"),"sp-console-header-button":(0,t.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,t.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,t.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:N="react-ts",customSetup:k,files:C,previewOnly:F,layout:S,height:B=420,wrapperClassName:D,className:A,showFiles:L=!1,showConsole:E=!1,hidePreview:I=!1}=e,W=p(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[G,q]=o.useState(!1);o.useEffect((()=>{q(!0)}),[]);const{colorMode:O}=(0,s.G)();var M,U;null!=R||(R={}),null!==(M=(f=R).resizablePanels)&&void 0!==M||(f.resizablePanels=!0),null!==(U=(g=R).editorWidthPercentage)&&void 0!==U||(g.editorWidthPercentage=null!=P?P:50);const j={showTabs:R.showTabs,showLineNumbers:R.showLineNumbers,showInlineErrors:R.showInlineErrors,wrapContent:R.wrapContent,closableTabs:R.closableTabs,initMode:R.initMode,extensions:null===(n=R.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(r=R.codeEditor)||void 0===r?void 0:r.extensionsKeymap,readOnly:R.readOnly,showReadOnly:null!=w?w:R.showReadOnly,additionalLanguages:null===(m=R.codeEditor)||void 0===m?void 0:m.additionalLanguages},z={activeFile:R.activeFile,visibleFiles:R.visibleFiles,recompileMode:R.recompileMode,recompileDelay:R.recompileDelay,autorun:R.autorun,autoReload:R.autoReload,bundlerURL:R.bundlerURL,startRoute:R.startRoute,skipEval:R.skipEval,fileResolver:R.fileResolver,initMode:R.initMode,initModeObserverOptions:R.initModeObserverOptions,externalResources:R.externalResources,logLevel:R.logLevel,classes:R.classes},[H,_]=o.useState(!1),{onHandleMouseDown:V,horizontalSize:X}=(({initialSize:e=50})=>{const[n,r]=o.useState(e),t=o.useRef(null),i=e=>{if(!t.current)return;const n=t.current.parentElement;if(!n)return;const{left:o,width:i}=n.getBoundingClientRect(),a=(e.clientX-o)/i*100,s=Math.min(Math.max(a,25),75);r(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},a=()=>{var e;const n=null===(e=t.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),t.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",i),document.body.addEventListener("mouseup",a),()=>{document.body.removeEventListener("mousemove",i),document.body.removeEventListener("mouseup",a)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{t.current=e.target}),[])}})({initialSize:R.editorWidthPercentage}),$=!F&&!(null==S?void 0:S.includes("col"));var J,Y,K,Z,Q;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,t.A)("pb-6","refine-sandpack-wrapper",D)},o.createElement("div",{className:(0,t.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",A)},o.createElement(a.l5,l({key:`${N}-${O}-${G}`,customSetup:l({dependencies:T},k),files:C,options:u(l({},z),{classes:u(l({},z.classes),{"sp-layout":(0,t.A)(null===(c=z.classes)||void 0===c?void 0:c["sp-layout"],E&&"!rounded-bl-none !rounded-br-none")})}),template:N,theme:"light"===O?u(l({},i.Zw),{colors:u(l({},i.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):u(l({},i.hc),{colors:u(l({},i.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,t.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},W),o.createElement(a.am,{className:(0,t.A)("col"===S&&"!flex-col","col-reverse"===S&&"!flex-col-reverse")},L&&o.createElement(a.Lm,{autoHiddenFiles:!0,style:{height:null!==(J=R.editorHeight)&&void 0!==J?J:B}}),!F&&o.createElement(a.cW,u(l({},j),{showLineNumbers:x,closableTabs:L,initMode:"lazy",style:u(l({height:null!==(Y=R.editorHeight)&&void 0!==Y?Y:B},(null==S?void 0:S.includes("col"))?{flex:"initial"}:{flexGrow:X,flexShrink:X,flexBasis:0}),{overflow:"hidden"})})),$?o.createElement(d,{onMouseDown:V,horizontalSize:X}):null,I?null:o.createElement(o.Fragment,null,o.createElement(a.G5,{showOpenInCodeSandbox:b,startRoute:y,showNavigator:null!=v?v:R.showNavigator,showRefreshButton:R.showRefreshButton,style:u(l({display:I?"none":"flex"},(null==S?void 0:S.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-X,flexShrink:100-X,flexBasis:0,width:F?"100%":100-X+"%"}),{gap:0,height:null!==(K=R.editorHeight)&&void 0!==K?K:B})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,t.A)("w-12","h-12","rounded-full")}))))),E?o.createElement(a.X2,{style:u(l({height:200},(null==S?void 0:S.includes("col"))?{flex:"initial"}:{flexGrow:X,flexShrink:X,flexBasis:0}),{overflow:"hidden"})}):null)),o.createElement("div",{className:(0,t.A)(""),style:{height:Number(null!==(Z=R.editorHeight)&&void 0!==Z?Z:B)+2}}),o.createElement("div",{className:(0,t.A)((null==S?void 0:S.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Q=R.editorHeight)&&void 0!==Q?Q:B)+2}}),o.createElement("div",{className:(0,t.A)(E?"block":"hidden","h-[200px]")})),o.createElement(h,{files:C,dependencies:T}))},h=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const r=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("h6",null,"Code Example"),r.map((n=>o.createElement("div",{"data-filename":n,key:n},o.createElement("pre",null,`// file: ${n} \n`,g(e[n]))))))},g=e=>"string"==typeof e?e:"code"in e?e.code:"",y=e=>{const n={hidePreview:!0,showConsole:!1};return o.createElement(f,u(l({},n,e),{template:"react-ts"}))}},38822:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>ke,contentTitle:()=>Re,default:()=>Ie,frontMatter:()=>we,metadata:()=>Ne,toc:()=>Ce});var t=r(37953),o=r(58860),i=r(88123);function a(){return t.createElement(i.O,{showNavigator:!0,previewOnly:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products",files:{"/App.tsx":{code:m,active:!0},"/pages/products/index.tsx":{code:d},"/pages/products/list.tsx":{code:l},"/pages/products/show.tsx":{code:u},"/pages/products/edit.tsx":{code:p},"/pages/products/create.tsx":{code:c},"/auth-provider.tsx":{code:s,hidden:!0}}})}const s='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),d='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),m='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n  RefineSnackbarProvider,\n  AuthPage,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(\n                    "https://api.fake-rest.refine.dev",\n                )}\n                notificationProvider={notificationProvider}\n                authProvider={authProvider}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                        meta: {\n                            canDelete: true,\n                        },\n                    },\n                ]}\n                options={{\n                    syncWithLocation: true,\n                }}\n            >\n                <Routes>\n                  <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                    <Route\n                        element={\n                            <ThemedLayout>\n                                <Outlet />\n                            </ThemedLayout>\n                        }\n                    >\n                        <Route index element={<NavigateToResource resource="products" />} />\n                        <Route path="/products" element={<Outlet />}>\n                          <Route index element={<ProductList />} />\n                          <Route path="create" element={<ProductCreate />} />\n                          <Route path=":id" element={<ProductShow />} />\n                          <Route path=":id/edit" element={<ProductEdit />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                  </Route>\n                  <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                    <Route\n                      path="/login"\n                      element={(\n                        <AuthPage\n                          type="login"\n                          formProps={{\n                            defaultValues: {\n                              email: "demo@refine.dev",\n                              password: "demodemo",\n                            },\n                          }}\n                        />\n                      )}\n                    />\n                    <Route path="/register" element={<AuthPage type="register" />} />\n                    <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                    <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                  </Route>\n                </Routes>\n            </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),l='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),u='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nexport const ProductShow = () => {\n  const { result: product, query } = useShow();\n  const { data, isLoading } = query;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <NumberField value={product?.price}  options={{ style: "currency", currency: "USD" }} />\n      </Stack>\n    </Show>\n  );\n};\n'.trim(),p='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n'.trim(),c='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function f(){return t.createElement(i.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-hook-form":"^7.57.0","react-router":"^7.0.2","@refinedev/react-router":"latest"},startRoute:"/products",files:{"/App.tsx":{code:y,active:!0},"/pages/products/index.tsx":{code:g},"/pages/products/list.tsx":{code:v},"/pages/products/show.tsx":{code:x},"/pages/products/edit.tsx":{code:b},"/pages/products/create.tsx":{code:P},"/auth-provider.tsx":{code:h,hidden:!0}}})}const h='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),g='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),y='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n  RefineSnackbarProvider,\n  AuthPage,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(\n                    "https://api.fake-rest.refine.dev",\n                )}\n                notificationProvider={notificationProvider}\n                authProvider={authProvider}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                        meta: {\n                            canDelete: true,\n                        },\n                    },\n                ]}\n                options={{\n                    syncWithLocation: true,\n                }}\n            >\n                <Routes>\n                  <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                    <Route\n                        element={\n                            <ThemedLayout>\n                                <Outlet />\n                            </ThemedLayout>\n                        }\n                    >\n                        <Route index element={<NavigateToResource resource="products" />} />\n                        <Route path="/products" element={<Outlet />}>\n                          <Route index element={<ProductList />} />\n                          <Route path="create" element={<ProductCreate />} />\n                          <Route path=":id" element={<ProductShow />} />\n                          <Route path=":id/edit" element={<ProductEdit />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                  </Route>\n                  <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                    <Route\n                      path="/login"\n                      element={(\n                        <AuthPage\n                          type="login"\n                          formProps={{\n                            defaultValues: {\n                              email: "demo@refine.dev",\n                              password: "demodemo",\n                            },\n                          }}\n                        />\n                      )}\n                    />\n                    <Route path="/register" element={<AuthPage type="register" />} />\n                    <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                    <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                  </Route>\n                </Routes>\n            </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),v='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),x='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nexport const ProductShow = () => {\n  const { result: product, query } = useShow();\n  const { data, isLoading } = query;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <TextField value={product?.price} />\n      </Stack>\n    </Show>\n  );\n};\n'.trim(),b='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n'.trim(),P='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function T(){return t.createElement(i.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-hook-form":"^7.57.0","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:N,active:!0},"/pages/products/index.tsx":{code:k},"/pages/products/[id].tsx":{code:C},"/pages/products/[id]/edit.tsx":{code:F},"/pages/products/create.tsx":{code:S},"/pages/login.tsx":{code:R},"/src/auth-provider.tsx":{code:w,hidden:!0}}})}const w='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),R='\nimport React from "react";\nimport { AuthPage } from "@refinedev/mui";\nimport authProvider from "../src/auth-provider";\n\nimport type { ExtendedNextPage } from "./_app";\n\nconst Login: ExtendedNextPage = () => {\n  return <AuthPage type="login" />;\n};\n\nLogin.noLayout = true;\n\nexport default Login;\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (authenticated) {\n    return {\n      redirect: {\n        destination: "/products",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n'.trim(),N='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayout, notificationProvider, RefineSnackbarProvider } from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport authProvider from "../src/auth-provider";\n\nexport type ExtendedNextPage = NextPage & {\n  noLayout?: boolean;\n};\n\ntype ExtendedAppProps = AppProps & {\n  Component: ExtendedNextPage;\n};\n\nfunction App({ Component, pageProps }: ExtendedAppProps) {\n  const renderComponent = () => {\n      if (Component.noLayout) {\n          return <Component {...pageProps} />;\n      }\n\n      return (\n          <ThemedLayout>\n              <Component {...pageProps} />\n          </ThemedLayout>\n      );\n  }\n\n  return (\n    <ThemeProvider theme={RefineThemes.Blue}>\n      <CssBaseline />\n      <GlobalStyles\n          styles={{ html: { WebkitFontSmoothing: "auto" } }}\n      />\n      <RefineSnackbarProvider>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          notificationProvider={notificationProvider}\n          authProvider={authProvider}\n          resources={[\n            {\n              name: "products",\n              list: "/products",\n              show: "/products/:id",\n              edit: "/products/:id/edit",\n              create: "/products/create"\n            },\n          ]}\n          options={{ syncWithLocation: true }}\n        >\n          {renderComponent()}\n        </Refine>\n      </RefineSnackbarProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n'.trim(),k='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductList() {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),C='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductShow() {\n  const { result: product, query } = useShow();\n  const { data, isLoading } = query;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <TextField value={product?.price} />\n      </Stack>\n    </Show>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),F='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nimport authProvider from "../../../src/auth-provider";\n\nexport default function ProductEdit() {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),S='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductCreate() {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim();function B(){return t.createElement(i.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-hook-form":"^7.57.0","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:A,active:!0},"/app/routes/_protected.tsx":{code:L},"/app/routes/_protected.products._index.tsx":{code:W},"/app/routes/_protected.products.$id.tsx":{code:G},"/app/routes/_protected.products.$id.edit.tsx":{code:q},"/app/routes/_protected.products.create.tsx":{code:O},"/app/routes/_auth.tsx":{code:E},"/app/routes/_auth.login.tsx":{code:I},"/app/auth-provider.tsx":{code:D,hidden:!0}}})}const D='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),A='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { notificationProvider, RefineThemes, RefineSnackbarProvider } from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport authProvider from "./auth-provider";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ThemeProvider theme={RefineThemes.Blue}>\n          <CssBaseline />\n          <GlobalStyles\n              styles={{ html: { WebkitFontSmoothing: "auto" } }}\n          />\n          <RefineSnackbarProvider>\n            <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              authProvider={authProvider}\n              notificationProvider={notificationProvider}\n              resources={[\n                {\n                  name: "products",\n                  list: "/products",\n                  show: "/products/:id",\n                  edit: "/products/:id/edit",\n                  create: "/products/create",\n                },\n              ]}\n              options={{ syncWithLocation: true }}\n            >\n              <Outlet />\n            </Refine>\n          </RefineSnackbarProvider>\n        </ThemeProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),L='\nimport { ThemedLayout } from "@refinedev/mui";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\nimport authProvider from "../auth-provider";\n\nexport default function AuthenticatedLayout() {\n    // `<ThemedLayout>` is only applied to the authenticated users\n    return (\n        <ThemedLayout>\n            <Outlet />\n        </ThemedLayout>\n    );\n}\n\n/**\n * We\'re checking if the current session is authenticated.\n * If not, we\'re redirecting the user to the login page.\n * This is applied for all routes that are nested under this layout (_protected).\n */\nexport async function loader({ request }: LoaderFunctionArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (!authenticated) {\n        throw redirect(redirectTo ?? "/login");\n    }\n\n    return {};\n}\n'.trim(),E='\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\nimport { authProvider } from "~/authProvider";\n\nexport default function AuthLayout() {\n    // no layout is applied for the auth routes\n    return <Outlet />;\n}\n\n/**\n * If the current session is authenticated, we\'re redirecting the user to the home page.\n * Alternatively, we could also use the `Authenticated` component inside the `AuthLayout` to handle the redirect.\n * But, server-side redirects are more performant.\n */\nexport async function loader({ request }: LoaderFunctionArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (authenticated) {\n        throw redirect(redirectTo ?? "/");\n    }\n\n    return {};\n}\n'.trim(),I='\nimport { AuthPage } from "@refinedev/mui";\n\nexport default function LoginPage() {\n  return <AuthPage type="login" />;\n}\n\n'.trim(),W='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport default function ProductList() {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n'.trim(),G='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nexport default function ProductShow() {\n  const { result: product, query } = useShow();\n  const { data, isLoading } = query;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <TextField value={product?.price} />\n      </Stack>\n    </Show>\n  );\n};\n'.trim(),q='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport default function ProductEdit() {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n'.trim(),O='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport default function ProductCreate() {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function M(){return t.createElement(i.O,{showNavigator:!0,initialPercentage:35,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"^7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products",files:{"/App.tsx":{code:U,active:!0},"/pages/products/list.tsx":{code:j,hidden:!0}}})}const U='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n  RefineSnackbarProvider,\n  AuthPage,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport { ProductList } from "./pages/products/list";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={notificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n              }\n            ]}\n          >\n            <Routes>\n                <Route\n                  // The layout will wrap all the pages inside this route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                    <Route path="/products" element={<ProductList />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),j='\nimport React from "react";\nimport { List, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim();function z(){return t.createElement(i.O,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","@refinedev/nextjs-router":"latest"},startRoute:"/products",files:{"/pages/_app.tsx":{code:H,active:!0},"/pages/products/index.tsx":{code:_,hidden:!0}}})}const H='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayout, notificationProvider, RefineSnackbarProvider } from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nfunction App({ Component, pageProps }: AppProps) {\n    return (\n        <ThemeProvider theme={RefineThemes.Blue}>\n            <CssBaseline />\n            <GlobalStyles\n                styles={{ html: { WebkitFontSmoothing: "auto" } }}\n            />\n            <RefineSnackbarProvider>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    notificationProvider={notificationProvider}\n                    resources={[\n                        {\n                        name: "products",\n                        list: "/products",\n                        },\n                    ]}\n                >\n                  <ThemedLayout>\n                    <Component {...pageProps} />\n                  </ThemedLayout>\n                </Refine>\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n'.trim(),_='\nimport React from "react";\nimport { List, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport default function ProductList() {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim();function V(){return t.createElement(i.O,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","@refinedev/remix-router":"latest"},startRoute:"/products",files:{"/app/root.tsx":{code:X},"/app/routes/_layout.tsx":{code:$,active:!0},"/app/routes/_layout.products._index.tsx":{code:J,hidden:!0}}})}const X='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { notificationProvider, RefineThemes, RefineSnackbarProvider } from "@refinedev/antd";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ThemeProvider theme={RefineThemes.Blue}>\n          <CssBaseline />\n          <GlobalStyles\n              styles={{ html: { WebkitFontSmoothing: "auto" } }}\n          />\n          <RefineSnackbarProvider>\n            <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              notificationProvider={notificationProvider}\n              resources={[\n                {\n                  name: "products",\n                  list: "/products",\n                },\n              ]}\n            >\n              <Outlet />\n            </Refine>\n          </RefineSnackbarProvider>\n        </ThemeProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),$='\nimport { ThemedLayout } from "@refinedev/mui";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\n/**\n * Routes starting with `_layout` will have their children rendered inside the layout.\n */\nexport default function Layout() {\n    return (\n        <ThemedLayout>\n            <Outlet />\n        </ThemedLayout>\n    );\n}\n'.trim(),J='\nimport React from "react";\nimport { List, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport default function ProductList() {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim();function Y(){return t.createElement(i.O,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products",files:{"/App.tsx":{code:Z,hidden:!0},"/pages/products/index.tsx":{code:K,hidden:!0},"/pages/products/list.tsx":{code:Q,active:!0},"/pages/products/show.tsx":{code:ee},"/pages/products/edit.tsx":{code:ne},"/pages/products/create.tsx":{code:re}}})}const K='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),Z='\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  notificationProvider,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(\n                    "https://api.fake-rest.refine.dev",\n                )}\n                notificationProvider={notificationProvider}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                        meta: {\n                            canDelete: true,\n                        },\n                    },\n                ]}\n                options={{\n                    syncWithLocation: true,\n                }}\n            >\n                <Routes>\n                    <Route\n                        element={\n                            <ThemedLayout>\n                                <Outlet />\n                            </ThemedLayout>\n                        }\n                    >\n                        <Route index element={<NavigateToResource resource="products" />} />\n                        <Route path="/products" element={<Outlet />}>\n                          <Route index element={<ProductList />} />\n                          <Route path="create" element={<ProductCreate />} />\n                          <Route path=":id" element={<ProductShow />} />\n                          <Route path=":id/edit" element={<ProductEdit />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                </Routes>\n            </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),Q='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),ee='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nexport const ProductShow = () => {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <TextField value={product?.price} />\n      </Stack>\n    </Show>\n  );\n};\n'.trim(),ne='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n'.trim(),re='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function te(){return t.createElement(i.O,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/login",files:{"/App.tsx":{code:ie,hidden:!0},"/pages/products.tsx":{code:ae,hidden:!0},"/pages/login.tsx":{code:se,active:!0},"/pages/register.tsx":{code:de},"/pages/forgot-password.tsx":{code:me},"/pages/reset-password.tsx":{code:le},"/auth-provider.tsx":{code:oe,hidden:!0}}})}const oe='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),ie='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, notificationProvider, RefineSnackbarProvider, AuthPage } from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport authProvider from "./auth-provider";\n\nimport { ProductList } from "./pages/products";\nimport { LoginPage } from "./pages/login";\nimport { RegisterPage } from "./pages/register";\nimport { ForgotPasswordPage } from "./pages/forgot-password";\nimport { ResetPasswordPage } from "./pages/reset-password";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            authProvider={authProvider}\n            notificationProvider={notificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n              }\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Routes>\n              <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                <Route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                  <Route path="/products" element={<ProductList />} />\n                  <Route path="*" element={<ErrorComponent />} />\n                </Route>\n              </Route>\n              <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                <Route path="/login" element={<LoginPage />} />\n                <Route path="/register" element={<RegisterPage />} />\n                <Route path="/forgot-password" element={<ForgotPasswordPage />} />\n                <Route path="/reset-password" element={<ResetPasswordPage />} />\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),ae='\nimport React from "react";\nimport { List, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),se='\nimport { AuthPage } from "@refinedev/mui";\n\nexport const LoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            formProps={{\n                defaultValues: {\n                  email: "demo@refine.dev",\n                  password: "demodemo",\n                },\n            }}\n        />\n    );\n};\n'.trim(),de='\nimport { AuthPage } from "@refinedev/mui";\n\nexport const RegisterPage = () => {\n    return <AuthPage type="register" />;\n};\n'.trim(),me='\nimport { AuthPage } from "@refinedev/mui";\n\nexport const ForgotPasswordPage = () => {\n    return <AuthPage type="forgotPassword" />;\n};\n'.trim(),le='\nimport { AuthPage } from "@refinedev/mui";\n\nexport const ResetPasswordPage = () => {\n    return <AuthPage type="resetPassword" />;\n};\n'.trim();function ue(){return t.createElement(i.O,{showNavigator:!0,layout:"col",height:320,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/utils":"^7.1.0","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/x-data-grid":"7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products",files:{"/App.tsx":{code:he,hidden:!0},"/theme-provider.tsx":{code:fe,active:!0},"/pages/products/index.tsx":{code:ce,hidden:!0},"/pages/products/list.tsx":{code:ge,hidden:!0},"/pages/products/show.tsx":{code:ye,hidden:!0},"/pages/products/edit.tsx":{code:ve,hidden:!0},"/pages/products/create.tsx":{code:xe,hidden:!0},"/auth-provider.tsx":{code:pe,hidden:!0}}})}const pe='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),ce='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),fe='\nimport { RefineThemes, RefineSnackbarProvider } from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider as MuiThemeProvider } from "@mui/material/styles";\n\nexport const ThemeProvider = ({ children }) => (\n    // Available themes: Blue, Purple, Magenta, Red, Orange, Yellow, Green\n    // Change the line below to change the theme\n    <MuiThemeProvider theme={RefineThemes.Magenta}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n            {children}\n        </RefineSnackbarProvider>\n    </MuiThemeProvider>\n);\n'.trim(),he='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  notificationProvider,\n  AuthPage,\n} from "@refinedev/mui";\n\nimport { ThemeProvider } from "./theme-provider";\nimport authProvider from "./auth-provider";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(\n                    "https://api.fake-rest.refine.dev",\n                )}\n                notificationProvider={notificationProvider}\n                authProvider={authProvider}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        edit: "/products/:id/edit",\n                        create: "/products/create",\n                        meta: {\n                            canDelete: true,\n                        },\n                    },\n                ]}\n                options={{\n                    syncWithLocation: true,\n                }}\n            >\n                <Routes>\n                  <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                    <Route\n                        element={\n                            <ThemedLayout>\n                                <Outlet />\n                            </ThemedLayout>\n                        }\n                    >\n                        <Route index element={<NavigateToResource resource="products" />} />\n                        <Route path="/products" element={<Outlet />}>\n                          <Route index element={<ProductList />} />\n                          <Route path="create" element={<ProductCreate />} />\n                          <Route path=":id" element={<ProductShow />} />\n                          <Route path=":id/edit" element={<ProductEdit />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                  </Route>\n                  <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                    <Route\n                      path="/login"\n                      element={(\n                        <AuthPage\n                          type="login"\n                          formProps={{\n                            defaultValues: {\n                              email: "demo@refine.dev",\n                              password: "demodemo",\n                            },\n                          }}\n                        />\n                      )}\n                    />\n                    <Route path="/register" element={<AuthPage type="register" />} />\n                    <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                    <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                  </Route>\n                </Routes>\n            </Refine>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),ge='\nimport React from "react";\nimport { EditButton, List, ShowButton, useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nexport const ProductList = () => {\n  const { dataGridProps } = useDataGrid();\n\n  const columns = React.useMemo<GridColDef<IProduct>[]>(\n    () => [\n        {\n            field: "id",\n            headerName: "ID",\n            type: "number",\n            width: 50,\n        },\n        { field: "name", headerName: "Name", minWidth: 300, flex: 1 },\n        { field: "price", headerName: "Price", minWidth: 100, flex: 1 },\n        {\n          field: "actions",\n          headerName: "Actions",\n          display: "flex",\n          renderCell: function render({ row }) {\n              return (\n                  <div>\n                      <EditButton hideText recordItemId={row.id} />\n                      <ShowButton hideText recordItemId={row.id} />\n                  </div>\n              );\n          },\n          align: "center",\n          headerAlign: "center",\n          minWidth: 80,\n        },\n      ],\n    []\n  );\n\n  return (\n    <List>\n        <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'.trim(),ye='\nimport {\n  Show,\n  NumberField,\n  TextFieldComponent as TextField,\n  MarkdownField,\n  DateField,\n} from "@refinedev/mui";\nimport { useShow } from "@refinedev/core";\nimport Typography from "@mui/material/Typography";\nimport Stack from "@mui/material/Stack";\n\nexport const ProductShow = () => {\n  const { result: product, query } = useShow();\n  const { data, isLoading } = query;\n\n    return (\n    <Show isLoading={isLoading}>\n      <Stack gap={1}>\n        <Typography variant="body1" fontWeight="bold">\n            Id\n        </Typography>\n        <NumberField value={product?.id ?? ""} />\n        <Typography variant="body1" fontWeight="bold">\n            Name\n        </Typography>\n        <TextField value={product?.name} />\n        <Typography variant="body1" fontWeight="bold">\n            Material\n        </Typography>\n        <TextField value={product?.material} />\n        <Typography variant="body1" fontWeight="bold">\n            Description\n        </Typography>\n        <MarkdownField value={product?.description} />\n        <Typography variant="body1" fontWeight="bold">\n            Price\n        </Typography>\n        <TextField value={product?.price} />\n      </Stack>\n    </Show>\n  );\n};\n'.trim(),ve='\nimport { HttpError } from "@refinedev/core";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Edit>\n  );\n};\n'.trim(),xe='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name", {\n                required: "This field is required",\n            })}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material", {\n                required: "This field is required",\n            })}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n              required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n        <TextField\n            id="price"\n            {...register("price", {\n                required: "This field is required",\n            })}\n            error={!!errors.price}\n            helperText={errors.price?.message}\n            margin="normal"\n            fullWidth\n            label="Price"\n            name="price"\n            autoFocus\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function be(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function Pe(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})),e}function Te(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const we={title:"Introduction"},Re=void 0,Ne={unversionedId:"ui-integrations/material-ui/introduction/index",id:"ui-integrations/material-ui/introduction/index",title:"Introduction",description:"Refine provides an integration package for Material UI framework. This package provides a set of ready to use components and hooks that connects Refine with Material UI components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Material UI packages, you will be able to use all the features of Material UI in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Material UI components in combination with Refine's features and functionalities.",source:"@site/docs/ui-integrations/material-ui/introduction/index.md",sourceDirName:"ui-integrations/material-ui/introduction",slug:"/ui-integrations/material-ui/introduction/",permalink:"/docs/ui-integrations/material-ui/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/material-ui/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756449505,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{title:"Introduction"},sidebar:"mainSidebar",previous:{title:"Migration Guide",permalink:"/docs/ui-integrations/ant-design/migration-guide/"},next:{title:"<ThemedLayout />",permalink:"/docs/ui-integrations/material-ui/components/themed-layout/"}},ke={},Ce=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Tables",id:"tables",level:2},{value:"Forms",id:"forms",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Predefined Components and Views",id:"predefined-components-and-views",level:2},{value:"Layouts, Menus and Breadcrumbs",id:"layouts-menus-and-breadcrumbs",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Views",id:"views",level:3},{value:"Fields",id:"fields",level:3},{value:"Auth Pages",id:"auth-pages",level:3},{value:"Error Components",id:"error-components",level:3},{value:"Theming",id:"theming",level:2},{value:"Inferencer",id:"inferencer",level:2}],Fe=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},Se=Fe("DocThumbsUpDownFeedbackWidget"),Be=Fe("InstallPackagesCommand"),De=Fe("Tabs"),Ae=Fe("TabItem"),Le={toc:Ce},Ee="wrapper";function Ie(e){var{components:n}=e,r=Te(e,["components"]);return(0,o.yg)(Ee,Pe(function(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),t.forEach((function(n){be(e,n,r[n])}))}return e}({},Le,r),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Refine provides an integration package for ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/getting-started/"},"Material UI")," framework. This package provides a set of ready to use components and hooks that connects Refine with Material UI components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Material UI packages, you will be able to use all the features of Material UI in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Material UI components in combination with Refine's features and functionalities."),(0,o.yg)(a,{mdxType:"Example"}),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)(Se,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Installing the package is as simple as just by running the following command without any additional configuration:"),(0,o.yg)(Be,{args:"@refinedev/mui @refinedev/react-hook-form @emotion/react @emotion/styled @mui/lab @mui/material @mui/x-data-grid react-hook-form",mdxType:"InstallPackagesCommand"})),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)(Se,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"We'll wrap our app with the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#themeprovider"},(0,o.yg)("inlineCode",{parentName:"a"},"<ThemeProvider />"))," to make sure we have the theme available for our app, then we'll use the layout components to wrap them around our routes. Check out the examples below to see how to use Refine's Material UI integration."),(0,o.yg)(De,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(Ae,{value:"react-router-dom",label:"React Router",mdxType:"TabItem"},(0,o.yg)(f,{mdxType:"UsageReactRouterDom"})),(0,o.yg)(Ae,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)(T,{mdxType:"UsageNextJs"})),(0,o.yg)(Ae,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)(B,{mdxType:"UsageRemix"})))),(0,o.yg)("h2",{id:"tables"},"Tables"),(0,o.yg)(Se,{id:"tables",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine provides a seamless integration with the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/x/react-data-grid/"},(0,o.yg)("inlineCode",{parentName:"a"},"<DataGrid />"))," component of Material UI from pagination to sorting and filtering via the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/hooks/use-data-grid"},(0,o.yg)("inlineCode",{parentName:"a"},"useDataGrid"))," hook exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package. This ",(0,o.yg)("inlineCode",{parentName:"p"},"useDataGrid")," hook extends the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,o.yg)("inlineCode",{parentName:"a"},"useTable"))," hook of ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," package and provides a set of additional features and transformations to make it work with Material UI's ",(0,o.yg)("inlineCode",{parentName:"p"},"<DataGrid />")," component without any additional configuration."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'// highlight-next-line\nimport { useDataGrid } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nconst columns: GridColDef<IProduct>[] = [\n  { field: "id", headerName: "ID", type: "number", width: 50 },\n  { field: "name", headerName: "Name", minWidth: 200, flex: 1 },\n  { field: "price", headerName: "Price", minWidth: 300, flex: 1 },\n];\n\nexport const ProductList: FC = () => {\n  // highlight-next-line\n  const { dataGridProps } = useDataGrid<IProduct>();\n\n  return (\n    <List>\n      {/* highlight-next-line */}\n      <DataGrid {...dataGridProps} columns={columns} />\n    </List>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'))),(0,o.yg)("h2",{id:"forms"},"Forms"),(0,o.yg)(Se,{id:"forms",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Material UI offers form elements yet it does not provide a form management solution. To have a complete solution, Refine recommends using ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," package which is built on top of Refine's ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-form/"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," hook and React Hook Form's ",(0,o.yg)("a",{parentName:"p",href:"https://react-hook-form.com/docs/useform"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,o.yg)("p",null,"Refine's documentations and examples of Material UI uses ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," package for form management but you have the option to use any form management solution you want."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/create.tsx"',title:'"pages/products/create.tsx"'},'import { useForm } from "@refinedev/react-hook-form";\nimport { Create } from "@refinedev/mui";\nimport TextField from "@mui/material/TextField";\nimport Box from "@mui/material/Box";\n\nexport const ProductCreate: FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm<IProduct>();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          id="name"\n          {...register("name", {\n            required: "This field is required",\n          })}\n          error={!!errors.name}\n          helperText={errors.name?.message}\n          label="Name"\n          name="name"\n        />\n        <TextField\n          id="price"\n          {...register("price", {\n            required: "This field is required",\n          })}\n          error={!!errors.price}\n          helperText={errors.price?.message}\n          label="Price"\n          name="price"\n        />\n        <TextField\n          id="description"\n          {...register("description", {\n            required: "This field is required",\n          })}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          label="Description"\n          name="description"\n        />\n      </Box>\n    </Create>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," also provides ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/hooks/use-auto-complete"},(0,o.yg)("inlineCode",{parentName:"a"},"useAutocomplete"))," hook which can be used to implement autocomplete fields with relational data. This hook leverages the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-select"},(0,o.yg)("inlineCode",{parentName:"a"},"useSelect"))," hook from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," package."),(0,o.yg)("p",null,"Additional hooks of ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," such as ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("inlineCode",{parentName:"a"},"useStepsForm"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("inlineCode",{parentName:"a"},"useModalForm"))," can also be used together with Refine's Material UI integration with ease.")),(0,o.yg)("h2",{id:"notifications"},"Notifications"),(0,o.yg)(Se,{id:"notifications",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Material UI has its own notification elements but lacks the notification management solution. As ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-snackbar/#notistack"},"recommended by the Material UI's documentation"),"; Refine's integration provides a notification provider which uses ",(0,o.yg)("inlineCode",{parentName:"p"},"notistack")," package under the hood. This integration is provided by the ",(0,o.yg)("inlineCode",{parentName:"p"},"notificationProvider")," exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package which can be directly used in the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#notificationprovider"},(0,o.yg)("inlineCode",{parentName:"a"},"notificationProvider"))," prop of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport { useNotificationProvider } from "@refinedev/mui";\n\nconst App = () => {\n  return (\n    <Refine notificationProvider={useNotificationProvider}>{/* ... */}</Refine>\n  );\n};\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"Usage of ",(0,o.yg)("inlineCode",{parentName:"p"},"<RefineSnackbarProvider />")," is required to manage notifications through ",(0,o.yg)("inlineCode",{parentName:"p"},"notistack"),". The component itself is a wrapper of the ",(0,o.yg)("a",{parentName:"p",href:"https://notistack.com/api-reference#snackbarprovider-props"},(0,o.yg)("inlineCode",{parentName:"a"},"SnackbarProvider"))," component of ",(0,o.yg)("inlineCode",{parentName:"p"},"notistack")," package."))),(0,o.yg)("h2",{id:"predefined-components-and-views"},"Predefined Components and Views"),(0,o.yg)("h3",{id:"layouts-menus-and-breadcrumbs"},"Layouts, Menus and Breadcrumbs"),(0,o.yg)(Se,{id:"layouts-menus-and-breadcrumbs",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine provides Layout components that can be used to implement a layout for the application. These components are crafted using Material UI's components and includes Refine's features and functionalities such as navigation menus, headers, authentication, authorization and more."),(0,o.yg)(De,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(Ae,{value:"react-router-dom",label:"React Router",mdxType:"TabItem"},(0,o.yg)(M,{mdxType:"LayoutReactRouterDom"})),(0,o.yg)(Ae,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)(z,{mdxType:"LayoutNextJs"})),(0,o.yg)(Ae,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)(V,{mdxType:"LayoutRemix"}))),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/themed-layout"},(0,o.yg)("inlineCode",{parentName:"a"},"<ThemedLayout />"))," component consists of a header, sider and a content area. The sider have a navigation menu items for the defined resources of Refine, if an authentication provider is present, it will also have a functional logout button. The header contains the app logo and name and also information about the current user if an authentication provider is present."),(0,o.yg)("p",null,"Additionally, Refine also provides a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/breadcrumb/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Breadcrumb />"))," component that uses the Material UI's component as a base and provide appropriate breadcrumbs for the current route. This component is used in the basic views provided by Refine's Material UI package automatically.")),(0,o.yg)("h3",{id:"buttons"},"Buttons"),(0,o.yg)(Se,{id:"buttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Material UI integration offers variety of buttons that are built above the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-button/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Button />"))," component of Material UI and includes many logical functionalities such as;"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Authorization checks"),(0,o.yg)("li",{parentName:"ul"},"Confirmation dialogs"),(0,o.yg)("li",{parentName:"ul"},"Loading states"),(0,o.yg)("li",{parentName:"ul"},"Invalidation"),(0,o.yg)("li",{parentName:"ul"},"Navigation"),(0,o.yg)("li",{parentName:"ul"},"Form actions"),(0,o.yg)("li",{parentName:"ul"},"Import/Export and more.")),(0,o.yg)("p",null,"You can use buttons such as ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton />"))," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton />"))," etc. in your views to provide navigation for the related routes or ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton />"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton />"))," etc. to perform related actions without having to worry about the authorization checks and other logical functionalities."),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<EditButton />")," component is as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import { useDataGrid, EditButton } from "@refinedev/mui";\nimport { DataGrid, GridColDef } from "@mui/x-data-grid";\n\nconst columns: GridColDef[] = [\n  { field: "id", headerName: "ID", type: "number", width: 50 },\n  { field: "name", headerName: "Name", minWidth: 200, flex: 1 },\n  { field: "price", headerName: "Price", minWidth: 300, flex: 1 },\n  {\n    field: "actions",\n    headerName: "Actions",\n    display: "flex",\n    renderCell: function render({ row }) {\n        return (\n          {/* highlight-next-line */}\n          <EditButton hideText recordItemId={row.id} />\n        );\n    },\n  }\n]\n\nexport const ProductList: FC = () => {\n  const { dataGridProps } = useDataGrid();\n\n  return (\n    <List>\n      <DataGrid {...dataGridProps} columns={columns}  />\n    </List>\n  );\n};\n')),(0,o.yg)("p",null,"The list of provided buttons are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/create-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<CreateButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/show-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ShowButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/clone-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<CloneButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/import-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ImportButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/buttons/export-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ExportButton />")))),(0,o.yg)("p",null,"Many of these buttons are already used in the views provided by Refine's Material UI integration. If you're using the basic view elements provided by Refine, you will have the appropriate buttons placed in your application out of the box.")),(0,o.yg)("h3",{id:"views"},"Views"),(0,o.yg)(Se,{id:"views",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Views are designed as wrappers around the content of the pages in the application. They are designed to be used within the layouts and provide basic functionalities such as titles based on the resource, breadcrumbs, related actions and authorization checks. Refine's Material UI integration uses components such as ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-card/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Card />"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-box/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Box />"))," to provide these views and provides customization options by passing related props to these components."),(0,o.yg)("p",null,"The list of provided views are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/basic-views/create"},(0,o.yg)("inlineCode",{parentName:"a"},"<List />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/basic-views/show"},(0,o.yg)("inlineCode",{parentName:"a"},"<Show />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/basic-views/edit"},(0,o.yg)("inlineCode",{parentName:"a"},"<Edit />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/basic-views/create"},(0,o.yg)("inlineCode",{parentName:"a"},"<Create />")))),(0,o.yg)(Y,{mdxType:"BasicViews"})),(0,o.yg)("h3",{id:"fields"},"Fields"),(0,o.yg)(Se,{id:"fields",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Material UI also provides field components to render values with appropriate design and format of Material UI. These components are built on top of respective Material UI components and also provide logic for formatting of the values. While these components might not always be suitable for your use case, they can be combined or extended to provide the desired functionality."),(0,o.yg)("p",null,"The list of provided field components are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/boolean-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<BooleanField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/date-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<DateField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/email-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<EmailField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/file-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<FileField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/markdown-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<MarkdownField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/number-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<NumberField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/tag-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<TagField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/text-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<TextField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/components/fields/url-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<UrlField />")))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/show.tsx"',title:'"pages/products/show.tsx"'},'import { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField } from "@refinedev/mui";\nimport Typography from "@mui/material/Typography";\n\nexport const ProductShow = () => {\n  const { result: product } = useShow<IProduct>();\n  const { data, isLoading } = query;\n\n  return (\n    <Show isLoading={isLoading}>\n      <Typography variant="body1" fontWeight="bold">\n        Id\n      </Typography>\n      {/* highlight-next-line */}\n      <TextField value={product?.id} />\n\n      <Typography variant="body1" fontWeight="bold">\n        Title\n      </Typography>\n      {/* highlight-next-line */}\n      <TextField value={product?.title} />\n\n      <Typography variant="body1" fontWeight="bold">\n        Title\n      </Typography>\n      {/* highlight-next-line */}\n      <NumberField\n        value={product?.price}\n        options={{ style: "currency", currency: "USD" }}\n      />\n    </Show>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'))),(0,o.yg)("h3",{id:"auth-pages"},"Auth Pages"),(0,o.yg)(Se,{id:"auth-pages",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Auth pages are designed to be used as the pages of the authentication flow of the application. They offer an out of the box solution for the login, register, forgot password and reset password pages by leveraging the authentication hooks of Refine. Auth page components are built on top of basic Material UI components such as ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-text-field/"},(0,o.yg)("inlineCode",{parentName:"a"},"<TextField />"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-card/"},(0,o.yg)("inlineCode",{parentName:"a"},"<Card />"))," etc."),(0,o.yg)("p",null,"The list of types of auth pages that are available in the UI integrations are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="login" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="register" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="forgot-password" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="reset-password" />'))),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/auth-page"},(0,o.yg)("inlineCode",{parentName:"a"},"<AuthPage />"))," component is as follows:"),(0,o.yg)(te,{mdxType:"AuthPage"})),(0,o.yg)("h3",{id:"error-components"},"Error Components"),(0,o.yg)(Se,{id:"error-components",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Material UI integration also provides an ",(0,o.yg)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component that you can use to render a 404 page in your app. While these components does not offer much functionality, they are provided as an easy way to render an error page with a consistent design language."),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component is as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/404.tsx"',title:'"pages/404.tsx"'},'import { ErrorComponent } from "@refinedev/mui";\n\nconst NotFoundPage = () => {\n  return <ErrorComponent />;\n};\n'))),(0,o.yg)("h2",{id:"theming"},"Theming"),(0,o.yg)(Se,{id:"theming",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Since Refine offers application level components such as layout, sidebar and header and page level components for each action, it is important to have it working with the styling of Material UI. All components and providers exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package will use the current theme of Material UI without any additional configuration."),(0,o.yg)("p",null,"Additionally, Refine also provides a set of carefully crafted themes for Material UI which outputs a nice UI with Refine's components with light and dark theme support. These themes are exported as ",(0,o.yg)("inlineCode",{parentName:"p"},"RefineThemes")," object from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package and can be used in ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#theme-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"<ThemeProvider />"))," component of Material UI."),(0,o.yg)(ue,{mdxType:"Theming"}),(0,o.yg)("p",null,"To learn more about the theme configuration of Material UI, please refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/"},"official documentation"),".")),(0,o.yg)("h2",{id:"inferencer"},"Inferencer"),(0,o.yg)(Se,{id:"inferencer",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can automatically generate views for your resources using ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/inferencer"),". Inferencer exports the ",(0,o.yg)("inlineCode",{parentName:"p"},"MuiListInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"MuiShowInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"MuiEditInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"MuiCreateInferencer")," components and finally the ",(0,o.yg)("inlineCode",{parentName:"p"},"MuiInferencer")," component, which combines all in one place."),(0,o.yg)("p",null,"To learn more about Inferencer, please refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/inferencer"},"Material UI Inferencer")," docs.")))}Ie.isMDXComponent=!0}}]);