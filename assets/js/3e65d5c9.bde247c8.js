"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[31941],{58860:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>f});var r=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const s={id:"search",title:"Search"},p=void 0,c={unversionedId:"advanced-tutorials/search/search",id:"version-3.xx.xx/advanced-tutorials/search/search",title:"Search",description:"We will create a ` component for your application with Ant Design's ` component.",source:"@site/versioned_docs/version-3.xx.xx/advanced-tutorials/search/search.md",sourceDirName:"advanced-tutorials/search",slug:"/advanced-tutorials/search/",permalink:"/docs/3.xx.xx/advanced-tutorials/search/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/advanced-tutorials/search/search.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Necati \xd6zmen",lastUpdatedAt:1711702532,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{id:"search",title:"Search"},sidebar:"someSidebar",previous:{title:"List Search",permalink:"/docs/3.xx.xx/advanced-tutorials/search/list-search"},next:{title:"Table Search",permalink:"/docs/3.xx.xx/advanced-tutorials/search/table-search"}},l={},d=[{value:"Example",id:"example",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},m=u("DocThumbsUpDownFeedbackWidget"),f=u("CodeSandboxExample"),g={toc:d},y="wrapper";function h(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(y,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"We will create a ",(0,r.yg)("inlineCode",{parentName:"p"},"<Header>")," component for your application with Ant Design's ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.yg)("inlineCode",{parentName:"a"},"<AutoComplete>"))," component.\nWe will now examine how to search within the application with this component."),(0,r.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/search/search.gif",alt:"search"}),(0,r.yg)("br",null),(0,r.yg)("p",null,"To do this, let's first create our ",(0,r.yg)("inlineCode",{parentName:"p"},"<Header>")," component."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'import { AntdLayout, AutoComplete, Input, Icons } from "@pankod/refine-antd";\n\nconst { SearchOutlined } = Icons;\n\nexport const Header: React.FC = () => {\n  return (\n    <AntdLayout.Header\n      style={{\n        padding: "0px 24px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      <AutoComplete\n        style={{ width: "100%", maxWidth: "550px" }}\n        filterOption={false}\n      >\n        <Input\n          size="large"\n          placeholder="Search posts or categories"\n          suffix={<SearchOutlined />}\n        />\n      </AutoComplete>\n    </AntdLayout.Header>\n  );\n};\n')),(0,r.yg)("p",null,"We created the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Header>")," component as we want it to appear. We have not done anything for any search process at this stage. We just created the UI."),(0,r.yg)("br",null),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Let's not forget to pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Header>")," component to the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," component in ",(0,r.yg)("inlineCode",{parentName:"p"},"App.tsx")," as below."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@pankod/refine-core";\nimport {\n  Layout,\n  ReadyPage,\n  useNotificationProvider,\n  ErrorComponent,\n} from "@pankod/refine-antd";\nimport routerProvider from "@pankod/refine-react-router-v6";\nimport dataProvider from "@pankod/refine-simple-rest";\n\nimport "@pankod/refine-antd/dist/reset.css";\n\n// highlight-next-line\nimport { Header } from "components";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      Layout={Layout}\n      ReadyPage={ReadyPage}\n      notificationProvider={useNotificationProvider}\n      catchAll={<ErrorComponent />}\n      // highlight-next-line\n      Header={Header}\n    />\n  );\n};\n\nexport default App;\n'))),(0,r.yg)("p",null,"Now let's get our ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.yg)("inlineCode",{parentName:"a"},"<AutoComplete>"))," input ready to search. So, let's fetch our posts according to the value entered in our input."),(0,r.yg)("p",null,"To fetch more than one record, we will use the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useList"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," data hook, and we will filter and fetch this data according to the search value."),(0,r.yg)("p",null,"Before we start, let's create the interfaces of our ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.yg)("inlineCode",{parentName:"a"},"<AutoComplete>")),"'s ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," property and the post source."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface IPost {\n  id: number;\n  title: string;\n}\n\nexport interface ICategory {\n  id: number;\n  title: string;\n}\n\nexport interface IOptionGroup {\n  value: string;\n  label: string | React.ReactNode;\n}\n\nexport interface IOptions {\n  label: string | React.ReactNode;\n  options: IOptionGroup[];\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'import { useState, useEffect } from "react";\nimport { useList } from "@pankod/refine-core";\nimport {\n  AntdLayout,\n  AutoComplete,\n  Input,\n  Icons,\n  Typography,\n} from "@pankod/refine-antd";\nimport routerProvider from "@pankod/refine-react-router-v6";\n\nconst { Link } = routerProvider;\nconst { Text } = Typography;\nconst { SearchOutlined } = Icons;\n\nimport { IOptions, IPost } from "interfaces";\n\n// To be able to customize the option title\nconst renderTitle = (title: string) => {\n  return (\n    <Text strong style={{ fontSize: "16px" }}>\n      {title}\n    </Text>\n  );\n};\n\n// To be able to customize the option item\nconst renderItem = (title: string, resource: string, id: number) => {\n  return {\n    value: title,\n    label: (\n      <Link to={`/${resource}/show/${id}`}>\n        <Text>{title}</Text>\n      </Link>\n    ),\n  };\n};\n\nexport const Header: React.FC = () => {\n  const [value, setValue] = useState<string>("");\n  const [options, setOptions] = useState<IOptions[]>([]);\n\n  const { refetch: refetchPosts } = useList<IPost>({\n    resource: "posts",\n    config: {\n      filters: [{ field: "title", operator: "contains", value }],\n    },\n    queryOptions: {\n      enabled: false,\n      onSuccess: (data) => {\n        const postOptionGroup = data.data.map((item) =>\n          renderItem(item.title, "posts", item.id),\n        );\n        if (postOptionGroup.length > 0) {\n          setOptions([\n            {\n              label: renderTitle("Posts"),\n              options: postOptionGroup,\n            },\n          ]);\n        }\n      },\n    },\n  });\n\n  useEffect(() => {\n    setOptions([]);\n    refetchPosts();\n  }, [value]);\n\n  return (\n    <AntdLayout.Header\n      style={{\n        padding: "0px 24px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      <AutoComplete\n        style={{ width: "100%", maxWidth: "550px" }}\n        filterOption={false}\n        options={options}\n        onSearch={(value: string) => setValue(value)}\n      >\n        <Input\n          size="large"\n          placeholder="Search posts or categories"\n          suffix={<SearchOutlined />}\n        />\n      </AutoComplete>\n    </AntdLayout.Header>\n  );\n};\n')),(0,r.yg)("p",null,"We created states to dynamically manage the ",(0,r.yg)("inlineCode",{parentName:"p"},"value")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," properties of the ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/auto-complete"},(0,r.yg)("inlineCode",{parentName:"a"},"<AutoComplete>"))," component. The ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useList"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," hook is triggered whenever the value changes. Likewise, the filter used to fetch the data is updated each time the value changes."),(0,r.yg)("br",null),(0,r.yg)("p",null,"Search value is currently only searched and fetched inside posts. Let's update our code to search both posts and categories according to the search value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'...\nexport const Header: React.FC = () => {\n    const [value, setValue] = useState<string>("");\n    const [options, setOptions] = useState<IOptions[]>([]);\n\n    const { refetch: refetchPosts } = useList<IPost>({\n        resource: "posts",\n        config: {\n            filters: [{ field: "title", operator: "contains", value }],\n        },\n        queryOptions: {\n            enabled: false,\n            onSuccess: (data) => {\n                const postOptionGroup = data.data.map((item) =>\n                    renderItem(item.title, "posts", item.id),\n                );\n                if (postOptionGroup.length > 0) {\n                    setOptions((prevOptions) => [\n                        ...prevOptions\n                        {\n                            label: renderTitle("Posts"),\n                            options: postOptionGroup,\n                        },\n                    ]);\n                }\n            },\n        },\n    });\n\n    const { refetch: refetchCategories } = useList<ICategory>({\n        resource: "categories",\n        config: {\n            filters: [{ field: "q", operator: "contains", value }],\n        },\n        queryOptions: {\n            enabled: false,\n            onSuccess: (data) => {\n                const categoryOptionGroup = data.data.map((item) =>\n                    renderItem(item.title, "categories", item.id),\n                );\n                if (categoryOptionGroup.length > 0) {\n                    setOptions((prevOptions) => [\n                        ...prevOptions,\n                        {\n                            label: renderTitle("Categories"),\n                            options: categoryOptionGroup,\n                        },\n                    ]);\n                }\n            },\n        },\n    });\n\n    useEffect(() => {\n        setOptions([]);\n        refetchPosts();\n        refetchCategories();\n    }, [value]);\n\n    return (\n        <AntdLayout.Header\n            style={{\n                padding: "0px 24px",\n                backgroundColor: "#FFF",\n            }}\n        >\n            ...\n        </AntdLayout.Header>\n    );\n};\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"By doing the same implementation on your other resources, you can search for more than one resource with a value.")),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(m,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(f,{path:"search",mdxType:"CodeSandboxExample"})))}h.isMDXComponent=!0}}]);