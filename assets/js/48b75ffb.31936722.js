"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[89599],{88123:(e,n,t)=>{t.d(n,{O:()=>p});var r=t(68835),o=t(37953),a=t(86743),i=t(59451),s=t(62201);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){l(e,n,t[n])}))}return e}function u(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const p=e=>"nextjs"===(null==e?void 0:e.template)?o.createElement(y,e):o.createElement(f,e),f=e=>{var n,t,l,p,f,h,{startRoute:y,showNavigator:v,showLineNumbers:b,showOpenInCodeSandbox:x,initialPercentage:C=50,dependencies:w,showReadOnly:P,options:N={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.A)("h-full","!gap-0"),"sp-console-header-button":(0,r.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:F="react-ts",customSetup:T,files:R,previewOnly:k,layout:I,height:S=420,wrapperClassName:E,className:B,showFiles:O=!1,showConsole:D=!1,hidePreview:A=!1}=e,M=c(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[U,L]=o.useState(!1);o.useEffect((()=>{L(!0)}),[]);const{colorMode:q}=(0,s.G)();var H,W;null!=N||(N={}),null!==(H=(f=N).resizablePanels)&&void 0!==H||(f.resizablePanels=!0),null!==(W=(h=N).editorWidthPercentage)&&void 0!==W||(h.editorWidthPercentage=null!=C?C:50);const j={showTabs:N.showTabs,showLineNumbers:N.showLineNumbers,showInlineErrors:N.showInlineErrors,wrapContent:N.wrapContent,closableTabs:N.closableTabs,initMode:N.initMode,extensions:null===(n=N.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=N.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:N.readOnly,showReadOnly:null!=P?P:N.showReadOnly,additionalLanguages:null===(l=N.codeEditor)||void 0===l?void 0:l.additionalLanguages},V={activeFile:N.activeFile,visibleFiles:N.visibleFiles,recompileMode:N.recompileMode,recompileDelay:N.recompileDelay,autorun:N.autorun,autoReload:N.autoReload,bundlerURL:N.bundlerURL,startRoute:N.startRoute,skipEval:N.skipEval,fileResolver:N.fileResolver,initMode:N.initMode,initModeObserverOptions:N.initModeObserverOptions,externalResources:N.externalResources,logLevel:N.logLevel,classes:N.classes},[G,z]=o.useState(!1),{onHandleMouseDown:$,horizontalSize:Q}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);t(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:N.editorWidthPercentage}),_=!k&&!(null==I?void 0:I.includes("col"));var K,X,Z,J,Y;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.A)("pb-6","refine-sandpack-wrapper",E)},o.createElement("div",{className:(0,r.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",B)},o.createElement(i.l5,m({key:`${F}-${q}-${U}`,customSetup:m({dependencies:w},T),files:R,options:u(m({},V),{classes:u(m({},V.classes),{"sp-layout":(0,r.A)(null===(p=V.classes)||void 0===p?void 0:p["sp-layout"],D&&"!rounded-bl-none !rounded-br-none")})}),template:F,theme:"light"===q?u(m({},a.Zw),{colors:u(m({},a.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):u(m({},a.hc),{colors:u(m({},a.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},M),o.createElement(i.am,{className:(0,r.A)("col"===I&&"!flex-col","col-reverse"===I&&"!flex-col-reverse")},O&&o.createElement(i.Lm,{autoHiddenFiles:!0,style:{height:null!==(K=N.editorHeight)&&void 0!==K?K:S}}),!k&&o.createElement(i.cW,u(m({},j),{showLineNumbers:b,closableTabs:O,initMode:"lazy",style:u(m({height:null!==(X=N.editorHeight)&&void 0!==X?X:S},(null==I?void 0:I.includes("col"))?{flex:"initial"}:{flexGrow:Q,flexShrink:Q,flexBasis:0}),{overflow:"hidden"})})),_?o.createElement(d,{onMouseDown:$,horizontalSize:Q}):null,A?null:o.createElement(o.Fragment,null,o.createElement(i.G5,{showOpenInCodeSandbox:x,startRoute:y,showNavigator:null!=v?v:N.showNavigator,showRefreshButton:N.showRefreshButton,style:u(m({display:A?"none":"flex"},(null==I?void 0:I.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-Q,flexShrink:100-Q,flexBasis:0,width:k?"100%":100-Q+"%"}),{gap:0,height:null!==(Z=N.editorHeight)&&void 0!==Z?Z:S})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.A)("w-12","h-12","rounded-full")}))))),D?o.createElement(i.X2,{style:u(m({height:200},(null==I?void 0:I.includes("col"))?{flex:"initial"}:{flexGrow:Q,flexShrink:Q,flexBasis:0}),{overflow:"hidden"})}):null)),o.createElement("div",{className:(0,r.A)(""),style:{height:Number(null!==(J=N.editorHeight)&&void 0!==J?J:S)+2}}),o.createElement("div",{className:(0,r.A)((null==I?void 0:I.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Y=N.editorHeight)&&void 0!==Y?Y:S)+2}}),o.createElement("div",{className:(0,r.A)(D?"block":"hidden","h-[200px]")})),o.createElement(g,{files:R,dependencies:w}))},g=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("h6",null,"Code Example"),t.map((n=>o.createElement("div",{"data-filename":n,key:n},o.createElement("pre",null,`// file: ${n} \n`,h(e[n]))))))},h=e=>"string"==typeof e?e:"code"in e?e.code:"",y=e=>{const n={hidePreview:!0,showConsole:!1};return o.createElement(f,u(m({},n,e),{template:"react-ts"}))}},32742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>te,contentTitle:()=>ee,default:()=>pe,frontMatter:()=>Y,metadata:()=>ne,toc:()=>re});var r=t(37953),o=t(58860),a=t(88123);function i(){return r.createElement(a.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"latest"},startRoute:"/",files:{"/App.tsx":{code:s},"/edit-page.tsx":{code:d,active:!0}}})}const s='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { EditPage } from "./edit-page";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[\n                {\n                    name: "posts",\n                },\n            ]}\n        >\n            <EditPage />\n        </Refine>\n    );\n};\n\nexport default App;\n'.trim(),d='\nimport React from "react";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\n\nexport const EditPage: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading, query: productQuery },\n        register,\n        handleSubmit,\n    } = useForm<IProduct>({\n        refineCoreProps: {\n            resource: "products",\n            id: 1,\n            action: "edit",\n        },\n    });\n    const product = productQuery?.data?.data;\n\n    const { options, query: categoriesQuery } =\n        useSelect<ICategory>({\n            resource: "categories",\n            defaultValue: product?.category.id,\n        });\n    const categories = categoriesQueryResult?.data?.data;\n\n    // find category of product by id from categories\n    const categoryOfProduct = categories?.find(\n        (category) => Number(category.id) === Number(product?.category.id),\n    );\n\n    return (\n        <div>\n            <div>\n                <h2>{`Edit "${product?.name}" Product`}</h2>\n                <h2>{`Category: ${categoryOfProduct?.title}`}</h2>\n            </div>\n            <form onSubmit={handleSubmit(onFinish)}>\n                <label>Name: </label>\n                <input {...register("name", { required: true })} />\n                <br />\n                <label>Category: </label>\n                <select\n                    {...register("category.id", {\n                        required: true,\n                    })}\n                    defaultValue={product?.category.id}\n                >\n                    {options?.map((category) => {\n                        return (\n                            <option key={category.value} value={category.value}>\n                                {category.label}\n                            </option>\n                        );\n                    })}\n                </select>\n                <br />\n                <br />\n                <input type="submit" value="Submit" />\n                {formLoading && <p>Loading</p>}\n            </form>\n        </div>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IProduct {\n    id: number;\n    name: string;\n    category: { id: number };\n}\n\n'.trim();function l(){return r.createElement(a.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"latest","@refinedev/antd":"latest",antd:"latest"},startRoute:"/",files:{"/App.tsx":{code:m},"/edit-page.tsx":{code:u,active:!0}}})}const m='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport { useNotificationProvider, RefineThemes } from "@refinedev/antd";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ConfigProvider, App as AntdApp } from "antd";\nimport "@refinedev/antd/dist/reset.css";\nimport { EditPage } from "./edit-page";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n    return (\n        <ConfigProvider theme={RefineThemes.Blue}>\n            <AntdApp>\n                <Refine\n                    dataProvider={dataProvider(API_URL)}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: "/posts",\n                            show: "/posts/show/:id",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            meta: {\n                                canDelete: true,\n                            },\n                        },\n                    ]}\n                    notificationProvider={useNotificationProvider}\n                    options={{\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <EditPage />\n                </Refine>\n            </AntdApp>\n        </ConfigProvider>\n    );\n};\n\nexport default App;\n'.trim(),u='\nimport { useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Button, Row, Col } from "antd";\n\nexport const EditPage: React.FC = () => {\n    const {\n        formProps,\n        saveButtonProps,\n        query: productResult,\n    } = useForm<IProduct>({\n        resource: "products",\n        id: 1,\n        action: "edit",\n    });\n    const product = productResult?.data?.data;\n\n    const { selectProps: categorySelectProps, query: categoriesResult } =\n        useSelect<ICategory>({\n            resource: "categories",\n            defaultValue: product?.category.id,\n        });\n    const categories = categoriesResult?.data?.data;\n\n    // find category of product by id from categories\n    const categoryOfProduct = categories?.find(\n        (category) => Number(category.id) === Number(product?.category.id),\n    );\n\n    return (\n        <>\n            <Row\n                justify="center"\n                style={{\n                    paddingTop: 24,\n                    paddingBottom: 24,\n                }}\n            >\n                <Col\n                    style={{\n                        textAlign: "center",\n                    }}\n                >\n                    <h2>{`Edit "${product?.name}" Product`}</h2>\n                    <h2>{`Category: ${categoryOfProduct?.title}`}</h2>\n                </Col>\n            </Row>\n            <Row justify="center">\n                <Col span={12}>\n                    <Form {...formProps} layout="vertical">\n                        <Form.Item\n                            label="Name"\n                            name="name"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label="Category"\n                            name={["category", "id"]}\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Select {...categorySelectProps} />\n                        </Form.Item>\n                        <Button type="primary" {...saveButtonProps}>\n                            Save\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IProduct {\n    id: number;\n    name: string;\n    category: { id: number };\n}\n\n\n\n'.trim();function c(){return r.createElement(a.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"latest","@refinedev/mui":"latest","@mui/material":"latest"},startRoute:"/",files:{"/App.tsx":{code:p},"/edit-page.tsx":{code:f,active:!0}}})}const p='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport {\n    RefineThemes,\n    useNotificationProvider,\n    RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\nimport dataProvider from "@refinedev/simple-rest";\nimport { EditPage } from "./edit-page";\n\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={RefineThemes.Blue}>\n            <CssBaseline />\n            <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n            <RefineSnackbarProvider>\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    notificationProvider={useNotificationProvider}\n                    resources={[\n                        {\n                            name: "posts",\n                        },\n                    ]}\n                >\n                    <EditPage />\n                </Refine>\n            </RefineSnackbarProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n'.trim(),f='\nimport React from "react";\nimport { useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport Button from "@mui/material/Button";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\nimport Typography from "@mui/material/Typography";\n\nexport const EditPage: React.FC = () => {\n    const {\n        saveButtonProps,\n        refineCore: { query: productQuery },\n        register,\n        control,\n    } = useForm<IProduct>({\n        refineCoreProps: {\n            resource: "products",\n            id: 1,\n            action: "edit",\n        },\n    });\n    const product = productQuery?.data?.data;\n\n    const { autocompleteProps, query: categoriesQuery } =\n        useAutocomplete<ICategory>({\n            resource: "categories",\n            defaultValue: product?.category.id,\n        });\n    const categories = categoriesQueryResult?.data?.data;\n\n    // find category of product by id from categories\n    const categoryOfProduct = categories?.find(\n        (category) => Number(category.id) === Number(product?.category.id),\n    );\n\n    return (\n        <Box\n            sx={{\n                display: "flex",\n                alignItems: "center",\n                flexDirection: "column",\n            }}\n        >\n            <Box\n                sx={{\n                    display: "flex",\n                    alignItems: "center",\n                    flexDirection: "column",\n                    py: 2,\n                }}\n            >\n                <Typography variant="h5">\n                    {`Edit "${product?.name}" Product`}\n                </Typography>\n                <Typography variant="h5">\n                    Category: {categoryOfProduct?.title}\n                </Typography>\n            </Box>\n            <Box\n                component="form"\n                sx={{ display: "flex", flexDirection: "column", width: 400 }}\n                autoComplete="off"\n            >\n                <TextField\n                    id="name"\n                    {...register("name", {\n                        required: "This field is required",\n                    })}\n                    margin="normal"\n                    fullWidth\n                    label="Name"\n                    name="name"\n                    autoFocus\n                />\n                <Controller\n                    control={control}\n                    name="category"\n                    rules={{ required: "This field is required" }}\n                    // eslint-disable-next-line\n                    defaultValue={null as any}\n                    render={({ field }) => (\n                        <Autocomplete<ICategory>\n                            id="category"\n                            {...autocompleteProps}\n                            {...field}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            getOptionLabel={(item) => {\n                                return (\n                                    autocompleteProps?.options?.find(\n                                        (p) =>\n                                            p?.id?.toString() ===\n                                            item?.id?.toString(),\n                                    )?.title ?? ""\n                                );\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined ||\n                                option?.id?.toString() ===\n                                    (value?.id ?? value)?.toString()\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Category"\n                                    margin="normal"\n                                    variant="outlined"\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n                <Button variant="contained" type="submit" {...saveButtonProps}>\n                    Save\n                </Button>\n            </Box>\n        </Box>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IProduct {\n    id: number;\n    name: string;\n    category: { id: number };\n}\n\n\n'.trim();function g(){return r.createElement(a.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-hook-form":"latest","@refinedev/mantine":"^2.28.21","@mantine/core":"^5.10.4","@mantine/notifications":"^5.10.4","@emotion/react":"^11.8.2","@mantine/form":"^5.10.4"},startRoute:"/",files:{"/App.tsx":{code:h},"/edit-page.tsx":{code:y,active:!0}}})}const h='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport { useNotificationProvider, RefineThemes } from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { EditPage } from "./edit-page";\n\nconst App: React.FC = () => {\n    return (\n        <MantineProvider\n            theme={RefineThemes.Blue}\n            withNormalizeCSS\n            withGlobalStyles\n        >\n            <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n            <NotificationsProvider position="top-right">\n                <Refine\n                    dataProvider={dataProvider(\n                        "https://api.fake-rest.refine.dev",\n                    )}\n                    notificationProvider={useNotificationProvider}\n                    resources={[\n                        {\n                            name: "posts",\n                            list: "/posts",\n                            show: "/posts/show/:id",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            meta: {\n                                canDelete: true,\n                            },\n                        },\n                    ]}\n                    options={{\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <EditPage />\n                </Refine>\n            </NotificationsProvider>\n        </MantineProvider>\n    );\n};\n\nexport default App;\n'.trim(),y='\nimport React from "react";\nimport { useForm, useSelect } from "@refinedev/mantine";\nimport { Flex, Button, Select, TextInput, Text, Grid } from "@mantine/core";\n\nexport const EditPage: React.FC = () => {\n    const {\n        saveButtonProps,\n        getInputProps,\n        refineCore: { query: productQuery },\n    } = useForm<IProduct>({\n        initialValues: {\n            name: "",\n            category: {\n                id: "",\n            },\n        },\n        refineCoreProps: {\n            resource: "products",\n            id: 1,\n            action: "edit",\n        },\n    });\n    const product = productQuery?.data?.data;\n\n    const { selectProps, query: categoriesQuery } =\n        useSelect<ICategory>({\n            resource: "categories",\n            defaultValue: product?.category.id,\n        });\n    const categories = categoriesQueryResult?.data?.data;\n\n    // find category of product by id from categories\n    const categoryOfProduct = categories?.find(\n        (category) => Number(category.id) === Number(product?.category.id),\n    );\n\n    return (\n        <Flex\n            align="center"\n            direction="column"\n            style={{\n                paddingTop: 24,\n            }}\n        >\n            <Grid>\n                <Grid.Col\n                    style={{\n                        textAlign: "center",\n                    }}\n                >\n                    <Text>{`Edit "${product?.name}" Product`}</Text>\n                    <Text>{`Category: ${categoryOfProduct?.title}`}</Text>\n                </Grid.Col>\n                <Grid.Col>\n                    <form>\n                        <TextInput\n                            mt={8}\n                            id="name"\n                            label="Name"\n                            placeholder="Name"\n                            {...getInputProps("name")}\n                        />\n                        <Select\n                            mt={8}\n                            id="categoryId"\n                            label="Category"\n                            placeholder="Pick one"\n                            {...getInputProps("category.id")}\n                            {...selectProps}\n                        />\n                        <Button\n                            mt={8}\n                            variant="outline"\n                            color="blue"\n                            {...saveButtonProps}\n                        >\n                            Save\n                        </Button>\n                    </form>\n                </Grid.Col>\n            </Grid>\n        </Flex>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IProduct {\n    id: number;\n    name: string;\n    category: { id: number };\n}\n'.trim();function v(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/core":"^4.45.1","@refinedev/react-router":"latest","@refinedev/simple-rest":"^4.5.4","react-dom":"^18.0.0","react-router":"^7.0.2"},startRoute:"/products/create",files:{"/App.tsx":{code:C,hidden:!0},"style.css":{code:x,hidden:!0},"/data-provider.tsx":{code:b,active:!0},"/create.tsx":{code:w}}})}const b='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),x='\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n}\nform {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nlabel {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\nlabel span {\n  display: inline-flex;\n  min-width: 120px;\n}\nform button[type="button"] {\n  margin-top: 12px;\n  align-self: flex-end;\n}\n'.trim(),C='\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport "./style.css";\n\nimport dataProvider from "./data-provider";\n\nimport { ProductCreate } from "./create";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            create: "/products/create",\n                        },\n                    ]}\n                    options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n                >\n                    <Routes>\n                      <Route path="/products" element={<Outlet />}>\n                          <Route path="create" element={<ProductCreate />} />\n                      </Route>\n                    </Routes>\n                </Refine>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),w='\nimport { useForm } from "@refinedev/core";\n\nexport const ProductCreate = () => {\n    const {\n        mutation: { error },\n        formLoading,\n        onFinish,\n    } = useForm();\n\n    const { errors } = error ?? {};\n\n    return (\n      <div style={{ position: "relative" }}>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          const formData = new FormData(event.currentTarget);\n          const variables = Object.fromEntries(formData.entries());\n          onFinish(variables).catch(() => {})\n        }} style={{ display: "flex", flexDirection: "column", gap: "12px" }}>\n          <label>\n            <span>Name</span>\n            <input type="text" id="name" name="name" />\n            </label>\n            <span style={{ color: "red" }}>{errors?.name ?? ""}</span>\n          <label>\n            <span>Material</span>\n            <input type="text" id="material" name="material" />\n            </label>\n            <span style={{ color: "red" }}>{errors?.material ?? ""}</span>\n          <label>\n            <span>Description</span>\n            <textarea id="description" name="description" />\n            </label>\n            <span style={{ color: "red" }}>{errors?.description ?? ""}</span>\n          <button type="submit">Save</button>\n        </form>\n        {formLoading && (<div style={{\n          position: "absolute",\n          inset: 0,\n          width: "100%",\n          height: "100%",\n          display: "flex",\n          alignItems: "center",\n          justifyContent: "center",\n          backgroundColor: "rgba(255, 255, 255, 0.5)",\n          color: "#000",\n        }}>loading...</div>)}\n      </div>\n    );\n};\n'.trim();function P(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@tabler/icons-react":"^3.1.0","@refinedev/core":"^4.45.1","@refinedev/react-router":"latest","@refinedev/simple-rest":"^4.5.4","@refinedev/react-hook-form":"^4.8.12","react-dom":"^18.0.0","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products/create",files:{"/App.tsx":{code:T,hidden:!0},"style.css":{code:F,hidden:!0},"/data-provider.tsx":{code:N,active:!0},"/create.tsx":{code:R}}})}const N='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),F='\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n}\nform {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nlabel {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\nlabel span {\n  display: inline-flex;\n  min-width: 120px;\n}\nform button[type="button"] {\n  margin-top: 12px;\n  align-self: flex-end;\n}\n'.trim(),T='\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport "./style.css";\n\nimport dataProvider from "./data-provider";\n\nimport { ProductCreate } from "./create";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            create: "/products/create",\n                        },\n                    ]}\n                    options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n                >\n                    <Routes>\n                      <Route path="/products" element={<Outlet />}>\n                          <Route path="create" element={<ProductCreate />} />\n                      </Route>\n                    </Routes>\n                </Refine>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),R='\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm();\n\n    return (\n      <div style={{ position: "relative" }}>\n        <form style={{ display: "flex", flexDirection: "column", gap: "12px" }}>\n          <label>\n            <span>Name</span>\n            <input type="text" id="name" {...register("name")} />\n            </label>\n            <span style={{ color: "red" }}>{errors?.name?.message}</span>\n          <label>\n            <span>Material</span>\n            <input type="text" id="material" {...register("material")} />\n            </label>\n            <span style={{ color: "red" }}>{errors?.material?.message}</span>\n          <label>\n            <span>Description</span>\n            <textarea id="description" {...register("description")} />\n            </label>\n            <span style={{ color: "red" }}>{errors?.description?.message}</span>\n          <button type="button" {...saveButtonProps}>Save</button>\n        </form>\n        {formLoading && (<div style={{\n          position: "absolute",\n          inset: 0,\n          width: "100%",\n          height: "100%",\n          display: "flex",\n          alignItems: "center",\n          justifyContent: "center",\n          backgroundColor: "rgba(255, 255, 255, 0.5)",\n          color: "#000",\n        }}>loading...</div>)}\n      </div>\n    );\n};\n'.trim();function k(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products/create",files:{"/App.tsx":{code:S,hidden:!0},"/data-provider.tsx":{code:I,active:!0},"/create.tsx":{code:E}}})}const I='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),S='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider, AuthPage } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport dataProvider from "./data-provider";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductShow } from "./show";\nimport { ProductCreate } from "./create";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "products",\n                create: "/products/create"\n              }\n            ]}\n            options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n          >\n            <Routes>\n                <Route\n                    element={\n                    <ThemedLayout>\n                        <Outlet />\n                    </ThemedLayout>\n                    }\n                >\n                    <Route path="/products" element={<Outlet />}>\n                        <Route path="create" element={<ProductCreate />} />\n                    </Route>\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),E='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductCreate = () => {\n  const { formProps, saveButtonProps } = useForm({ redirect: "show" });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item  \n            label="Name"\n            name="name"\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n        >\n            <TextArea rows={2} />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function B(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/mantine":"^2.28.21","@refinedev/core":"^4.45.1","@refinedev/react-router":"^latest","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@tabler/icons-react":"^3.1.0","@emotion/react":"^11.8.2","@mantine/core":"^5.10.4","@mantine/hooks":"^5.10.4","@mantine/form":"^5.10.4","@mantine/notifications":"^5.10.4","react-router":"^7.0.2"},startRoute:"/products/create",files:{"/App.tsx":{code:D,hidden:!0},"/data-provider.tsx":{code:O,active:!0},"/create.tsx":{code:A}}})}const O='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),D='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayout,\n    RefineThemes,\n    useNotificationProvider,\n    AuthPage\n} from "@refinedev/mantine";\nimport { NotificationsProvider } from "@mantine/notifications";\nimport { MantineProvider, Global } from "@mantine/core";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router";\n\nimport dataProvider from "./data-provider";\n\nimport { ProductCreate } from "./create";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <MantineProvider\n                theme={RefineThemes.Blue}\n                withNormalizeCSS\n                withGlobalStyles\n            >\n                <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n                <NotificationsProvider position="top-right">\n                    <Refine\n                        notificationProvider={useNotificationProvider}\n                        routerProvider={routerProvider}\n                        dataProvider={dataProvider}\n                        resources={[\n                            {\n                                name: "products",\n                                create: "/products/create",\n                            },\n                        ]}\n                        options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n                    >\n                        <Routes>\n                            <Route\n                                element={\n                                    <ThemedLayout>\n                                        <Outlet />\n                                    </ThemedLayout>\n                                }\n                            >\n                                <Route path="/products" element={<Outlet />}>\n                                    <Route path="create" element={<ProductCreate />} />\n                                </Route>\n                                <Route path="*" element={<ErrorComponent />} />\n                            </Route>\n                        </Routes>\n                    </Refine>\n                </NotificationsProvider>\n            </MantineProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),A='\nimport { Create, useForm } from "@refinedev/mantine";\nimport { TextInput, Textarea, NumberInput } from "@mantine/core";\n\nexport const ProductCreate = () => {\n  const {\n      saveButtonProps,\n      getInputProps,\n      errors,\n  } = useForm({\n        initialValues: {\n          name: "",\n          material: "",\n        },\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          id="name"\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          id="material"\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n        <Textarea\n          mt={8}\n          id="description"\n          label="Description"\n          placeholder="Description"\n          {...getInputProps("description")}\n        />\n      </form>\n    </Create>\n  );\n};\n'.trim();function M(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/mui":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"^4.8.12","@emotion/react":"^11.8.2","@emotion/styled":"^11.8.1","@mui/lab":"^6.0.0-beta.14","@mui/material":"^6.1.7","@mui/system":"^6.4.11","@mui/utils":"^7.1.0","@mui/x-data-grid":"7.23.5","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products/create",files:{"/App.tsx":{code:L,hidden:!0},"/data-provider.tsx":{code:U,active:!0},"/create.tsx":{code:q}}})}const U='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),L='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport {\n  ThemedLayout,\n  ErrorComponent,\n  RefineThemes,\n  useNotificationProvider,\n  RefineSnackbarProvider,\n  AuthPage,\n} from "@refinedev/mui";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport dataProvider from "./data-provider";\n\nimport { ProductCreate } from "./create";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles\n            styles={{ html: { WebkitFontSmoothing: "auto" } }}\n        />\n        <RefineSnackbarProvider>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider}\n                notificationProvider={useNotificationProvider}\n                resources={[\n                    {\n                        name: "products",\n                        create: "/products/create",\n                    },\n                ]}\n                options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n            >\n                <Routes>\n                    <Route\n                        element={\n                            <ThemedLayout>\n                                <Outlet />\n                            </ThemedLayout>\n                        }\n                    >\n                        <Route path="/products" element={<Outlet />}>\n                          <Route path="create" element={<ProductCreate />} />\n                        </Route>\n                        <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                </Routes>\n            </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),q='\nimport { HttpError } from "@refinedev/core";\nimport { Create, useAutocomplete } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport Autocomplete from "@mui/material/Autocomplete";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport { Controller } from "react-hook-form";\n\nexport const ProductCreate = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query, autoSaveProps },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Box\n      component="form"\n      sx={{ display: "flex", flexDirection: "column" }}\n      autoComplete="off"\n      >\n        <TextField\n            id="name"\n            {...register("name")}\n            error={!!errors.name}\n            helperText={errors.name?.message}\n            margin="normal"\n            fullWidth\n            label="Name"\n            name="name"\n            autoFocus\n        />\n        <TextField\n            id="material"\n            {...register("material")}\n            error={!!errors.material}\n            helperText={errors.material?.message}\n            margin="normal"\n            fullWidth\n            label="Material"\n            name="material"\n            autoFocus\n        />\n        <TextField\n          id="description"\n          {...register("description")}\n          error={!!errors.description}\n          helperText={errors.description?.message}\n          margin="normal"\n          label="Description"\n          multiline\n          rows={4}\n        />\n      </Box>\n  </Create>\n  );\n};\n'.trim();function H(){return r.createElement(a.O,{height:460,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/chakra-ui":"^2.26.17","@tabler/icons-react":"^3.1.0","@refinedev/core":"^4.45.1","@refinedev/react-router":"latest","@refinedev/simple-rest":"^4.5.4","@refinedev/react-table":"^5.6.4","@tanstack/react-table":"^8.2.6","@refinedev/react-hook-form":"^4.8.12","@chakra-ui/react":"^2.5.1","react-dom":"^18.0.0","react-router":"^7.0.2","react-hook-form":"^7.57.0"},startRoute:"/products/create",files:{"/App.tsx":{code:j,hidden:!0},"/data-provider.tsx":{code:W,active:!0},"/create.tsx":{code:V}}})}const W='\nimport type { HttpError } from "@refinedev/core";\nimport baseDataProvider from "@refinedev/simple-rest";\n\nconst dataProvider = {\n    ...baseDataProvider("https://api.fake-rest.refine.dev"),\n    create: async () => {\n        // For demo purposes, we\'re hardcoding the error response.\n        // In a real-world application, the error of the server should match the `HttpError` interface\n        // or should be transformed to match it.\n        return Promise.reject({\n            message: "This is an error from the server",\n            statusCode: 400,\n            errors: {\n                name: "Name should be at least 3 characters long",\n                material: "Material should start with a capital letter",\n                description: "Description should be at least 10 characters long",\n            },\n        } as HttpError);\n    }\n};\n\nexport default dataProvider;\n'.trim(),j='\nimport { Refine } from "@refinedev/core";\nimport {\n    ErrorComponent,\n    ThemedLayout,\n    RefineThemes,\n    useNotificationProvider,\n    AuthPage\n} from "@refinedev/chakra-ui";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport routerProvider, {\n    NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from "react-router";\n\nimport dataProvider from "./data-provider";\n\nimport { ProductCreate } from "./create";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ChakraProvider theme={RefineThemes.Blue}>\n                <Refine\n                    notificationProvider={useNotificationProvider}\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider}\n                    resources={[\n                        {\n                            name: "products",\n                            create: "/products/create",\n                        },\n                    ]}\n                    options={{ mutationMode: "pessimistic", syncWithLocation: true, redirect: { afterCreate: false } }}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <ThemedLayout>\n                                    <Outlet />\n                                </ThemedLayout>\n                            }\n                        >\n                            <Route path="/products" element={<Outlet />}>\n                                <Route path="create" element={<ProductCreate />} />\n                            </Route>\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ChakraProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n'.trim(),V='\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const ProductCreate = () => {\n    const {\n        refineCore: { formLoading },\n        saveButtonProps,\n        register,\n        formState: { errors },\n    } = useForm();\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                    id="name"\n                    type="text"\n                    {...register("name")}\n                />\n                <FormErrorMessage>\n                    {`${errors.name?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.material}>\n                <FormLabel>Material</FormLabel>\n                <Input\n                    id="material"\n                    type="text"\n                    {...register("material")}\n                />\n                <FormErrorMessage>\n                    {`${errors.material?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n            <FormControl mb="3" isInvalid={!!errors?.description}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                    id="description"\n                    {...register("description")}\n                />\n                <FormErrorMessage>\n                    {`${errors.description?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Create>\n    );\n};\n'.trim();function G(){return r.createElement(a.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"latest","react-router":"^7.0.2"},startRoute:"/products/create",files:{"/App.tsx":{code:z},"/style.css":{code:$,hidden:!0},"/list.tsx":{code:Q},"/create.tsx":{code:_,active:!0},"/edit.tsx":{code:K}}})}const z='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes, Navigate, Outlet } from "react-router";\nimport routerProvider from "@refinedev/react-router";\n\nimport "./style.css";\n\nimport { List } from "./list.tsx";\nimport { Edit } from "./edit.tsx";\nimport { Create } from "./create.tsx";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        create: "/products/create",\n                        edit: "/products/edit/:id",\n                    }\n                ]}\n            >\n                <Routes>\n                    <Route path="/products" element={<Outlet />}>\n                        <Route index element={<List />} />\n                        <Route path="create" element={<Create />} />\n                        <Route path="edit/:id" element={<Edit />} />\n                    </Route>\n                </Routes>\n            </Refine>\n        </BrowserRouter>\n    );\n}\n'.trim(),$="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\n".trim(),Q='\nimport { useList, BaseKey } from "@refinedev/core";\nimport { Link } from "react-router";\n\nexport const List: React.FC = () => {\n    const { result, query } = useList<IProduct>({\n        resource: "products",\n        filters: [\n            {\n                field: "id",\n                operator: "gte",\n                value: 120,\n            }\n        ]\n    });\n\n    if (query.isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n                <h1>Products</h1>\n                <Link to="/products/create">Create Product</Link>\n            <ul>\n                {result?.data?.map((product) => (\n                    <li key={product.id}>\n                        {product.name}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n'.trim(),_='\nimport React from "react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport type { HttpError, BaseKey } from "@refinedev/core";\n\nexport const Create: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading, redirect },\n        register,\n        handleSubmit,\n        reset,\n    } = useForm<IProduct, HttpError, FormValues>({\n        refineCoreProps: {\n            redirect: false,\n        }\n    });\n\n    const saveAndList = (variables: FormValues) => {\n        onFinish(variables).then(() => {\n            // The default behavior is (unless changed in <Refine /> component) redirecting to the list page.\n            // Since we\'ve stated as `redirect: false` in the useForm hook, we need to redirect manually.\n            redirect("list");\n        });\n    };\n\n    const saveAndContinue = (variables: FormValues) => {\n        onFinish(variables).then(({ data }) => {\n            // We\'ll wait for the mutation to finish and grab the id of the created product from the response.\n            // This will only work on `pesimistic` mutation mode.\n            redirect("edit", data.id);\n        });\n    };\n\n    const saveAndAddAnother = (variables: FormValues) => {\n        onFinish(variables).then(() => {\n            // We\'ll wait for the mutation to finish and reset the form.\n            reset();\n        });\n    };\n\n    return (\n        <div>\n            <h1>Create Product</h1>\n            <form onSubmit={handleSubmit(saveAndList)}>\n                <label htmlFor="name">Name</label>\n                <input\n                    name="name"\n                    placeholder="Name"\n                    {...register("name", { required: true })}\n                />\n                <label htmlFor="material">Material</label>\n                <input\n                    name="material"\n                    placeholder="Material"\n                    {...register("material", { required: true })}\n                />\n                <div style={{ display: "flex", gap: "12px" }}>\n                    <button type="submit">Save</button>\n                    <button type="button" onClick={handleSubmit(saveAndContinue)}>Save and Continue Editing</button>\n                    <button type="button" onClick={handleSubmit(saveAndAddAnother)}>Save and Add Another</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n\ninterface FormValues {\n    name?: string;\n    material?: string;\n}\n'.trim(),K='\nimport React from "react";\nimport { useSelect } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\n\nimport type { HttpError, BaseKey } from "@refinedev/core";\n\nexport const Edit: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading },\n        register,\n        handleSubmit,\n        reset\n    } = useForm<IProduct, HttpError, FormValues>();\n\n    return (\n        <div>\n            <h1>Edit Product</h1>\n            <form onSubmit={handleSubmit(onFinish)}>\n                <label htmlFor="name">Name</label>\n                <input\n                    name="name"\n                    placeholder="Name"\n                    {...register("name", { required: true })}\n                />\n                <label htmlFor="material">Material</label>\n                <input\n                    name="material"\n                    placeholder="Material"\n                    {...register("material", { required: true })}\n                />\n                <button type="submit">Save</button>\n            </form>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n\ninterface FormValues {\n    name?: string;\n    material?: string;\n}\n'.trim();function X(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Z(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function J(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const Y={title:"Forms"},ee=void 0,ne={unversionedId:"guides-concepts/forms/index",id:"guides-concepts/forms/index",title:"Forms",description:"In almost every user facing application, forms are a necessity. They are the primary way for users to interact with your application and provide data to your backend. They are also one of the most complex parts of an application to build and maintain with many cases and features to consider. Refine's form integration aims to make this process as simple as possible while providing as many real world features as possible out of the box. This guide will cover the basics of forms in Refine and how to use them.",source:"@site/docs/guides-concepts/forms/index.md",sourceDirName:"guides-concepts/forms",slug:"/guides-concepts/forms/",permalink:"/docs/guides-concepts/forms/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/guides-concepts/forms/index.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1735116903,formattedLastUpdatedAt:"Dec 25, 2024",frontMatter:{title:"Forms"},sidebar:"mainSidebar",previous:{title:"Data Fetching",permalink:"/docs/guides-concepts/data-fetching/"},next:{title:"Tables",permalink:"/docs/guides-concepts/tables/"}},te={},re=[{value:"Handling Data",id:"handling-data",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Integration with Routers",id:"integration-with-routers",level:2},{value:"Redirection",id:"redirection",level:3},{value:'Unsaved Changes <GuideBadge id="guides-concepts/routing/#useform" /> <GlobalConfigBadge id="core/refine-component/#warnwhenunsavedchanges" />',id:"unsaved-changes--",level:3},{value:"<strong>Usage of <code>&lt;UnsavedChangesNotifier /&gt;</code></strong>",id:"usage-of-unsavedchangesnotifier-",level:4},{value:"Actions <RouterBadge />",id:"actions-",level:2},{value:"Create",id:"create",level:3},{value:"Edit",id:"edit",level:3},{value:"Clone",id:"clone",level:3},{value:'Relationships <GuideBadge id="guides-concepts/data-fetching/#relationships" />',id:"relationships-",level:2},{value:'Mutation Modes <GlobalConfigBadge id="core/refine-component/#mutationmode" />',id:"mutation-modes-",level:2},{value:"Pessimistic",id:"pessimistic",level:3},{value:"Optimistic",id:"optimistic",level:3},{value:"Undoable",id:"undoable",level:3},{value:'Invalidation <GuideBadge id="guides-concepts/general-concepts#caching" description="To learn more about caching, refer to General Concepts guide" />',id:"invalidation-",level:2},{value:"Default Behavior",id:"default-behavior",level:3},{value:"Custom Invalidation",id:"custom-invalidation",level:3},{value:"Optimistic Updates",id:"optimistic-updates",level:2},{value:"Default Behavior",id:"default-behavior-1",level:3},{value:"Custom Optimistic Updates",id:"custom-optimistic-updates",level:3},{value:'Server Side Validation <GlobalConfigBadge id="core/refine-component/#disableserversidevalidation" />',id:"server-side-validation-",level:2},{value:'Notifications <GuideBadge id="notification/notification-provider" />',id:"notifications-",level:2},{value:"Auto Save",id:"auto-save",level:2},{value:"<code>&lt;AutoSaveIndicator /&gt;</code>",id:"autosaveindicator-",level:3},{value:"Modifying Data Before Submission",id:"modifying-data-before-submission",level:2},{value:"Save and Continue",id:"save-and-continue",level:2}],oe=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},ae=oe("DocThumbsUpDownFeedbackWidget"),ie=oe("Tabs"),se=oe("TabItem"),de=oe("GuideBadge"),le=oe("GlobalConfigBadge"),me=oe("RouterBadge"),ue={toc:re},ce="wrapper";function pe(e){var{components:n}=e,t=J(e,["components"]);return(0,o.yg)(ce,Z(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){X(e,n,t[n])}))}return e}({},ue,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"In almost every user facing application, forms are a necessity. They are the primary way for users to interact with your application and provide data to your backend. They are also one of the most complex parts of an application to build and maintain with many cases and features to consider. Refine's form integration aims to make this process as simple as possible while providing as many real world features as possible out of the box. This guide will cover the basics of forms in Refine and how to use them."),(0,o.yg)("h2",{id:"handling-data"},"Handling Data"),(0,o.yg)(ae,{id:"handling-data",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook orchestrates Refine's ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-one"},(0,o.yg)("inlineCode",{parentName:"a"},"useOne")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-update"},(0,o.yg)("inlineCode",{parentName:"a"},"useUpdate"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-create"},(0,o.yg)("inlineCode",{parentName:"a"},"useCreate"))," hooks internally to provide a single interface for form handling."),(0,o.yg)("p",null,"While editing or cloning a record, ",(0,o.yg)("inlineCode",{parentName:"p"},"useOne")," will be used to fetch the record to provide values for the form. When creating a new record, ",(0,o.yg)("inlineCode",{parentName:"p"},"useCreate")," will be used for the mutation. When updating a record, ",(0,o.yg)("inlineCode",{parentName:"p"},"useUpdate")," will be used for the mutation."),(0,o.yg)("p",null,"This means that the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook will handle all of the data fetching and mutation logic for you. All you need to do is provide the form with the correct props and it will handle the rest.")),(0,o.yg)("h2",{id:"basic-usage"},"Basic Usage"),(0,o.yg)(ae,{id:"basic-usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The usage of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hooks may slightly differ between libraries, the core functionality is provided by the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core"),"'s ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook and is the same across all implementations. Refine's core has the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook which is the foundation of all the other extensions and ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," implementations in the other helper libraries."),(0,o.yg)("p",null,"To learn more about the usage and see ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," in action, check out the reference pages for each library:"),(0,o.yg)(ie,{smallTabs:!0,mdxType:"Tabs"},(0,o.yg)(se,{value:"core",label:"Refine's Core",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm } from "@refinedev/core";\n\nconst EditPage = () => {\n  const { query, formLoading, onFinish } = useForm<\n    IProduct,\n    HttpError,\n    FormValues\n  >({\n    resource: "products",\n    action: "edit",\n    id: 123,\n  });\n\n  const record = query.data?.data;\n\n  const onSubmit = (event) => {\n    const data = Object.fromEntries(new FormData(event.target).entries());\n\n    onFinish(data);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name:\n        <input defaultValue={record?.name} />\n      </label>\n      <label>\n        Material:\n        <input defaultValue={record?.material} />\n      </label>\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-form/"},"Check out Core's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))),(0,o.yg)(se,{value:"hook-form",label:"React Hook Form",default:!0,mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm } from "@refinedev/react-hook-form";\n\nconst EditPage = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    formState: { errors },\n    saveButtonProps,\n  } = useForm<IProduct, HttpError, FormValues>({\n    refineCoreProps: {\n      resource: "products",\n      action: "edit",\n      id: 123,\n    },\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onFinish)}>\n      <label>\n        Name:\n        <input {...register("name")} />\n      </label>\n      <label>\n        Material:\n        <input {...register("material")} />\n      </label>\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out React Hook Form's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))),(0,o.yg)(se,{value:"antd",label:"Ant Design",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm, Edit } from "@refinedev/antd";\nimport { Form, Input } from "antd";\n\nconst EditPage = () => {\n  const { formProps, saveButtonProps, query } = useForm<\n    IProduct,\n    HttpError,\n    FormValues\n  >({\n    refineCoreProps: {\n      resource: "products",\n      action: "edit",\n      id: 123,\n    },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item label="Name" name="name">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Material" name="material">\n          <Input />\n        </Form.Item>\n      </Form>\n    </Edit>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},"Check out Ant Design Form's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))),(0,o.yg)(se,{value:"mantine",label:"Mantine",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm, Edit } from "@refinedev/mantine";\nimport { TextInput } from "@mantine/core";\n\nconst EditPage = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    formState: { errors },\n    saveButtonProps,\n  } = useForm<IProduct, HttpError, FormValues>({\n    refineCoreProps: {\n      resource: "products",\n      action: "edit",\n      id: 123,\n    },\n    initialValues: {\n      name: "",\n      material: "",\n    },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          label="Material"\n          placeholder="Material"\n          {...getInputProps("material")}\n        />\n      </form>\n    </Edit>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form"},"Check out Mantine Form's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))),(0,o.yg)(se,{value:"material-ui",label:(0,o.yg)("span",null,(0,o.yg)("span",{className:"block"},"Material UI"),(0,o.yg)("small",{className:"block"},"React Hook Form")),mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { HttpError } from "@refinedev/core";\nimport { Edit } from "@refinedev/mui";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Button, Box, TextField } from "@mui/material";\n\nconst EditPage = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    saveButtonProps,\n  } = useForm<IProduct, HttpError, FormValues>({\n    refineCoreProps: {\n      resource: "products",\n      action: "edit",\n      id: 123,\n    },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box component="form">\n        <TextField\n          {...register("name", {\n            required: "This field is required",\n          })}\n          name="name"\n          label="Name"\n        />\n        <TextField\n          {...register("material", {\n            required: "This field is required",\n          })}\n          name="material"\n          label="Material"\n        />\n      </Box>\n    </Edit>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out React Hook Form's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))),(0,o.yg)(se,{value:"chakra-ui",label:(0,o.yg)("span",null,(0,o.yg)("span",{className:"block"},"Chakra UI"),(0,o.yg)("small",{className:"block"},"React Hook Form")),mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { HttpError } from "@refinedev/core";\nimport { Edit } from "@refinedev/chakra-ui";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { FormControl, FormLabel, Input, Button } from "@chakra-ui/react";\n\nconst EditPage = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    saveButtonProps,\n  } = useForm<IProduct, HttpError, FormValues>({\n    refineCoreProps: {\n      resource: "products",\n      action: "edit",\n      id: 123,\n    },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <form>\n        <FormControl mb="3">\n          <FormLabel>Name</FormLabel>\n          <Input\n            id="name"\n            type="text"\n            {...register("name", { required: "Name is required" })}\n          />\n        </FormControl>\n        <FormControl mb="3">\n          <FormLabel>Material</FormLabel>\n          <Input\n            id="material"\n            type="text"\n            {...register("material", {\n              required: "Material is required",\n            })}\n          />\n        </FormControl>\n      </form>\n    </Edit>\n  );\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out React Hook Form's ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," reference page to learn more about the usage and see it in action."))))),(0,o.yg)("h2",{id:"integration-with-routers"},"Integration with Routers"),(0,o.yg)(ae,{id:"integration-with-routers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If a router integration is made, in most of the cases this enables Refine to infer the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"action")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," from the current route and provide them to ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook. In most of the cases, this will prevent the need of passing explicit ",(0,o.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"action")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," props to the hooks including ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/core";\n\nuseForm({\n  // These properties will be inferred from the current route\n  // removed-start\n  resource: "posts",\n  action: "edit",\n  id: 1,\n  // removed-end\n});\n')),(0,o.yg)("p",null,"To learn more about the routing, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/guides-concepts/routing/#router-integrations"},"Routing")," guide and the ",(0,o.yg)("a",{parentName:"p",href:"/docs/guides-concepts/general-concepts/#router-provider"},"General Concepts")," guide to learn more about how it benefits the development experience.")),(0,o.yg)("h3",{id:"redirection"},"Redirection"),(0,o.yg)(ae,{id:"redirection",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," also uses the router integration to redirect the user to the desired page after a successful mutation. By default, it's the list page of the resource but this can be customized by passing a ",(0,o.yg)("inlineCode",{parentName:"p"},"redirect")," prop to the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook. If you want to change the redirection behavior for all forms, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"options.redirect")," prop of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,o.yg)("inlineCode",{parentName:"a"},"<Refine>")," component"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/core";\n\nuseForm({\n  redirect: "show", // Can also be "list", "edit" or false\n});\n'))),(0,o.yg)("h3",{id:"unsaved-changes--"},"Unsaved Changes ",(0,o.yg)(de,{id:"guides-concepts/routing/#useform",mdxType:"GuideBadge"})," ",(0,o.yg)(le,{id:"core/refine-component/#warnwhenunsavedchanges",mdxType:"GlobalConfigBadge"})),(0,o.yg)(ae,{id:"unsaved-changes--",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hooks have a built-in feature to prevent the user from losing the unsaved changes via a confirmation dialog when changing the route/leaving the page. To enable this feature, you need to use the ",(0,o.yg)("a",{parentName:"p",href:"/docs/guides-concepts/routing/#useform"},(0,o.yg)("inlineCode",{parentName:"a"},"<UnsavedChangesNotifier />"))," components from the router package of the library you are using and set the ",(0,o.yg)("inlineCode",{parentName:"p"},"warnWhenUnsavedChanges")," prop to ",(0,o.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine, useForm } from "@refinedev/core";\n\nuseForm({\n  warnWhenUnsavedChanges: true,\n});\n'))),(0,o.yg)("h4",{id:"usage-of-unsavedchangesnotifier-"},(0,o.yg)("strong",{parentName:"h4"},"Usage of ",(0,o.yg)("inlineCode",{parentName:"strong"},"<UnsavedChangesNotifier />"))),(0,o.yg)(ae,{id:"usage-of-unsavedchangesnotifier-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(ie,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(se,{value:"react-router",label:"React Router",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport {\n  routerProvider,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes } from "react-router";\n\nconst App = () => (\n  <BrowserRouter>\n    <Refine\n      // ...\n      routerProvider={routerProvider}\n      options={{\n        // highlight-next-line\n        warnWhenUnsavedChanges: true,\n      }}\n    >\n      <Routes>{/* ... */}</Routes>\n      {/* highlight-start */}\n      {/* The `UnsavedChangesNotifier` component should be placed under <Refine /> component. */}\n      <UnsavedChangesNotifier />\n      {/* highlight-end */}\n    </Refine>\n  </BrowserRouter>\n);\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")),(0,o.yg)(se,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="_app.tsx"',title:'"_app.tsx"'},'import type { AppProps } from "next/app";\nimport { Refine } from "@refinedev/core";\nimport {\n  routerProvider,\n  UnsavedChangesNotifier,\n} from "@refinedev/nextjs-router/pages";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Refine\n      // ...\n      routerProvider={routerProvider}\n      options={{\n        // highlight-next-line\n        warnWhenUnsavedChanges: true,\n      }}\n    >\n      <Component {...pageProps} />\n      {/* highlight-start */}\n      {/* The `UnsavedChangesNotifier` component should be placed under <Refine /> component. */}\n      <UnsavedChangesNotifier />\n      {/* highlight-end */}\n    </Refine>\n  );\n}\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")),(0,o.yg)(se,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'import type { MetaFunction } from "@remix-run/node";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\n\n// highlight-next-line\nimport routerProvider, {\n  UnsavedChangesNotifier,\n} from "@refinedev/remix-router";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          // ...\n          routerProvider={routerProvider}\n          options={{\n            // highlight-next-line\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Outlet />\n          {/* highlight-next-line */}\n          <UnsavedChangesNotifier />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")))),(0,o.yg)("h2",{id:"actions-"},"Actions ",(0,o.yg)(me,{mdxType:"RouterBadge"})),(0,o.yg)(ae,{id:"actions-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm"),", you'll have 3 action modes to choose from:")),(0,o.yg)("h3",{id:"create"},"Create"),(0,o.yg)(ae,{id:"create",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"This is the default action mode and is used for creating a new record for the resource.")),(0,o.yg)("h3",{id:"edit"},"Edit"),(0,o.yg)(ae,{id:"edit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Used for editing an existing record. This action mode requires an ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," prop to be passed to the form.")),(0,o.yg)("h3",{id:"clone"},"Clone"),(0,o.yg)(ae,{id:"clone",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Used for cloning an existing record. This action mode requires an ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," prop to be passed to the form. The record with the given ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," will be fetched and the values will be used as the initial values for the form fields and the mutation will be performed to create a new record.")),(0,o.yg)("h2",{id:"relationships-"},"Relationships ",(0,o.yg)(de,{id:"guides-concepts/data-fetching/#relationships",mdxType:"GuideBadge"})),(0,o.yg)(ae,{id:"relationships-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine handles ",(0,o.yg)("a",{parentName:"p",href:"/docs/guides-concepts/data-fetching/#relationships"},"data relations")," with data hooks(eg: ",(0,o.yg)("inlineCode",{parentName:"p"},"useOne"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"useMany"),", etc.). This compositional design allows you to easily display other resources' data in your components."),(0,o.yg)("p",null,"However, when it comes to forms, we may want to add fields that are related to other resources. For instance, you may want to add a ",(0,o.yg)("inlineCode",{parentName:"p"},"category")," field to the ",(0,o.yg)("inlineCode",{parentName:"p"},"products")," resource. This field will be a select input that will display the categories fetched from the ",(0,o.yg)("inlineCode",{parentName:"p"},"categories")," resource. Refine offers ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/hooks/use-select"},(0,o.yg)("inlineCode",{parentName:"a"},"useSelect"))," hook to easily manage select (like a ",(0,o.yg)("a",{parentName:"p",href:"https://www.w3schools.com/tags/tag_select.asp"},"Html ",(0,o.yg)("inlineCode",{parentName:"a"},"<select>")," tag"),", ",(0,o.yg)("a",{parentName:"p",href:"https://react-select.com/home"},"React Select"),", etc.) components."),(0,o.yg)("p",null,"You can find more information and usage examples on following ",(0,o.yg)("inlineCode",{parentName:"p"},"useSelect")," documentation pages:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/core/hooks/use-select"},"Headless")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/hooks/use-select/"},"Ant Design Select")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/material-ui/hooks/use-auto-complete/"},"Material UI Autocomplete")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/hooks/use-select/"},"Mantine Select"))),(0,o.yg)("p",null,"In the following example, we will add a ",(0,o.yg)("inlineCode",{parentName:"p"},"category")," field to the ",(0,o.yg)("inlineCode",{parentName:"p"},"products")," resource. This field will be a select input populated with categories using the ",(0,o.yg)("inlineCode",{parentName:"p"},"useSelect")," hook."),(0,o.yg)(ie,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(se,{value:"headless",label:"Headless",mdxType:"TabItem"},(0,o.yg)(i,{mdxType:"UseSelectHeadless"})),(0,o.yg)(se,{value:"antd",label:"Ant Design",mdxType:"TabItem"},(0,o.yg)(l,{mdxType:"UseSelectAntd"})),(0,o.yg)(se,{value:"material-ui",label:"Material UI",mdxType:"TabItem"},(0,o.yg)(c,{mdxType:"UseSelectMaterialUI"})),(0,o.yg)(se,{value:"mantine",label:"Mantine",mdxType:"TabItem"},(0,o.yg)(g,{mdxType:"UseSelectMantine"})))),(0,o.yg)("h2",{id:"mutation-modes-"},"Mutation Modes ",(0,o.yg)(le,{id:"core/refine-component/#mutationmode",mdxType:"GlobalConfigBadge"})),(0,o.yg)(ae,{id:"mutation-modes-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," provides 3 mutation modes to choose from, you may need each of them in different scenarios throughout your application."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  mutationMode: "optimistic", // Can be "pessimistic", "optimistic" and "undoable". Default is "pessimistic"\n});\n'))),(0,o.yg)("h3",{id:"pessimistic"},"Pessimistic"),(0,o.yg)(ae,{id:"pessimistic",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"This is the default mode and is the most common mode. In this mode, the mutation will be performed immediately and the form will be toggle the loading state until the mutation is completed."),(0,o.yg)("p",null,"If the mutation fails, the error will be displayed to the user with no further action such as invalidating the cache and redirection after the mutation.")),(0,o.yg)("h3",{id:"optimistic"},"Optimistic"),(0,o.yg)(ae,{id:"optimistic",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In this mode, the mutation will be performed immediately and simultaneously it will be treated as if it has succeeded. The user will be shown a success notification and the existing query cache will be optimistically updated with the provided form values for the list, many and detail queries."),(0,o.yg)("p",null,"If not specified the opposite, it will do the redirection to the desired page. If the mutation succeeds, the query cache will be invalidated and the active queries will trigger a refetch."),(0,o.yg)("p",null,"If the mutation fails, the optimistic updates will be reverted and the error will be displayed to the user.")),(0,o.yg)("h3",{id:"undoable"},"Undoable"),(0,o.yg)(ae,{id:"undoable",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In this mode, the mutation will be delayed for the specified amount of time but simultaneously will be treated as if it has succeeded. Identical to the ",(0,o.yg)("inlineCode",{parentName:"p"},"optimistic")," mode, the existing query cache will be updated accordingly and the user will be shown a notification with a countdown."),(0,o.yg)("p",null,'Unless it is ordered to "undo" the action by the user, the mutation will be performed after the countdown. If the mutation succeeds, the query cache will be invalidated and the active queries will trigger a refetch.'),(0,o.yg)("p",null,"If the mutation fails, the optimistic updates will be reverted and the error will be displayed to the user.")),(0,o.yg)("h2",{id:"invalidation-"},"Invalidation ",(0,o.yg)(de,{id:"guides-concepts/general-concepts#caching",description:"To learn more about caching, refer to General Concepts guide",mdxType:"GuideBadge"})),(0,o.yg)(ae,{id:"invalidation-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"All the queries made by Refine's data hooks and their derivatives are cached for a certain amount of time. This means that if you perform a query for a resource, the result will be cached and the next time you perform the same query, the results will be returned immediately from the cache and then if the data is considered stale, the query will be refetched in the background."),(0,o.yg)("p",null,"When you perform a mutation, the query cache will be invalidated by default after a successful mutation. This means that if you perform a mutation that affects the data of a query, the query will be refetched in the background and the UI will be updated accordingly.")),(0,o.yg)("h3",{id:"default-behavior"},"Default Behavior"),(0,o.yg)(ae,{id:"default-behavior",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," will invalidate the following queries after a successful mutation:"),(0,o.yg)("p",null,"For ",(0,o.yg)("inlineCode",{parentName:"p"},"create")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"clone")," actions; ",(0,o.yg)("inlineCode",{parentName:"p"},"list")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"many")," queries for the resource. This means all the related queries made by ",(0,o.yg)("inlineCode",{parentName:"p"},"useList"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"useSelect"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"useMany"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," etc. will be invalidated."),(0,o.yg)("p",null,"For ",(0,o.yg)("inlineCode",{parentName:"p"},"edit")," action; in addition to the queries invalidated in ",(0,o.yg)("inlineCode",{parentName:"p"},"create")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"clone")," modes, ",(0,o.yg)("inlineCode",{parentName:"p"},"detail")," query for the resource will be invalidated. This means all the related queries made by ",(0,o.yg)("inlineCode",{parentName:"p"},"useOne"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"useShow")," etc. will be invalidated.")),(0,o.yg)("h3",{id:"custom-invalidation"},"Custom Invalidation"),(0,o.yg)(ae,{id:"custom-invalidation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In some cases, you may want to change the default invalidation behavior such as to invalidate all the resource or skipping the ",(0,o.yg)("inlineCode",{parentName:"p"},"list")," queries etc. To do that, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"invalidates")," prop of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," to determine which query sets should be invalidated after a successful mutation."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const { formProps } = useForm({\n  resource: "posts",\n  action: "edit",\n  id: 1,\n  // highlight-next-line\n  invalidates: ["many", "detail"], // default is ["list", "many", "detail"]\n});\n')),(0,o.yg)("p",null,"If you want to disable the invalidation completely and handle it manually, you can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," to the ",(0,o.yg)("inlineCode",{parentName:"p"},"invalidates")," prop. Then, you can use the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-invalidate"},(0,o.yg)("inlineCode",{parentName:"a"},"useInvalidate"))," hook to invalidate the queries manually based on your conditions."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useInvalidate } from "@refinedev/core";\n\nconst invalidate = useInvalidate();\n\nuseForm({\n  resource: "categories",\n  action: "edit",\n  id: 1,\n  // highlight-start\n  invalidates: false,\n  onMutationSuccess() {\n    invalidate({\n      resource: "posts",\n      invalidates: ["resourceAll"],\n    });\n  },\n  // highlight-end\n});\n'))),(0,o.yg)("h2",{id:"optimistic-updates"},"Optimistic Updates"),(0,o.yg)(ae,{id:"optimistic-updates",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In many cases, you may want to update the query cache optimistically after a mutation before the mutation is completed. This is especially comes in handy when managing the waiting experience of the user. For example, if you are updating a record, you may want to update the query cache with the new values to show the user that the record is updated immediately and then revert the changes if the mutation fails."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Optimistic updates are only available in ",(0,o.yg)("inlineCode",{parentName:"p"},"optimistic")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"undoable")," mutation modes."))),(0,o.yg)("h3",{id:"default-behavior-1"},"Default Behavior"),(0,o.yg)(ae,{id:"default-behavior-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, Refine's mutations will use the provided form data/values to update the existing records in the query cache. This update process includes the ",(0,o.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"detail")," queries related to the record and the resource.")),(0,o.yg)("h3",{id:"custom-optimistic-updates"},"Custom Optimistic Updates"),(0,o.yg)(ae,{id:"custom-optimistic-updates",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In some cases such as the data being submitted is slightly different from the data being fetched in the structural level, you may want to customize the optimistic updates. To do that, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"optimisticUpdateMap")," prop of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," to determine how the query cache will be updated for each query set."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"optimisticUpdateMap")," prop also lets you disable the optimistic updates for a specific query set by passing ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," to the corresponding key."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  resource: "posts",\n  id: 1,\n  mutationMode: "optimistic",\n  optimisticUpdateMap: {\n    list: (\n      previous, // Previous query data\n      variables, // Variables used in the query\n      id, // Record id\n    ) => {\n      // update the `previous` data using the `variables` and `id`, then return it\n    },\n    many: (\n      previous, // Previous query data\n      variables, // Variables used in the query\n      id, // Record id\n    ) => {\n      // update the `previous` data using the `variables` and `id`, then return it\n    },\n    detail: (\n      previous, // Previous query data\n      variables, // Variables used in the query\n    ) => {\n      // update the `previous` data using the `variables`, then return it\n    },\n  },\n});\n'))),(0,o.yg)("h2",{id:"server-side-validation-"},"Server Side Validation ",(0,o.yg)(le,{id:"core/refine-component/#disableserversidevalidation",mdxType:"GlobalConfigBadge"})),(0,o.yg)(ae,{id:"server-side-validation-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Server-side form validation is a technique used to validate form data on the server before processing it. Unlike client-side validation, which is performed in the user's browser using JavaScript, server-side validation occurs on the server-side code, typically in the backend of the application."),(0,o.yg)("p",null,"Refine supports server-side validation out-of-the-box in all ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," derivatives. To handle server-side validation, the data providers needs to be correctly set up to return the errors in form submissions with a specific format. After this, Refine's ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," will propagate the errors to the respective form fields."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { HttpError } from "@refinedev/core";\n\nconst error: HttpError = {\n  message: "An error occurred while updating the record.",\n  statusCode: 400,\n  // the errors field is required for server-side validation.\n  // when the errors field is set, useForm will automatically display the error messages in the form with the corresponding fields.\n  errors: {\n    title: ["Title is required"],\n    content: {\n      key: "form.error.content",\n      message: "Content is required.",\n    },\n    tags: true,\n  },\n};\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/core/interface-references#httperror"},"Check out ",(0,o.yg)("inlineCode",{parentName:"a"},"HttpError")," interface for more information about the error format.")),(0,o.yg)("p",null,"Examples below demonstrates the server-side validation and error propagation:"),(0,o.yg)(ie,{smallTabs:!0,wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(se,{value:"core",label:"Refine's Core",mdxType:"TabItem"},(0,o.yg)(v,{mdxType:"ServerSideValidationCore"})),(0,o.yg)(se,{value:"hook-form",label:"React Hook Form",mdxType:"TabItem"},(0,o.yg)(P,{mdxType:"ServerSideValidationReactHookForm"})),(0,o.yg)(se,{default:!0,value:"antd",label:"Ant Design",mdxType:"TabItem"},(0,o.yg)(k,{mdxType:"ServerSideValidationAntd"})),(0,o.yg)(se,{value:"mantine",label:"Mantine",mdxType:"TabItem"},(0,o.yg)(B,{mdxType:"ServerSideValidationMantine"})),(0,o.yg)(se,{value:"material-ui",label:(0,o.yg)("span",null,(0,o.yg)("span",{className:"block"},"Material UI"),(0,o.yg)("small",{className:"block"},"React Hook Form")),mdxType:"TabItem"},(0,o.yg)(M,{mdxType:"ServerSideValidationMui"})),(0,o.yg)(se,{value:"chakra-ui",label:(0,o.yg)("span",null,(0,o.yg)("span",{className:"block"},"Chakra UI"),(0,o.yg)("small",{className:"block"},"React Hook Form")),mdxType:"TabItem"},(0,o.yg)(H,{mdxType:"ServerSideValidationChakraUi"})))),(0,o.yg)("h2",{id:"notifications-"},"Notifications ",(0,o.yg)(de,{id:"notification/notification-provider",mdxType:"GuideBadge"})),(0,o.yg)(ae,{id:"notifications-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"When forms are submitted, it is a good practice to notify the user about the result of the submission. ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," handles this for you, when the mutation succeeds or fails it will show a notification to the user with a proper message. This behavior can be customized or disabled using the ",(0,o.yg)("inlineCode",{parentName:"p"},"successNotification")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"errorNotification")," props."),(0,o.yg)("p",null,"These props accepts both a function that returns the configuration or a static configuration, this means you'll be able to use the response of the mutation to customize the notification message."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Default Notification Values"',title:'"Default',Notification:!0,'Values"':!0},'useForm({\n  // If not passed explicitly, these default values will be used. Default values can also be customized via i18n.\n  successNotification: (data, values, resource) => {\n    return {\n      description: translate("notifications.success", "Successful"),\n      message: translate(\n        "notifications.(edit|create)Success",\n        "Successfully (updated|created) {resource}",\n      ),\n      type: "success",\n    };\n  },\n  // If not passed explicitly, these default values will be used. Default values can also be customized via i18n.\n  errorNotification: (error, values, resource) => {\n    return {\n      description: error.message,\n      message: translate(\n        "notifications.(edit|create)Error",\n        "Error when (updating|creating) {resource} (status code: {error.statusCode})",\n      ),\n      type: "error",\n    };\n  },\n});\n'))),(0,o.yg)("h2",{id:"auto-save"},"Auto Save"),(0,o.yg)(ae,{id:"auto-save",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In many forms, it is a good practice to save the form data automatically as the user types to avoid losing the data in case of an unexpected event. This is especially useful in long forms where the user may spend a lot of time filling the form. ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," is packed with this feature out-of-the-box."),(0,o.yg)("p",null,"While ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core"),"'s ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," packs this feature, the auto save is not triggered automatically. In the extensions of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook in the other libraries, the auto save is handled internally and is triggered automatically."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm } from "@refinedev/core";\n\nconst { autoSaveProps } = useForm({\n  autoSave: {\n    enabled: true, // Enables the auto save feature, defaults to false\n    debounce: 2000, // Debounce interval to trigger the auto save, defaults to 1000\n    invalidateOnUnmount: true, // Invalidates the queries when the form is unmounted, defaults to false\n  },\n});\n'))),(0,o.yg)("h3",{id:"autosaveindicator-"},(0,o.yg)("inlineCode",{parentName:"h3"},"<AutoSaveIndicator />")),(0,o.yg)(ae,{id:"autosaveindicator-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's core and ui integrations are shipped with an ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/components/auto-save-indicator"},(0,o.yg)("inlineCode",{parentName:"a"},"<AutoSaveIndicator />"))," component that can be used to show a visual indicator to the user when the auto save is triggered. The ",(0,o.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," value from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm"),"'s return value can be passed to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<AutoSaveIndicator />")," to show the auto save status to the user. It will automatically show the loading, success and error states to the user."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { AutoSaveIndicator } from "@refinedev/core";\n\nconst { autoSaveProps } = useForm({\n  resource: "posts",\n  action: "edit",\n  id: 1,\n  autoSave: {\n    enabled: true,\n  },\n});\n\nreturn (\n  <form>\n    {/* ... */}\n    <AutoSaveIndicator {...autoSaveProps} />\n  </form>\n);\n'))),(0,o.yg)("h2",{id:"modifying-data-before-submission"},"Modifying Data Before Submission"),(0,o.yg)(ae,{id:"modifying-data-before-submission",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In some cases, you might want to change the data before submitting it to the backend. For example, you might want to add a ",(0,o.yg)("inlineCode",{parentName:"p"},"full_name")," field to the form data of a user resource by combining the ",(0,o.yg)("inlineCode",{parentName:"p"},"first_name")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"last_name")," fields. While the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," has the natural support for this, the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," derivatives from the other libraries of Refine has a different approach."),(0,o.yg)("p",null,"Each of these form implementations have a way to modify the data before submission with a slightly different approach. To learn more about how to modify the data before submission, check out the usage examples of each library:"),(0,o.yg)(ie,{mdxType:"Tabs"},(0,o.yg)(se,{value:"react-hook-form",label:"React Hook Form",default:!0,mdxType:"TabItem"},(0,o.yg)("p",null,"To learn more about how to modify the data before submission, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages##how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"Using ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," of ",(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," reference page."),(0,o.yg)(ie,{mdxType:"Tabs"},(0,o.yg)(se,{value:"headless",label:"Headless",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm } from "@refinedev/react-hook-form";\nimport { FieldValues } from "react-hook-form";\n\nconst EditPage = () => {\n  const {\n    refineCore: { onFinish },\n    register,\n    handleSubmit,\n  } = useForm();\n\n  // highlight-start\n  const onFinishHandler = (data: FieldValues) => {\n    onFinish({\n      fullName: `${data.name} ${data.surname}`,\n    });\n  };\n  // highlight-end\n\n  return (\n    // highlight-next-line\n    <form onSubmit={handleSubmit(onFinishHandler)}>\n      <label>\n        Name:\n        <input {...register("name")} />\n      </label>\n      <label>\n        Surname:\n        <input {...register("surname")} />\n      </label>\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n'))),(0,o.yg)(se,{value:"material-ui",label:"With Material UI",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { HttpError } from "@refinedev/core";\nimport { Create } from "@refinedev/mui";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Button, Box, TextField } from "@mui/material";\n\ntype FormValues = {\n  name: string;\n  surname: string;\n};\n\nexport const UserCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { onFinish },\n    handleSubmit,\n  } = useForm<FormValues, HttpError, FormValues>();\n\n  const handleSubmitPostCreate = (values: FormValues) => {\n    const { name, surname } = values;\n    const fullName = `${name} ${surname}`;\n    onFinish({\n      ...value,\n      fullName,\n    });\n  };\n\n  return (\n    <Create\n      saveButtonProps={{\n        ...saveButtonProps,\n        onClick: handleSubmit(handleSubmitForm),\n      }}\n    >\n      <Box component="form">\n        <TextField\n          {...register("name", {\n            required: "This field is required",\n          })}\n          name="name"\n          label="Name"\n          error={!!errors.name}\n          helperText={errors.name?.message}\n        />\n        <TextField\n          {...register("surname", {\n            required: "This field is required",\n          })}\n          name="surname"\n          label="Surname"\n          error={!!errors.surname}\n          helperText={errors.surname?.message}\n        />\n      </Box>\n    </Create>\n  );\n};\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/basic-views/create#savebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"<Create />"))," component and ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#savebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"saveButtonProps"))," prop to learn more about their usage.")),(0,o.yg)(se,{value:"chakra-ui",label:"With Chakra UI",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { HttpError } from "@refinedev/core";\nimport { Create } from "@refinedev/chakra-ui";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { FormControl, FormLabel, Input, Button } from "@chakra-ui/react";\n\ntype FormValues = {\n  name: string;\n  surname: string;\n};\n\nexport const UserCreate: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { onFinish },\n    handleSubmit,\n  } = useForm<FormValues, HttpError, FormValues>();\n\n  const handleSubmitPostCreate = (values: FormValues) => {\n    const { name, surname } = values;\n    const fullName = `${name} ${surname}`;\n    onFinish({\n      ...value,\n      fullName,\n    });\n  };\n\n  return (\n    <Create\n      saveButtonProps={{\n        ...saveButtonProps,\n        onClick: handleSubmit(handleSubmitForm),\n      }}\n    >\n      <form>\n        <FormControl mb="3">\n          <FormLabel>Name</FormLabel>\n          <Input\n            id="name"\n            type="text"\n            {...register("name", { required: "Name is required" })}\n          />\n        </FormControl>\n        <FormControl mb="3">\n          <FormLabel>Surname</FormLabel>\n          <Input\n            id="surname"\n            type="text"\n            {...register("surname", {\n              required: "Surname is required",\n            })}\n          />\n        </FormControl>\n      </form>\n    </Create>\n  );\n};\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/basic-views/create#savebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"<Create />"))," component and ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#savebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"saveButtonProps"))," prop to learn more about their usage.")))),(0,o.yg)(se,{value:"antd",label:"Ant Design",mdxType:"TabItem"},(0,o.yg)("p",null,"To learn more about how to modify the data before submission, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"Using ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," of ",(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," reference page."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm, Create } from "@refinedev/antd";\nimport { Form, Input } from "antd";\n\nconst EditPage = () => {\n  const { formProps, saveButtonProps, onFinish } = useForm();\n\n  // highlight-start\n  const handleOnFinish = (values) => {\n    onFinish({\n      fullName: `${values.name} ${values.surname}`,\n    });\n  };\n  // highlight-end\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} onFinish={handleOnFinish} layout="vertical">\n        <Form.Item label="Name" name="name">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Surname" name="surname">\n          <Input />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'))),(0,o.yg)(se,{value:"mantine",label:"Mantine",mdxType:"TabItem"},(0,o.yg)("p",null,"To learn more about how to modify the data before submission, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/mantine/hooks/use-form#how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"Using ",(0,o.yg)("inlineCode",{parentName:"a"},"useForm")," of ",(0,o.yg)("inlineCode",{parentName:"a"},"@refinedev/mantine"))," reference page."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="edit.tsx"',title:'"edit.tsx"'},'import { useForm, Create } from "@refinedev/mantine";\nimport { TextInput } from "@mantine/core";\n\nconst CreatePage = () => {\n  const { saveButtonProps, getInputProps } = useForm({\n    initialValues: {\n      name: "",\n      surname: "",\n    },\n    // highlight-start\n    transformValues: (values) => ({\n      fullName: `${values.name} ${values.surname}`,\n    }),\n    // highlight-end\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <form>\n        <TextInput\n          mt={8}\n          label="Name"\n          placeholder="Name"\n          {...getInputProps("name")}\n        />\n        <TextInput\n          mt={8}\n          label="Surname"\n          placeholder="Surname"\n          {...getInputProps("surname")}\n        />\n      </form>\n    </Create>\n  );\n};\n'))))),(0,o.yg)("h2",{id:"save-and-continue"},"Save and Continue"),(0,o.yg)(ae,{id:"save-and-continue",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"In many cases, you may want to redirect the user to the edit page of the record after creating it. This is especially useful in cases where the user needs to fill a long form and you don't want to lose the data in case of an unexpected event."),(0,o.yg)("p",null,"In the example below, we'll create multiple options for the user to choose from after creating a record. The user will be able to choose between redirecting to the list page, edit page or staying in the create page in order to continue creating records."),(0,o.yg)(G,{mdxType:"SaveAndContinue"})))}pe.isMDXComponent=!0}}]);