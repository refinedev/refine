"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[21171],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(n),m=r,y=g["".concat(s,".").concat(m)]||g[m]||u[m]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>y,default:()=>x,frontMatter:()=>m,metadata:()=>c,toc:()=>h});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={toc:[]},s="wrapper";function d(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(s,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},l,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n  List,\n  SaveButton,\n  EditButton,\n  TextField,\n  useEditableTable,\n} from "@refinedev/antd";\nimport { Table, Form, Space, Button, Input } from "antd";\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n\nconst PostList: React.FC = () => {\n  const {\n    tableProps,\n    formProps,\n    isEditing,\n    setId: setEditId,\n    saveButtonProps,\n    cancelButtonProps,\n    editButtonProps,\n  } = useEditableTable<IPost>();\n\n  return (\n    <List>\n      <Form {...formProps}>\n        <Table\n          {...tableProps}\n          rowKey="id"\n          onRow={(record) => ({\n            // eslint-disable-next-line\n            onClick: (event: any) => {\n              if (event.target.nodeName === "TD") {\n                setEditId && setEditId(record.id);\n              }\n            },\n          })}\n        >\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column<IPost>\n            dataIndex="title"\n            title="Title"\n            render={(value, record) => {\n              if (isEditing(record.id)) {\n                return (\n                  <Form.Item name="title" style={{ margin: 0 }}>\n                    <Input />\n                  </Form.Item>\n                );\n              }\n              return <TextField value={value} />;\n            }}\n          />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            render={(_, record) => {\n              if (isEditing(record.id)) {\n                return (\n                  <Space>\n                    <SaveButton {...saveButtonProps} hideText size="small" />\n                    <Button {...cancelButtonProps} size="small">\n                      Cancel\n                    </Button>\n                  </Space>\n                );\n              }\n              return (\n                <EditButton\n                  {...editButtonProps(record.id)}\n                  hideText\n                  size="small"\n                />\n              );\n            }}\n          />\n        </Table>\n      </Form>\n    </List>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}d.isMDXComponent=!0;const m={title:"useEditableTable",source:"packages/antd/src/hooks/table/useTable"},y=void 0,c={unversionedId:"ui-integrations/ant-design/hooks/use-editable-table/index",id:"version-4.xx.xx/ui-integrations/ant-design/hooks/use-editable-table/index",title:"useEditableTable",description:"useEditeableTable allows you to implement the edit feature on the ` with ease and returns properties that can be used on Ant Design's  and ` components.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/hooks/use-editable-table/index.md",sourceDirName:"ui-integrations/ant-design/hooks/use-editable-table",slug:"/ui-integrations/ant-design/hooks/use-editable-table/",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-editable-table/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/hooks/use-editable-table/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useEditableTable",source:"packages/antd/src/hooks/table/useTable"},sidebar:"mainSidebar",previous:{title:"useTable",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-table/"},next:{title:"useSimpleList",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/hooks/use-simple-list/"}},b={},h=[{value:"Usage",id:"usage",level:2},{value:"Editing with buttons",id:"editing-with-buttons",level:3},{value:"Editing by clicking to row",id:"editing-by-clicking-to-row",level:3},{value:"Properties",id:"properties",level:2},{value:"autoSubmitClose",id:"autosubmitclose",level:3},{value:"Return Values",id:"return-values",level:2},{value:"cancelButtonProps",id:"cancelbuttonprops",level:3},{value:"editButtonProps",id:"editbuttonprops",level:3},{value:"isEditing",id:"isediting",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],f=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},N=f("DocThumbsUpDownFeedbackWidget"),C=f("PropsTable"),v=f("CodeSandboxExample"),T={toc:h},P="wrapper";function x(e){var{components:t}=e,n=u(e,["components"]);return(0,a.yg)(P,g(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){p(e,t,n[t])}))}return e}({},T,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useEditeableTable")," allows you to implement the edit feature on the ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Table>"))," with ease and returns properties that can be used on Ant Design's ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Table>"))," and ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Form>"))," components."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useEditeableTable")," hook is extended from the ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," hook from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/antd"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. This means that you can use all the features of ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," hook."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(N,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Here is an example of how to use ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable")," hook. We will explain the details of this example and hooks usage in the following sections."),(0,a.yg)(d,{mdxType:"LivePreview"})),(0,a.yg)("h3",{id:"editing-with-buttons"},"Editing with buttons"),(0,a.yg)(N,{id:"editing-with-buttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Let's say that we want to make the ",(0,a.yg)("inlineCode",{parentName:"p"},"Post")," data where we show the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"title")," values a listing page:"),(0,a.yg)("p",null,"This time, to add the edit feature, we have to cover the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table>")," component with a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form>")," component and pass the properties coming from ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable")," to the corresponding components:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/pages/posts/list.tsx"',title:'"/pages/posts/list.tsx"'},'import { List, useEditableTable, TextField } from "@refinedev/antd";\nimport { Table, Form } from "antd";\n\nexport const PostList: React.FC = () => {\n  // highlight-next-line\n  const { tableProps, formProps } = useEditableTable<IPost>();\n\n  return (\n    <List>\n      // highlight-start\n      <Form {...formProps}>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n        </Table>\n      </Form>\n      // highlight-end\n    </List>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n}\n')),(0,a.yg)("p",null,"Now lets add a column for edit buttons:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/pages/posts/list.tsx"',title:'"/pages/posts/list.tsx"'},'import {\n  List,\n  // highlight-start\n  SaveButton,\n  EditButton,\n  // highlight-end\n  useEditableTable,\n} from "@refinedev/antd";\nimport {\n  Table,\n  Form,\n  // highlight-start\n  Space,\n  Button,\n  // highlight-end\n} from "antd";\n\nexport const PostList: React.FC = () => {\n  const {\n    tableProps,\n    formProps,\n    isEditing,\n    // highlight-start\n    saveButtonProps,\n    cancelButtonProps,\n    editButtonProps,\n    // highlight-end\n  } = useEditableTable<IPost>();\n\n  return (\n    <List>\n      <Form {...formProps}>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column key="id" dataIndex="id" title="ID" />\n          <Table.Column key="title" dataIndex="title" title="Title" />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            // highlight-start\n            render={(_text, record) => {\n              if (isEditing(record.id)) {\n                return (\n                  <Space>\n                    <SaveButton {...saveButtonProps} size="small" />\n                    <Button {...cancelButtonProps} size="small">\n                      Cancel\n                    </Button>\n                  </Space>\n                );\n              }\n              return (\n                <Space>\n                  <EditButton {...editButtonProps(record.id)} size="small" />\n                </Space>\n              );\n            }}\n            // highlight-end\n          />\n        </Table>\n      </Form>\n    </List>\n  );\n};\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"isEditing")," function that returns from ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable")," lets us check whether a line is currently in edit mode or not."),(0,a.yg)("p",null,"For now, our post is not editable yet. If a post is being edited, we must show editable columns inside a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form.Item>")," using conditional rendering:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/pages/posts/list.tsx"',title:'"/pages/posts/list.tsx"'},'import {\n  List,\n  SaveButton,\n  EditButton,\n  // highlight-start\n  TextField,\n  // highlight-end\n  useEditableTable,\n} from "@refinedev/antd";\nimport {\n  Table,\n  Form,\n  Space,\n  Button,\n  // highlight-next-line\n  Input,\n} from "antd";\n\nexport const PostList: React.FC = () => {\n  const {\n    tableProps,\n    formProps,\n    isEditing,\n    saveButtonProps,\n    cancelButtonProps,\n    editButtonProps,\n  } = useEditableTable<IPost>();\n\n  return (\n    <List>\n      <Form {...formProps}>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column key="id" dataIndex="id" title="ID" />\n          <Table.Column<IPost>\n            key="title"\n            dataIndex="title"\n            title="Title"\n            // highlight-start\n            render={(value, record) => {\n              if (isEditing(record.id)) {\n                return (\n                  <Form.Item name="title" style={{ margin: 0 }}>\n                    <Input />\n                  </Form.Item>\n                );\n              }\n              return <TextField value={value} />;\n            }}\n            // highlight-end\n          />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            render={(_text, record) => {\n              if (isEditing(record.id)) {\n                return (\n                  <Space>\n                    <SaveButton {...saveButtonProps} size="small" />\n                    <Button {...cancelButtonProps} size="small">\n                      Cancel\n                    </Button>\n                  </Space>\n                );\n              }\n              return (\n                <Space>\n                  <EditButton {...editButtonProps(record.id)} size="small" />\n                </Space>\n              );\n            }}\n          />\n        </Table>\n      </Form>\n    </List>\n  );\n};\n')),(0,a.yg)("p",null,"With this, when a user clicks on the edit button, ",(0,a.yg)("inlineCode",{parentName:"p"},"isEditing(lineId)")," will turn ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," for the relevant line. This will also cause ",(0,a.yg)("inlineCode",{parentName:"p"},"<TextInput>")," to show up on the line that's being edited. When the editing is finished, a new value can be saved by clicking ",(0,a.yg)("inlineCode",{parentName:"p"},"<SaveButton>"),"."),(0,a.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,a.yg)("p",{parentName:"admonition"},"By giving the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table.Column>")," component a unique ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," property, you can render the value in that column however you want."),(0,a.yg)("p",{parentName:"admonition"},"For more information, refer to the ",(0,a.yg)("a",{parentName:"p",href:"https://ant.design/components/table/#Column"},(0,a.yg)("inlineCode",{parentName:"a"},"<Table.Column>")," documentation ","\u2192")))),(0,a.yg)("h3",{id:"editing-by-clicking-to-row"},"Editing by clicking to row"),(0,a.yg)(N,{id:"editing-by-clicking-to-row",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"A line with the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," value can be put to edit mode programmatically by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"setId")," function that returns from ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"onRow")," property of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Table>")," component can be used to put a line to editing mode when it's clicked on. The function given to the ",(0,a.yg)("inlineCode",{parentName:"p"},"onRow")," property is called every time one of these lines is clicked on, with the information of which line was clicked on."),(0,a.yg)("p",null,"We can use ",(0,a.yg)("inlineCode",{parentName:"p"},"setId")," to put a line to edit mode whenever it's clicked on."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/pages/posts/list.tsx"',title:'"/pages/posts/list.tsx"'},'import { List, TextField, useEditableTable } from "@refinedev/antd";\nimport { Table, Form, Input } from "antd";\n\nexport const PostList: React.FC = () => {\n  // highlight-start\n  const { tableProps, formProps, isEditing, setId } = useEditableTable<IPost>();\n  // highlight-end\n\n  return (\n    <List>\n      <Form {...formProps}>\n        <Table\n          {...tableProps}\n          key="id"\n          // highlight-start\n          onRow={(record) => ({\n            onClick: (event: any) => {\n              if (event.target.nodeName === "TD") {\n                setId && setId(record.id);\n              }\n            },\n          })}\n          // highlight-end\n        >\n          <Table.Column key="id" dataIndex="id" title="ID" />\n          <Table.Column<IPost>\n            key="title"\n            dataIndex="title"\n            title="Title"\n            render={(value, data: any) => {\n              if (isEditing(data.id)) {\n                return (\n                  <Form.Item name="title" style={{ margin: 0 }}>\n                    <Input />\n                  </Form.Item>\n                );\n              }\n              return <TextField value={value} />;\n            }}\n          />\n        </Table>\n      </Form>\n    </List>\n  );\n};\n'))),(0,a.yg)("h2",{id:"properties"},"Properties"),(0,a.yg)(N,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," properties are available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable"),". You can read the documentation of ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," for more information.")),(0,a.yg)("h3",{id:"autosubmitclose"},"autoSubmitClose"),(0,a.yg)(N,{id:"autosubmitclose",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"autoSubmitClose")," makes the table's row close after a successful submit. It is ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.yg)("p",null,"For this effect, ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable")," automatically calls the ",(0,a.yg)("inlineCode",{parentName:"p"},"setId")," function with ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," after successful submit."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const editableTable = useEditableTable({\n  autoSubmitClose: false,\n});\n"))),(0,a.yg)("h2",{id:"return-values"},"Return Values"),(0,a.yg)(N,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"All ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," return values are available in ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable"),". You can read the documentation of ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm"))," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable"))," for more information.")),(0,a.yg)("h3",{id:"cancelbuttonprops"},"cancelButtonProps"),(0,a.yg)(N,{id:"cancelbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"cancelButtonProps")," returns the props for needed by the ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton>"),"."),(0,a.yg)("p",null,"By default, the ",(0,a.yg)("inlineCode",{parentName:"p"},"onClick")," function is overridden by ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable"),". Which will call ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm's")," ",(0,a.yg)("inlineCode",{parentName:"p"},"setId")," function with ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined")," when called."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"cancelButtonProps: () => ButtonProps;\n"))),(0,a.yg)("h3",{id:"editbuttonprops"},"editButtonProps"),(0,a.yg)(N,{id:"editbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"editButtonProps")," takes ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," as a parameter and returns the props needed by the ",(0,a.yg)("inlineCode",{parentName:"p"},"<EditButton>"),"."),(0,a.yg)("p",null,"By default, the ",(0,a.yg)("inlineCode",{parentName:"p"},"onClick")," function is overridden by ",(0,a.yg)("inlineCode",{parentName:"p"},"useEditableTable"),". Which will call ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm's")," ",(0,a.yg)("inlineCode",{parentName:"p"},"setId")," function with the given ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," when called."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"editButtonProps: (id: BaseKey) => ButtonProps;\n")),(0,a.yg)("p",null,"It also returns a function that takes an ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," as a parameter and returns the props for the edit button.")),(0,a.yg)("h3",{id:"isediting"},"isEditing"),(0,a.yg)(N,{id:"isediting",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"isEditing: (id: BaseKey) => boolean;\n")),(0,a.yg)("p",null,"Takes a ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," as a parameter and returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," if the given ",(0,a.yg)("inlineCode",{parentName:"p"},"BaseKey")," is equal to the selected ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm's")," ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),".")),(0,a.yg)("h2",{id:"api"},"API"),(0,a.yg)("h3",{id:"properties-1"},"Properties"),(0,a.yg)(N,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(C,{module:"@refinedev/antd/useEditableTable",mdxType:"PropsTable"})),(0,a.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.yg)(N,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TError"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,a.yg)("td",{parentName:"tr",align:null},"Values for params"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,a.yg)("td",{parentName:"tr",align:null},"Values for search params"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{}"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"TData"),(0,a.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"TQueryFnData")))))),(0,a.yg)("h3",{id:"return-values-1"},"Return values"),(0,a.yg)(N,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Property"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"searchFormProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Form>"))," props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"FormProps<TSearchVariables>")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"tableProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Table>"))," props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"TableProps<TData>")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"tableQuery"),(0,a.yg)("td",{parentName:"tr",align:null},"Result of the ",(0,a.yg)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,a.yg)("inlineCode",{parentName:"td"},"useQuery")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<{`` data: TData[];`` total: number; },`` TError>")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"sorter"),(0,a.yg)("td",{parentName:"tr",align:null},"Current sorting state"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#crudsorting"},(0,a.yg)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"filters"),(0,a.yg)("td",{parentName:"tr",align:null},"Current filters state"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#crudfilters"},(0,a.yg)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"form"),(0,a.yg)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Form>"))," instance"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.yg)("inlineCode",{parentName:"a"},"FormInstance")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"formProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"<Form>"))," props"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.yg)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: () => void; }"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"cancelButtonProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Props for a cancel button"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ onClick: () => void; }"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"editButtonProps"),(0,a.yg)("td",{parentName:"tr",align:null},"Props for an edit button"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"{ onClick: () => void; }"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"query"),(0,a.yg)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<T>")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"mutation"),(0,a.yg)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},(0,a.yg)("inlineCode",{parentName:"a"},"UseMutationResult<T>")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"formLoading"),(0,a.yg)("td",{parentName:"tr",align:null},"Loading state of form request"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"id"),(0,a.yg)("td",{parentName:"tr",align:null},"Record id for edit action"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseKey")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"setId"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"id")," setter"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,a.yg)("inlineCode",{parentName:"td"},"undefined>>"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"isEditing"),(0,a.yg)("td",{parentName:"tr",align:null},"Check if is editing"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(id: "),(0,a.yg)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,a.yg)("inlineCode",{parentName:"a"},"BaseKey")),(0,a.yg)("inlineCode",{parentName:"td"},") => boolean")))))),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(N,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(v,{path:"table-antd-use-editable-table",mdxType:"CodeSandboxExample"})))}x.isMDXComponent=!0}}]);