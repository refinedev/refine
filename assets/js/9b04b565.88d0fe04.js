"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[84034],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var o=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),m=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(t),c=r,g=p["".concat(s,".").concat(c)]||p[c]||u[c]||a;return t?o.createElement(g,i(i({ref:n},d),{},{components:t})):o.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<a;m++)i[m]=t[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},34081:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>m,toc:()=>p});t(37953);var o=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={title:"React Hook Form Validation with Complete Examples",description:"We'll implement React Hook Form custom validations and schema validations using yup.",slug:"react-hook-form-validation-examples",authors:"david_omotayo",tags:["react","react-hook-form","refine","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/social.png",hide_table_of_contents:!1},s=void 0,m={permalink:"/blog/react-hook-form-validation-examples",source:"@site/blog/2022-09-27-react-hook-form-validation.md",title:"React Hook Form Validation with Complete Examples",description:"We'll implement React Hook Form custom validations and schema validations using yup.",date:"2022-09-27T00:00:00.000Z",formattedDate:"September 27, 2022",tags:[{label:"react",permalink:"/blog/tags/react"},{label:"react-hook-form",permalink:"/blog/tags/react-hook-form"},{label:"refine",permalink:"/blog/tags/refine"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:19.94,hasTruncateMarker:!1,authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],frontMatter:{title:"React Hook Form Validation with Complete Examples",description:"We'll implement React Hook Form custom validations and schema validations using yup.",slug:"react-hook-form-validation-examples",authors:"david_omotayo",tags:["react","react-hook-form","refine","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/social.png",hide_table_of_contents:!1},prevItem:{title:"How to use Docker Build Args and Environment Variables",permalink:"/blog/docker-build-args-and-env-vars"},nextItem:{title:"An article guideline for Refine blog posts",permalink:"/blog/article-guideline"},relatedPosts:[{title:"Material UI Grid System in React",description:"We'll discover the Material UI Grid system with React examples",permalink:"/blog/material-ui-grid",formattedDate:"May 22, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:14.595,date:"2024-05-22T00:00:00.000Z"},{title:"refine vs RedwoodJS",description:"We will compare two open source React frameworks, that can be used to build CRUD applications",permalink:"/blog/refine-vs-redwood-js",formattedDate:"January 23, 2023",authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],readingTime:26.61,date:"2023-01-23T00:00:00.000Z"},{title:"Using Material UI DataGrid component with Refine app",description:"How to use Material UI DataGrid component with Refine apps?",permalink:"/blog/mui-datagrid-refine",formattedDate:"August 23, 2022",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:15.915,date:"2022-08-23T00:00:00.000Z"}],authorPosts:[{title:"How to create React draggable components with react-dnd",description:"We'll be using the react-dnd library to create draggable components in React.",permalink:"/blog/react-draggable-components-with-react-dnd",formattedDate:"December 24, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:23.51,date:"2024-12-24T00:00:00.000Z"},{title:"How to Create Dynamic Forms in React CRUD app with Ant Design",description:"Easy way to creating dynamic forms in React CRUD apps with Ant Design",permalink:"/blog/react-crud-app-with-dynamic-form-ant-design",formattedDate:"December 20, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:26.34,date:"2024-12-20T00:00:00.000Z"},{title:"Using React Hot Toast as a Notification Provider for CRUD apps",description:"We'll introduce create a custom notification provider using the react-hot-toast library.",permalink:"/blog/react-hot-toast",formattedDate:"August 20, 2024",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:15.12,date:"2024-08-20T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"What is React Hook Form?",id:"what-is-react-hook-form",level:2},{value:"What is Refine?",id:"what-is-refine",level:2},{value:"Project setup",id:"project-setup",level:2},{value:"Integrating React Hook Forms",id:"integrating-react-hook-forms",level:3},{value:"Validating forms with React Hook Forms",id:"validating-forms-with-react-hook-forms",level:2},{value:"Schema Validation",id:"schema-validation",level:2},{value:"Handling errors",id:"handling-errors",level:2},{value:"How to conditionally render input fields",id:"how-to-conditionally-render-input-fields",level:2},{value:"Form submission",id:"form-submission",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Example",id:"example",level:2}],u=(c="CodeSandboxExample",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",e)});var c;const g={toc:p},h="wrapper";function f(e){var{components:n}=e,t=i(e,["components"]);return(0,o.yg)(h,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"Forms are crucial in how web administrators connect with their audience and how users interact with web applications. Hence, form validation is often the utmost priority for a developer when building web applications."),(0,o.yg)("p",null,"However, due to how complicated and frustrating form validation can get, developers often settle for third-party libraries that simplify the process."),(0,o.yg)("p",null,"In this guide, we\u2019ll introduce ",(0,o.yg)("a",{parentName:"p",href:"https://www.react-hook-form.com/"},"React Hook Form"),", a form validation library for React, and demonstrate how to use it to validate forms in React applications."),(0,o.yg)("p",null,"Steps we'll cover:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#what-is-react-hook-form"},"What is React Hook Form?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#what-is-refine"},"What is Refine?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#project-setup"},"Project setup"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#integrating-react-hook-forms"},"Integrating React Hook Forms")))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#validating-forms-with-react-hook-forms"},"Validating forms with React Hook Forms")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#schema-validation"},"Schema Validation")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#handling-errors"},"Handling errors")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#how-to-conditionally-render-input-fields"},"How to conditionally render input fields")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#form-submission"},"Form submission")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#conclusion"},"Conclusion"))),(0,o.yg)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.yg)("p",null,"We'll be using Refine to set up an example project for this article, and since Refine is a TypeScript first library, you need to have a good understanding of TypeScript to follow along with this tutorial."),(0,o.yg)("p",null,"You'll also need the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"The LTS version of ",(0,o.yg)("a",{parentName:"li",href:"https://nodejs.org/en"},"Node.js")," installed on your machine"),(0,o.yg)("li",{parentName:"ul"},"Fundamental knowledge of ",(0,o.yg)("a",{parentName:"li",href:"https://react.dev/"},"React")," and ",(0,o.yg)("a",{parentName:"li",href:"https://refine.dev/"},(0,o.yg)("strong",{parentName:"a"},"Refine"))),(0,o.yg)("li",{parentName:"ul"},"Basic understanding of ",(0,o.yg)("a",{parentName:"li",href:"https://mui.com/"},"Material UI"))),(0,o.yg)("h2",{id:"what-is-react-hook-form"},"What is React Hook Form?"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://www.react-hook-form.com/"},"React Hook Form")," is a lightweight library for validating forms in React. It provides a flexible and extensible approach to handling form functionalities such as validation, error handling, and submission with minimal code and zero re-renders."),(0,o.yg)("p",null,"The library allows you to isolate component re-renders by using uncontrolled inputs with the ref hook to control inputs, rather than using the conventional way of depending on a state, which may cause unnecessary re-renders."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://www.react-hook-form.com/"},"React Hook Form")," uses its constraint-based validation API to validate forms by leveraging existing HTML markups, thus maintaining a good HTML standard."),(0,o.yg)("p",null,"The package is super light, it has a minified size of 24.6kb and a minified + gzipped size of 8.8kb. This is because the library doesn\u2019t use any dependencies to handle any of its functionalities under the hood."),(0,o.yg)("div",{class:"img-container","align-items":"center"},(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-package-size.png",alt:"react Hook Form package size"})),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"what-is-refine"},"What is Refine?"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Refine")," is a headless React-based framework for rapidly building CRUD applications like admin panels, dashboards, and internal tools. The framework uses a collection of helper hooks, components, and data providers that give you complete control over your application's user interface."),(0,o.yg)("p",null,"There are a lot of benefits to using ",(0,o.yg)("strong",{parentName:"p"},"Refine")," in your applications, to name a few:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"It is headless, meaning you can either use it as is or pair it up with third-party UI libraries."),(0,o.yg)("li",{parentName:"ul"},"Easy learning curve"),(0,o.yg)("li",{parentName:"ul"},"Customization"),(0,o.yg)("li",{parentName:"ul"},"Backend agnostic, you can connect with any backend technologies"),(0,o.yg)("li",{parentName:"ul"},"Authentication, state management, data fetching routing, and more are prioritized.")),(0,o.yg)("p",null,"Visit ",(0,o.yg)("a",{parentName:"p",href:"https://refine.dev/docs/"},(0,o.yg)("strong",{parentName:"a"},"Refine"),"'s documentation")," to learn more about the framework."),(0,o.yg)("h2",{id:"project-setup"},"Project setup"),(0,o.yg)("p",null,"Before we get into the nitty-gritty of how React Hook Form works and how to use it to validate forms in your projects, let's set up an example project with ",(0,o.yg)("strong",{parentName:"p"},"Refine")," for reference purposes."),(0,o.yg)("p",null,"First things first, open your command line tool, cd to your folder of choice, and run the following command to bootstrap a ",(0,o.yg)("strong",{parentName:"p"},"Refine")," React template using the ",(0,o.yg)("inlineCode",{parentName:"p"},"create refine-app")," tool:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm create refine-app@latest tutorial\n")),(0,o.yg)("p",null,"After running the command, you\u2019ll be prompted to choose your preferences for the project.\nSelect the following options to proceed:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"\u2714 Downloaded remote source successfully.\n\u2714 Choose a project template \xb7 Refine(Vite)\n\u2714 What would you like to name your project?: \xb7 tutorial\n\u2714 Choose your backend service to connect: \xb7 REST API\n\u2714 Do you want to use a UI Framework?: \xb7 Material UI\n\u2714 Do you want to add example pages?: \xb7 No\n\u2714 Do you need any Authentication logic?: \xb7 none\n\u2714 Do you need i18n (Internationalization) support?: \xb7 no\n\u2714 Choose a package manager: \xb7 npm\n")),(0,o.yg)("br",null),(0,o.yg)("p",null,"Once the installation is done, run the commands below to cd into the project folder and start the development server:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm run dev\n")),(0,o.yg)("p",null,"The second command will start the development server for our project and automatically preview our app in the default browser. If it doesn't, open the browser manually and navigate to http://localhost:5173."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-dashboard.png",alt:"react Hook Form dashboard"}),(0,o.yg)("br",null),(0,o.yg)("p",null,"You should see a similar ",(0,o.yg)("strong",{parentName:"p"},"Refine")," welcome page rendered to your browser just like in the image above."),(0,o.yg)("p",null,"Next, we'll install the ",(0,o.yg)("strong",{parentName:"p"},"Refine")," React Hook Form package and set up ",(0,o.yg)("strong",{parentName:"p"},"Refine"),". To do that, go back to the command line and run the following command to install the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," package:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm i @refinedev/react-hook-form react-hook-form\n")),(0,o.yg)("p",null,"After installation, open the project folder in your IDE of choice, in our case, we'll be using VS code. The next step is to create a pages subfolder inside the src folder and add a ",(0,o.yg)("inlineCode",{parentName:"p"},"create.tsx")," file."),(0,o.yg)("p",null,"Next, open the ",(0,o.yg)("inlineCode",{parentName:"p"},"create.tsx")," file and add the following code:"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show create.tsx code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/create.tsx"',title:'"src/pages/create.tsx"'},'import React from "react";\nimport TextField from "@mui/material/TextField";\nimport FormControl from "@mui/material/FormControl";\nimport InputLabel from "@mui/material/InputLabel";\nimport MenuItem from "@mui/material/MenuItem";\nimport Select from "@mui/material/Select";\nimport Button from "@mui/material/Button";\n\nconst Create: React.FC = () => {\n  return (\n    <form style={{ display: "flex", flexDirection: "column" }}>\n      <TextField\n        fullWidth\n        sx={{ maxWidth: 600 }}\n        label="First Name"\n        margin="dense"\n      />\n      <TextField\n        fullWidth\n        sx={{ maxWidth: 600 }}\n        label="Last Name"\n        margin="dense"\n      />\n      <TextField\n        fullWidth\n        sx={{ maxWidth: 600 }}\n        label="Address"\n        margin="dense"\n      />\n      <TextField\n        fullWidth\n        sx={{ maxWidth: 600 }}\n        label="Number"\n        margin="dense"\n        type="number"\n      />\n      <FormControl sx={{ marginTop: 1, marginBottom: 0.7 }}>\n        <InputLabel id="type-label">Work</InputLabel>\n        <Select\n          sx={{ maxWidth: 600 }}\n          margin="dense"\n          type="select"\n          labelId="type-label"\n          label="Work"\n        >\n          <MenuItem value="employed">Employed</MenuItem>\n          <MenuItem value="unemployed">Unemployed</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField\n        fullWidth\n        sx={{ maxWidth: 600 }}\n        label="Company"\n        margin="dense"\n      />\n      <TextField fullWidth sx={{ maxWidth: 600 }} label="Role" margin="dense" />\n      <Button\n        type="submit"\n        variant="contained"\n        fullWidth\n        sx={{\n          maxWidth: "600px",\n          padding: "10px",\n          backgroundColor: "#67BE23",\n          color: "white",\n          marginTop: "5px",\n        }}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default Create;\n')))),(0,o.yg)("p",null,"Here, we created a regular HTML form using a form element and the Material UI TextField form control components.\nEach ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," will be used for getting the first name, last name, address, employment status, place of work, role, and phone number values. We also created an interface object of the form, we\u2019ll be using this later in the article."),(0,o.yg)("p",null,"This file will serve as our resource page, which we're going to pass to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"App.tsx")," file."),(0,o.yg)("p",null,"To do so, open the ",(0,o.yg)("inlineCode",{parentName:"p"},"App.tsx")," file and import the ",(0,o.yg)("inlineCode",{parentName:"p"},"create.tsx")," file, then add it as a ",(0,o.yg)("inlineCode",{parentName:"p"},"<Route />"),' element. After that add "posts" as a ',(0,o.yg)("inlineCode",{parentName:"p"},"resource"),"."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show App.tsx code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport {\n  useNotificationProvider,\n  RefineSnackbarProvider,\n  ThemedLayoutV2,\n} from "@refinedev/mui";\n\nimport CssBaseline from "@mui/material/CssBaseline";\nimport GlobalStyles from "@mui/material/GlobalStyles";\nimport routerBindings, {\n  DocumentTitleHandler,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\nimport { ColorModeContextProvider } from "./contexts/color-mode";\nimport Create from "./pages/create";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <ColorModeContextProvider>\n          <CssBaseline />\n          <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n          <RefineSnackbarProvider>\n            <Refine\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              notificationProvider={useNotificationProvider}\n              // highlight-start\n              resources={[\n                {\n                  name: "posts",\n                  list: "/",\n                },\n              ]}\n              // highlight-end\n              routerProvider={routerBindings}\n              options={{\n                syncWithLocation: true,\n                warnWhenUnsavedChanges: true,\n              }}\n            >\n              <Routes>\n                {/* highlight-start */}\n                <Route\n                  element={\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  }\n                >\n                  <Route index element={<Create />} />\n                </Route>\n                {/* highlight-end */}\n              </Routes>\n              <RefineKbar />\n              <UnsavedChangesNotifier />\n              <DocumentTitleHandler />\n            </Refine>\n          </RefineSnackbarProvider>\n        </ColorModeContextProvider>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n')))),(0,o.yg)("p",null,"If you save your progress and open up the browser, you should see a form similar to the one below."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form.png",alt:"react Hook Form view"}),(0,o.yg)("br",null),(0,o.yg)("p",null,"That's it for the project setup, next we'll integrate React Hook Forms into our form."),(0,o.yg)("h3",{id:"integrating-react-hook-forms"},"Integrating React Hook Forms"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Refine")," is a framework built with many micro-frontend solutions in mind, and form validation isn't an exception. As a result, it offers a React Hook Form adapter that allows you to seamlessly integrate the React Hook Form library with ",(0,o.yg)("strong",{parentName:"p"},"Refine"),"."),(0,o.yg)("p",null,"But before we start implementing React Hook Form in our app, we need to first understand its fundamentals."),(0,o.yg)("p",null,"The library provides a set of useful components and hooks, such as the controller component and the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," hook, that let us register our form component into the hook, thus making its values available for both validation and submission."),(0,o.yg)("p",null,"The library performs most of these functionalities using the methods exposed by the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," hook. Here are some of the available methods:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"register"),": This method allows you to register an input for validation")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"handleSubmit"),": This function receives form data if validation is successful.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"formState"),": This object contains information about the form's state.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"control"),": This object contains methods for registering components into React Hook Form"))),(0,o.yg)("p",null,"Here's a basic usage of the useForm hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  control,\n  handleSubmit,\n  watch,\n  formState: { errors },\n} = useForm({\n  mode: "onChange",\n  defaultValues,\n});\n')),(0,o.yg)("p",null,"The controller, on the other hand, is a wrapper component for registering controlled components from external UI libraries such as Material UI."),(0,o.yg)("p",null,"The component takes care of the registration process of components that don't expose input's ref but rely on a state. So it's a register method, but for controlled inputs."),(0,o.yg)("p",null,"The component accepts three major properties:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"name"),": This prop accepts a unique string value of the input's name.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"control"),": This prop accepts the control object from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"render"),": This prop accepts a function that renders a component that will be controlled by React Hook Form."))),(0,o.yg)("p",null,"Here's a basic usage of the controller component:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<Controller\n  control={control}\n  name="firstname"\n  render={({ field }) => (\n    <TextField\n      {...field}\n      fullWidth\n      sx={{ maxWidth: 600 }}\n      label="First Name"\n      margin="dense"\n      error={!!errors.firstname}\n      helperText={errors.firstname && `${errors.firstname.message}`}\n    />\n  )}\n/>\n')),(0,o.yg)("p",null,"In the example above, we're passing the controller properties to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," component via the field parameter and rendering it with the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Controller />")," render property."),(0,o.yg)("p",null,"Since we're using Material UI for our project, our focus will be on the Controller hook."),(0,o.yg)("p",null,"Now to integrate React Hook Form into our application, we'll import the Controller component and the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"create.tsx")," file like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n')),(0,o.yg)("p",null,"Next, we'll wrap the ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," components with the Controller component:"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show create.tsx code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/resources/create.tsx"',title:'"src/resources/create.tsx"'},'import React from "react";\nimport TextField from "@mui/material/TextField";\nimport FormControl from "@mui/material/FormControl";\nimport InputLabel from "@mui/material/InputLabel";\nimport MenuItem from "@mui/material/MenuItem";\nimport Select from "@mui/material/Select";\nimport Button from "@mui/material/Button";\nimport { Controller } from "react-hook-form";\n\nconst Create: React.FC = () => {\n  return (\n    <form style={{ display: "flex", flexDirection: "column" }}>\n      <Controller\n        control={control}\n        name="firstname"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="First Name"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="lastname"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Last Name"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="address"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Address"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="number"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Number"\n            margin="dense"\n            type="number"\n          />\n        )}\n      />\n      <FormControl sx={{ marginTop: 1, marginBottom: 0.7 }}>\n        <InputLabel id="type-label">Work</InputLabel>\n        <Controller\n          control={control}\n          name="work"\n          render={({ field }) => (\n            <Select\n              sx={{ maxWidth: 600 }}\n              margin="dense"\n              {...field}\n              type="select"\n              labelId="type-label"\n              label="Work"\n            >\n              <MenuItem value="employed">Employed</MenuItem>\n              <MenuItem value="unemployed">Unemployed</MenuItem>\n            </Select>\n          )}\n        />\n      </FormControl>\n      <Controller\n        control={control}\n        name="company"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Company"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="role"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Role"\n            margin="dense"\n          />\n        )}\n      />\n      <Button\n        type="submit"\n        variant="contained"\n        fullWidth\n        sx={{\n          maxWidth: "600px",\n          padding: "10px",\n          backgroundColor: "#67BE23",\n          color: "white",\n          marginTop: "5px",\n        }}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default Create;\n')))),(0,o.yg)("p",null,"Here, we are passing the name keys (firstname, lastname, number\u2026), control method, and ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," component to the name, control, and render properties of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Controller />")," component respectively."),(0,o.yg)("p",null,"We\u2019re also using the ",(0,o.yg)("inlineCode",{parentName:"p"},"field")," prop to integrate the controller\u2019s data with our ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," components, by dynamically spreading it on each component."),(0,o.yg)("p",null,"For the next step, destructure the control method from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/resources/create.tsx"',title:'"src/resources/create.tsx"'},'// ...\n\nimport { useForm } from "@refinedev/react-hook-form";\nimport { HttpError } from "@refinedev/core";\n\ninterface IFormValue {\n  firstname: string;\n  lastname: string;\n  address: string;\n  number: number;\n  work: string;\n  company: string;\n  role: string;\n}\nconst defaultValues = {\n  firstname: "",\n  lastname: "",\n  address: "",\n  number: 0,\n  work: "unemployed",\n  company: "",\n  role: "",\n};\n\nconst Create: React.FC = (props) => {\n  const {\n    control,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm<IFormValue, HttpError, IFormValue>({\n    mode: "onChange",\n    defaultValues,\n  });\n\n  const handleSubmission = (data: IFormValue) => console.log(data);\n\n  return (\n    <form\n      style={{ display: "flex", flexDirection: "column" }}\n      // highlight-next-line\n      onSubmit={handleSubmit(handleSubmission)}\n    >\n      {/* ... */}\n    </form>\n  );\n};\n\nexport default Create;\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultValue")," object properties will serve as the default value for our form's TextFields. The mode property specifies how React Hook Form should watch the TextField for errors."),(0,o.yg)("p",null,"That\u2019s it, our form has been successfully integrated with React Hook Form. Next, we\u2019ll look at how we can validate the form."),(0,o.yg)("h2",{id:"validating-forms-with-react-hook-forms"},"Validating forms with React Hook Forms"),(0,o.yg)("p",null,"Now that we\u2019ve integrated our form with React Hook Form, we can easily validate inputs by adding specific restrictions to our TextFields, like the minimum and maximum characters allowed for each TextFields."),(0,o.yg)("p",null,"We can do this by adding a ",(0,o.yg)("inlineCode",{parentName:"p"},"minLength")," property to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Controller />")," component and specifying a number value for either one."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<Controller\n  control={control}\n  name="firstname"\n  // highlight-next-line\n  rules={{ required: true, minLength: 5 }}\n  render={({ field }) => (\n    <TextField\n      {...field}\n      fullWidth\n      sx={{ maxWidth: 600 }}\n      label="First Name"\n      margin="dense"\n    />\n  )}\n/>\n')),(0,o.yg)("p",null,"This way, if we input characters beyond the specified amount in the maxLength props, we\u2019ll get an error."),(0,o.yg)("p",null,"To display the error, we\u2019d have to render a message based on the state of the errors object from the formState below each field:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<Controller\n  control={control}\n  name="firstname"\n  // highlight-next-line\n  rules={{ required: true, minLength: 5 }}\n  render={({ field }) => (\n    <TextField\n      {...field}\n      fullWidth\n      sx={{ maxWidth: 600 }}\n      label="First Name"\n      margin="dense"\n    />\n  )}\n/>;\n// highlight-start\n{\n  errors.firstname && (\n    <span style={{ color: "red" }}>\n      You need to enter at least 5 characters!\n    </span>\n  );\n}\n// highlight-end\n')),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-2.png",alt:"react Hook Form input"}),(0,o.yg)("br",null),(0,o.yg)("p",null,"As you can see, this is not the ideal approach to displaying errors on the form, the placement of the error message is off and it doesn\u2019t go well with the input field\u2019s theme."),(0,o.yg)("p",null,"What we\u2019re going to do is use a schema validation library, yup to be specific, to validate our form inputs. This will let us integrate the error messages into the ",(0,o.yg)("inlineCode",{parentName:"p"},"<TextField />")," component."),(0,o.yg)("h2",{id:"schema-validation"},"Schema Validation"),(0,o.yg)("p",null,"React Hook Form offers the option of using schema libraries such as ",(0,o.yg)("strong",{parentName:"p"},"yup")," and ",(0,o.yg)("strong",{parentName:"p"},"joi")," to validate forms input via the resolver property."),(0,o.yg)("p",null,"Schemas are object-based approaches for defining validation rules for form input fields. Schemas integrate seamlessly with React Hook Form, giving us complete control over validation and how error messages are displayed on a form."),(0,o.yg)("p",null,"The first step is to install the yup and the hook form resolver library with the following commands:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm i @hookform/resolvers yup\n")),(0,o.yg)("p",null,"The hook form resolver library is a resolver for ",(0,o.yg)("strong",{parentName:"p"},"yup"),". The library aids in integrating yup to the React Hook Form library."),(0,o.yg)("p",null,"Once the installation is done, import ",(0,o.yg)("inlineCode",{parentName:"p"},"yup")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"yupResolver")," and create a schema object with the following keys and values:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/resources/create.tsx"',title:'"src/resources/create.tsx"'},'// ...\n\n//highlight-start\nimport * as Yup from "yup";\nimport { yupResolver } from "@hookform/resolvers/yup";\n\nconst schema = Yup.object().shape({\n  firstname: Yup.string().label("First Name").trim().required().min(3).max(64),\n  lastname: Yup.string().label("Last Name").trim().required().min(3).max(64),\n  address: Yup.string().label("Address").trim().required().min(3),\n  number: Yup.number().label("Number").required(),\n  work: Yup.string().label("Work").oneOf(["unemployed", "employed"]),\n  company: Yup.string().when("work", ([work], schema) => {\n    if (work === "employed") {\n      return schema.required().min(3).max(64);\n    }\n    return schema.notRequired();\n  }),\n  role: Yup.string().when("work", ([work], schema) => {\n    if (work === "employed") {\n      return schema.required().min(3).max(64);\n    }\n    return schema.notRequired();\n  }),\n});\n//highlight-end\n\nconst Create: React.FC = (props) => {\n  return {\n    /* ... */\n  };\n};\n')),(0,o.yg)("p",null,"You'll notice that the schema for the select (work) component is different from the rest because we're conditionally validating the company and role fields. This is being done by the when, is and then methods."),(0,o.yg)("p",null,"The method checks if the selected value is Employed, while the then method handles the validation. We'll take this up a notch in the coming section by rendering both fields based on the value selected."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"oneOff")," method is for telling yup that one of the string values in the provided array will be selected.")),(0,o.yg)("p",null,"Finally, add a resolver key to the useForm object and pass the yupResolver function and schema to it as a value:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'// ...\nimport { useForm } from "@refinedev/react-hook-form";\nimport { HttpError } from "@refinedev/core";\nimport { yupResolver } from "@hookform/resolvers/yup";\n\n// ...\n\nconst { control } = useForm<IFormValue, HttpError, IFormValue>({\n  mode: "onChange",\n  defaultValues,\n  // highlight-next-line\n  resolver: yupResolver(schema),\n});\n')),(0,o.yg)("p",null,"That\u2019s all we have to do to set up our schema, next we\u2019ll look at a new way we can handle errors."),(0,o.yg)("br",null),(0,o.yg)("div",null,(0,o.yg)("a",{href:"https://discord.gg/refine"},(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/discord_big_blue.png",alt:"discord banner"}))),(0,o.yg)("h2",{id:"handling-errors"},"Handling errors"),(0,o.yg)("p",null,"Handling errors with Material UI's TextField component is fairly straightforward, all we have to do is destructure the errors property from the useForm\u2019s formState method:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  control,\n  formState: { errors },\n} = useForm<IFormValue>({\n  mode: "onChange",\n  defaultValues,\n  //highlight-next-line\n  resolver: yupResolver(schema),\n});\n')),(0,o.yg)("p",null,"Then, pass the error object and message to the ",(0,o.yg)("inlineCode",{parentName:"p"},"error")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"helperText")," props like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<Controller\n  control={control}\n  name="firstname"\n  render={({ field }) => (\n    <TextField\n      fullWidth\n      {...field}\n      sx={{ maxWidth: 600 }}\n      label="First Name"\n      margin="dense"\n      error={!!errors.firstname}\n      helperText={errors.firstname && `${errors.firstname.message}`}\n    />\n  )}\n/>\n')),(0,o.yg)("p",null,"This will check if there's an error with the ",(0,o.yg)("inlineCode",{parentName:"p"},"error")," prop, then it'll display a dynamic message with the help of the ",(0,o.yg)("inlineCode",{parentName:"p"},"helperText")," prop."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-big.png",alt:"react Hook Form yup"}),(0,o.yg)("br",null),(0,o.yg)("p",null,"Unlike the previous error message we implemented, this approach does not only display an error message that is intrinsic to the field's value, but it also changes the outline color of the TextField to red."),(0,o.yg)("p",null,"Our form is almost ready, what's left for us to do is to conditionally display the Company and Role fields and look at how we can handle our form's submission function."),(0,o.yg)("h2",{id:"how-to-conditionally-render-input-fields"},"How to conditionally render input fields"),(0,o.yg)("p",null,"To go about this, we'll need a function that we can use to track the input value of the Select component. Fortunately for us, React Hook Form has a watch function that lets us do just that."),(0,o.yg)("p",null,"The watch function does exactly what its name implies. It watches and tracks the values of the input fields."),(0,o.yg)("p",null,"First, destructure the watch function from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook, then declare a work variable and pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"watch")," method to it, with the ",(0,o.yg)("inlineCode",{parentName:"p"},'"work"')," string passed to it as a parameter:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n    control,\n    watch,\n    formState: { errors },\n} = useForm <IFormValue>\n{\n    mode: "onChange",\n    defaultValues,\n    resolver: yupResolver(schema),\n};\n\nconst work = watch("work");\n')),(0,o.yg)("p",null,"This way, the watch function will be able to track the selected option in the work select component."),(0,o.yg)("p",null,"Next, wrap the Company and Role fields with the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'{\n  work === "employed" && (\n    <>\n      <Controller\n        control={control}\n        name="company"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Company"\n            margin="dense"\n            error={!!errors.company}\n            helperText={errors.company && `${errors.company.message}`}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="role"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Role"\n            margin="dense"\n            error={!!errors.role}\n            helperText={errors.role && `${errors.role.message}`}\n          />\n        )}\n      />\n    </>\n  );\n}\n')),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Make sure to add a fragment tag, or else TypeScript will throw an error.")),(0,o.yg)("p",null,"You can find latest version of the code below:"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Show create.tsx code"),(0,o.yg)("p",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/create.tsx"',title:'"src/pages/create.tsx"'},'import React from "react";\nimport TextField from "@mui/material/TextField";\nimport FormControl from "@mui/material/FormControl";\nimport InputLabel from "@mui/material/InputLabel";\nimport MenuItem from "@mui/material/MenuItem";\nimport Select from "@mui/material/Select";\nimport Button from "@mui/material/Button";\nimport { Controller } from "react-hook-form";\nimport { useForm } from "@refinedev/react-hook-form";\nimport * as Yup from "yup";\nimport { yupResolver } from "@hookform/resolvers/yup";\nimport { HttpError } from "@refinedev/core";\n\ninterface IFormValue {\n  firstname: string;\n  lastname: string;\n  address: string;\n  number: number;\n  work: string;\n  company: string | undefined;\n  role: string | undefined;\n}\nconst defaultValues = {\n  firstname: "",\n  lastname: "",\n  address: "",\n  number: 0,\n  work: "unemployed",\n  company: "",\n  role: "",\n};\n\nconst schema = Yup.object().shape({\n  firstname: Yup.string().label("First Name").trim().required().min(3).max(64),\n  lastname: Yup.string().label("Last Name").trim().required().min(3).max(64),\n  address: Yup.string().label("Address").trim().required().min(3),\n  number: Yup.number().label("Number").required(),\n  work: Yup.string().label("Work").required().oneOf(["unemployed", "employed"]),\n  company: Yup.string().when(\n    "work",\n    ([work]: string | string[], schema: Yup.AnySchema) => {\n      if (work === "employed") {\n        return schema.required().min(3).max(64);\n      }\n      return schema.notRequired();\n    },\n  ),\n  role: Yup.string().when(\n    "work",\n    ([work]: string | string[], schema: Yup.AnySchema) => {\n      if (work === "employed") {\n        return schema.required().min(3).max(64);\n      }\n      return schema.notRequired();\n    },\n  ),\n});\n\nconst Create: React.FC = () => {\n  const {\n    control,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm<IFormValue, HttpError, IFormValue>({\n    mode: "onChange",\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n\n  const handleSubmission = (data: any) => console.log(data);\n\n  const work = watch("work");\n\n  return (\n    <form\n      style={{ display: "flex", flexDirection: "column" }}\n      onSubmit={handleSubmit(handleSubmission)}\n    >\n      <Controller\n        control={control}\n        name="firstname"\n        rules={{ required: true, minLength: 5 }}\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="First Name"\n            margin="dense"\n            error={!!errors.firstname}\n            helperText={errors.firstname && `${errors.firstname.message}`}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="lastname"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Last Name"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="address"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Address"\n            margin="dense"\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="number"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            sx={{ maxWidth: 600 }}\n            label="Number"\n            margin="dense"\n            type="number"\n          />\n        )}\n      />\n      <FormControl sx={{ marginTop: 1, marginBottom: 0.7 }}>\n        <InputLabel id="type-label">Work</InputLabel>\n        <Controller\n          control={control}\n          name="work"\n          render={({ field }) => (\n            <Select\n              sx={{ maxWidth: 600 }}\n              margin="dense"\n              {...field}\n              type="select"\n              labelId="type-label"\n              label="Work"\n            >\n              <MenuItem value="employed">Employed</MenuItem>\n              <MenuItem value="unemployed">Unemployed</MenuItem>\n            </Select>\n          )}\n        />\n      </FormControl>\n      {work === "employed" && (\n        <>\n          <Controller\n            control={control}\n            name="company"\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                sx={{ maxWidth: 600 }}\n                label="Company"\n                margin="dense"\n                error={!!errors.company}\n                helperText={errors.company && `${errors.company.message}`}\n              />\n            )}\n          />\n          <Controller\n            control={control}\n            name="role"\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                sx={{ maxWidth: 600 }}\n                label="Role"\n                margin="dense"\n                error={!!errors.role}\n                helperText={errors.role && `${errors.role.message}`}\n              />\n            )}\n          />\n        </>\n      )}\n      <Button\n        type="submit"\n        variant="contained"\n        fullWidth\n        sx={{\n          maxWidth: "600px",\n          padding: "10px",\n          backgroundColor: "#67BE23",\n          color: "white",\n          marginTop: "5px",\n        }}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default Create;\n')))),(0,o.yg)("p",null,"Now, if you save your progress and go to the browser, the company and role fields should only display when the Employed option is selected."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-big2.gif",alt:"react Hook Form error handling"}),(0,o.yg)("br",null),(0,o.yg)("h2",{id:"form-submission"},"Form submission"),(0,o.yg)("p",null,"Since our create component is not controlled, the way we're going to handle form submission will be different from what you might be used to."),(0,o.yg)("p",null,"Rather than adding a click event to the form's button and using it to fire a function that will handle all the submission functionalities, we're going to add an ",(0,o.yg)("inlineCode",{parentName:"p"},"onSubmit")," event listener directly on the form and pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"handleSubmit")," method to it."),(0,o.yg)("p",null,"First off, destructure the handleSubmit method from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook and create a ",(0,o.yg)("inlineCode",{parentName:"p"},"handleSubmission")," function like so:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'  const {\n    control,\n    handleSubmit,\n    watch,\n    formState: { errors },\n} = useForm <IFormValue>\n{\n    mode: "onChange",\n    defaultValues,\n    resolver: yupResolver(schema),\n};\n\nconst handleSubmission = (data: IFormValue) => console.log(data);\n')),(0,o.yg)("p",null,"Lastly, add an ",(0,o.yg)("inlineCode",{parentName:"p"},"onSubmit")," event handler to the form and pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"handleSubmit")," method and ",(0,o.yg)("inlineCode",{parentName:"p"},"formSubmission")," function to it:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<form\n  onSubmit={handleSubmit(formSubmission)}\n  style={{ display: "flex", flexDirection: "column" }}\n>\n  ...\n</form>\n')),(0,o.yg)("p",null,"Now, if you save your progress and head over to the browser, you should get a logged object of the form\u2019s data in your console when you fill in the fields and submit the form."),(0,o.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-27-react-hook-form-validation/react-hook-form-console.gif",alt:"React Hook Form error handling"}),(0,o.yg)("br",null),(0,o.yg)("p",null,"If you\u2019d like to use your form data in other parts of your ",(0,o.yg)("strong",{parentName:"p"},"Refine")," application, for example, the List page. All you have to do is destructure the ",(0,o.yg)("inlineCode",{parentName:"p"},"onFinish")," method from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook and pass it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"handleSubmit")," function on the form."),(0,o.yg)("h2",{id:"conclusion"},"Conclusion"),(0,o.yg)("p",null,"There you have it, we\u2019ve successfully built a form that can validate input values, display dynamic error messages, and render fields based on the selected select option, using ",(0,o.yg)("strong",{parentName:"p"},"Refine"),", React Hook Form, and ",(0,o.yg)("strong",{parentName:"p"},"yup schema validator"),"."),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)(u,{path:"blog-refine-react-hook-form",mdxType:"CodeSandboxExample"}))}f.isMDXComponent=!0}}]);