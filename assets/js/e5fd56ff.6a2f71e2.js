"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[55938],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var o=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return n?o.createElement(h,a(a({ref:t},p),{},{components:n})):o.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>y,frontMatter:()=>s,metadata:()=>l,toc:()=>u});n(37953);var o=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Edit",swizzle:!0},d=void 0,l={unversionedId:"ui-integrations/chakra-ui/components/basic-views/edit/index",id:"version-4.xx.xx/ui-integrations/chakra-ui/components/basic-views/edit/index",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/chakra-ui/components/basic-views/edit/index.md",sourceDirName:"ui-integrations/chakra-ui/components/basic-views/edit",slug:"/ui-integrations/chakra-ui/components/basic-views/edit/",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/basic-views/edit/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/chakra-ui/components/basic-views/edit/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Edit",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Create",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/basic-views/create/"},next:{title:"List",permalink:"/docs/4.xx.xx/ui-integrations/chakra-ui/components/basic-views/list/"}},p={},u=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"resource",id:"resource",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"canDelete and deleteButtonProps",id:"candelete-and-deletebuttonprops",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:"breadcrumb",id:"breadcrumb",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},m=c("DocThumbsUpDownFeedbackWidget"),h=c("PropsTable"),g={toc:u},R="wrapper";function y(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(R,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live  previewHeight=480px hideCode  url=http://localhost:3000/posts/edit/123",live:!0,"":!0,previewHeight:"480px",hideCode:!0,url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Box,\n  Select,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\nimport { Controller } from "react-hook-form";\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { options } = useSelect({\n    resource: "categories",\n    defaultValue: query?.data?.category?.id,\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box component="form" autoComplete="off">\n        <FormControl mb="3" isInvalid={!!errors?.id}>\n          <FormLabel>Id</FormLabel>\n          <Input\n            disabled\n            type="number"\n            {...register("id", {\n              required: "This field is required",\n            })}\n          />\n          <FormErrorMessage>{`${errors?.id?.message}`}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl mb="3" isInvalid={!!errors?.title}>\n          <FormLabel>Title</FormLabel>\n          <Input\n            type="text"\n            {...register("title", {\n              required: "This field is required",\n            })}\n          />\n          <FormErrorMessage>{`${errors?.title?.message}`}</FormErrorMessage>\n        </FormControl>\n        <FormControl mb="3" isInvalid={!!errors?.status}>\n          <FormLabel>Status</FormLabel>\n          <Select\n            id="content"\n            placeholder="Select Post Status"\n            {...register("status", {\n              required: "Status is required",\n            })}\n          >\n            <option>published</option>\n            <option>draft</option>\n            <option>rejected</option>\n          </Select>\n          <FormErrorMessage>{`${errors.status?.message}`}</FormErrorMessage>\n        </FormControl>\n\n        <FormControl mb="3" isInvalid={!!errors?.category}>\n          <FormLabel>Category</FormLabel>\n          <Controller\n            control={control}\n            name="category.id"\n            rules={{ required: "This field is required" }}\n            render={({ field }) => (\n              <Select placeholder="Select category" {...field}>\n                {options?.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n            )}\n          />\n          <FormErrorMessage>{`${errors?.category?.message}`}</FormErrorMessage>\n        </FormControl>\n      </Box>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows you to add a title inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>"),' component. If you don\'t pass title props, it uses the "Edit" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { Heading } from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit title={<Heading size="lg">Custom Title</Heading>}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/123"},'setInitialRoutes(["/custom/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="posts" recordItemId={123}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n        {\n          name: "custom",\n          list: "/custom",\n          edit: "/custom/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/custom/:id" element={<CustomPage />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,o.yg)(m,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button that submits the form by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ colorScheme: "red" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"candelete-and-deletebuttonprops"},"canDelete and deleteButtonProps"),(0,o.yg)(m,{id:"candelete-and-deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," allows you to add a delete button inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," property, Refine adds the delete button by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.yg)("p",null,"When clicked on, the delete button executes the ",(0,o.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ colorScheme: "red" }}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n      options={{\n        auth: {\n          getPermissions: () => Promise.resolve(["admin"]),\n        },\n      }}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { useModalForm } from "@refinedev/react-hook-form";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  ModalBody,\n  Button,\n} from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  const {\n    modal: { visible, close, show },\n    id,\n  } = useModalForm({\n    refineCoreProps: { action: "edit" },\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal isOpen={visible} onClose={close} size="xl">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Edit Post</ModalHeader>\n          <ModalBody>\n            {/* highlight-next-line */}\n            <Edit recordItemId={id}>\n              <p>Rest of your page here</p>\n            </Edit>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,o.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Determines which mode mutation will have while executing ",(0,o.yg)("inlineCode",{parentName:"p"},"useDelete"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nconst PostEdit: React.FC = () => {\n  const {\n    saveButtonProps,\n    register,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <Edit\n      //highlight-next-line\n      mutationMode="undoable"\n      canDelete\n      saveButtonProps={saveButtonProps}\n    >\n      <FormControl mb="3" isInvalid={!!errors?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          id="title"\n          type="text"\n          {...register("title", { required: "Title is required" })}\n        />\n        <FormErrorMessage>{`${errors?.title?.message}`}</FormErrorMessage>\n      </FormControl>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(m,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Edit } from "@refinedev/chakra-ui";\n\n// highlight-start\nconst PostEdit = () => {\n  return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(m,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { IconMoodSmile } from "@tabler/icons-react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit goBack={<IconMoodSmile />}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(m,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit isLoading={true}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb"},"breadcrumb"),(0,o.yg)(m,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, Breadcrumb } from "@refinedev/chakra-ui";\nimport { Box } from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      breadcrumb={\n        <Box borderColor="blue" borderStyle="dashed" borderWidth="2px">\n          <Breadcrumb />\n        </Box>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, refreshButtonProps, listButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},'If "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { Button, HStack } from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <HStack>\n          {defaultButtons}\n          <Button colorScheme="red">Custom Button</Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { Button } from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtonProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n      headerButtons={\n        <Button colorScheme="green" variant="outline">\n          Custom Button\n        </Button>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(m,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," at the footer."),(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, saveButtonProps, deleteButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-deletebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport { Button, HStack } from "@chakra-ui/react";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <HStack borderColor="blue" borderStyle="dashed" borderWidth="2px" p="2">\n          {defaultButtons}\n          <Button colorScheme="red" variant="solid">\n            Custom Button\n          </Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(m,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        float: "right",\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,o.yg)(m,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the auto save feature of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=420px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"420px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Select,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\n\nconst PostEdit: React.FC = () => {\n  const {\n    refineCore: {\n      formLoading,\n      query,\n      // highlight-next-line\n      autoSaveProps,\n    },\n    saveButtonProps,\n    register,\n    formState: { errors },\n    resetField,\n  } = useForm<IPost>({\n    // highlight-start\n    refineCoreProps: {\n      autoSave: {\n        enabled: true,\n      },\n    },\n    // highlight-end\n  });\n\n  const { options } = useSelect({\n    resource: "categories",\n    defaultValue: query?.data?.category?.id,\n  });\n\n  useEffect(() => {\n    resetField("category.id");\n  }, [options]);\n\n  return (\n    <Edit\n      isLoading={formLoading}\n      saveButtonProps={saveButtonProps}\n      // highlight-next-line\n      autoSaveProps={autoSaveProps}\n    >\n      <FormControl mb="3" isInvalid={!!errors?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          id="title"\n          type="text"\n          {...register("title", { required: "Title is required" })}\n        />\n        <FormErrorMessage>{`${errors?.title?.message}`}</FormErrorMessage>\n      </FormControl>\n      <FormControl mb="3" isInvalid={!!errors?.status}>\n        <FormLabel>Status</FormLabel>\n        <Select\n          id="content"\n          placeholder="Select Post Status"\n          {...register("status", {\n            required: "Status is required",\n          })}\n        >\n          <option>published</option>\n          <option>draft</option>\n          <option>rejected</option>\n        </Select>\n        <FormErrorMessage>{`${errors?.status?.message}`}</FormErrorMessage>\n      </FormControl>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineChakraDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div>\n              <p>This page is empty.</p>\n              <RefineChakra.EditButton recordItemId="123">\n                Edit Item 123\n              </RefineChakra.EditButton>\n            </div>\n          }\n        />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineChakraDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"properties-1"},"Properties"),(0,o.yg)(m,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(h,{module:"@refinedev/chakra-ui/Edit",mdxType:"PropsTable"})))}y.isMDXComponent=!0}}]);