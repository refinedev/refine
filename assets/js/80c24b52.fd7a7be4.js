"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[31879],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var o=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,g=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return n?o.createElement(g,a(a({ref:t},p),{},{components:n})):o.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});n(37953);var o=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Edit",swizzle:!0},d=void 0,l={unversionedId:"ui-integrations/ant-design/components/basic-views/edit/index",id:"version-4.xx.xx/ui-integrations/ant-design/components/basic-views/edit/index",title:"Edit",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/components/basic-views/edit/index.md",sourceDirName:"ui-integrations/ant-design/components/basic-views/edit",slug:"/ui-integrations/ant-design/components/basic-views/edit/",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/components/basic-views/edit/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/ant-design/components/basic-views/edit/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Edit",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Create",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/components/basic-views/create/"},next:{title:"List",permalink:"/docs/4.xx.xx/ui-integrations/ant-design/components/basic-views/list/"}},p={},u=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"canDelete and deleteButtonProps",id:"candelete-and-deletebuttonprops",level:3},{value:"resource",id:"resource",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:'breadcrumb <GlobalConfigBadge id="core/refine-component/#breadcrumb" />',id:"breadcrumb-",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},m=c("DocThumbsUpDownFeedbackWidget"),g=c("GlobalConfigBadge"),y=c("PropsTable"),R={toc:u},h="wrapper";function f(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(h,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},R,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/123"},'setInitialRoutes(["/custom/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/antd";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="posts">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/custom/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <CustomPage />\n            </div>\n          }\n        />\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"The example above shows how to use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop when the component is rendered on a custom page with a different route than the resource route.")),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI")))),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows you to add a title inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>"),' component. If you don\'t pass title props, it uses the "Edit" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Edit post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/antd";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit title="Custom Title">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,o.yg)(m,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button that submits the form by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/antd";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ size: "small" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"candelete-and-deletebuttonprops"},"canDelete and deleteButtonProps"),(0,o.yg)(m,{id:"candelete-and-deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," allows you to add a delete button inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component. This button uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProvider")),(0,o.yg)("p",null,"If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\nimport { Edit } from "@refinedev/antd";\nimport { usePermissions } from "@refinedev/core";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ size: "small" }}\n      /* highlight-end */\n      saveButtonProps={{ size: "small" }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")," documentation ","\u2192"))),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-permissions"},(0,o.yg)("inlineCode",{parentName:"a"},"usePermission")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/123"},'setInitialRoutes(["/custom/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/antd";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="posts">\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/custom/:id"\n          element={\n            <div style={{ padding: 16 }}>\n              <CustomPage />\n            </div>\n          }\n        />\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"The example above shows how to use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop when the component is rendered on a custom page with a different route than the resource route.")),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. When it cannot be read from the URL, which happens when it's used on a custom page, modal or drawer, ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit, useModalForm } from "@refinedev/antd";\nimport { Modal, Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  const { modalProps, id, show } = useModalForm({\n    action: "edit",\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal {...modalProps}>\n        {/* highlight-next-line */}\n        <Edit recordItemId={id}>\n          <p>Rest of your page here</p>\n        </Edit>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly.")),(0,o.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,o.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Determines which mode mutation will have while executing ",(0,o.yg)("inlineCode",{parentName:"p"},"<DeleteButton>")," ."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit mutationMode="undoable" saveButtonProps={{ size: "small" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/advanced-tutorials/mutation-mode"},"mutation mode documentation ","\u2192")))),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(m,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property to specify which one you want to use:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Edit } from "@refinedev/antd";\n\n// highlight-start\nconst PostEdit = () => {\n  return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(m,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\nimport { Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  const BackButton = () => <Button>\u2190</Button>;\n  return (\n    /* highlight-next-line */\n    <Edit goBack={<BackButton />}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If your route has no ",(0,o.yg)("inlineCode",{parentName:"p"},":action")," parameter or your action is ",(0,o.yg)("inlineCode",{parentName:"p"},"list"),", the back button will not be shown even if you pass a ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can override this behavior by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useBack } from "@refinedev/core";\nimport { Edit } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostEdit: React.FC = () => {\n  const back = useBack();\n  const BackButton = () => <Button>\u2190</Button>;\n\n  return (\n    <Edit goBack={<BackButton />} headerProps={{ onBack: back }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(m,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit isLoading={true}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb-"},"breadcrumb ",(0,o.yg)(g,{id:"core/refine-component/#breadcrumb",mdxType:"GlobalConfigBadge"})),(0,o.yg)(m,{id:"breadcrumb-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package is used for breadcrumbs."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit, Breadcrumb } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/breadcrumb"},(0,o.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,o.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property if you want to customize the wrapper of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component. The ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," wrapper elements are simply ",(0,o.yg)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," and can get every attribute that ",(0,o.yg)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      wrapperProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerProps={{\n        subTitle: "This is a subtitle",\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://procomponents.ant.design/en-US/components/page-header"},(0,o.yg)("inlineCode",{parentName:"a"},"PageHeader")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"contentprops"},"contentProps"),(0,o.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentProps")," property to customize the content of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      contentProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/card/"},(0,o.yg)("inlineCode",{parentName:"a"},"Card")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, refreshButtonProps, listButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,'If the "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\nimport { Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"refreshButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," to utilize the default values of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<ListButton>"),(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/list-button"},"list-button")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"<RefreshButton>"),(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/refresh-button"},"refresh-button")," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit, ListButton, RefreshButton } from "@refinedev/antd";\nimport { Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ refreshButtonProps, listButtonProps }) => (\n        <>\n          <Button type="primary">Custom Button</Button>\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n          {listButtonProps && (\n            <ListButton {...listButtonProps} meta={{ foo: "bar" }} />\n          )}\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property to customize the wrapper element of the buttons at the header:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\nimport { Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtonProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n      headerButtons={<Button type="primary">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(m,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," at the footer."),(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, saveButtonProps, deleteButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-deletebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\nimport { Button } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit, SaveButton, DeleteButton } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ saveButtonProps, deleteButtonProps }) => (\n        <>\n          <SaveButton {...saveButtonProps} hideText />\n          {deleteButtonProps && (\n            <DeleteButton {...deleteButtonProps} hideText />\n          )}\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(m,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\nimport { Edit } from "@refinedev/antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          float: "right",\n          marginRight: 24,\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,o.yg)(m,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the auto save feature of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123",live:!0,url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\nimport { Edit, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select } from "antd";\n\n// visible-block-start\nconst PostEdit: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps, query } =\n    useStepsForm<IPost>({\n      stepsProps: {\n        items: [\n          {\n            title: "First Step",\n          },\n          {\n            title: "Second Step",\n          },\n        ],\n      },\n    });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Steps {...stepsProps} />\n      <Form {...formProps} layout="vertical">\n        {current === 0 && (\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n        )}\n        {current === 1 && (\n          <Form.Item\n            label="Content"\n            name="content"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n        )}\n      </Form>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineAntd.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineAntd.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"query")," object from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hook contains the query result from the data provider. You can use it to access the data returned from the API."),(0,o.yg)("pre",{parentName:"admonition"},(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"const { query } = useForm();\nconst record = query?.data?.data;\n")),(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"data.data")," structure shown above is the default for the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/simple-rest")," data provider. This structure may be different for other data providers."))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"properties-1"},"Properties"),(0,o.yg)(m,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(y,{module:"@refinedev/antd/Edit",mdxType:"PropsTable"}),(0,o.yg)("admonition",{title:"External Props",type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"It also accepts all props of Ant Design ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/form/#API"},"Form"),"."))),(0,o.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,o.yg)(m,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Property"),(0,o.yg)("th",{parentName:"tr",align:null},"Extends"),(0,o.yg)("th",{parentName:"tr",align:null},"Default"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends unknown")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"TError"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"Custom error object that extends unknown")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,o.yg)("td",{parentName:"tr",align:null},"object"),(0,o.yg)("td",{parentName:"tr",align:null},"object"),(0,o.yg)("td",{parentName:"tr",align:null},"Values for params. default ",(0,o.yg)("inlineCode",{parentName:"td"},"object"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"TData"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,o.yg)("inlineCode",{parentName:"td"},"select")," function. Extends unknown")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"unknown"),(0,o.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends unknown"))))),(0,o.yg)("h3",{id:"return-values"},"Return values"),(0,o.yg)(m,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Property"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"queryResult")),(0,o.yg)("td",{parentName:"tr",align:null},"If the ",(0,o.yg)("inlineCode",{parentName:"td"},"queryResult")," prop is given, it will be returned. Otherwise, it will return ",(0,o.yg)("inlineCode",{parentName:"td"},"undefined"),".")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"mutationResult")),(0,o.yg)("td",{parentName:"tr",align:null},"Mutation result from ",(0,o.yg)("inlineCode",{parentName:"td"},"react-query"),". ",(0,o.yg)("a",{parentName:"td",href:"https://tanstack.com/query/latest/docs/react/reference/useMutation"},"Check here \u2192"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"saveButtonProps")),(0,o.yg)("td",{parentName:"tr",align:null},"Props for a save button.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"cancelButtonProps")),(0,o.yg)("td",{parentName:"tr",align:null},"Props for a cancel button.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"deleteButtonProps")),(0,o.yg)("td",{parentName:"tr",align:null},"Props for a delete button.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"formProps")),(0,o.yg)("td",{parentName:"tr",align:null},"Props for the ",(0,o.yg)("inlineCode",{parentName:"td"},"<Form>")," component.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"formLoading")),(0,o.yg)("td",{parentName:"tr",align:null},"Loading state of form.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"setId")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"id")," setter.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"id")),(0,o.yg)("td",{parentName:"tr",align:null},"Record id for edit action. The record to edit.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"defaultValues")),(0,o.yg)("td",{parentName:"tr",align:null},"Default form values.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"formValues")),(0,o.yg)("td",{parentName:"tr",align:null},"Form values.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"submit")),(0,o.yg)("td",{parentName:"tr",align:null},"Submit method, the parameter is the values to update a record.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"reset")),(0,o.yg)("td",{parentName:"tr",align:null},"Reset method, reset the form values to initial values.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"redirect")),(0,o.yg)("td",{parentName:"tr",align:null},"Redirect function, will be called after form is submitted successfully.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"goBack")),(0,o.yg)("td",{parentName:"tr",align:null},"Go back function, will be called when the cancel button is clicked.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"query")),(0,o.yg)("td",{parentName:"tr",align:null},"Query result from ",(0,o.yg)("inlineCode",{parentName:"td"},"react-query"),". ",(0,o.yg)("a",{parentName:"td",href:"https://tanstack.com/query/latest/docs/react/reference/useQuery"},"Check here \u2192")))))))}f.isMDXComponent=!0}}]);