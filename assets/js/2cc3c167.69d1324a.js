"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[34709],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),g=r,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},64607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>c});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"TDD vs BDD - A Detailed Guide",description:"We'll be looking at the differences between TDD and BDD, their pros and cons, and how to implement them in a project.",slug:"tdd-vs-bdd",authors:"deborah_emeni",tags:["javascript","comparison"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/social.png",hide_table_of_contents:!1},l=void 0,d={permalink:"/blog/tdd-vs-bdd",source:"@site/blog/2024-09-24-tdd-vs-bdd.md",title:"TDD vs BDD - A Detailed Guide",description:"We'll be looking at the differences between TDD and BDD, their pros and cons, and how to implement them in a project.",date:"2024-09-24T00:00:00.000Z",formattedDate:"September 24, 2024",tags:[{label:"javascript",permalink:"/blog/tags/javascript"},{label:"comparison",permalink:"/blog/tags/comparison"}],readingTime:22.515,hasTruncateMarker:!1,authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],frontMatter:{title:"TDD vs BDD - A Detailed Guide",description:"We'll be looking at the differences between TDD and BDD, their pros and cons, and how to implement them in a project.",slug:"tdd-vs-bdd",authors:"deborah_emeni",tags:["javascript","comparison"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/social.png",hide_table_of_contents:!1},prevItem:{title:"gRPC vs REST - A Brief Comparison",permalink:"/blog/grpc-vs-rest"},nextItem:{title:"React Memo Guide with Examples",permalink:"/blog/react-memo-guide"},relatedPosts:[{title:"5 Best Free Platforms for Hosting Hobby Web Projects",description:"A list of the best free platforms for hosting hobby web projects. You can host your static websites, React apps, and more for free.",permalink:"/blog/5-top-free-react-hosting-platforms",formattedDate:"July 16, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:23.275,date:"2024-07-16T00:00:00.000Z"},{title:"Top 6 Free Online Code Editors and IDEs with Pros and Cons",description:"We'll compare the best online IDEs and code editors for web development. We'll also look at the pros and cons of each.",permalink:"/blog/6-best-online-code-editors-comparison",formattedDate:"November 11, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:22.655,date:"2024-11-11T00:00:00.000Z"},{title:"refine vs React-Admin Which is Better for Your Project?",description:"We will compare the features of Refine and react-admin",permalink:"/blog/refine-vs-react-admin",formattedDate:"November 26, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:14.425,date:"2021-11-26T00:00:00.000Z"}],authorPosts:[{title:"The Important Differences between URI VS URL",description:"We'll be looking at the differences between URI and URL, and how they are used in web development.",permalink:"/blog/uri-vs-url",formattedDate:"September 18, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:14.455,date:"2024-09-18T00:00:00.000Z"},{title:"How to use React Strict Mode in React 18",description:"What is Strict Mode in React 18 and how to use it to find and fix bugs in your React application.",permalink:"/blog/react-strict-mode-in-react-18",formattedDate:"July 10, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:10.835,date:"2024-07-10T00:00:00.000Z"},{title:"How to use Conditional Rendering in React",description:"We'll implement Conditional Rendering in React and the various ways to use it in your React applications.",permalink:"/blog/react-conditional-rendering",formattedDate:"July 17, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:15.235,date:"2024-07-17T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Overview of Test-Driven Development",id:"overview-of-test-driven-development",level:2},{value:"Pros and cons of TDD",id:"pros-and-cons-of-tdd",level:3},{value:"Step-by-step demo example of TDD implementation",id:"step-by-step-demo-example-of-tdd-implementation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Overview of Behavior-Driven Development",id:"overview-of-behavior-driven-development",level:2},{value:"BDD testing",id:"bdd-testing",level:3},{value:"Pros and cons of BDD",id:"pros-and-cons-of-bdd",level:3},{value:"Step-by-step demo example of BDD implementation",id:"step-by-step-demo-example-of-bdd-implementation",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"When to use BDD (Behavior-Driven Development):",id:"when-to-use-bdd-behavior-driven-development",level:2},{value:"When to use TDD (Test-Driven Development):",id:"when-to-use-tdd-test-driven-development",level:2},{value:"Common Pitfalls and How I Avoid Them in TDD",id:"common-pitfalls-and-how-i-avoid-them-in-tdd",level:2},{value:"Common Pitfalls and How I Avoid Them in BDD",id:"common-pitfalls-and-how-i-avoid-them-in-bdd",level:2},{value:"Comparison of TDD and BDD",id:"comparison-of-tdd-and-bdd",level:2},{value:"Bonus: Advanced TDD and BDD Techniques",id:"bonus-advanced-tdd-and-bdd-techniques",level:2},{value:"Advanced TDD Techniques",id:"advanced-tdd-techniques",level:3},{value:"Advanced BDD Techniques",id:"advanced-bdd-techniques",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c},g="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(g,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"This article was last updated on September 24, 2024 to include advanced TDD and BDD techniques, common pitfalls, and how to avoid them."))),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"Software testing is critical in the software development cycle and ensures that the developed products are reliable and of high quality. The quality of the application is vital for providing a satisfying user experience. Paying attention to the development methodology used in writing tests in an application is also important."),(0,a.yg)("p",null,"Test-Driven Development (TDD) and Behavior Driven Development (BDD) are two popular and effective methodologies developers use to write quality tests that benefit developers, users, product managers and stakeholders."),(0,a.yg)("p",null,"In this article, you\u2019ll learn about Test-Driven Development (TDD) and Behavior Driven Development (BDD), including what they entail, their principles, advantages, disadvantages, how they work and their key differences."),(0,a.yg)("p",null,"Steps we'll cover:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#overview-of-test-driven-development"},"Overview of Test-Driven Development")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#step-by-step-demo-example-of-tdd-implementation"},"Step-by-step demo example of TDD implementation")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#overview-of-behavior-driven-development"},"Overview of Behavior-Driven Development")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#step-by-step-demo-example-of-bdd-implementation"},"Step-by-step demo example of BDD implementation")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#when-to-use-bdd-behavior-driven-development"},"When to use BDD (Behavior-Driven Development):")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#when-to-use-tdd-test-driven-development"},"When to use TDD (Test-Driven Development):")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#common-pitfalls-and-how-i-avoid-them-in-tdd"},"Common Pitfalls and How I Avoid Them in TDD")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#common-pitfalls-and-how-i-avoid-them-in-bdd"},"Common Pitfalls and How I Avoid Them in BDD")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#comparison-of-tdd-and-bdd"},"Comparison of TDD and BDD")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#bonus-advanced-tdd-and-bdd-techniques"},"Bonus: Advanced TDD and BDD Techniques"))),(0,a.yg)("h2",{id:"overview-of-test-driven-development"},"Overview of Test-Driven Development"),(0,a.yg)("p",null,"TDD is a repetitive and continuous process based on ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Agile_software_development"},"agile development methodology")," that involves creating test cases at each stage of developing an application to define the expected code behavior."),(0,a.yg)("p",null,"In TDD, developers first create a unit test case to showcase the desired behavior of the code before actually implementing it. If the test fails, they iteratively write new code until it successfully passes. Afterwards, they proceed to refactor the application's source code, which involves restructuring the code without introducing new features or compromising the original functionality of the application."),(0,a.yg)("p",null,"To implement TDD effectively, the process entails breaking down the application's functions and generating tests for each aspect. This approach ensures systematic and thorough testing and monitoring of the components."),(0,a.yg)("p",null,"A good example of TDD can be seen in building an Authentication system in an application."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/tdd-illustration.png",alt:"tdd vs bdd"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"According to the illustration above, the developer begins by identifying and defining the authentication system's requirements, including authentication methods such as OAuth, username, password, etc. The developer then writes a test that defines the expected behavior for one of the authentication system's components, such as the login functionality."),(0,a.yg)("p",null,"After that, the developer would run the tests, which would initially fail because the functionality had not yet been implemented. The developer then writes the code necessary to pass the test.\nThe tests are then re-run, and the code is refactored. After refactoring, the tests are rerun to ensure they continue to pass."),(0,a.yg)("p",null,"After the login functionality has been validated, additional test cases for other functions, such as account verification, registration, and password reset, are created, and the TDD process is repeated."),(0,a.yg)("h3",{id:"pros-and-cons-of-tdd"},"Pros and cons of TDD"),(0,a.yg)("p",null,"TDD offer several benefits. Still, it also has some drawbacks, as seen below:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Faster Development Cycle"),": TDD allows for the continuous delivery of software updates, and its architecture enables developers to quickly identify and fix bugs in their code. The rapid integration of updates promotes faster development and the delivery of high-quality software.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Improved Code quality"),": Writing test cases before writing the code enables developers to understand the desired functionality better and write well-structured code. Also, using the TDD approach makes it easier to refractor the section of the code and make it less buggy without affecting the existing functionality.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Time-consuming"),": TDD requires more time and effort in writing test cases before implementing the functionality, which may slow down the development process for projects with limited resources and short deadlines.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Rigid"),": The TDD approach of writing tests before implementing code is rigid because it is unsuitable for complex projects with constantly changing requirements."))),(0,a.yg)("h2",{id:"step-by-step-demo-example-of-tdd-implementation"},"Step-by-step demo example of TDD implementation"),(0,a.yg)("p",null,"Let's see how TDD works in practice by building a simple app."),(0,a.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",null,"To follow along with the tutorial, ensure you have the following:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://nodejs.org/"},"Nodejs")," installed"),(0,a.yg)("li",{parentName:"ul"},"Basic knowledge of ",(0,a.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"JavaScript")),(0,a.yg)("li",{parentName:"ul"},"Terminal"),(0,a.yg)("li",{parentName:"ul"},"Code editor (",(0,a.yg)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"Visual Studio Code editor"),")")),(0,a.yg)("p",null,"To begin, create the project directory on your system by running this command in your terminal:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"mkdir tdd-project\n")),(0,a.yg)("p",null,"Next, change into the directory by running this command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"cd tdd-project\n")),(0,a.yg)("p",null,"Open the project in your code editor, and in your project\u2019s directory, run the following command to initialize a new Node.js project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm init\n")),(0,a.yg)("p",null,"Next, you need to install a testing framework that will be used for performing unit testing in your project. Several testing frameworks are available depending on the programming language used to create an application. For example, ",(0,a.yg)("a",{parentName:"p",href:"https://junit.org/"},"JUnit")," is commonly used for Java apps, ",(0,a.yg)("a",{parentName:"p",href:"https://pytest.org/"},"pytest")," for Python apps, ",(0,a.yg)("a",{parentName:"p",href:"https://nunit.org/"},"NUnit")," for .NET apps, ",(0,a.yg)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," for JavaScript apps, and so on. We\u2019ll use the Jest framework for this tutorial since we are using JavaScript."),(0,a.yg)("p",null,"To install the Jest testing framework as a dev dependency in your project's directory, simply run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install jest --save-dev\n")),(0,a.yg)("p",null,"Once the installation is successful, jest will be installed and added to your ",(0,a.yg)("strong",{parentName:"p"},"package.json")," file. Replace your test script with this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="package.json"',title:'"package.json"'},'"test": "jest"\n')),(0,a.yg)("p",null,"Your ",(0,a.yg)("strong",{parentName:"p"},"package.json")," file should look like this:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{width:"300px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/package-json.png",alt:"tdd vs bdd"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"Using the TDD approach to build your application demands that you start by writing the tests. Create a file called ",(0,a.yg)("strong",{parentName:"p"},"sub.test.js")," in the root directory of the ",(0,a.yg)("strong",{parentName:"p"},"tdd-project")," that will contain the tests. Jest uses a .",(0,a.yg)("strong",{parentName:"p"},"test.js")," naming convention for files, so ensure your file has that extension."),(0,a.yg)("p",null,"Now, you can start writing your tests. Let\u2019s say you want to create a small calculator app, and the first functionality you\u2019d like to implement is the subtraction function. The Jest framework has its unique way of writing tests as defined in the ",(0,a.yg)("a",{parentName:"p",href:"https://jestjs.io/docs/getting-started"},"documentation"),"."),(0,a.yg)("p",null,"Jest uses a ",(0,a.yg)("inlineCode",{parentName:"p"},"test()")," function, which accepts a description as the first argument where you can describe the behavior you want to test and a callback where you can use an ",(0,a.yg)("inlineCode",{parentName:"p"},"expect()")," function and a ",(0,a.yg)("inlineCode",{parentName:"p"},"toBe()")," matcher that lets you define the expected behavior of your code and check if the behavior matches those expectations."),(0,a.yg)("p",null,"Let\u2019s see the ",(0,a.yg)("inlineCode",{parentName:"p"},"test()")," function in practice. In your ",(0,a.yg)("strong",{parentName:"p"},"sub.test.js file"),", add the following test that will define the behavior of subtracting values with the subtract method that you will define later in the code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="sub.test.js"',title:'"sub.test.js"'},'const Calc = require("./calc");\n\ntest("subtraction", () => {\n  const calc = new Calc();\n  const sub = calc.subtract(20, 10);\n  expect(sub).toBe(10);\n});\n')),(0,a.yg)("p",null,"Next, we\u2019ll try running the test, which will fail because you haven\u2019t written the functionality yet. However, this is an essential step as the test failing shows that the test is testing the behavior."),(0,a.yg)("p",null,"Run the test with this command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm test\n")),(0,a.yg)("p",null,"After running that command, the following will be displayed in your terminal:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center",width:"800px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/alt-name.png",alt:"tdd vs bdd"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"Next, let\u2019s write the code that implements the functionality. In your project\u2019s root directory, create a file called ",(0,a.yg)("strong",{parentName:"p"},"calc.js")," and add the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="calc.js"',title:'"calc.js"'},"class Calc {\n  subtract(x, y) {\n    return x - y;\n  }\n}\n\nmodule.exports = Calc;\n")),(0,a.yg)("p",null,"Here, we are creating a class called ",(0,a.yg)("inlineCode",{parentName:"p"},"Calc")," and adding a ",(0,a.yg)("inlineCode",{parentName:"p"},"subtract()")," method for the values we defined in the test case. Then we are exporting the class to use it outside of this module."),(0,a.yg)("p",null,"Now, you can rerun the test with this command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm test\n")),(0,a.yg)("p",null,"If you implemented the subtract method correctly, then the test should pass as shown below:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center",width:"800px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/altname-pass.png",alt:"tdd vs bdd"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"You have successfully written your first test case for one functionality in your application. If your test case fails, you can correct and refactor your code. Then, you can write and run more test cases for other functionalities like sum, average, division and more."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Next, we\u2019ll look at Behavior-Driven Development (BDD)")),(0,a.yg)("h2",{id:"overview-of-behavior-driven-development"},"Overview of Behavior-Driven Development"),(0,a.yg)("p",null,"BDD is another agile-based development process for creating tests that describe an application's expected behavior based on users\u2019 expectations. Compared to TDD, BDD focuses on meeting business needs and user requirements rather than simply passing tests."),(0,a.yg)("p",null,"With BDD, developers can create products focused on meeting users' needs based on their interactions with the product. The BDD approach encourages collaboration between product managers (usually in charge of defining the product's requirements), developers and testers."),(0,a.yg)("p",null,"In BDD, developers can use testing tools such as ",(0,a.yg)("a",{parentName:"p",href:"https://cucumber.io/"},"Cucumber"),", ",(0,a.yg)("a",{parentName:"p",href:"https://specflow.org/"},"SpecFlow"),", ",(0,a.yg)("a",{parentName:"p",href:"https://behave.readthedocs.io/"},"Behave"),", and others to plan and write tests in a language known as ",(0,a.yg)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/"},"Gherkin"),", which helps define the product's business requirements or specifications in a structured format using keywords in human-readable syntax."),(0,a.yg)("p",null,"See an illustration of the BDD workflow below:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/bdd-illustration.png",alt:"tdd vs bdd"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"The BDD workflow, as illustrated above, consists of several stages, which are explained below:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Identifying User Features"),": This is the first stage in BDD where the features that need to be developed are identified. The features are described here based on the users' expectations.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Create Feature files"),": This stage entails creating files to document the application's features in a structured format that developers, product teams, and testers can understand using the Gherkin language.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Writing Scenarios"),": At this stage, test cases are defined in feature files with examples describing the expected behavior of the feature. The Gherkin language has a syntax for defining test cases.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Team Assessment"),":This is the stage at which the developers, product team, and testers collaborate to evaluate the feature files and scenarios created and defined in previous stages. The evaluation is performed to ensure that the defined scenarios align with the business requirements and the expectations of the users.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Writing Step Implementations"),": At this point, the implementation of the scenarios described in the Gherkin language begins. Developers write code in a specific programming language (e.g., JavaScript or Java) that depends on the BDD framework to map each step in the scenario to the corresponding actions that must be executed.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Test Automation"),": After the steps defined in the scenarios are implemented, automated tests are written to run the scenarios by simulating user interactions with the application and determining whether the behavior matches the specifications in the scenarios.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Test Validation and Reporting"),": At this stage, the automated tests are run, and the outcome of the scenarios (whether fail or pass) are recorded for the developers, product team, and testers to review.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Continuous Development"),": As developers receive new requirements from users or the product team, updates are made to the feature files and scenarios, and the entire cycle (i.e. the previous BDD stages) is repeated until the expected behavior is achieved."))),(0,a.yg)("h3",{id:"bdd-testing"},"BDD testing"),(0,a.yg)("p",null,"BDD testing refers to testing practices within the BDD framework. In other words, It is the testing side of the BDD. These testing practices usually involve:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Writing tests as executable specifications in Gherkin syntax (Given-When-Then format)."),(0,a.yg)("li",{parentName:"ul"},"Running these tests automatically before every code change."),(0,a.yg)("li",{parentName:"ul"},"Collaborating with stakeholders (like product owners and business analysts) to define the scenarios.\nFocusing on testing the entire system behavior, not just individual units of code.")),(0,a.yg)("h3",{id:"pros-and-cons-of-bdd"},"Pros and cons of BDD"),(0,a.yg)("p",null,"BDD has several pros as well as cons. Here are a few:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Building Customer-centric Products"),": Products developed using the BDD approach are customer-centric because most of the features implemented are based on customer feedback. As a result, BDD ensures that the products align with and meet the customers' expectations.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Foster Collaboration and Transparency"),": The BDD approach provides transparency for developers, product teams, and testers to collaborate and understand the features defined, ensuring that they align with business requirements and user expectations.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Feedback-based"),": BDD depends on clear and effective communication between users and developers. When the communication channel is disrupted, the feature development process is hampered by a lack of collaboration between users and developers."))),(0,a.yg)("h2",{id:"step-by-step-demo-example-of-bdd-implementation"},"Step-by-step demo example of BDD implementation"),(0,a.yg)("p",null,"In this example, you\u2019ll learn how to create tests using the BDD approach."),(0,a.yg)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,a.yg)("p",null,"To follow along with this tutorial, you\u2019ll need the following:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Code editor (",(0,a.yg)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"Visual Studio Code editor"),")"),(0,a.yg)("li",{parentName:"ul"},"Terminal"),(0,a.yg)("li",{parentName:"ul"},"Basic knowledge of ",(0,a.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"JavaScript")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://nodejs.org/"},"Nodejs")," installed")),(0,a.yg)("p",null,"Let\u2019s start by creating a directory for the project. Open your terminal and run the following command to create a folder called ",(0,a.yg)("strong",{parentName:"p"},"bdd-project"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"mkdir bdd-project\n")),(0,a.yg)("p",null,"Open the project in your code editor. In the root project\u2019s directory, run the following command to initialize a new Node.js project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm init -y\n")),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://cucumber.io/docs/installation/javascript/"},"Cucumber.js")," works with Node.js and is available as an npm module, so you\u2019ll use it as your testing framework. Within your project directory, run the following command to install Cucumber.js as a development dependency:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install --save-dev @cucumber/cucumber\n")),(0,a.yg)("p",null,"Next, create a folder called ",(0,a.yg)("strong",{parentName:"p"},"features")," with a file called ",(0,a.yg)("strong",{parentName:"p"},"auth.feature")," (the ",(0,a.yg)("strong",{parentName:"p"},".feature")," extension is compulsory) that will contain the scenarios you\u2019ll define.\nIn the ",(0,a.yg)("strong",{parentName:"p"},"auth.feature")," file, you\u2019ll use ",(0,a.yg)("a",{parentName:"p",href:"https://cucumber.io/docs/gherkin/reference/"},"keywords")," provided by the Gherkin Syntax to describe the behavior of logging into the application from the users\u2019 perspective as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="features/auth.feature"',title:'"features/auth.feature"'},'Feature: Login feature\nAs a customer\nI would like to log into the application\nSo that I can gain access to my account\n\nScenario: Successful login\nGiven I am at the login page\nWhen I type in my correct username and password\nAnd click the "Login" button\nThen I should be redirected to my home page\n')),(0,a.yg)("p",null,"The keywords used above are explained below:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Feature"),": The ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#feature"},"Feature")," keyword is the first keyword that describes the feature in a short text."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Scenario"),": This ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#example"},"Scenario")," keyword defines the specific test case that describes a particular behavior of the login feature."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Given"),": The ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#given"},"Given")," keyword specifies the initial state of the scenario."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"When"),": The ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#when"},"When")," keyword describes the action performed by the user on the login feature."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"And"),": The ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#and-but"},"And")," keyword adds more steps to the scenario that describe an action carried out by the user"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Then"),": The ",(0,a.yg)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/#then"},"Then")," keyword specifies the expected outcome after the previous steps have been executed in this scenario")),(0,a.yg)("p",null,"So far, you have defined steps in your feature file, next you\u2019ll need to map the steps to their respective code implementation. To do this, create a file called ",(0,a.yg)("strong",{parentName:"p"},"step_implement.js")," and paste the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="step_implement.js"',title:'"step_implement.js"'},'const { Given, When, Then, And } = require("@cucumber/cucumber");\n\nGiven("I am at the login page", function () {\n  // write code that navigates to the login page\n});\n\nWhen("I type in my correct username and password", function () {\n  // write code to enter valid user credentials\n});\n\nWhen("click the {string} button", function (buttonText) {\n  // write code to click on the specified button\n});\n\nThen("I should be redirected to my home page", function () {\n  // write code to verify the redirection to the home page\n});\n')),(0,a.yg)("p",null,"You're importing the ",(0,a.yg)("inlineCode",{parentName:"p"},"Given"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"When"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Then"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"And")," keywords from the Cucumber npm module you installed and writing the code to implement all of the steps and actions defined in the Scenario."),(0,a.yg)("p",null,"To execute the steps defined in the feature file, create another file called configure.js that will contain the Cucumber.js configuration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="configure.js"',title:'"configure.js"'},"module.exports = {\n  default: '--format-options \\'{\"snippetInterface\": \"synchronous\"}\\'',\n};\n")),(0,a.yg)("p",null,"You're configuring the default options for the Cucumber.js test runner here by specifying the format of the output generated by Cucumber to synchronous."),(0,a.yg)("p",null,"In your ",(0,a.yg)("strong",{parentName:"p"},"package.json")," file, set your ",(0,a.yg)("strong",{parentName:"p"},"test")," script to this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="package.json"',title:'"package.json"'},'"test": "cucumber-js"\n')),(0,a.yg)("p",null,"Then, run the tests with the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npx cucumber-js\n")),(0,a.yg)("p",null,"Once you run the command, the outcome should be displayed in your terminal as follows:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center",width:"800px"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-06-09-tdd-vs-bdd/cucumber.png",alt:"TDD vs BDD"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"The tests will pass once you add the appropriate code to implement the scenarios."),(0,a.yg)("h2",{id:"when-to-use-bdd-behavior-driven-development"},"When to use BDD (Behavior-Driven Development):"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Collaborative requirements definition"),": Use BDD when you want to involve non-technical stakeholders (such as business analysts, product owners, or clients) in the definition of requirements. BDD's use of natural language allows for the creation of scenarios that are easily understood by all parties and everyone is on the same page."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"User-centric applications"),": BDD is particularly useful when the focus is on user behavior and ensuring that the system provides specific value to the user. It is ideal for projects where user stories are a key component of the development process, and the end user's experience is a priority."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Complex business logic"),": When the project involves complex business logic that requires clear understanding and communication among stakeholders, BDD helps to clarify the desired behaviors through examples and ensures that all team members have a common understanding."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Refinement of acceptance criteria"),": BDD is beneficial when the team requires a clear set of acceptance criteria that can be translated into automated tests. This ensures that the features meet the predefined behaviors before being considered complete.")),(0,a.yg)("h2",{id:"when-to-use-tdd-test-driven-development"},"When to use TDD (Test-Driven Development):"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Focus on quality and design"),": Use TDD when you want to ensure high code quality and a clean design from the start. TDD encourages small, incremental changes and refactoring, which can lead to a well-structured and less complex codebase."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Developer-level feedback"),": When rapid feedback on the code's functionality is required, TDD provides immediate input to developers about whether their code works as expected. This can reduce the debugging time and speed up the development process."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Regulatory compliance and documentation"),": In environments where there is a need for detailed documentation of the development process for regulatory compliance, TDD can provide an audit trail of tests that correspond to specific requirements of the system."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Continuous integration environments"),": TDD is ideal in continuous integration environments where tests are run frequently. It ensures that new code does not break existing functionality, thus facilitating continuous improvement of the code with minimal disruption.")),(0,a.yg)("h2",{id:"common-pitfalls-and-how-i-avoid-them-in-tdd"},"Common Pitfalls and How I Avoid Them in TDD"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Too Many Small Tests are Being Written"),"\nThis often gets me caught up in writing tests for every little function or method. It feels so complete, but it's really just slowing me down and making the test suite a lot more maintenance-heavy."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"How I avoid it:")," I now test the whole system most of the time for its behavior rather than testing all internal details."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"// Cannot test private or tiny methods.\ntest('should add item to cart', () =>\nconst cart = new ShoppingCart();\ncart.addItem({ name: 'Book', price: 10 });\nexpect(cart.items.length).toBe(1);\n);\nEND\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"No Refactoring")),(0,a.yg)("p",null,"I had often been tempted, once it passed, to just move on and skip cleaning up the code. But not refactoring usually begets messy, hard-to-maintain code later on."),(0,a.yg)("p",null,"Always take the time to refactor immediately after getting the test to pass. That's why TDD's \"Red, Green, Refactor\" is so important."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Writing Code Before Tests"),"\nThis is also you can often find me writing the code first, then subsequently adding tests for; it's here I've realized that indeed buries the advantages of TDD."),(0,a.yg)("p",null,"Now, I write the test always first\u2014even if it takes some extra time upfront. This way, I can catch bugs quickly and remain focused on my goal."),(0,a.yg)("h2",{id:"common-pitfalls-and-how-i-avoid-them-in-bdd"},"Common Pitfalls and How I Avoid Them in BDD"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Too General or Too Specific Writing Scenarios"),"\nI notice that both very vague and very highly detailed writing of scenarios leads to confusion: where they are vague, they miss important behavior; where they are too detailed, it is overwhelming."),(0,a.yg)("p",null,"I strive to focus my attention on the writing of scenarios that describe users' behavior in free text, striking a balance between the level of detail and clarity."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gherkin"},"Scenario: User logs in successfully\nGiven the user is on the login page\nWhen the user inputs correct credentials\nHe will then be taken to the dashboard.\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Not Involving Non-Technical Stakeholders"),"\nI had written some BDD scenarios in the past when I did not collaborate enough with the product owners or stakeholders. The scenarios weren't really aligned with the business need in those cases."),(0,a.yg)("p",null,"I make sure to involve product owners and nontechnical stakeholders up-front because this means that scenarios reflect real business goals."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Not Automating BDD Tests")),(0,a.yg)("p",null,"I have from time to time written good BDD scenarios yet didn't automate them, which led to missed tests and manual errors."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"How I avoid it:")," I always use tools like Cucumber in order to automate the BDD tests\u2014so all go smooth and consistent."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"END // Example of BDD scenario automation using Cucumber.js\nconst { Given, When, Then } = require('@cucumber/cucumber');\n\nGiven('the user is on the login page', function ()\n\n// code to divert to the login page\n\n})\n\nWhen('the user enters valid credentials', function () {\n\n//Credentials Input Code END Then('the user is redirected to the dashboard', function () // code to check the redirecting to dashboard );\nEND\n")),(0,a.yg)("h2",{id:"comparison-of-tdd-and-bdd"},"Comparison of TDD and BDD"),(0,a.yg)("p",null,"So far, you've learned what TDD and BDD are, what they entail, and how they work. Let's look at how they differ in various aspects, as shown in the table below:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Aspect"),(0,a.yg)("th",{parentName:"tr",align:"left"},"TDD (Test-Driven Development)"),(0,a.yg)("th",{parentName:"tr",align:"left"},"BDD (Behavior-Driven Development)"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Core Focus"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Focuses on the implementation of functionality."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Focuses on the behavior and interaction of the system with the user.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Scope"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Typically limited to the developer\u2019s scope; testing mainly at the unit level."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Broader scope involving stakeholders; tests at the system level with scenarios.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Test Creation"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Tests are written before code is implemented."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Scenarios are defined before tests are written; tests are derived from these.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Language Used"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Uses programming languages to write test cases."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Uses natural language, often English, to write scenarios.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Automation"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Tests are automated."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Scenarios can be automated using tools like Cucumber.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Written By"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Written by developers."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Written by or with stakeholders, such as product owners, developers, and testers.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Test Examples"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Should increment the count when the method is called."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Given a registered user, when they log in, then they see their dashboard.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Communication"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Primarily between developers or between developer and code."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Promotes communication between technical and non-technical stakeholders.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Similarities"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both encourage writing tests before the actual code."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both require writing tests before the actual code.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"}),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both aim to create a suite of automated tests."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both aim to create a suite of automated tests.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"}),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both methods emphasize the importance of testing in the development process."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Both methods emphasize the importance of testing in the development process.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Differences"),(0,a.yg)("td",{parentName:"tr",align:"left"},"TDD does not involve business stakeholders directly."),(0,a.yg)("td",{parentName:"tr",align:"left"},"BDD encourages direct involvement of business stakeholders.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"}),(0,a.yg)("td",{parentName:"tr",align:"left"},"Code-centric approach."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Behavior-centric approach, often through user stories.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"}),(0,a.yg)("td",{parentName:"tr",align:"left"},"Less emphasis on documentation that's understandable by business stakeholders."),(0,a.yg)("td",{parentName:"tr",align:"left"},"Emphasizes documentation that doubles as living documentation for the system.")))),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"bonus-advanced-tdd-and-bdd-techniques"},"Bonus: Advanced TDD and BDD Techniques"),(0,a.yg)("p",null,"Lately, I have been looking at some of the more advanced TDD and BDD techniques. For me, these have made the difference, mainly in controlling some complex test cases."),(0,a.yg)("h3",{id:"advanced-tdd-techniques"},"Advanced TDD Techniques"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Mocking and Stubbing"),(0,a.yg)("br",{parentName:"p"}),"\n","Whenever I have code that depends on something external, like a database or an API, testing gets really tricky. Mocks and stubs help me feel like I'm really insulating what I'm trying to test."),(0,a.yg)("p",null,"I utilize mocking frameworks in order to simulate some external dependencies so that the tests will stay fast and focused."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const fetchData = require("./fetchData");\nconst axios = require("axios");\n\njest.mock("axios");\n\ntest("should fetch user data", async () => {\n  const user = { name: "John" };\n  axios.get.mockResolvedValue({ data: user });\n\n  const result = await fetchData();\n  expect(result.name).toBe("John");\n});\n')),(0,a.yg)("p",null,"In the following example, the ",(0,a.yg)("inlineCode",{parentName:"p"},"axios.get")," method is mocked away from useEffect in order to simulate an API request for testing the behavior of ",(0,a.yg)("inlineCode",{parentName:"p"},"fetchData"),"."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Testing Edge Cases and Exceptions"),(0,a.yg)("br",{parentName:"p"}),"\n","TDD is great for ensuring that code works as expected, but it's equally important to test how it will handle unexpected or invalid inputs. I always try to write tests that cover the edge cases of exceptions."),(0,a.yg)("p",null,"I write tests for unexpected input values, null values, or edge cases that might not occur frequently but may cause the application to break."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'test("should return an error when there is no data", () => {\n  const func = () => processData(null);\n  expect(func).toThrow("Invalid data");\n});\n')),(0,a.yg)("p",null,"I am testing here how my function handles a null input. This should raise an error."),(0,a.yg)("h3",{id:"advanced-bdd-techniques"},"Advanced BDD Techniques"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Summarizing the Case"),(0,a.yg)("br",{parentName:"p"}),"\n","In my experience with BDD, scenario outlines can definitely help in reducing repeated tests for the same scenario with different values in data."),(0,a.yg)("p",null,"Scenario outlines allow you to write a single test structure and run it multiple times with different inputs. This will save you time and clean up the scenarios."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gherkin"},'Scenario Outline: Verifying user input\nGiven that "<input>" are the user inputs\nWhen the form is submitted by the user\nThen the message "<message>" shall appear\n\nExamples:\n  | input   | message           |\n  | John    | Input is valid    |\n  | ""      | Input is required |\n  | 123     | Error Input       |\n')),(0,a.yg)("p",null,"In this scenario, running the scenario a few times with different inputs helps me concisely cover a number of different cases."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Selective Testing Using Tags"),(0,a.yg)("br",{parentName:"p"}),"\n","When working on big projects, running all BDD tests may take much time. In BDD, I have started using tags to run selectively only the scenarios in focus."),(0,a.yg)("p",null,"I label scenarios based on priority or feature so at development time I can run selected sets of tests."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-gherkin"},"@login\nScenario: User has logged in successfully\n  Given the user is on the login page\n  When the user enters valid credentials\n  Then the user is redirected to the dashboard\n")),(0,a.yg)("p",null,"In practice, what it means is that, at any given time, working on the login functionality, I run only the tests tagged as having ",(0,a.yg)("inlineCode",{parentName:"p"},"@login")," but not all tests."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"BDD with Continuous Integration"),(0,a.yg)("br",{parentName:"p"}),"\n","BDD tests incorporated into the CI pipeline changed my professional life. It ensured that the scenarios are tested automatically after every code change."),(0,a.yg)("p",null,"I have configured BDD tools such as Cucumber to run as part of CI processes so that the behavior is continually validated."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"# Example CI pipeline with BDD tests\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run BDD tests\n        run: npm run cucumber\n")),(0,a.yg)("p",null,"These BDD tests can be used in automation form within the CI pipeline to catch potential behavioral issues quite early, and also ensure at all times that the code behaves as per expectation."),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"Finally, you've reached the end of this article, where you learned about Test-Driven Development (TDD) and Behavior-Driven Development (BDD), including what they entail, their principles, their benefits and drawbacks, and how they differ. You also saw TDD and BDD in action in a demo application."))}m.isMDXComponent=!0}}]);