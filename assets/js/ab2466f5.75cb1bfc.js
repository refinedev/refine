"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2623],{58860:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(37953);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93233:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>w,frontMatter:()=>s,metadata:()=>l,toc:()=>p});t(37953);var r=t(58860);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={id:"access-control",title:"Access Control",sidebar_label:"Access Control"},d=void 0,l={unversionedId:"advanced-tutorials/access-control",id:"advanced-tutorials/access-control",title:"Access Control",description:"Introduction",source:"@site/docs/advanced-tutorials/access-control.md",sourceDirName:"advanced-tutorials",slug:"/advanced-tutorials/access-control",permalink:"/docs/advanced-tutorials/access-control",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/advanced-tutorials/access-control.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756448171,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{id:"access-control",title:"Access Control",sidebar_label:"Access Control"},sidebar:"mainSidebar",previous:{title:"Advanced Tutorials",permalink:"/docs/advanced-tutorials"},next:{title:"Auth0 Login",permalink:"/docs/advanced-tutorials/auth/auth0"}},c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Adding Policy and Model",id:"adding-policy-and-model",level:2},{value:"Adding <code>accessControlProvider</code>",id:"adding-accesscontrolprovider",level:2},{value:"Adding Different Roles",id:"adding-different-roles",level:2},{value:"Handling access with params",id:"handling-access-with-params",level:2},{value:"ID Based Access",id:"id-based-access",level:3},{value:"Field Based Access",id:"field-based-access",level:3},{value:"Example",id:"example",level:2},{value:"Casbin",id:"casbin",level:3},{value:"Cerbos",id:"cerbos",level:3}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},m=u("DocThumbsUpDownFeedbackWidget"),g=u("InstallPackagesCommand"),h=u("Tabs"),f=u("TabItem"),y=u("CodeSandboxExample"),b={toc:p},v="wrapper";function w(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(v,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){a(e,n,t[n])}))}return e}({},b,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import {\n  newModel as CasbinNewModel,\n  StringAdapter as CasbinStringAdapter,\n  newEnforcer as CasbinNewEnforcer,\n} from "casbin";\n\nconst model = CasbinNewModel(`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n\n[matchers]\nm = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)\n`);\n\nimport {\n  Create as AntdCreate,\n  List as AntdList,\n  useForm as useAntdForm,\n  useTable as useAntdTable,\n  EditButton as AntdEditButton,\n  ShowButton as AntdShowButton,\n  EmailField as AntdEmailField,\n  NumberField as AntdNumberField,\n} from "@refinedev/antd";\nimport {\n  Table as AntdTable,\n  Edit as AntdEdit,\n  Form as AntdForm,\n  Input as AntdInput,\n  Space as AntdSpace,\n  Layout as AntdLayout,\n  Radio as AntdRadio,\n} from "antd";\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst PostList = () => {\n  const { tableProps } = useAntdTable();\n\n  return (\n    <AntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column dataIndex="id" title="ID" />\n        <AntdTable.Column dataIndex="title" title="Title" />\n        <AntdTable.Column dataIndex="status" title="Status" />\n        <AntdTable.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <AntdEditButton hideText size="small" recordItemId={record.id} />\n              <AntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </AntdList>\n  );\n};\n\nconst PostCreate = () => {\n  const { formProps, saveButtonProps } = useAntdForm();\n\n  return (\n    <AntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Content"\n          name="content"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput.TextArea />\n        </AntdForm.Item>\n      </AntdForm>\n    </AntdCreate>\n  );\n};\n\nconst CategoryList = () => {\n  const { tableProps } = useAntdTable();\n\n  return (\n    <AntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column dataIndex="id" title="ID" />\n        <AntdTable.Column dataIndex="title" title="Title" />\n        <AntdTable.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <AntdEditButton hideText size="small" recordItemId={record.id} />\n              <AntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </AntdList>\n  );\n};\n\nconst CategoryCreate = () => {\n  const { formProps, saveButtonProps } = useAntdForm();\n\n  return (\n    <AntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="Title"\n          name="title"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n      </AntdForm>\n    </AntdCreate>\n  );\n};\n\nconst UserList = () => {\n  const { tableProps } = useAntdTable();\n\n  return (\n    <AntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column dataIndex="firstName" title="First Name" />\n        <AntdTable.Column dataIndex="lastName" title="Last Name" />\n        <AntdTable.Column\n          dataIndex="email"\n          title="Email"\n          render={(value) => <AntdEmailField value={value} />}\n        />\n        <AntdTable.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <AntdEditButton hideText size="small" recordItemId={record.id} />\n              <AntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </AntdList>\n  );\n};\n\nconst UserCreate = () => {\n  const { formProps, saveButtonProps } = useAntdForm();\n\n  return (\n    <AntdCreate saveButtonProps={saveButtonProps}>\n      <AntdForm {...formProps} layout="vertical">\n        <AntdForm.Item\n          label="First Name"\n          name="firstName"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Last Name"\n          name="lastName"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n        <AntdForm.Item\n          label="Email"\n          name="email"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <AntdInput />\n        </AntdForm.Item>\n      </AntdForm>\n    </AntdCreate>\n  );\n};\n\nconst Header = ({ role }) => {\n  return (\n    <AntdLayout.Header\n      style={{\n        display: "flex",\n        justifyContent: "center",\n        alignItems: "center",\n        height: "48px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      <AntdRadio.Group value={role}>\n        <AntdRadio.Button value="admin">Admin</AntdRadio.Button>\n        <AntdRadio.Button value="editor">Editor</AntdRadio.Button>\n      </AntdRadio.Group>\n    </AntdLayout.Header>\n  );\n};\n')),(0,r.yg)("h2",{id:"introduction"},"Introduction"),(0,r.yg)(m,{id:"introduction",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Access control is a broad topic where there are lots of advanced solutions that provide a different sets of features. ",(0,r.yg)("strong",{parentName:"p"},"Refine")," is deliberately agnostic for its own API to be able to integrate different methods (RBAC, ABAC, ACL, etc.) and different libraries (",(0,r.yg)("a",{parentName:"p",href:"https://casbin.org/"},"Casbin"),", ",(0,r.yg)("a",{parentName:"p",href:"https://casl.js.org/v5/en/"},"CASL"),", ",(0,r.yg)("a",{parentName:"p",href:"https://cerbos.dev/"},"Cerbos"),", ",(0,r.yg)("a",{parentName:"p",href:"https://onury.io/accesscontrol/"},"AccessControl.js"),"). ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," method would be the entry point for those solutions."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},"Refer to the Access Control Provider documentation for detailed information. ","\u2192")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Refine")," provides an agnostic API via the ",(0,r.yg)("inlineCode",{parentName:"p"},"accessControlProvider")," to manage access control throughout your app."),(0,r.yg)("p",null,"An ",(0,r.yg)("inlineCode",{parentName:"p"},"accessControlProvider")," must implement only one async method named ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," to be used to check if the desired access will be granted."),(0,r.yg)("p",null,"We will be using ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://casbin.org/"},"Casbin"))," in this guide for users with different roles who have different access rights for parts of the app.")),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)(m,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We need to install Casbin."),(0,r.yg)(g,{args:"casbin",mdxType:"InstallPackagesCommand"}),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"To make this example more visual, we used the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/antd"},(0,r.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. If you are using Refine headless, you need to provide the components, hooks, or helpers imported from the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/antd"},(0,r.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package."))),(0,r.yg)("h2",{id:"setup"},"Setup"),(0,r.yg)(m,{id:"setup",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The app will have three resources: ",(0,r.yg)("strong",{parentName:"p"},"posts"),", ",(0,r.yg)("strong",{parentName:"p"},"users"),", and ",(0,r.yg)("strong",{parentName:"p"},"categories")," with CRUD pages(list, create, edit, and show)."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#example"},"You can refer to CodeSandbox to see how they are implemented ","\u2192")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"App.tsx")," will look like this before we begin implementing access control:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { ThemedLayout, ErrorComponent, RefineThemes } from "@refinedev/antd";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { ConfigProvider } from "antd";\nimport "@refinedev/antd/dist/reset.css";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider(API_URL)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n              edit: "/posts/edit/:id",\n              show: "/posts/show/:id",\n              meta: {\n                canDelete: true,\n              },\n            },\n            {\n              name: "users",\n              list: "/users",\n              create: "/users/create",\n              edit: "/users/edit/:id",\n              show: "/users/show/:id",\n            },\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n              edit: "/categories/edit/:id",\n              show: "/categories/show/:id",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout>\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n                <Route path="show/:id" element={<PostShow />} />\n                <Route path="edit/:id" element={<PostEdit />} />\n              </Route>\n              <Route path="users">\n                <Route index element={<UserList />} />\n                <Route path="create" element={<UserCreate />} />\n                <Route path="show/:id" element={<UserShow />} />\n                <Route path="edit/:id" element={<UserEdit />} />\n              </Route>\n              <Route path="categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n                <Route path="show/:id" element={<CategoryShow />} />\n                <Route path="edit/:id" element={<CategoryEdit />} />\n              </Route>\n            </Route>\n            <Route path="*" element={<ErrorComponent />} />\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n'))),(0,r.yg)("h2",{id:"adding-policy-and-model"},"Adding Policy and Model"),(0,r.yg)(m,{id:"adding-policy-and-model",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The way ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://casbin.org/"},"Casbin"))," works is that access rights are checked according to policies that are defined based on a model. You can find further information about how models and policies work ",(0,r.yg)("a",{parentName:"p",href:"https://casbin.org/docs/how-it-works"},"here"),"."),(0,r.yg)("p",null,"Let's add a model and a policy for a role ",(0,r.yg)("strong",{parentName:"p"},"editor")," that have ",(0,r.yg)("strong",{parentName:"p"},"list")," access for ",(0,r.yg)("strong",{parentName:"p"},"posts")," resource."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/accessControl.ts"',title:'"src/accessControl.ts"'},'import { newModel, StringAdapter } from "casbin";\n\nexport const model = newModel(`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)\n`);\n\nexport const adapter = new StringAdapter(`\np, editor, posts, list\n`);\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You can can find more examples in ",(0,r.yg)("a",{parentName:"p",href:"https://casbin.org/docs/supported-models"},"Casbin documentation")," or play with lots of examples in ",(0,r.yg)("a",{parentName:"p",href:"https://casbin.org/editor"},"Casbin editor")))),(0,r.yg)("h2",{id:"adding-accesscontrolprovider"},"Adding ",(0,r.yg)("inlineCode",{parentName:"h2"},"accessControlProvider")),(0,r.yg)(m,{id:"adding-accesscontrolprovider",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Now we will implement the ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," method for ",(0,r.yg)("inlineCode",{parentName:"p"},"accessControlProvider")," to integrate our policy."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'// ...\n// highlight-next-line\nimport { newEnforcer } from "casbin";\n\n// highlight-next-line\nimport { model, adapter } from "./accessControl";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Refine\n        // highlight-start\n        accessControlProvider={{\n          can: async ({ resource, action }) => {\n            const enforcer = await newEnforcer(model, adapter);\n            const can = await enforcer.enforce("editor", resource, action);\n\n            return { can };\n          },\n        }}\n        // highlight-end\n        //...\n      >\n        {/* ... */}\n      </Refine>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n')),(0,r.yg)("p",null,"Whenever a part of the app checks for access control, Refine passes ",(0,r.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"action"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"params")," parameters to ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," and then we can use these parameters to integrate our specific access control solution which is ",(0,r.yg)("strong",{parentName:"p"},"Casbin")," in this case."),(0,r.yg)("p",null,"Our model provides that user with role ",(0,r.yg)("strong",{parentName:"p"},"editor")," have access for ",(0,r.yg)("strong",{parentName:"p"},"list")," action on ",(0,r.yg)("strong",{parentName:"p"},"posts")," resource. Even though we have two other resources, since our policy doesn't include them, they will not appear on the sidebar menu. Also in the list page of ",(0,r.yg)("inlineCode",{parentName:"p"},"posts"),", buttons for ",(0,r.yg)("strong",{parentName:"p"},"create"),", ",(0,r.yg)("strong",{parentName:"p"},"edit")," and ",(0,r.yg)("strong",{parentName:"p"},"show")," buttons will be disabled since they are not included in the policy."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173/posts previewHeight=420px",live:!0,previewOnly:!0,url:"http://localhost:5173/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\nimport React from "react";\nimport { Create, useForm } from "@refinedev/antd";\nimport { Form, Input } from "antd";\n\nconst adapter = new CasbinStringAdapter(`\np, editor, posts, list\n`);\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineAntdDemo\n      accessControlProvider={{\n        can: async ({ resource, action }) => {\n          const enforcer = await CasbinNewEnforcer(model, adapter);\n          const can = await enforcer.enforce("editor", resource, action);\n\n          return { can };\n        },\n      }}\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          create: "/posts/create",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route index element={<PostList />} />\n        </ReactRouter.Route>\n        <ReactRouter.Route path="/posts/create" element={<PostCreate />} />\n      </ReactRouter.Routes>\n    </RefineAntdDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,r.yg)("h2",{id:"adding-different-roles"},"Adding Different Roles"),(0,r.yg)(m,{id:"adding-different-roles",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We can provide different access rights to a different types of users for different parts of the app. We can do that by adding policies for the different roles."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"export const adapter = new MemoryAdapter(`\np, admin, posts, (list)|(create)\np, admin, users, (list)|(create)\np, admin, categories, (list)|(create)\n\np, editor, posts, (list)|(create)\np, editor, categories, list\n`);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"admin")," will have access to ",(0,r.yg)("strong",{parentName:"li"},"list")," and ",(0,r.yg)("strong",{parentName:"li"},"create")," for every resource"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"editor")," will have access to ",(0,r.yg)("strong",{parentName:"li"},"list")," and ",(0,r.yg)("strong",{parentName:"li"},"create")," for ",(0,r.yg)("strong",{parentName:"li"},"posts")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"editor")," won't have any access for ",(0,r.yg)("strong",{parentName:"li"},"users")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"editor")," will have only ",(0,r.yg)("strong",{parentName:"li"},"list")," access for ",(0,r.yg)("strong",{parentName:"li"},"categories"))),(0,r.yg)("p",null,"We can demonstrate the effect of different roles by changing the ",(0,r.yg)("inlineCode",{parentName:"p"},"role")," dynamically. Let's implement a switch in the header for selecting either ",(0,r.yg)("strong",{parentName:"p"},"admin")," or ",(0,r.yg)("strong",{parentName:"p"},"editor")," role to see the effect on the app."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'// highlight-next-line\nimport { Header } from "components/header";\n\nconst App: React.FC = () => {\n  // highlight-start\n  import { CanAccess } from "@refinedev/core";\n  const role = localStorage.getItem("role") ?? "admin";\n  // highlight-end\n\n  return (\n    <BrowserRouter>\n      <Refine\n        // highlight-start\n        accessControlProvider={{\n          can: async ({ resource, action }) => {\n            const enforcer = await newEnforcer(model, adapter);\n            // highlight-next-line\n            const can = await enforcer.enforce(role, resource, action);\n\n            return {\n              can,\n            };\n          },\n        }}\n        // highlight-end\n        //...\n      >\n        <Routes>\n          <Route\n            element={\n              // highlight-start\n              <ThemedLayout Header={() => <Header role={role} />}>\n                <CanAccess>\n                  <Outlet />\n                </CanAccess>\n              </ThemedLayout>\n              // highlight-end\n            }\n          >\n            {/* ... */}\n          </Route>\n        </Routes>\n        {/* ... */}\n      </Refine>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Header Component"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'import { Layout, Radio } from "antd";\n\ninterface HeaderProps {\n  role: string;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ role }) => {\n  return (\n    <Layout.Header\n      style={{\n        display: "flex",\n        justifyContent: "center",\n        alignItems: "center",\n        height: "48px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      <Radio.Group\n        value={role}\n        onChange={(event) => {\n          localStorage.setItem("role", event.target.value);\n          location.reload();\n        }}\n      >\n        <Radio.Button value="admin">Admin</Radio.Button>\n        <Radio.Button value="editor">Editor</Radio.Button>\n      </Radio.Group>\n    </Layout.Header>\n  );\n};\n'))),(0,r.yg)("br",null),(0,r.yg)("p",null,"Now, let's see how the application will appear when logging in as an ",(0,r.yg)("inlineCode",{parentName:"p"},"admin")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"editor"),"."),(0,r.yg)(h,{defaultValue:"admin",values:[{label:"admin",value:"admin"},{label:"editor",value:"editor"}],mdxType:"Tabs"},(0,r.yg)(f,{value:"admin",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=660px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"660px"},'setInitialRoutes(["/posts"]);\nimport { useState } from "react";\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayout, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport dataProvider from "@refinedev/simple-rest";\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst adapter = new CasbinStringAdapter(`\np, admin, posts, (list)|(create)\np, admin, users, (list)|(create)\np, admin, categories, (list)|(create)\n\np, editor, posts, (list)|(create)\np, editor, categories, list\n`);\n\nconst App: React.FC = () => {\n  const role = "admin";\n\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider(API_URL)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n            },\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n            },\n            {\n              name: "users",\n              list: "/users",\n              create: "/users/create",\n            },\n          ]}\n          accessControlProvider={{\n            can: async ({ resource, action }) => {\n              const enforcer = await CasbinNewEnforcer(model, adapter);\n              const can = await enforcer.enforce(role, resource, action);\n\n              return { can };\n            },\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout\n                // Header={() => <Header role={role} />}\n                >\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n              </Route>\n              <Route path="categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n              </Route>\n              <Route path="users">\n                <Route index element={<UserList />} />\n                <Route path="create" element={<UserCreate />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,r.yg)(f,{value:"editor",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=660px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"660px"},'setInitialRoutes(["/posts"]);\nimport { useState } from "react";\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayout, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport dataProvider from "@refinedev/simple-rest";\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst adapter = new CasbinStringAdapter(`\np, admin, posts, (list)|(create)\np, admin, users, (list)|(create)\np, admin, categories, (list)|(create)\n\np, editor, posts, (list)|(create)\np, editor, categories, list\n`);\n\nconst App: React.FC = () => {\n  const role = "editor";\n\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider(API_URL)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n            },\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n            },\n            {\n              name: "users",\n              list: "/users",\n              create: "/users/create",\n            },\n          ]}\n          accessControlProvider={{\n            can: async ({ resource, action }) => {\n              const enforcer = await CasbinNewEnforcer(model, adapter);\n              const can = await enforcer.enforce(role, resource, action);\n\n              return { can };\n            },\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout\n                // Header={() => <Header role={role} />}\n                >\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n                <Route path="create" element={<PostCreate />} />\n              </Route>\n              <Route path="categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n              </Route>\n              <Route path="users">\n                <Route index element={<UserList />} />\n                <Route path="create" element={<UserCreate />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))))),(0,r.yg)("h2",{id:"handling-access-with-params"},"Handling access with params"),(0,r.yg)("h3",{id:"id-based-access"},"ID Based Access"),(0,r.yg)(m,{id:"id-based-access",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Let's update our policies to handle ",(0,r.yg)("strong",{parentName:"p"},"id")," based access control points like ",(0,r.yg)("strong",{parentName:"p"},"edit"),", ",(0,r.yg)("strong",{parentName:"p"},"show")," pages, and ",(0,r.yg)("strong",{parentName:"p"},"delete")," button."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"export const adapter = new MemoryAdapter(`\np, admin, posts, (list)|(create)\n// highlight-next-line\np, admin, posts/*, (edit)|(show)|(delete)\n\np, admin, users, (list)|(create)\n// highlight-next-line\np, admin, users/*, (edit)|(show)|(delete)\n\np, admin, categories, (list)|(create)\n// highlight-next-line\np, admin, categories/*, (edit)|(show)|(delete)\n\np, editor, posts, (list)|(create)\n// highlight-next-line\np, editor, posts/*, (edit)|(show)\n\np, editor, categories, list\n`);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"admin")," will have ",(0,r.yg)("strong",{parentName:"li"},"edit"),", ",(0,r.yg)("strong",{parentName:"li"},"show")," and ",(0,r.yg)("strong",{parentName:"li"},"delete")," access for every resource"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"editor")," will have ",(0,r.yg)("strong",{parentName:"li"},"edit")," and ",(0,r.yg)("strong",{parentName:"li"},"show")," access for ",(0,r.yg)("strong",{parentName:"li"},"posts"))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"*")," is a wildcard. Specific ids can be targeted too. For example If you want ",(0,r.yg)("strong",{parentName:"p"},"editor")," role to have ",(0,r.yg)("strong",{parentName:"p"},"delete")," access for ",(0,r.yg)("strong",{parentName:"p"},"post")," with ",(0,r.yg)("strong",{parentName:"p"},"id")," ",(0,r.yg)("inlineCode",{parentName:"p"},"5"),", you can add this policy:"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"export const adapter = new MemoryAdapter(`\np, editor, posts/5, delete\n`);\n"))),(0,r.yg)("p",null,"We must handle id based access controls in the ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," method. ",(0,r.yg)("strong",{parentName:"p"},"id")," parameter will be accessible in ",(0,r.yg)("inlineCode",{parentName:"p"},"params"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'const App: React.FC = () => {\n  return (\n    <Refine\n      //...\n      accessControlProvider={{\n        // highlight-start\n        can: async ({ resource, action, params }) => {\n          const enforcer = await newEnforcer(model, adapter);\n\n          if (action === "delete" || action === "edit" || action === "show") {\n            const can = await enforcer.enforce(\n              role,\n              `${resource}/${params?.id}`,\n              action,\n            );\n\n            return { can };\n          }\n          // highlight-end\n\n          const can = await enforcer.enforce(role, resource, action);\n\n          return { can };\n        },\n      }}\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n\nexport default App;\n'))),(0,r.yg)("h3",{id:"field-based-access"},"Field Based Access"),(0,r.yg)(m,{id:"field-based-access",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We can also check access control for specific areas in our app like a certain field of a table. This can be achieved by adding a special action for the custom access control point in our policies."),(0,r.yg)("p",null,"For example, we may want to ",(0,r.yg)("strong",{parentName:"p"},"deny")," ",(0,r.yg)("strong",{parentName:"p"},"editor")," roles to access ",(0,r.yg)("strong",{parentName:"p"},"hit")," field in the ",(0,r.yg)("strong",{parentName:"p"},"posts")," resource without denying the ",(0,r.yg)("strong",{parentName:"p"},"admin")," role. This can be done with ",(0,r.yg)("a",{parentName:"p",href:"https://casbin.org/docs/supported-models"},"RBAC with deny-override")," model."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"export const model = newModel(`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\n// highlight-next-line\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\n// highlight-next-line\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n\n[matchers]\nm = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)\n`);\n\nexport const adapter = new MemoryAdapter(`\np, admin, posts, (list)|(create)\np, admin, posts/*, (edit)|(show)|(delete)\n// highlight-next-line\np, admin, posts/*, field\n\np, admin, users, (list)|(create)\np, admin, users/*, (edit)|(show)|(delete)\n\np, admin, categories, (list)|(create)\np, admin, categories/*, (edit)|(show)|(delete)\n\np, editor, posts, (list)|(create)\np, editor, posts/*, (edit)|(show)\n// highlight-next-line\np, editor, posts/hit, field, deny\n\np, editor, categories, list\n`);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"admin")," have ",(0,r.yg)("strong",{parentName:"li"},"field")," access for every field of ",(0,r.yg)("strong",{parentName:"li"},"posts")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"editor")," won't have ",(0,r.yg)("strong",{parentName:"li"},"field")," access for ",(0,r.yg)("strong",{parentName:"li"},"hit")," field of ",(0,r.yg)("strong",{parentName:"li"},"posts"))),(0,r.yg)("p",null,"Then we must handle the ",(0,r.yg)("strong",{parentName:"p"},"field")," action in the ",(0,r.yg)("inlineCode",{parentName:"p"},"can")," method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'const App: React.FC = () => {\n  return (\n    <Refine\n      //...\n      accessControlProvider={{\n        can: async ({ resource, action, params }) => {\n          const enforcer = await newEnforcer(model, adapter);\n\n          if (action === "delete" || action === "edit" || action === "show") {\n            const can = await enforcer.enforce(\n              role,\n              `${resource}/${params?.id}`,\n              action,\n            );\n\n            return { can };\n          }\n\n          // highlight-start\n          if (action === "field") {\n            const can = await enforcer.enforce(\n              role,\n              `${resource}/${params?.field}`,\n              action,\n            );\n            return { can };\n          }\n          // highlight-end\n\n          const can = await enforcer.enforce(role, resource, action);\n\n          return { can };\n        },\n      }}\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n\nexport default App;\n')),(0,r.yg)("p",null,"Then it can be used with ",(0,r.yg)("a",{parentName:"p",href:"/docs/authorization/hooks/use-can"},(0,r.yg)("inlineCode",{parentName:"a"},"useCan"))," in the related area:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n  // ...\n  useCan,\n} from "@refinedev/core";\n\nexport const PostList: React.FC = () => {\n  // highlight-start\n  const { data: canAccess } = useCan({\n    resource: "posts",\n    action: "field",\n    params: { field: "hit" },\n  });\n  // highlight-end\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        // highlight-start\n        {canAccess?.can && (\n          <Table.Column\n            dataIndex="hit"\n            title="Hit"\n            render={(value: number) => (\n              <NumberField value={value} options={{ notation: "compact" }} />\n            )}\n          />\n        )}\n        // highlight-end\n      </Table>\n    </List>\n  );\n};\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/authorization/components/can-access"},(0,r.yg)("inlineCode",{parentName:"a"},"<CanAccess />"))," can be used too to check access control in custom places in your app.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"Now, let's see how the application will appear when logging in as an ",(0,r.yg)("inlineCode",{parentName:"p"},"admin")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"editor"),"."),(0,r.yg)(h,{defaultValue:"admin",values:[{label:"admin",value:"admin"},{label:"editor",value:"editor"}],mdxType:"Tabs"},(0,r.yg)(f,{value:"admin",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=660px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"660px"},'setInitialRoutes(["/posts"]);\nimport { useState } from "react";\nimport { Refine, useCan } from "@refinedev/core";\nimport { ThemedLayout, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport dataProvider from "@refinedev/simple-rest";\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst adapter = new CasbinStringAdapter(`\np, admin, posts, (list)|(create)\np, admin, posts/*, (edit)|(show)|(delete)\np, admin, posts/*, field\n\np, admin, users, (list)|(create)\np, admin, users/*, (edit)|(show)|(delete)\n\np, admin, categories, (list)|(create)\np, admin, categories/*, (edit)|(show)|(delete)\n\np, editor, posts, (list)|(create)\np, editor, posts/*, (edit)|(show)\np, editor, posts/hit, field, deny\n\np, editor, categories, list\n`);\n\nconst PostListWithHit = () => {\n  const { tableProps } = useAntdTable();\n  const { data: canAccess } = useCan({\n    resource: "posts",\n    action: "field",\n    params: { field: "hit" },\n  });\n\n  return (\n    <AntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column dataIndex="id" title="ID" />\n        <AntdTable.Column dataIndex="title" title="Title" />\n        <AntdTable.Column dataIndex="status" title="Status" />\n        {canAccess?.can && (\n          <AntdTable.Column\n            dataIndex="hit"\n            title="Hit"\n            render={(value: number) => (\n              <AntdNumberField\n                value={value}\n                options={{ notation: "compact" }}\n              />\n            )}\n          />\n        )}\n        <AntdTable.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <AntdEditButton hideText size="small" recordItemId={record.id} />\n              <AntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </AntdList>\n  );\n};\n\nconst App: React.FC = () => {\n  const role = "admin";\n\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider(API_URL)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n            },\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n            },\n            {\n              name: "users",\n              list: "/users",\n              create: "/users/create",\n            },\n          ]}\n          accessControlProvider={{\n            can: async ({ resource, action, params }) => {\n              const enforcer = await CasbinNewEnforcer(model, adapter);\n\n              if (\n                action === "delete" ||\n                action === "edit" ||\n                action === "show"\n              ) {\n                const can = await enforcer.enforce(\n                  role,\n                  `${resource}/${params?.id}`,\n                  action,\n                );\n\n                return { can };\n              }\n\n              if (action === "field") {\n                const can = await enforcer.enforce(\n                  role,\n                  `${resource}/${params?.field}`,\n                  action,\n                );\n                return { can };\n              }\n\n              const can = await enforcer.enforce(role, resource, action);\n\n              return { can };\n            },\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout\n                // Header={() => <Header role={role} />}\n                >\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostListWithHit />} />\n                <Route path="create" element={<PostCreate />} />\n              </Route>\n              <Route path="categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n              </Route>\n              <Route path="users">\n                <Route index element={<UserList />} />\n                <Route path="create" element={<UserCreate />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,r.yg)(f,{value:"editor",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=660px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"660px"},'setInitialRoutes(["/posts"]);\nimport { useState } from "react";\nimport { Refine, useCan } from "@refinedev/core";\nimport { ThemedLayout, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport dataProvider from "@refinedev/simple-rest";\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst adapter = new CasbinStringAdapter(`\np, admin, posts, (list)|(create)\np, admin, users, (list)|(create)\np, admin, categories, (list)|(create)\n\np, editor, posts, (list)|(create)\np, editor, categories, list\n`);\n\nconst PostListWithHit = () => {\n  const { tableProps } = useAntdTable();\n  const { data: canAccess } = useCan({\n    resource: "posts",\n    action: "field",\n    params: { field: "hit" },\n  });\n\n  return (\n    <AntdList>\n      <AntdTable {...tableProps} rowKey="id">\n        <AntdTable.Column dataIndex="id" title="ID" />\n        <AntdTable.Column dataIndex="title" title="Title" />\n        <AntdTable.Column dataIndex="status" title="Status" />\n        {canAccess?.can && (\n          <AntdTable.Column\n            dataIndex="hit"\n            title="Hit"\n            render={(value: number) => (\n              <AntdNumberField\n                value={value}\n                options={{ notation: "compact" }}\n              />\n            )}\n          />\n        )}\n        <AntdTable.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <AntdSpace>\n              <AntdEditButton hideText size="small" recordItemId={record.id} />\n              <AntdShowButton hideText size="small" recordItemId={record.id} />\n            </AntdSpace>\n          )}\n        />\n      </AntdTable>\n    </AntdList>\n  );\n};\n\nconst App: React.FC = () => {\n  const role = "editor";\n\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider(API_URL)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n              create: "/posts/create",\n            },\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n            },\n            {\n              name: "users",\n              list: "/users",\n              create: "/users/create",\n            },\n          ]}\n          accessControlProvider={{\n            can: async ({ resource, action, params }) => {\n              const enforcer = await CasbinNewEnforcer(model, adapter);\n\n              if (\n                action === "delete" ||\n                action === "edit" ||\n                action === "show"\n              ) {\n                const can = await enforcer.enforce(\n                  role,\n                  `${resource}/${params?.id}`,\n                  action,\n                );\n\n                return { can };\n              }\n\n              if (action === "field") {\n                const can = await enforcer.enforce(\n                  role,\n                  `${resource}/${params?.field}`,\n                  action,\n                );\n                return { can };\n              }\n\n              const can = await enforcer.enforce(role, resource, action);\n\n              return { can };\n            },\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayout\n                // Header={() => <Header role={role} />}\n                >\n                  <Outlet />\n                </ThemedLayout>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostListWithHit />} />\n                <Route path="create" element={<PostCreate />} />\n              </Route>\n              <Route path="categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n              </Route>\n              <Route path="users">\n                <Route index element={<UserList />} />\n                <Route path="create" element={<UserCreate />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("h3",{id:"casbin"},"Casbin"),(0,r.yg)(m,{id:"casbin",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(y,{path:"access-control-casbin",mdxType:"CodeSandboxExample"})),(0,r.yg)("h3",{id:"cerbos"},"Cerbos"),(0,r.yg)(m,{id:"cerbos",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(y,{path:"access-control-cerbos",mdxType:"CodeSandboxExample"})))}w.isMDXComponent=!0}}]);