"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[51978],{58860:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var a=n(37953);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,u=d["".concat(l,".").concat(g)]||d[g]||h[g]||o;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},77690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>d});n(37953);var a=n(58860);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"How to Fetch Data in React with useSWR",description:"Introduction to SWR and useSwr for Client-Side Data Fetching",slug:"data-fetching-next-js-useswr",authors:"michael",tags:["nextjs"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/social-2.png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/data-fetching-next-js-useswr",source:"@site/blog/2024-07-19-use-swr.md",title:"How to Fetch Data in React with useSWR",description:"Introduction to SWR and useSwr for Client-Side Data Fetching",date:"2024-07-19T00:00:00.000Z",formattedDate:"July 19, 2024",tags:[{label:"nextjs",permalink:"/blog/tags/nextjs"}],readingTime:17.635,hasTruncateMarker:!1,authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],frontMatter:{title:"How to Fetch Data in React with useSWR",description:"Introduction to SWR and useSwr for Client-Side Data Fetching",slug:"data-fetching-next-js-useswr",authors:"michael",tags:["nextjs"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Best React Admin Dashboard Libraries 2023",permalink:"/blog/react-admin-dashboard"},nextItem:{title:"Unexpected token in JSON at position 0 error",permalink:"/blog/unexpected-token-in-json-at-position-0-error"},relatedPosts:[{title:"What is Next.js getInitialProps and getServerSideProps?",description:"We will deep dive into Next.js getInitialProps and getServerSideProps.",permalink:"/blog/next-js-getinitialprops-and-getserversideprops",formattedDate:"October 31, 2022",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:9.12,date:"2022-10-31T00:00:00.000Z"},{title:"How to use Next.js API Routes?",description:"We will deep dive into Next.js API Routes with Dynamic Routes.",permalink:"/blog/next-js-api-routes",formattedDate:"July 3, 2024",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:15.875,date:"2024-07-03T00:00:00.000Z"},{title:"Next.js environment variables",description:"We will take a closer look at environment variables in Next.js",permalink:"/blog/next-js-environment-variables",formattedDate:"December 10, 2024",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:7.875,date:"2024-12-10T00:00:00.000Z"}],authorPosts:[{title:"Using Material UI DataGrid component with Refine app",description:"How to use Material UI DataGrid component with Refine apps?",permalink:"/blog/mui-datagrid-refine",formattedDate:"August 23, 2022",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:15.915,date:"2022-08-23T00:00:00.000Z"},{title:"Nextjs image optimization with examples",description:"Built-in image optimization using the next image component",permalink:"/blog/using-next-image",formattedDate:"June 5, 2024",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:15.81,date:"2024-06-05T00:00:00.000Z"},{title:"How to use Next.js API Routes?",description:"We will deep dive into Next.js API Routes with Dynamic Routes.",permalink:"/blog/next-js-api-routes",formattedDate:"July 3, 2024",authors:[{name:"Michael Hungbo",title:"Software Developer",url:"https://github.com/Mich45",imageURL:"https://github.com/Mich45.png",key:"michael"}],readingTime:15.875,date:"2024-07-03T00:00:00.000Z"}]},c={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is SWR and <code>useSWR</code>?",id:"what-is-swr-and-useswr",level:2},{value:"Setting up an Example App With SWR",id:"setting-up-an-example-app-with-swr",level:2},{value:"Creating a Server",id:"creating-a-server",level:3},{value:"Data Fetching with <code>Fetch() API</code>",id:"data-fetching-with-fetch-api",level:3},{value:"Data Fetching With SWR",id:"data-fetching-with-swr",level:3},{value:"Additional Features of SWR",id:"additional-features-of-swr",level:2},{value:"Pagination",id:"pagination",level:3},{value:"Preloading Data With SWR",id:"preloading-data-with-swr",level:3},{value:"Mutations with SWR",id:"mutations-with-swr",level:2},{value:"Handling Mutations",id:"handling-mutations",level:3},{value:"Error Handling with SWR",id:"error-handling-with-swr",level:2},{value:"Tips for Handling Errors",id:"tips-for-handling-errors",level:3},{value:"SWRDevTools",id:"swrdevtools",level:3},{value:"TypeScript Support",id:"typescript-support",level:3},{value:"Caching Strategies with SWR",id:"caching-strategies-with-swr",level:2},{value:"Custom Caching Strategies",id:"custom-caching-strategies",level:3},{value:"Tips for Effective Caching",id:"tips-for-effective-caching",level:3},{value:"Conclusion",id:"conclusion",level:2}],h={toc:d},g="wrapper";function u(e){var{components:t}=e,n=i(e,["components"]);return(0,a.yg)(g,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},h,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on July 19, 2024, to add sections for Error Handling, Mutations and Caching Strategies with SWR.")),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"Data is unquestionably an important component of any modern web application today. And, as the web evolves and innovates, new methods of interacting with this data must emerge in order to provide users with a better experience when interacting with our applications."),(0,a.yg)("p",null,"There have been a variety of technologies used for client-side data fetching. JavaScript, for example, has the native ",(0,a.yg)("inlineCode",{parentName:"p"},"Fetch() API")," for data fetching. Axios is a promised-based HTTP client library for making asynchronous HTTP requests and fetching any data on the client-side."),(0,a.yg)("p",null,"SWR is one of the most powerful client-side data fetching libraries for frontend frameworks today. In this article, we will explore the features and benefits of using SWR in an example Next.js application, and provide a step-by-step guide for getting started with the library."),(0,a.yg)("p",null,"Whether you are new to React.js or an experienced developer looking to optimize your data fetching strategy, SWR is a powerful tool worth considering! Now, let's get started!"),(0,a.yg)("h2",{id:"what-is-swr-and-useswr"},"What is SWR and ",(0,a.yg)("inlineCode",{parentName:"h2"},"useSWR"),"?"),(0,a.yg)("p",null,"SWR is an acronym for stale-while-revalidate. It's a lightweight React.js library with hooks for data fetching on the client-side. SWR is bootstrapped with various hooks that are used for various performance improvement techniques such as data caching, re-validation, pagination, and many others."),(0,a.yg)("p",null,"The latest version of SWR, SWR 2.0, was released on December 9 and it features some new and exciting updates such as data preloading, new mutation APIs, improved optimistic UI capabilities, and a brand new DevTools for better developer experience."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useSWR"),", on the other hand is the most basic hook from the SWR library for data fetching. A basic example using the hook is shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const { data, error } = useSWR(key, fetcher);\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," hook accepts two arguments. One, a ",(0,a.yg)("inlineCode",{parentName:"p"},"key")," value (usually the API endpoint to fetch data from), and a fetcher, which is an async function that contains the logic for fetching the data."),(0,a.yg)("p",null,"From the above example, ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," returns two values: ",(0,a.yg)("inlineCode",{parentName:"p"},"data"),", which is the value returned from the resource you're fetching, and a ",(0,a.yg)("inlineCode",{parentName:"p"},"error"),", which contains error, if any is caught. It also returns two additional values, ",(0,a.yg)("inlineCode",{parentName:"p"},"isLoading")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"isValidating"),", depending on the state of the fetcher function."),(0,a.yg)("p",null,"In the next section, we'll see how we can use this powerful hook as well as the other capabilities of SWR in an example application."),(0,a.yg)("h2",{id:"setting-up-an-example-app-with-swr"},"Setting up an Example App With SWR"),(0,a.yg)("p",null,"We'll create an example application in React to get started with understanding how SWR works and how to start using it. Basically, we'll compare and contrast fetching data with the native 'Fetch() API' (or other client-side data fetching libraries such as Axios) you're used to and fetching data with SWR."),(0,a.yg)("p",null,"You can check out the complete code for the application on ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Mich45/swr-tutorial"},"GitHub"),"."),(0,a.yg)("p",null,"Run the following command in your terminal to create a new React project with ",(0,a.yg)("inlineCode",{parentName:"p"},"create-react-app"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app my-swr\n")),(0,a.yg)("p",null,"or with Yarn:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn create react-app my-swr\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"NOTE"),": I named the app ",(0,a.yg)("inlineCode",{parentName:"p"},"my-swr")," for brevity but you can also choose any name you're okay with."),(0,a.yg)("p",null,"After the installation is complete, ",(0,a.yg)("inlineCode",{parentName:"p"},"cd")," into the project directory and start the development server with ",(0,a.yg)("inlineCode",{parentName:"p"},"npm start")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn start"),"."),(0,a.yg)("p",null,"Next, run the following command to install the necessary packages for our example application."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install styled-components swr\n")),(0,a.yg)("p",null,"or with Yarn:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add styled-components swr\n")),(0,a.yg)("h3",{id:"creating-a-server"},"Creating a Server"),(0,a.yg)("p",null,"For the example application we'll be building, we'll set up a server with express running on ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3001"),". The server basically returns a list of users that will be rendered on the client-side."),(0,a.yg)("p",null,"In the project root folder, create a new ",(0,a.yg)("inlineCode",{parentName:"p"},"server")," folder, navigate to it on the command line and run the following command to create a new Node.js project with an auto-generated ",(0,a.yg)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,a.yg)("p",null,"or with Yarn:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn init -y\n")),(0,a.yg)("p",null,"Next, we'll install the necessary packages to build up our server."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install express cors nodemon\n")),(0,a.yg)("p",null,"with Yarn:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add express cors nodemon\n")),(0,a.yg)("p",null,"Still in the server folder, create a file named ",(0,a.yg)("inlineCode",{parentName:"p"},"index.js")," with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="server/index.js"',title:'"server/index.js"'},'const express = require("express");\nconst cors = require("cors");\nconst app = express();\n\napp.use(cors());\nconst data = [\n  {\n    name: "Kim Doe",\n    age: 23,\n    avatar: "https://randomuser.me/api/portraits/women/44.jpg",\n  },\n  {\n    name: "Mary Jane",\n    age: 25,\n    avatar: "https://randomuser.me/api/portraits/women/50.jpg",\n  },\n  {\n    name: "Ken Joe",\n    age: 24,\n    avatar: "https://randomuser.me/api/portraits/women/18.jpg",\n  },\n];\n\napp.get("/", (req, res) => {\n  res.json(data);\n});\n\napp.listen(3001, () => {\n  console.log("App listening on port 3001");\n});\n')),(0,a.yg)("p",null,"In the above code, we're basically creating a server in express.js and also, we created a dummy data array for the list of users we'll render on the client-side. We also added ",(0,a.yg)("inlineCode",{parentName:"p"},"cors")," to allow our client application communicate with the server without running into errors."),(0,a.yg)("p",null,"Next, we'll edit the content of ",(0,a.yg)("inlineCode",{parentName:"p"},"server/package.json")," to the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="server/package.json"',title:'"server/package.json"'},'{\n  "name": "server",\n  "version": "1.0.0",\n  "main": "index.js",\n  "license": "MIT",\n  "dependencies": {\n    "cors": "^2.8.5",\n    "express": "^4.18.2"\n  },\n  "scripts": {\n    "dev": "nodemon index.js"\n  }\n}\n')),(0,a.yg)("p",null,"NOTE: I have ",(0,a.yg)("inlineCode",{parentName:"p"},"nodemon")," installed globally so it's not included in the list of dependencies, but you'll find it included in yours. Also, if you're using git you may want to create a ",(0,a.yg)("inlineCode",{parentName:"p"},".gitignore")," file in the server folder to avoid pushing the files in ",(0,a.yg)("inlineCode",{parentName:"p"},"node_modules"),"."),(0,a.yg)("p",null,"We can now run ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run dev")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn dev")," (depending on the package manager you used) to start up the server. If everything works correctly you should see ",(0,a.yg)("inlineCode",{parentName:"p"},"App listening on port 3001")," logged to the console."),(0,a.yg)("h3",{id:"data-fetching-with-fetch-api"},"Data Fetching with ",(0,a.yg)("inlineCode",{parentName:"h3"},"Fetch() API")),(0,a.yg)("p",null,"Let's go back to the client-side code now that we have the server up and running. In this part, we'll fetch the users from our backend (the server we created earlier) and display them in a simple component."),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder in the root directory and create a folder named ",(0,a.yg)("inlineCode",{parentName:"p"},"components"),". In the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Home.js")," file with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="src/components/Home.js"',title:'"src/components/Home.js"'},'import React from "react";\nimport { useState, useEffect } from "react";\n\nconst Home = () => {\n  const [users, setUsers] = useState(null);\n  useEffect(() => {\n    async function fetchUsers() {\n      const response = await fetch("http://localhost:3001");\n      const data = await response.json();\n      setUsers(data);\n    }\n    fetchUsers();\n  }, []);\n\n  if (!users) return <h2>Loading...</h2>;\n  return (\n    <>\n      <div>\n        {users.map((user, index) => {\n          return <h2 key={index}>{user.name}</h2>;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n')),(0,a.yg)("p",null,"Next, edit the content of ",(0,a.yg)("inlineCode",{parentName:"p"},"src/App.js")," to the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="src/App.js"',title:'"src/App.js"'},'import "./App.css";\nimport Home from "./components/Home";\n\nfunction App() {\n  return (\n    <div className="App">\n      <header className="App-header">\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"In the code above, we're importing the ",(0,a.yg)("inlineCode",{parentName:"p"},"Home.js")," component we created to render it in the homepage of our application. Now, if you navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000"),", the list of users from the server should be displayed as shown below:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/Home.png",alt:"useswr"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Our app works correctly. Awesome! Now, let's see how the application behaves when we add a new user to the user list on the server."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"server/index.js")," file, add a new user to the ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," array like below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="server/index.js"',title:'"server/index.js"'},'...\nconst data = [\n    ...\n    //highlight-start\n    {\n        "name": "John Doe",\n        "age": 24,\n        "avatar": "https://randomuser.me/api/portraits/women/18.jpg"\n    }\n    //highlight-end\n]\n\n')),(0,a.yg)("p",null,"Notice how the list isn't updated with the new user when we navigate back to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000"),". It's only when we reload the page before we get the updated list of users."),(0,a.yg)("p",null,"The GIF below shows this even better:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/fetch.gif",alt:"useswr"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Inconsistencies in UI updates and data fetching behavior could be disastrous for applications that rely on real-time data to provide a reactive and seamless experience to users. This is one major problem that SWR aims to solve."),(0,a.yg)("h3",{id:"data-fetching-with-swr"},"Data Fetching With SWR"),(0,a.yg)("p",null,"In this part, we'll see how SWR outshines other data fetching methods by automatically re-validating and updating data without requiring us to manually refresh or reload the application."),(0,a.yg)("p",null,"Edit the content of ",(0,a.yg)("inlineCode",{parentName:"p"},"src/components/Home.js")," to the following:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="src/components/Home.js"',title:'"src/components/Home.js"'},'import React from "react";\nimport useSWR from "swr";\n\nconst Home = () => {\n  const fetcher = (...args) => fetch(...args).then((res) => res.json());\n  const { data, error, isLoading } = useSWR("http://localhost:3001", fetcher);\n\n  if (error) return <div>Failed to fetch users.</div>;\n  if (isLoading) return <h2>Loading...</h2>;\n  return (\n    <>\n      <div>\n        {data.map((user, index) => {\n          return <h2 key={index}>{user.name}</h2>;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n')),(0,a.yg)("p",null,"Let's go through the code above to understand what's going on."),(0,a.yg)("p",null,"From the code above, we import the ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," hook from SWR. The hooks take a key, that is, the URL of our server and a fetcher function that contains the logic for fetching the data. The hook then returns three values based on the state of the result from the server."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," object contains the list of users and the ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," will contain any error that is thrown. Next, we map through the users array that is returned in the ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," object and render them on the page."),(0,a.yg)("p",null,"Now, if you navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000"),", the list of users should be displayed like below:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/Home-2.png",alt:"useswr"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"So far so good. Now, let's also add a new user to the list on the server and see how the application behaves. Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"server/index.js")," file and add a new user to the data array like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="server/index.js"',title:'"server/index.js"'},'...\nconst data = [\n    ...\n     //highlight-start\n    {\n        "name": "Peter Pan",\n        "age": 24,\n        "avatar": "https://randomuser.me/api/portraits/women/21.jpg"\n    }\n    //highlight-end\n]\n\n')),(0,a.yg)("p",null,"Go to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000")," in the browser and note how the users list is automatically updated with the new user we added without us reloading the page."),(0,a.yg)("p",null,"The GIF below shows this in action."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/swr.gif",alt:"useswr"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"Notice how fast and consistent the UI is updated with the new user!"),(0,a.yg)("p",null,"This example shows one of the incredible powers of SWR over other client-side data fetching methods. It shows how SWR is able to auto re-validate and update the UI instantly using cached data and returning the latest user from the server."),(0,a.yg)("p",null,"How SWR is able to infer that the data has been updated and then re-validating and updating the UI is beyond the scope of this article. However, if you're curious to know, you can read more about it ",(0,a.yg)("a",{parentName:"p",href:"https://swr.vercel.app/docs/revalidation"},"here")," in the docs."),(0,a.yg)("h2",{id:"additional-features-of-swr"},"Additional Features of SWR"),(0,a.yg)("p",null,"We saw one of SWR's best features in action in the previous section; this section will show you even more of what SWR is made and capable of."),(0,a.yg)("h3",{id:"pagination"},"Pagination"),(0,a.yg)("p",null,"SWR simplifies paginating data using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," hook. We'll see a basic example of paginating data with ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," using the ",(0,a.yg)("a",{parentName:"p",href:"https://rickandmortyapi.com/documentation/#introduction"},"Rick and Morty Character API"),"."),(0,a.yg)("p",null,"In the components folder of our example application, create a file named ",(0,a.yg)("inlineCode",{parentName:"p"},"Characters.js")," and add the following code to it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="src/components/Characters.js"',title:'"src/components/Characters.js"'},'import React from "react";\nimport { useState } from "react";\nimport useSWR from "swr";\nimport styled from "styled-components";\n\nconst Wrapper = styled.div`\n  margin: 50px auto;\n`;\nconst Character = styled.div`\n  width: 250px;\n  height: 200px;\n  border-radius: 6px;\n  outline: none;\n  border: none;\n`;\n\nconst Button = styled.button`\n  width: 120px;\n  height: 40px;\n  border-radius: 6px;\n  background-color: #6c6ce3;\n  margin-inline: 10px;\n  outline: none;\n  border: none;\n  color: white;\n  font-weight: bold;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  display: grid;\n  gap: 10px;\n  padding-block: 20px;\n  grid-template-columns: 2fr 2fr 2fr 2fr;\n`;\n\nconst Characters = () => {\n  const [pageIndex, setPageIndex] = useState(1);\n\n  const fetcher = (...args) => fetch(...args).then((res) => res.json());\n\n  const { data, error, isLoading } = useSWR(\n    `https://rickandmortyapi.com/api/character/?page=${pageIndex}`,\n    fetcher,\n  );\n\n  if (error) return <div>Failed to fetch characters.</div>;\n  if (isLoading) return <h2>Loading...</h2>;\n\n  return (\n    <>\n      <Container>\n        {data.results.map((character) => (\n          <Character key={character.id}>\n            <img width={100} height={100} src={character.image} />\n            <div>{character.name}</div>\n          </Character>\n        ))}\n      </Container>\n      <Wrapper>\n        <Button onClick={() => setPageIndex(pageIndex - 1)}>Previous</Button>\n        <Button onClick={() => setPageIndex(pageIndex + 1)}>Next</Button>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Characters;\n')),(0,a.yg)("p",null,"In the above code, we are fetching characters from the Rick and Morty API. The endpoint returns 20 characters per request. We also used a React state to keep track of the pages so we can simply move forward and backward through the fetched characters to create a pagination effect."),(0,a.yg)("p",null,"Next, open the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.js")," file in the root folder and edit its content to this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="App.js"',title:'"App.js"'},'import "./App.css";\n// import Home from \'./components/Home\'\nimport Characters from "./components/Characters";\n\nfunction App() {\n  return (\n    <div className="App">\n      <header className="App-header">\n        {/* <Home/> */}\n        <Characters />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"Basically, what we're doing is commenting out the previous Home component and then import and render the ",(0,a.yg)("inlineCode",{parentName:"p"},"Characters")," component on the homepage instead."),(0,a.yg)("p",null,"Navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:3000")," and you should see the characters rendered as shown in the GIF below, with pagination enabled:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-01-03-use-swr/pagination.gif",alt:"useswr"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"You can read more about pagination in SWR in the ",(0,a.yg)("a",{parentName:"p",href:"https://swr.vercel.app/docs/pagination"},"docs"),"."),(0,a.yg)("h3",{id:"preloading-data-with-swr"},"Preloading Data With SWR"),(0,a.yg)("p",null,"Another notable use case of SWR is data preloading. With SWR, we can prefetch data, for example, fetching blog posts from a CMS or prefetching page routes in Next.js for faster and smooth client-side transitions."),(0,a.yg)("p",null,"We can prefetch data using the ",(0,a.yg)("inlineCode",{parentName:"p"},"preload")," API from SWR. The following example from the docs shows how you can preload a user component on the click of a button:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"import { useState } from 'react'\nimport useSWR, { preload } from 'swr'\n\nconst fetcher = (url) => fetch(url).then((res) => res.json())\n\n// Preload the resource before rendering the User component below,\n// this prevents potential waterfalls in your application.\n// You can also start preloading when hovering the button or link, too.\npreload('/api/user', fetcher)\n\nfunction User() {\n  const { data } = useSWR('/api/user', fetcher)\n  ...\n}\n\nexport default function App() {\n  const [show, setShow] = useState(false)\n  return (\n    <div>\n      <button onClick={() => setShow(true)}>Show User</button>\n      {show ? <User /> : null}\n    </div>\n  )\n}\n")),(0,a.yg)("h2",{id:"mutations-with-swr"},"Mutations with SWR"),(0,a.yg)("p",null,"I wanted to share some details about handling mutations with SWR to help us efficiently manage data updates in our React applications. Here are some practical tips and examples:"),(0,a.yg)("p",null,"SWR provides an excellent way to mutate data, which means updating or changing the cached data. This is useful for operations like creating, updating, or deleting records. Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"mutate")," function, we can optimistically update the UI and revalidate the data in the background."),(0,a.yg)("p",null,"Here\u2019s a simple example of how to use ",(0,a.yg)("inlineCode",{parentName:"p"},"mutate")," with SWR:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import useSWR, { mutate } from "swr";\n\nconst fetcher = (url) => fetch(url).then((res) => res.json());\n\nconst MyComponent = () => {\n  const { data, error } = useSWR("/api/data", fetcher);\n\n  const handleUpdate = async () => {\n    // Optimistically update the data\n    mutate("/api/data", newData, false);\n\n    // Send the update request to the server\n    await fetch("/api/data", {\n      method: "POST",\n      body: JSON.stringify(newData),\n    });\n\n    // Revalidate the data\n    mutate("/api/data");\n  };\n\n  if (error) return <div>Failed to load data. Please try again later.</div>;\n  if (!data) return <div>Loading...</div>;\n\n  return (\n    <div>\n      {data.map((item) => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n      <button onClick={handleUpdate}>Update Data</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n')),(0,a.yg)("p",null,"In this example, we optimistically update the cached data before sending the update request to the server. After the server request completes, we revalidate the data to ensure it is up-to-date."),(0,a.yg)("h3",{id:"handling-mutations"},"Handling Mutations"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Optimistic UI Updates"),": SWR allows you to update the UI optimistically, which means reflecting the changes immediately without waiting for the server response. This provides a better user experience."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'mutate("/api/data", newData, false); // Optimistically update data\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Revalidation"),": After performing the mutation, you should revalidate the data to ensure consistency."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'mutate("/api/data"); // Revalidate data\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Error Handling"),": Handle errors gracefully to ensure the UI doesn\u2019t break when there are issues with the mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const handleUpdate = async () => {\n  try {\n    mutate("/api/data", newData, false);\n    await fetch("/api/data", {\n      method: "POST",\n      body: JSON.stringify(newData),\n    });\n    mutate("/api/data");\n  } catch (error) {\n    console.error("Failed to update data:", error);\n  }\n};\n')),(0,a.yg)("h2",{id:"error-handling-with-swr"},"Error Handling with SWR"),(0,a.yg)("p",null,"I wanted to share some insights on handling errors gracefully when using SWR for data fetching in our React projects. Here are some strategies and examples that might help:"),(0,a.yg)("p",null,"When using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useSWR")," hook, handling errors is straightforward. The hook returns an ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," object that we can use to display error messages or fallback content to the user."),(0,a.yg)("p",null,"Here's a simple example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import useSWR from "swr";\n\nconst fetcher = (url) => fetch(url).then((res) => res.json());\n\nconst MyComponent = () => {\n  const { data, error } = useSWR("/api/data", fetcher);\n\n  if (error) return <div>Failed to load data. Please try again later.</div>;\n  if (!data) return <div>Loading...</div>;\n\n  return (\n    <div>\n      {/* Render your data here */}\n      {data.map((item) => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default MyComponent;\n')),(0,a.yg)("p",null,"In this example, the component first checks if there's an error. If an error is detected, it displays a friendly error message. If there's no error but the data is still being fetched, it shows a loading indicator. Once the data is successfully fetched, it renders the data."),(0,a.yg)("h3",{id:"tips-for-handling-errors"},"Tips for Handling Errors"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Show User-Friendly Messages"),": Always provide a clear and concise error message that guides the user on what went wrong and possible actions they can take.\n",(0,a.yg)("strong",{parentName:"p"},"Use a Fallback UI"),": In case of errors, provide a fallback UI so that the application doesn't break. This can be a simple message or a more sophisticated error boundary.\n",(0,a.yg)("strong",{parentName:"p"},"Log Errors for Debugging"),": Use logging tools to capture errors for debugging purposes. This helps in understanding and fixing issues faster."),(0,a.yg)("p",null,"Implementing these strategies can make our applications more robust and improve the user experience."),(0,a.yg)("h3",{id:"swrdevtools"},"SWRDevTools"),(0,a.yg)("p",null,"The newest version of SWR comes with developer tools for debugging and writing your code more efficiently and confidently. You can install the SWRDevTools extensions for both Chrome and Firefox from their respective stores."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Chrome: ",(0,a.yg)("a",{parentName:"li",href:"https://chrome.google.com/webstore/detail/swr-devtools/liidbicegefhheghhjbomajjaehnjned"},"https://chrome.google.com/webstore/detail/swr-devtools/liidbicegefhheghhjbomajjaehnjned")),(0,a.yg)("li",{parentName:"ul"},"Firefox: ",(0,a.yg)("a",{parentName:"li",href:"https://addons.mozilla.org/en-US/firefox/addon/swr-devtools/"},"https://addons.mozilla.org/en-US/firefox/addon/swr-devtools/"))),(0,a.yg)("p",null,"Be aware that SWRDevTools is not an official project of Vercel. You can learn more about the project from their ",(0,a.yg)("a",{parentName:"p",href:"https://swr-devtools.vercel.app/"},"website"),"."),(0,a.yg)("h3",{id:"typescript-support"},"TypeScript Support"),(0,a.yg)("p",null,"SWR also comes with full TypeScript support out of the box. If you're using TypeScript you can be rest assured of type safety in your application. For example, SWR will infer the argument types of fetcher from key, so you can have the preferred types automatically."),(0,a.yg)("p",null,"You can also explicitly specify the types for ",(0,a.yg)("inlineCode",{parentName:"p"},"key")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"fetcher"),"'s arguments like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import useSWR, { Key, Fetcher } from "swr";\n\nconst uid: Key = "<user_id>";\nconst fetcher: Fetcher<User, string> = (id) => getUserById(id);\n\nconst { data } = useSWR(uid, fetcher);\n// `data` will be `User | undefined`.\n')),(0,a.yg)("p",null,"You can read more about using TypeScript with SWR ",(0,a.yg)("a",{parentName:"p",href:"https://swr.vercel.app/docs/typescript"},"here"),"."),(0,a.yg)("p",null,"This section only touched on a few of SWR's many capabilities, so your first encounter with it will not be overwhelming. You can however, check the ",(0,a.yg)("a",{parentName:"p",href:"https://swr.vercel.app/docs/getting-started"},"documentation")," for other features that might interest you."),(0,a.yg)("h2",{id:"caching-strategies-with-swr"},"Caching Strategies with SWR"),(0,a.yg)("p",null,"I wanted to share some insights on caching strategies with SWR to improve the performance and user experience of our React applications. Here are some practical tips and examples that might help:"),(0,a.yg)("p",null,"SWR automatically caches data to optimize performance and reduce the number of network requests. However, there are several ways to customize caching to suit specific needs."),(0,a.yg)("p",null,"Here's an example of basic caching with SWR:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import useSWR from "swr";\n\nconst fetcher = (url) => fetch(url).then((res) => res.json());\n\nconst MyComponent = () => {\n  const { data, error } = useSWR("/api/data", fetcher);\n\n  if (error) return <div>Failed to load data. Please try again later.</div>;\n  if (!data) return <div>Loading...</div>;\n\n  return (\n    <div>\n      {data.map((item) => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default MyComponent;\n')),(0,a.yg)("p",null,"In this example, SWR automatically caches the data fetched from the API."),(0,a.yg)("h3",{id:"custom-caching-strategies"},"Custom Caching Strategies"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Cache Time Control"),": You can set a specific cache time for your data. This is useful if the data doesn't change frequently."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const { data, error } = useSWR("/api/data", fetcher, {\n  refreshInterval: 60000,\n}); // Refresh every 60 seconds\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Revalidation"),": SWR can revalidate the cache when the user focuses on the window or when network status changes. This ensures users always see the most up-to-date data."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'const { data, error } = useSWR("/api/data", fetcher, {\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n});\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Manual Cache Management"),": Sometimes, you may want to manually manage the cache, especially when dealing with real-time data updates or invalidations."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import useSWR, { mutate } from "swr";\n\n// Manually mutate the cache\nmutate("/api/data", newData, false); // Update the cache without revalidation\n')),(0,a.yg)("h3",{id:"tips-for-effective-caching"},"Tips for Effective Caching"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Set Reasonable Cache Intervals"),": Depending on how frequently your data changes, set appropriate cache refresh intervals.\n",(0,a.yg)("strong",{parentName:"p"},"Use Conditional Fetching"),": Fetch data conditionally based on certain criteria to avoid unnecessary requests.\n",(0,a.yg)("strong",{parentName:"p"},"Combine with Other State Management Libraries"),": SWR can be combined with other state management libraries like Redux or Zustand for more complex scenarios."),(0,a.yg)("p",null,"By implementing these caching strategies, we can ensure our applications are more efficient and provide a smoother experience for users."),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"In this article, we learned about the basics of SWR, its importance in developing modern web applications, and how you can get started with it. We also created an example application in React and explored some capabilities of SWR to see its use cases and benefits over other conventional client-side data fetching methods."),(0,a.yg)("p",null,"I hope you found this article useful and that you will begin using SWR to achieve the performance improvements you've always desired in your applications!"))}u.isMDXComponent=!0}}]);