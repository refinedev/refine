"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[28418],{88123:(e,n,t)=>{t.d(n,{O:()=>m});var r=t(68835),o=t(37953),i=t(86743),a=t(59451),s=t(62201);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){l(e,n,t[n])}))}return e}function p(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const m=e=>"nextjs"===(null==e?void 0:e.template)?o.createElement(h,e):o.createElement(g,e),g=e=>{var n,t,l,m,g,y,{startRoute:h,showNavigator:b,showLineNumbers:v,showOpenInCodeSandbox:x,initialPercentage:w=50,dependencies:R,showReadOnly:P,options:N={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.A)("h-full","!gap-0"),"sp-console-header-button":(0,r.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:k="react-ts",customSetup:C,files:S,previewOnly:L,layout:O,height:T=420,wrapperClassName:F,className:j,showFiles:A=!1,showConsole:D=!1,hidePreview:E=!1}=e,U=c(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[q,z]=o.useState(!1);o.useEffect((()=>{z(!0)}),[]);const{colorMode:M}=(0,s.G)();var W,B;null!=N||(N={}),null!==(W=(g=N).resizablePanels)&&void 0!==W||(g.resizablePanels=!0),null!==(B=(y=N).editorWidthPercentage)&&void 0!==B||(y.editorWidthPercentage=null!=w?w:50);const I={showTabs:N.showTabs,showLineNumbers:N.showLineNumbers,showInlineErrors:N.showInlineErrors,wrapContent:N.wrapContent,closableTabs:N.closableTabs,initMode:N.initMode,extensions:null===(n=N.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=N.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:N.readOnly,showReadOnly:null!=P?P:N.showReadOnly,additionalLanguages:null===(l=N.codeEditor)||void 0===l?void 0:l.additionalLanguages},G={activeFile:N.activeFile,visibleFiles:N.visibleFiles,recompileMode:N.recompileMode,recompileDelay:N.recompileDelay,autorun:N.autorun,autoReload:N.autoReload,bundlerURL:N.bundlerURL,startRoute:N.startRoute,skipEval:N.skipEval,fileResolver:N.fileResolver,initMode:N.initMode,initModeObserverOptions:N.initModeObserverOptions,externalResources:N.externalResources,logLevel:N.logLevel,classes:N.classes},[H,_]=o.useState(!1),{onHandleMouseDown:$,horizontalSize:Y}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),i=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:i}=n.getBoundingClientRect(),a=(e.clientX-o)/i*100,s=Math.min(Math.max(a,25),75);t(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},a=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",i),document.body.addEventListener("mouseup",a),()=>{document.body.removeEventListener("mousemove",i),document.body.removeEventListener("mouseup",a)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:N.editorWidthPercentage}),X=!L&&!(null==O?void 0:O.includes("col"));var Q,V,J,K,Z;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.A)("pb-6","refine-sandpack-wrapper",F)},o.createElement("div",{className:(0,r.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",j)},o.createElement(a.l5,u({key:`${k}-${M}-${q}`,customSetup:u({dependencies:R},C),files:S,options:p(u({},G),{classes:p(u({},G.classes),{"sp-layout":(0,r.A)(null===(m=G.classes)||void 0===m?void 0:m["sp-layout"],D&&"!rounded-bl-none !rounded-br-none")})}),template:k,theme:"light"===M?p(u({},i.Zw),{colors:p(u({},i.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):p(u({},i.hc),{colors:p(u({},i.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},U),o.createElement(a.am,{className:(0,r.A)("col"===O&&"!flex-col","col-reverse"===O&&"!flex-col-reverse")},A&&o.createElement(a.Lm,{autoHiddenFiles:!0,style:{height:null!==(Q=N.editorHeight)&&void 0!==Q?Q:T}}),!L&&o.createElement(a.cW,p(u({},I),{showLineNumbers:v,closableTabs:A,initMode:"lazy",style:p(u({height:null!==(V=N.editorHeight)&&void 0!==V?V:T},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})})),X?o.createElement(d,{onMouseDown:$,horizontalSize:Y}):null,E?null:o.createElement(o.Fragment,null,o.createElement(a.G5,{showOpenInCodeSandbox:x,startRoute:h,showNavigator:null!=b?b:N.showNavigator,showRefreshButton:N.showRefreshButton,style:p(u({display:E?"none":"flex"},(null==O?void 0:O.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-Y,flexShrink:100-Y,flexBasis:0,width:L?"100%":100-Y+"%"}),{gap:0,height:null!==(J=N.editorHeight)&&void 0!==J?J:T})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.A)("w-12","h-12","rounded-full")}))))),D?o.createElement(a.X2,{style:p(u({height:200},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})}):null)),o.createElement("div",{className:(0,r.A)(""),style:{height:Number(null!==(K=N.editorHeight)&&void 0!==K?K:T)+2}}),o.createElement("div",{className:(0,r.A)((null==O?void 0:O.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Z=N.editorHeight)&&void 0!==Z?Z:T)+2}}),o.createElement("div",{className:(0,r.A)(D?"block":"hidden","h-[200px]")})),o.createElement(f,{files:S,dependencies:R}))},f=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("h6",null,"Code Example"),t.map((n=>o.createElement("div",{"data-filename":n,key:n},o.createElement("pre",null,`// file: ${n} \n`,y(e[n]))))))},y=e=>"string"==typeof e?e:"code"in e?e.code:"",h=e=>{const n={hidePreview:!0,showConsole:!1};return o.createElement(g,p(u({},n,e),{template:"react-ts"}))}},11611:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Q,contentTitle:()=>Y,default:()=>oe,frontMatter:()=>$,metadata:()=>X,toc:()=>V});var r=t(37953),o=t(58860),i=t(88123);function a(){return r.createElement(i.O,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2"},startRoute:"/my-products",files:{"/App.tsx":{code:s},"/style.css":{code:d,hidden:!0},"/pages/products/list.tsx":{code:l},"/pages/products/show.tsx":{code:u,active:!0}}})}const s='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router";\n\nimport "./style.css";\n\nimport { ProductList } from "./pages/products/list.tsx";\nimport { ProductShow } from "./pages/products/show.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            // We\'re defining the routes and assigning them to an action of a resource\n            list: "/my-products",\n            show: "/my-products/:id",\n            // For sake of simplicity, we are not defining other routes here but the implementation is the same\n            // create: "/my-products/new",\n            // edit: "/my-products/:id/edit",\n            // clone: "/my-products/:id/clone",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n          <Route path="/my-products/:id" element={<ProductShow />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),d="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),l='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nexport const ProductList: React.FC = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { result, query } = useList();\n  const products = result?.data;\n\n  const go = useGo();\n\n  if (query.isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {products?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n'.trim(),u='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nexport const ProductShow: React.FC = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    query: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({\n            to: {\n              resource: "products",\n              action: "list",\n            },\n          });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n'.trim();function p(){return r.createElement(i.O,{template:"nextjs",showFiles:!0,startRoute:"/my-products",files:{"/pages/_app.tsx":{code:m},"/style.css":{code:c,hidden:!0},"/pages/my-products/index.tsx":{code:g},"/pages/my-products/[id].tsx":{code:f,active:!0}}})}const c="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label,\nform input,\nform button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),m='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport "../style.css";\n\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "products",\n          // We\'re defining the routes and assigning them to an action of a resource\n          list: "/my-products",\n          show: "/my-products/:id",\n          // For sake of simplicity, we are not defining other routes here but the implementation is the same\n          // create: "/my-products/new",\n          // edit: "/my-products/:id/edit",\n          // clone: "/my-products/:id/clone",\n        },\n      ]}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n\nexport default App;\n'.trim(),g='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nconst ProductList = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { result, query } = useList();\n  const products = result?.data;\n\n  const go = useGo();\n\n  if (query.isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {products?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ProductList;\n'.trim(),f='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nconst ProductShow = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    query: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({ to: { resource: "products", action: "list" } });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n\nexport default ProductShow;\n'.trim();function y(){return r.createElement(i.O,{hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest","react-router":"^7.0.2"},files:{"/app/root.tsx":{code:h},"/app/routes/my-products._index.tsx":{code:b},"/app/routes/my-products.$id.tsx":{code:v,active:!0}}})}const h='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "products",\n              // We\'re defining the routes and assigning them to an action of a resource\n              list: "/my-products",\n              show: "/my-products/:id",\n              // For sake of simplicity, we are not defining other routes here but the implementation is the same\n              // create: "/my-products/new",\n              // edit: "/my-products/:id/edit",\n              // clone: "/my-products/:id/clone",\n            },\n          ]}\n        >\n          <Outlet />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),b='\nimport { useGo, useList } from "@refinedev/core";\nimport React from "react";\n\nconst ProductList = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { result, query } = useList();\n  const products = result?.data;\n\n  const go = useGo();\n\n  if (query.isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {products?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ProductList;\n'.trim(),v='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nconst ProductShow = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    query: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({ to: { resource: "products", action: "list" } });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n\nexport default ProductShow;\n'.trim();function x(){return r.createElement(i.O,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2"},startRoute:"/my-products",files:{"/App.tsx":{code:w,hidden:!0},"/style.css":{code:R,hidden:!0},"list.tsx":{code:P},"edit.tsx":{code:N,active:!0}}})}const w='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router";\n\nimport "./style.css";\n\nimport { ProductEdit } from "./edit.tsx";\nimport { ProductList } from "./list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n            edit: "/my-products/:id/edit",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n          <Route path="/my-products/:id/edit" element={<ProductEdit />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),R="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),P='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nexport const ProductList: React.FC = () => {\n  const { result, query } = useList();\n  const products = result?.data;\n\n  const go = useGo();\n\n  if (query.isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {products?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "edit",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            edit\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n'.trim(),N='\nimport React from "react";\n\nimport { useForm } from "@refinedev/core";\n\nexport const ProductEdit: React.FC = () => {\n  const { formLoading, onFinish, query } = useForm();\n  const defaultValues = query?.data?.data;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.target).entries());\n\n    onFinish(data);\n  };\n\n  return (\n    <div>\n      <br />\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor="name">name</label>\n          <input\n            type="text"\n            id="name"\n            name="name"\n            placeholder="name"\n            defaultValue={defaultValues?.name}\n          />\n        </div>\n        <button type="submit" disabled={formLoading}>\n          <span>Save</span>\n        </button>\n      </form>\n    </div>\n  );\n};\n'.trim();function k(){return r.createElement(i.O,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2"},startRoute:"/my-products",theme:{},files:{"/App.tsx":{code:C},"/style.css":{code:S,hidden:!0},"/pages/products/list.tsx":{code:L,active:!0},"/components/products/list.tsx":{code:O}}})}const C='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router";\n\nimport "./style.css";\n\nimport { ListPage } from "./pages/products/list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n          },\n        ]}\n        options={{ syncWithLocation: true }}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ListPage />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),S="\nhtml {\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan, button {\n    margin: 6px 0;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),L='\nimport React from "react";\n\nimport { useTable } from "@refinedev/core";\n\nimport { ProductList } from "../../components/products/list";\n\nexport const ListPage: React.FC = () => {\n  const tableProps = useTable({\n    pagination: { currentPage: 1, pageSize: 2 },\n    filters: {\n      initial: [{ field: "category.id", operator: "eq", value: "1" }],\n    },\n    sorters: { initial: [{ field: "id", order: "asc" }] },\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n'.trim(),O='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    result,\n    tableQuery,\n    isLoading,\n    currentPage,\n    setCurrentPage,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {result?.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0].field}, order {sorters[0].order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0].order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0].field}, operator {filters[0].operator}, value\n        {filters[0].value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0].value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {currentPage}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrentPage(currentPage - 1);\n        }}\n        disabled={currentPage < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrentPage(currentPage + 1);\n        }}\n        disabled={currentPage === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function T(){return r.createElement(i.O,{template:"nextjs",showFiles:!0,startRoute:"/my-products",files:{"/pages/_app.tsx":{code:F},"/pages/my-products/index.tsx":{code:j,active:!0},"/components/products/list.tsx":{code:A}}})}const F='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "products",\n          list: "/my-products",\n        },\n      ]}\n      options={{ syncWithLocation: true }}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n\nexport default App;\n'.trim(),j='\nimport React from "react";\n\nimport { useTable } from "@refinedev/core";\nimport { parseTableParams } from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { ProductList } from "../../components/products/list";\n\nexport const getServerSideProps = async (context) => {\n  const {\n    pagination: queryPagination,\n    filters: queryFilters,\n    sorters: querySorters,\n  } = parseTableParams(context.resolvedUrl?.split("?")[1] ?? "");\n\n  const pagination = {\n    currentPage: queryPagination.currentPage ?? 1,\n    pageSize: queryPagination.pageSize ?? 2,\n  };\n\n  const filters = queryFilters ?? [\n    {\n      field: "category.id",\n      operator: "eq",\n      value: "1",\n    },\n  ];\n\n  const sorters = querySorters ?? [{ field: "id", order: "asc" }];\n\n  const data = await dataProvider("https://api.fake-rest.refine.dev").getList({\n    resource: "products",\n    filters,\n    pagination,\n    sorters,\n  });\n\n  return {\n    props: {\n      initialData: data,\n      initialProps: { pagination, filters, sorters },\n    },\n  };\n};\n\nconst ProductListPage = (props) => {\n  const {\n    initialData,\n    initialProps: { filters, sorters, pagination },\n  } = props;\n\n  const tableProps = useTable({\n    queryOptions: { initialData },\n    filters: { initial: filters },\n    sorters: { initial: sorters },\n    pagination,\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n\nexport default ProductListPage;\n'.trim(),A='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    result,\n    tableQuery,\n    isLoading,\n    currentPage,\n    setCurrentPage,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {result.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0]?.field}, order {sorters[0]?.order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0]?.order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0]?.field}, operator {filters[0]?.operator}, value:{" "}\n        {filters[0]?.value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0]?.value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {currentPage}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrentPage(+currentPage - 1);\n        }}\n        disabled={+currentPage < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrentPage(+currentPage + 1);\n        }}\n        disabled={currentPage === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function D(){return r.createElement(i.O,{hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest"},files:{"/app/root.tsx":{code:E},"/app/components/products/list.tsx":{code:q},"/app/routes/my-products._index.tsx":{code:U,active:!0}}})}const E='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "products",\n              list: "/my-products",\n            },\n          ]}\n        >\n          <Outlet />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),U='\nimport React from "react";\n\nimport { json, LoaderFunctionArgs } from "@remix-run/node";\nimport { useLoaderData } from "@remix-run/react";\n\nimport { useTable } from "@refinedev/core";\nimport { parseTableParams } from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { ProductList } from "../components/products/list";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const url = new URL(request.url);\n\n  const {\n    pagination: queryPagination,\n    filters: queryFilters,\n    sorters: querySorters,\n  } = parseTableParams(url.search);\n\n  const pagination = {\n    currentPage: queryPagination.currentPage ?? 1,\n    pageSize: queryPagination.pageSize ?? 2,\n  };\n\n  const filters = queryFilters ?? [\n    {\n      field: "category.id",\n      operator: "eq",\n      value: "1",\n    },\n  ];\n\n  const sorters = querySorters ?? [{ field: "id", order: "asc" }];\n\n  const data = await dataProvider("https://api.fake-rest.refine.dev").getList({\n    resource: "products",\n    filters,\n    pagination,\n    sorters,\n  });\n\n  return json({\n    initialData: data,\n    initialProps: { pagination, filters, sorters },\n  });\n}\n\nconst ProductList = () => {\n  const {\n    initialData,\n    initialProps: { filters, sorters, pagination },\n  } = useLoaderData<typeof loader>();\n  const tableProps = useTable({\n    queryOptions: { initialData },\n    filters: { initial: filters },\n    sorters: { initial: sorters },\n    pagination,\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n\nexport default ProductList;\n'.trim(),q='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    result,\n    tableQuery,\n    isLoading,\n    currentPage,\n    setCurrentPage,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {result?.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0]?.field}, order {sorters[0]?.order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0]?.order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0]?.field}, operator {filters[0]?.operator}, value:{" "}\n        {filters[0]?.value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0]?.value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {currentPage}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrentPage(+currentPage - 1);\n        }}\n        disabled={+currentPage < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrentPage(+currentPage + 1);\n        }}\n        disabled={currentPage === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function z(){return r.createElement(i.O,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","@refinedev/react-hook-form":"latest","react-router":"^7.0.2"},startRoute:"/my-products",files:{"/App.tsx":{code:W},"/style.css":{code:B,hidden:!0},"/components/modal.tsx":{code:M},"/pages/products/list.tsx":{code:I,active:!0}}})}const M='\nimport React from "react";\n\nexport const Modal: React.FC = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className="overlay" onClick={onClose}></div>\n      <div className="modal">\n        <div className="modal-title">\n          <button className="close-button" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className="modal-content">{children}</div>\n      </div>\n    </>\n  );\n};\n'.trim(),W='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router";\n\nimport "./style.css";\n\nimport { ProductList } from "./pages/products/list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),B="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\n\n.overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.7);\n    z-index: 1000;\n}\n\n.modal {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    z-index: 1000;\n    width: 75%;\n    overflow-y: auto;\n}\n\n.modal .modal-title {\n    display: flex;\n    justify-content: flex-end;\n    padding: 4px;\n}\n\n.modal .modal-content {\n    padding: 0px 16px 16px 16px;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-top: 3px;\n    margin-bottom: 3px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),I='\nimport React from "react";\n\nimport { useList } from "@refinedev/core";\nimport { useModalForm } from "@refinedev/react-hook-form";\n\nimport { Modal } from "../../components/modal.tsx";\n\nexport const ProductList: React.FC = () => {\n  const { result, query } = useList();\n  const products = result?.data;\n\n  const {\n    modal: { visible, close, show },\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    register,\n    saveButtonProps,\n  } = useModalForm({\n    refineCoreProps: { action: "edit" },\n    syncWithLocation: true,\n  });\n\n  if (query.isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <Modal isOpen={visible} onClose={close}>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div>\n            <label htmlFor="name">name</label>\n            <input {...register("name")} />\n          </div>\n          <button type="submit" {...saveButtonProps}>\n            <span>Save</span>\n          </button>\n        </form>\n      </Modal>\n      <ul>\n        {products?.map((product) => (\n          <li key={product.id}>\n            <span>{product.name}</span>\n            <button\n              onClick={() => {\n                show(product.id);\n              }}\n            >\n              edit\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n'.trim();function G(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function H(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function _(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const $={title:"Routing"},Y=void 0,X={unversionedId:"guides-concepts/routing/index",id:"guides-concepts/routing/index",title:"Routing",description:"Routing is essential for any CRUD application. Refine's headless architecture allows you to use any router solution, without being locked into a specific router/framework.",source:"@site/docs/guides-concepts/routing/index.md",sourceDirName:"guides-concepts/routing",slug:"/guides-concepts/routing/",permalink:"/docs/guides-concepts/routing/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/guides-concepts/routing/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1756388384,formattedLastUpdatedAt:"Aug 28, 2025",frontMatter:{title:"Routing"},sidebar:"mainSidebar",previous:{title:"Tables",permalink:"/docs/guides-concepts/tables/"},next:{title:"Authentication",permalink:"/docs/guides-concepts/authentication/"}},Q={},V=[{value:"Router Integrations",id:"router-integrations",level:2},{value:'Relationship Between Resources and Routes <GuideBadge id="guides-concepts/general-concepts" />',id:"relationship-between-resources-and-routes-",level:2},{value:"React Router",id:"react-router",level:4},{value:"Next.js",id:"nextjs",level:4},{value:"Remix",id:"remix",level:4},{value:"Hook Integrations",id:"hook-integrations",level:2},{value:'useForm <GuideBadge id="guides-concepts/forms/#integration-with-routers" />',id:"useform-",level:3},{value:'useTable <GuideBadge id="guides-concepts/tables/#integrating-with-routers" />',id:"usetable-",level:3},{value:"React Router",id:"react-router-1",level:4},{value:"Next.js",id:"nextjs-1",level:4},{value:"Remix",id:"remix-1",level:4},{value:"useModalForm",id:"usemodalform",level:3},{value:"useOne",id:"useone",level:3},{value:"useShow",id:"useshow",level:3},{value:"useList",id:"uselist",level:3},{value:"The <code>routerProvider</code> Interface",id:"the-routerprovider-interface",level:2}],J=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},K=J("DocThumbsUpDownFeedbackWidget"),Z=J("Tabs"),ee=J("TabItem"),ne=J("GuideBadge"),te={toc:V},re="wrapper";function oe(e){var{components:n}=e,t=_(e,["components"]);return(0,o.yg)(re,H(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){G(e,n,t[n])}))}return e}({},te,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Routing is essential for any CRUD application. Refine's headless architecture allows you to use any router solution, without being locked into a specific router/framework."),(0,o.yg)("p",null,"Refine also offers built-in router integrations for the most popular frameworks such as ",(0,o.yg)("strong",{parentName:"p"},"React Router"),", ",(0,o.yg)("strong",{parentName:"p"},"Next.js")," and ",(0,o.yg)("strong",{parentName:"p"},"Remix"),"."),(0,o.yg)("p",null,"These integrations makes it easier to use Refine with these frameworks and offers a lot of benefits such as:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Automatic parameter detection in hooks/components."),(0,o.yg)("li",{parentName:"ul"},"Automatic redirections after mutation or authentication."),(0,o.yg)("li",{parentName:"ul"},"Set of utility components & hooks which can be used to navigate between pages/routes.")),(0,o.yg)("p",null,"Since Refine is router agnostic, you are responsible for creating your own routes."),(0,o.yg)("p",null,"If you are using ",(0,o.yg)("strong",{parentName:"p"},"React Router"),", you'll be defining your routes under the ",(0,o.yg)("inlineCode",{parentName:"p"},"Routes")," component.",(0,o.yg)("br",null),"\nIf you are using ",(0,o.yg)("strong",{parentName:"p"},"Next.js"),", you'll be defining your routes in the ",(0,o.yg)("inlineCode",{parentName:"p"},"pages")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"app")," directory.",(0,o.yg)("br",null),"\nIf you are using ",(0,o.yg)("strong",{parentName:"p"},"Remix"),", you'll be defining your routes in the ",(0,o.yg)("inlineCode",{parentName:"p"},"app/routes")," directory."),(0,o.yg)("h2",{id:"router-integrations"},"Router Integrations"),(0,o.yg)(K,{id:"router-integrations",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To integrate a router provider with Refine, all you need to do is to import the router integration of your choice and pass it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />"),"'s ",(0,o.yg)("inlineCode",{parentName:"p"},"routerProvider")," prop."),(0,o.yg)(Z,{mdxType:"Tabs"},(0,o.yg)(ee,{value:"react-router-v6",label:"React Router",default:!0,mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { BrowserRouter, Routes } from "react-router";\n// highlight-next-line\nimport routerProvider from "@refinedev/react-router";\n\nconst App = () => (\n  <BrowserRouter>\n    // highlight-next-line\n    <Refine routerProvider={routerProvider}>\n      <Routes>{/* Your route definitions */}</Routes>\n    </Refine>\n  </BrowserRouter>\n);\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out React Router documentation for detailed information"))),(0,o.yg)(ee,{value:"nextjs-app",label:"Next.js App",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/layout.tsx"',title:'"app/layout.tsx"'},'"use client";\nimport { Refine } from "@refinedev/core";\n// highlight-next-line\nimport routerProvider from "@refinedev/nextjs-router";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang="en">\n      <body>\n        <Refine\n          // highlight-next-line\n          routerProvider={routerProvider}\n        >\n          {children}\n        </Refine>\n      </body>\n    </html>\n  );\n}\n'))),(0,o.yg)(ee,{value:"next-js",label:"Next.js Pages",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/_app.tsx"',title:'"pages/_app.tsx"'},'import { Refine } from "@refinedev/core";\n// highlight-next-line\nimport routerProvider from "@refinedev/nextjs-router/pages";\n\nexport function MyApp({ Component, pageProps }) {\n  return (\n    <Refine\n      // highlight-next-line\n      routerProvider={routerProvider}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"While using this integration, you won't be missing out Next.js features such as ",(0,o.yg)("strong",{parentName:"p"},"SSR")," and ",(0,o.yg)("strong",{parentName:"p"},"ISR"),".")),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out Next.js Router documentation for detailed information"))),(0,o.yg)(ee,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'// highlight-next-line\nimport routerProvider from "@refinedev/remix-router";\n\nexport default function App() {\n  return (\n    <html>\n      <body>\n        <Refine\n          // highlight-next-line\n          routerProvider={routerProvider}\n        >\n          <Outlet />\n        </Refine>\n      </body>\n    </html>\n  );\n}\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"While using this integration, you won't be missing out Remix features such as ",(0,o.yg)("strong",{parentName:"p"},"SSR")," and ",(0,o.yg)("strong",{parentName:"p"},"ISR"),".")),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},"Check out Remix Router documentation for detailed information"))),(0,o.yg)(ee,{value:"expo-router",label:"Expo Router (React Native)",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n// highlight-next-line\nimport routerProvider from "@refinenative/expo-router";\n\nexport const App = () => (\n  <Refine\n    // highlight-next-line\n    routerProvider={routerProvider}\n  >\n    {/* ... */}\n  </Refine>\n);\n')),(0,o.yg)("p",null,"Refine is able to work on React Native apps and with the help of the community package ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinenative/expo-router"),", you can use Refine's routing features on React Native as well."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@refinenative/expo-router"},"Check out Expo Router (Community Package) documentation for detailed information")))),(0,o.yg)("p",null,"Once you passed router provider to ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component, you can use all the features of Refine in a same way, regardless of your application's framework/router.")),(0,o.yg)("h2",{id:"relationship-between-resources-and-routes-"},"Relationship Between Resources and Routes ",(0,o.yg)(ne,{id:"guides-concepts/general-concepts",mdxType:"GuideBadge"})),(0,o.yg)(K,{id:"relationship-between-resources-and-routes-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine can infer current ",(0,o.yg)("inlineCode",{parentName:"p"},"resource"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"action")," and it's ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," from the ",(0,o.yg)("strong",{parentName:"p"},"current route")," based on your ",(0,o.yg)("strong",{parentName:"p"},"resource definitions"),"."),(0,o.yg)("p",null,"This eliminates the need of passing these parameters to the components/hooks manually."),(0,o.yg)("p",null,"All you have to do is to define your resource and their routes."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  resources={[\n    {\n      name: "products",\n      list: "/my-products", // http://localhost:3000/my-products\n      show: "my-products/:id", // http://localhost:3000/my-products/1\n      create: "/my-products/new", // http://localhost:3000/my-products/new\n      edit: "/my-products/:id/edit", // http://localhost:3000/my-products/1/edit\n      clone: "/my-products/:id/clone", // http://localhost:3000/my-products/1/clone\n    },\n  ]}\n/>\n')),(0,o.yg)("p",null,"You can see how we omit ",(0,o.yg)("strong",{parentName:"p"},"resource")," and ",(0,o.yg)("strong",{parentName:"p"},"id")," parameters for ",(0,o.yg)("inlineCode",{parentName:"p"},"useList"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"useShow")," hooks in the examples below.")),(0,o.yg)("h4",{id:"react-router"},"React Router"),(0,o.yg)(K,{id:"react-router",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(a,{mdxType:"ReactRouterResourceAndRoutesUsage"})),(0,o.yg)("h4",{id:"nextjs"},"Next.js"),(0,o.yg)(K,{id:"nextjs",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(p,{mdxType:"NextJSResourceAndRoutesUsage"}),(0,o.yg)("admonition",{title:"Usage with App Router",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You can see the example here: ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/examples/with-nextjs"},"https://github.com/refinedev/refine/tree/main/examples/with-nextjs")))),(0,o.yg)("h4",{id:"remix"},"Remix"),(0,o.yg)(K,{id:"remix",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(y,{mdxType:"RemixResourceAndRoutesUsage"})),(0,o.yg)("h2",{id:"hook-integrations"},"Hook Integrations"),(0,o.yg)("h3",{id:"useform-"},"useForm ",(0,o.yg)(ne,{id:"guides-concepts/forms/#integration-with-routers",mdxType:"GuideBadge"})),(0,o.yg)(K,{id:"useform-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Router integration of Refine allows you to use ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," without passing ",(0,o.yg)("strong",{parentName:"p"},"resource"),", ",(0,o.yg)("strong",{parentName:"p"},"id")," and ",(0,o.yg)("strong",{parentName:"p"},"action")," parameters.\nIt will also redirect you to resource's action route defined in ",(0,o.yg)("inlineCode",{parentName:"p"},"redirect")," prop. ",(0,o.yg)("inlineCode",{parentName:"p"},"redirect")," prop is ",(0,o.yg)("inlineCode",{parentName:"p"},"list")," by default."),(0,o.yg)(x,{mdxType:"ReactRouterUseFormUsage"}),(0,o.yg)("p",null,"Additionally, router integrations exposes an ",(0,o.yg)("inlineCode",{parentName:"p"},"<UnsavedChangesNotifier />")," component which can be used to notify the user about unsaved changes before navigating away from the current page. This component provides this feature which can be enabled by setting ",(0,o.yg)("inlineCode",{parentName:"p"},"warnWhenUnsavedChanges")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"useForm")," hooks."),(0,o.yg)(Z,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(ee,{value:"react-router",label:"React Router",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport {\n  routerProvider,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes } from "react-router";\n\nconst App = () => (\n  <BrowserRouter>\n    <Refine\n      // ...\n      routerProvider={routerProvider}\n      options={{\n        // highlight-next-line\n        warnWhenUnsavedChanges: true,\n      }}\n    >\n      <Routes>{/* ... */}</Routes>\n      {/* highlight-start */}\n      {/* The `UnsavedChangesNotifier` component should be placed under <Refine /> component. */}\n      <UnsavedChangesNotifier />\n      {/* highlight-end */}\n    </Refine>\n  </BrowserRouter>\n);\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")),(0,o.yg)(ee,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="_app.tsx"',title:'"_app.tsx"'},'import type { AppProps } from "next/app";\nimport { Refine } from "@refinedev/core";\nimport {\n  routerProvider,\n  UnsavedChangesNotifier,\n} from "@refinedev/nextjs-router/pages";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Refine\n      // ...\n      routerProvider={routerProvider}\n      options={{\n        // highlight-next-line\n        warnWhenUnsavedChanges: true,\n      }}\n    >\n      <Component {...pageProps} />\n      {/* highlight-start */}\n      {/* The `UnsavedChangesNotifier` component should be placed under <Refine /> component. */}\n      <UnsavedChangesNotifier />\n      {/* highlight-end */}\n    </Refine>\n  );\n}\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")),(0,o.yg)(ee,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'import type { MetaFunction } from "@remix-run/node";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\n\n// highlight-next-line\nimport routerProvider, {\n  UnsavedChangesNotifier,\n} from "@refinedev/remix-router";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          // ...\n          routerProvider={routerProvider}\n          options={{\n            // highlight-next-line\n            warnWhenUnsavedChanges: true,\n          }}\n        >\n          <Outlet />\n          {/* highlight-next-line */}\n          <UnsavedChangesNotifier />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n')),(0,o.yg)("p",null,"Check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#unsavedchangesnotifier"},(0,o.yg)("inlineCode",{parentName:"a"},"UnsavedChangesNotifier")," section of the React Router integration documentation")," for more information.")))),(0,o.yg)("h3",{id:"usetable-"},"useTable ",(0,o.yg)(ne,{id:"guides-concepts/tables/#integrating-with-routers",mdxType:"GuideBadge"})),(0,o.yg)(K,{id:"usetable-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," can synchronize it's parameters (filters, pagination, sorting) with the current route."),(0,o.yg)("p",null,"To enable synchronization, you need to pass ",(0,o.yg)("inlineCode",{parentName:"p"},"syncWithLocation: true")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component's ",(0,o.yg)("inlineCode",{parentName:"p"},"options")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"<Refine {...} options={{ syncWithLocation: true }}>\n\n")),(0,o.yg)("p",null,"Once you pass ",(0,o.yg)("inlineCode",{parentName:"p"},"syncWithLocation: true")," to ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component's ",(0,o.yg)("inlineCode",{parentName:"p"},"options")," prop, ",(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," will:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Read the current route and update it's parameters (filters, pagination, sorting) accordingly."),(0,o.yg)("li",{parentName:"ul"},"Update the current route when it's parameters (filters, pagination, sorting) change.")),(0,o.yg)("p",null,"Let's say we have a ",(0,o.yg)("inlineCode",{parentName:"p"},"products")," list page with the following route:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"/my-products\n")),(0,o.yg)("p",null,"And we want to filter products by ",(0,o.yg)("inlineCode",{parentName:"p"},"category.id")," and sort them by ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"asc")," order."),(0,o.yg)("p",null,"We can pass these parameters to ",(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," hook as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'const { ... } = useTable(\n    {\n        current: 1,\n        pageSize: 2,\n        filters: { initial: [{ field: "category.id", operator: "eq", value: 1 }]},\n        sorters: { initial: [{ field: "id", direction: "asc" }] }\n    }\n);\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," will automatically update the route to:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"title=http://localhost:3000/my-products",title:"http://localhost:3000/my-products"},"// removed-line\n/my-products\n\n// added-line\n/my-products?current=1&pageSize=2&sorters[0][field]=id&sorters[0][order]=asc&filters[0][field]=category.id&filters[0][operator]=eq&filters[0][value]=1\n")),(0,o.yg)("p",null,"And you will see a list of products, already ",(0,o.yg)("strong",{parentName:"p"},"filtered"),", ",(0,o.yg)("strong",{parentName:"p"},"sorted")," and ",(0,o.yg)("strong",{parentName:"p"},"paginated")," automatically based on the query parameters of the ",(0,o.yg)("strong",{parentName:"p"},"current route"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'const { result, currentPage, pageSize, filters, sorters } = useTable();\n\nconsole.log(result.data); // [{...}, {...}]\nconsole.log(result.total); // 32 - total number of unpaginated records\nconsole.log(current); // 1 - current page\nconsole.log(pageSize); // 2 - page size\nconsole.log(filters); // [{ field: "category.id", operator: "eq", value: "1" }]\nconsole.log(sorters); // [{ field: "id", order: "asc" }]\n')),(0,o.yg)("p",null,"Check the examples below to see how you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"useTable")," with router integration."),(0,o.yg)("p",null,"Notice how ",(0,o.yg)("inlineCode",{parentName:"p"},"components/products/list.tsx")," is the same, regardless of the router integration.")),(0,o.yg)("h4",{id:"react-router-1"},"React Router"),(0,o.yg)(K,{id:"react-router-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(k,{mdxType:"ReactRouterUseTableUsage"})),(0,o.yg)("h4",{id:"nextjs-1"},"Next.js"),(0,o.yg)(K,{id:"nextjs-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use SSR feature with Next.js to fetch initial data on the server side."),(0,o.yg)(T,{mdxType:"NextJSUseTableUsage"})),(0,o.yg)("h4",{id:"remix-1"},"Remix"),(0,o.yg)(K,{id:"remix-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use SSR feature with Remix to fetch initial data on the server side."),(0,o.yg)(D,{mdxType:"RemixUseTableUsage"})),(0,o.yg)("h3",{id:"usemodalform"},"useModalForm"),(0,o.yg)(K,{id:"usemodalform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useModalForm")," can automatically detect ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," parameter from the current route."),(0,o.yg)("p",null,"It can also sync it's parameters with the current route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"const { ... } = useModalForm({ syncWithLocation: true })\n")),(0,o.yg)("p",null,"Once the modal is visible, current route will look like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"/my-products?modal-products-edit[open]=true&modal-products-edit[id]=1\n")),(0,o.yg)("p",null,"You can see the example below for usage."),(0,o.yg)(z,{mdxType:"ReactRouterUseModalFormUsage"})),(0,o.yg)("h3",{id:"useone"},"useOne"),(0,o.yg)(K,{id:"useone",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useOne")," can automatically detect ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," parameters from the current route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/show.tsx",title:"components/products/show.tsx"},'import { useOne } from "@refinedev/core";\n\n// removed-line\nconst { result } = useOne({ resource: "products", id: "1" });\n\nconsole.log(result); // { id: "1", title: "Product 1", ... }\n\n// added-line\nconst { result } = useOne();\n\nconsole.log(result); // { id: "1", title: "Product 1", ... }\n'))),(0,o.yg)("h3",{id:"useshow"},"useShow"),(0,o.yg)(K,{id:"useshow",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useShow")," can automatically detect ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," parameters from the current route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/show.tsx",title:"components/products/show.tsx"},'import { useShow } from "@refinedev/core";\n\nconst { result } = useShow({\n  // removed-start\n  resource: "products",\n  id: "1",\n  // removed-end\n});\n\nconsole.log(result); // { id: "1", title: "Product 1", ... }\n\n// added-line\nconst { result } = useShow();\n\nconsole.log(result); // { id: "1", title: "Product 1", ... }\n'))),(0,o.yg)("h3",{id:"uselist"},"useList"),(0,o.yg)(K,{id:"uselist",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"useList")," can automatically detect ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," parameter from the current route."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/list.tsx",title:"components/products/list.tsx"},'import { useList } from "@refinedev/core";\n\n// removed-line\nconst { result } = useList({ resource: "products" });\n\nconsole.log(result.data); // [{ id: "1", title: "Product 1", ... }, { id: "2", title: "Product 2", ... }]\nconsole.log(result.total); // 32 - total number of unpaginated records\n\n// added-line\nconst { result } = useList();\n\nconsole.log(result.data); // [{ id: "1", title: "Product 1", ... }, { id: "2", title: "Product 2", ... }]\nconsole.log(result.total); // 32 - total number of unpaginated records\n')),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("inlineCode",{parentName:"p"},"config.pagination"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"config.filters"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"config.sorters")," will not be automatically detected from the current route."))),(0,o.yg)("h2",{id:"the-routerprovider-interface"},"The ",(0,o.yg)("inlineCode",{parentName:"h2"},"routerProvider")," Interface"),(0,o.yg)(K,{id:"the-routerprovider-interface",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"A router integration of Refine consists of a set of basic implementations for:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ability to navigate between pages/routes"),(0,o.yg)("li",{parentName:"ul"},"An interface to interact with the parameters and query strings of the current route"),(0,o.yg)("li",{parentName:"ul"},"An utility to navigate back in the history"),(0,o.yg)("li",{parentName:"ul"},"A simple component to use for anchor tags")),(0,o.yg)("p",null,"These implementations will be provided via ",(0,o.yg)("inlineCode",{parentName:"p"},"routerProvider")," which expects an object with the following methods:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"go"),": A function that accepts an object and returns a function that handles the navigation."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"back"),": A function that returns a function that handles the navigation back in the history."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"parse"),": A function that returns a function that parses the current route and returns an object."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Link"),": A React component that accepts a ",(0,o.yg)("inlineCode",{parentName:"li"},"to")," prop and renders a component that handles the navigation to the given ",(0,o.yg)("inlineCode",{parentName:"li"},"to")," prop.")),(0,o.yg)("p",null,"While all these methods are optional, if you're working on creating a custom router integration, you'll be able to incrementally add more features and adopt more of Refine's features by implementing more of these methods."),(0,o.yg)("p",null,"To learn more about the ",(0,o.yg)("inlineCode",{parentName:"p"},"routerProvider")," interface, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/routing/router-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"Router Provider")," section of the Core API Reference"),".")))}oe.isMDXComponent=!0}}]);