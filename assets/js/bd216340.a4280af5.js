"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[75535],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(37953);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,m=u["".concat(l,".").concat(g)]||u[g]||c[g]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},74226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>S,frontMatter:()=>s,metadata:()=>p,toc:()=>u});t(37953);var r=t(58860);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={title:"useStepsForm"},l=void 0,p={unversionedId:"packages/react-hook-form/use-steps-form/index",id:"version-4.xx.xx/packages/react-hook-form/use-steps-form/index",title:"useStepsForm",description:"useStepsForm allows you to manage a form with multiple steps. It provides features such as which step is currently active, the ability to go to a specific step and validation when changing steps etc.",source:"@site/versioned_docs/version-4.xx.xx/packages/react-hook-form/use-steps-form/index.md",sourceDirName:"packages/react-hook-form/use-steps-form",slug:"/packages/react-hook-form/use-steps-form/",permalink:"/docs/4.xx.xx/packages/react-hook-form/use-steps-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/packages/react-hook-form/use-steps-form/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"useStepsForm"},sidebar:"mainSidebar",previous:{title:"useModalForm",permalink:"/docs/4.xx.xx/packages/react-hook-form/use-modal-form/"},next:{title:"useForm",permalink:"/docs/4.xx.xx/examples/form/react-hook-form/useForm"}},d={},u=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"refineCoreProps",id:"refinecoreprops",level:3},{value:"stepsProps",id:"stepsprops",level:3},{value:"defaultStep",id:"defaultstep",level:4},{value:"isBackValidate",id:"isbackvalidate",level:4},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"onFinish",id:"onfinish",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"Return Values",id:"return-values",level:2},{value:"steps",id:"steps",level:3},{value:"currentStep",id:"currentstep",level:4},{value:"gotoStep",id:"gotostep",level:4},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},g=c("DocThumbsUpDownFeedbackWidget"),m=c("Tabs"),y=c("TabItem"),f=c("PropsTable"),h=c("CodeSandboxExample"),b={toc:u},v="wrapper";function S(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(v,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){a(e,n,t[n])}))}return e}({},b,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n  background: white;\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import {\n  useMany,\n  useNavigation,\n  useSelect as useSelectShared,\n  useTable,\n} from "@refinedev/core";\nimport { useStepsForm as useStepsFormShared } from "@refinedev/react-hook-form";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n\nconst stepTitlesShared = ["Title", "Status", "Category and content"];\n\nconst PostList: React.FC = () => {\n  const { tableQuery } = useTable<IPost>({\n    sorters: {\n      initial: [\n        {\n          field: "id",\n          order: "desc",\n        },\n      ],\n    },\n  });\n  const { edit, create } = useNavigation();\n\n  const categoryIds =\n    tableQuery?.data?.data.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany<ICategory>({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <div>\n      <button onClick={() => create("posts")}>Create Post</button>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Title</th>\n            <th>Category</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {tableQuery.data?.data.map((post) => (\n            <tr key={post.id}>\n              <td>{post.id}</td>\n              <td>{post.title}</td>\n              <td>\n                {isLoading\n                  ? "Loading"\n                  : data?.data.find((item) => item.id == post.category.id)\n                      ?.title}\n              </td>\n              <td>{post.status}</td>\n              <td>\n                <button onClick={() => edit("posts", post.id)}>Edit</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst PostCreate: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsFormShared<IPost, HttpError, IPost>();\n\n  const { options } = useSelectShared({\n    resource: "categories",\n  });\n\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n\n  if (formLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>\n      <div style={{ display: "flex", gap: 36 }}>\n        {stepTitlesShared.map((title, index) => (\n          <button\n            key={index}\n            onClick={() => gotoStep(index)}\n            style={{\n              backgroundColor: currentStep === index ? "lightgray" : "initial",\n            }}\n          >\n            {index + 1} - {title}\n          </button>\n        ))}\n      </div>\n      <form autoComplete="off">{renderFormByStep(currentStep)}</form>\n      <div style={{ display: "flex", gap: 8 }}>\n        {currentStep > 0 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep - 1);\n            }}\n          >\n            Previous\n          </button>\n        )}\n        {currentStep < stepTitlesShared.length - 1 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep + 1);\n            }}\n          >\n            Next\n          </button>\n        )}\n        {currentStep === stepTitlesShared.length - 1 && (\n          <button onClick={handleSubmit(onFinish)}>Save</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst PostEdit: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsFormShared<IPost, HttpError, IPost>();\n\n  const { options } = useSelectShared({\n    resource: "categories",\n    defaultValue: query?.data?.data.category.id,\n  });\n\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n              defaultValue={query?.data?.data.category.id}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n\n  if (formLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>\n      <div style={{ display: "flex", gap: 36 }}>\n        {stepTitlesShared.map((title, index) => (\n          <button\n            key={index}\n            onClick={() => gotoStep(index)}\n            style={{\n              backgroundColor: currentStep === index ? "lightgray" : "initial",\n            }}\n          >\n            {index + 1} - {title}\n          </button>\n        ))}\n      </div>\n      <form autoComplete="off">{renderFormByStep(currentStep)}</form>\n      <div style={{ display: "flex", gap: 8 }}>\n        {currentStep > 0 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep - 1);\n            }}\n          >\n            Previous\n          </button>\n        )}\n        {currentStep < stepTitlesShared.length - 1 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep + 1);\n            }}\n          >\n            Next\n          </button>\n        )}\n        {currentStep === stepTitlesShared.length - 1 && (\n          <button onClick={handleSubmit(onFinish)}>Save</button>\n        )}\n      </div>\n    </div>\n  );\n};\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," allows you to manage a form with multiple steps. It provides features such as which step is currently active, the ability to go to a specific step and validation when changing steps etc."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook is extended from ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/react-hook-form"},(0,r.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," package. This means you can use all the features of ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm")),"."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(g,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We'll show two examples, one for creating and one for editing a post. Let's see how ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,r.yg)(m,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,r.yg)(y,{value:"create",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport { HttpError, useSelect } from "@refinedev/core";\nimport { useStepsForm } from "@refinedev/react-hook-form";\n\nconst stepTitles = ["Title", "Status", "Category and content"];\n\nconst PostCreatePage: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { options } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n\n  if (formLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>\n      <div style={{ display: "flex", gap: 36 }}>\n        {stepTitles.map((title, index) => (\n          <button\n            key={index}\n            onClick={() => gotoStep(index)}\n            style={{\n              backgroundColor: currentStep === index ? "lightgray" : "initial",\n            }}\n          >\n            {index + 1} - {title}\n          </button>\n        ))}\n      </div>\n      <form autoComplete="off">{renderFormByStep(currentStep)}</form>\n      <div style={{ display: "flex", gap: 8 }}>\n        {currentStep > 0 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep - 1);\n            }}\n          >\n            Previous\n          </button>\n        )}\n        {currentStep < stepTitles.length - 1 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep + 1);\n            }}\n          >\n            Next\n          </button>\n        )}\n        {currentStep === stepTitles.length - 1 && (\n          <button onClick={handleSubmit(onFinish)}>Save</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          create: "/posts/create",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n        <ReactRouter.Route path="/posts/create" element={<PostCreate />} />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,r.yg)(y,{value:"edit",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { HttpError, useSelect } from "@refinedev/core";\nimport { useStepsForm } from "@refinedev/react-hook-form";\n\nconst stepTitles = ["Title", "Status", "Category and content"];\n\nconst PostEditPage: React.FC = () => {\n  const {\n    refineCore: { onFinish, formLoading, query },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { options } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n    defaultValue: query?.data?.data.category.id,\n  });\n\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n              defaultValue={query?.data?.data.category.id}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n\n  if (formLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>\n      <div style={{ display: "flex", gap: 36 }}>\n        {stepTitles.map((title, index) => (\n          <button\n            key={index}\n            onClick={() => gotoStep(index)}\n            style={{\n              backgroundColor: currentStep === index ? "lightgray" : "initial",\n            }}\n          >\n            {index + 1} - {title}\n          </button>\n        ))}\n      </div>\n      <form autoComplete="off">{renderFormByStep(currentStep)}</form>\n      <div style={{ display: "flex", gap: 8 }}>\n        {currentStep > 0 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep - 1);\n            }}\n          >\n            Previous\n          </button>\n        )}\n        {currentStep < stepTitles.length - 1 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep + 1);\n            }}\n          >\n            Next\n          </button>\n        )}\n        {currentStep === stepTitles.length - 1 && (\n          <button onClick={handleSubmit(onFinish)}>Save</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineHeadlessDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          create: "/posts/create",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route path="/posts" element={<PostList />} />\n        <ReactRouter.Route path="/posts/create" element={<PostCreate />} />\n        <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n      </ReactRouter.Routes>\n    </RefineHeadlessDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')))),(0,r.yg)("p",null,"In this example we're going to build a Post ",(0,r.yg)("inlineCode",{parentName:"p"},'"create"')," form. We also added a relational category field to expand our example."),(0,r.yg)("p",null,"To split your ",(0,r.yg)("inlineCode",{parentName:"p"},"<input/>")," components under a ",(0,r.yg)("inlineCode",{parentName:"p"},"<form/>")," component, first import and use ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError } from "@refinedev/core";\nimport { useStepsForm } from "@refinedev/react-hook-form";\n\nconst PostCreate = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  return <div>...</div>;\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is generic over the type form data to help you type check your code."),(0,r.yg)("p",null,"This hook returns a set of useful values to render steps form. Given current value, you should have a way to render your form items conditionally with this index value."),(0,r.yg)("p",null,"Here, we're going to use a ",(0,r.yg)("inlineCode",{parentName:"p"},"switch")," statement to render the form items based on the ",(0,r.yg)("inlineCode",{parentName:"p"},"currentStep"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError, useSelect } from "@refinedev/core";\nimport { useStepsForm } from "@refinedev/react-hook-form";\n\nconst PostCreate = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { options } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  // highlight-start\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n  // highlight-end\n\n  return <div>...</div>;\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n')),(0,r.yg)("admonition",{title:"Relational Data",type:"simple"},(0,r.yg)("p",{parentName:"admonition"},"Since ",(0,r.yg)("inlineCode",{parentName:"p"},"category")," is a relational data, we use ",(0,r.yg)("inlineCode",{parentName:"p"},"useSelect")," to fetch its data."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-select"},"Refer to ",(0,r.yg)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage. ","\u2192"))),(0,r.yg)("p",null,"Now, we can use ",(0,r.yg)("inlineCode",{parentName:"p"},"renderFormByStep")," function to render the form items based on the ",(0,r.yg)("inlineCode",{parentName:"p"},"currentStep")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"gotoStep")," function to navigate between steps."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError, useSelect } from "@refinedev/core";\nimport { useStepsForm } from "@refinedev/react-hook-form";\n\nconst PostCreate = () => {\n  const {\n    refineCore: { onFinish, formLoading },\n    register,\n    handleSubmit,\n    formState: { errors },\n    steps: { currentStep, gotoStep },\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { options } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const renderFormByStep = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <>\n            <label>Title: </label>\n            <input\n              {...register("title", {\n                required: "This field is required",\n              })}\n            />\n            {errors.title && <span>{errors.title.message}</span>}\n          </>\n        );\n      case 1:\n        return (\n          <>\n            <label>Status: </label>\n            <select {...register("status")}>\n              <option value="published">published</option>\n              <option value="draft">draft</option>\n              <option value="rejected">rejected</option>\n            </select>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <label>Category: </label>\n            <select\n              {...register("category.id", {\n                required: "This field is required",\n              })}\n            >\n              {options?.map((category) => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n            {errors.category && <span>{errors.category.message}</span>}\n            <br />\n            <br />\n            <label>Content: </label>\n            <textarea\n              {...register("content", {\n                required: "This field is required",\n              })}\n              rows={10}\n              cols={50}\n            />\n            {errors.content && <span>{errors.content.message}</span>}\n          </>\n        );\n    }\n  };\n\n  // highlight-start\n  if (formLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{ display: "flex", flexDirection: "column", gap: 16 }}>\n      <div style={{ display: "flex", gap: 36 }}>\n        {stepTitles.map((title, index) => (\n          <button\n            key={index}\n            onClick={() => gotoStep(index)}\n            style={{\n              backgroundColor: currentStep === index ? "lightgray" : "initial",\n            }}\n          >\n            {index + 1} - {title}\n          </button>\n        ))}\n      </div>\n      <form autoComplete="off">{renderFormByStep(currentStep)}</form>\n      <div style={{ display: "flex", gap: 8 }}>\n        {currentStep > 0 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep - 1);\n            }}\n          >\n            Previous\n          </button>\n        )}\n        {currentStep < stepTitles.length - 1 && (\n          <button\n            onClick={() => {\n              gotoStep(currentStep + 1);\n            }}\n          >\n            Next\n          </button>\n        )}\n        {currentStep === stepTitles.length - 1 && (\n          <button onClick={handleSubmit(onFinish)}>Save</button>\n        )}\n      </div>\n    </div>\n  );\n  // highlight-end\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n'))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"refinecoreprops"},"refineCoreProps"),(0,r.yg)(g,{id:"refinecoreprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"All ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," properties also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#return-values"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const stepsForm = useStepsForm({\n  refineCoreProps: {\n    action: "edit",\n    resource: "posts",\n    id: "1",\n  },\n});\n'))),(0,r.yg)("h3",{id:"stepsprops"},"stepsProps"),(0,r.yg)(g,{id:"stepsprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The props needed by the manage state steps.")),(0,r.yg)("h4",{id:"defaultstep"},"defaultStep"),(0,r.yg)(g,{id:"defaultstep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Sets the default starting step number. Counting starts from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  stepsProps: {\n    defaultStep: 0,\n  },\n});\n"))),(0,r.yg)("h4",{id:"isbackvalidate"},"isBackValidate"),(0,r.yg)(g,{id:"isbackvalidate",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When is ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", validates a form fields when the user navigates to a previous step. Default is ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  stepsProps: {\n    isBackValidate: true,\n  },\n});\n"))),(0,r.yg)("h3",{id:"autosave"},"autoSave"),(0,r.yg)(g,{id:"autosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,r.yg)("p",null,"By default the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," prop to invalidate queries upon unmount."),(0,r.yg)("p",null,"It also supports ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,r.yg)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,r.yg)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed.")),(0,r.yg)("h4",{id:"enabled"},"enabled"),(0,r.yg)(g,{id:"enabled",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"To enable the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,r.yg)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),". By default, it is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n    },\n  },\n});\n"))),(0,r.yg)("h4",{id:"debounce"},"debounce"),(0,r.yg)(g,{id:"debounce",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Set the debounce time for the ",(0,r.yg)("inlineCode",{parentName:"p"},"autoSave")," prop. By default, it is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      debounce: 2000,\n    },\n  },\n});\n"))),(0,r.yg)("h4",{id:"onfinish"},"onFinish"),(0,r.yg)(g,{id:"onfinish",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-start\n      onFinish: (values) => {\n        return {\n          foo: "bar",\n          ...values,\n        };\n      },\n      // highlight-end\n    },\n  },\n});\n'))),(0,r.yg)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,r.yg)(g,{id:"invalidateonunmount",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This prop is useful when you want to invalidate the ",(0,r.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,r.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default, it is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useStepsForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      // highlight-next-line\n      invalidateOnUnmount: true,\n    },\n  },\n});\n"))),(0,r.yg)("h2",{id:"return-values"},"Return Values"),(0,r.yg)(g,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"All ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages#return-values"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,r.yg)("h3",{id:"steps"},"steps"),(0,r.yg)(g,{id:"steps",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The return values needed by the manage state steps.")),(0,r.yg)("h4",{id:"currentstep"},"currentStep"),(0,r.yg)(g,{id:"currentstep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Current step, counting from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("h4",{id:"gotostep"},"gotoStep"),(0,r.yg)(g,{id:"gotostep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Is a function that allows you to programmatically change the current step of a form.\nIt takes in one argument, step, which is a number representing the index of the step you want to navigate to.")),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(g,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(f,{module:"@refinedev/react-hook-form/useStepsForm",mdxType:"PropsTable"}),(0,r.yg)("admonition",{title:"External Props",type:"simple"},(0,r.yg)("p",{parentName:"admonition"},"It also accepts all props of ",(0,r.yg)("a",{parentName:"p",href:"https://react-hook-form.com/api/useform"},"useForm")," hook available in the ",(0,r.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form"),"."))),(0,r.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.yg)(g,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,r.yg)("td",{parentName:"tr",align:null},"Field Values for mutation function"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TContext"),(0,r.yg)("td",{parentName:"tr",align:null},"Second generic type of the ",(0,r.yg)("inlineCode",{parentName:"td"},"useForm")," of the React Hook Form."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,r.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,r.yg)("h3",{id:"return-values-1"},"Return values"),(0,r.yg)(g,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"steps"),(0,r.yg)("td",{parentName:"tr",align:null},"Relevant state and method to control the steps"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#steps"},(0,r.yg)("inlineCode",{parentName:"a"},"StepsReturnValues")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"refineCore"),(0,r.yg)("td",{parentName:"tr",align:null},"The return values of the ",(0,r.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form/#return-values"},(0,r.yg)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"React Hook Form Return Values"),(0,r.yg)("td",{parentName:"tr",align:null},"See ",(0,r.yg)("a",{parentName:"td",href:"https://react-hook-form.com/api/useform"},"React Hook Form")," documentation"),(0,r.yg)("td",{parentName:"tr",align:null}))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(g,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(h,{path:"form-react-hook-form-use-steps-form",mdxType:"CodeSandboxExample"})))}S.isMDXComponent=!0}}]);