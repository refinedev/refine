"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[16031,90038,44010,31542,33665,31340],{58860:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={},p=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",title:"basic-usage-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/basic-usage-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{}},u={},c=[],d={toc:c},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport {\n    Autocomplete,\n    useAutocomplete,\n    TextField,\n} from "@pankod/refine-mui";\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\nconst PostCreate: React.FC = () => {\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <Autocomplete\n            {...autocompleteProps}\n            getOptionLabel={(item) => item.title}\n            isOptionEqualToValue={(option, value) =>\n                value === undefined || option?.id?.toString() === (value?.id ?? value)?.toString()\n            }\n            placeholder="Select a category"\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label="Category"\n                    margin="normal"\n                    variant="outlined"\n                    required\n                />\n            )}\n        />\n    );\n};\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            create: PostCreate,\n        },\n    ],\n});\nrender(<RefineMuiDemo />);\n')))}g.isMDXComponent=!0},31793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={},p=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/crud-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",title:"crud-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/crud-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/crud-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{}},u={},c=[],d={toc:c},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=400px",live:!0,url:"http://localhost:3000",previewHeight:"400px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport {\n    Create,\n    Box,\n    Autocomplete,\n    useAutocomplete,\n    TextField,\n} from "@pankod/refine-mui";\nimport { useForm, Controller } from "@pankod/refine-react-hook-form";\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\nconst PostCreate: React.FC = () => {\n    const {\n        saveButtonProps,\n        refineCore: { formLoading, queryResult },\n        register,\n        control,\n        formState: { errors },\n    } = useForm<IPost, HttpError, IPost & { category: ICategory }>();\n\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <Box component="form">\n                <Controller\n                    control={control}\n                    name="category"\n                    rules={{ required: "This field is required" }}\n                    render={({ field }) => (\n                        <Autocomplete\n                            //highlight-next-line\n                            {...autocompleteProps}\n                            {...field}\n                            onChange={(_, value) => {\n                                field.onChange(value);\n                            }}\n                            getOptionLabel={({ title }) => title}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined || option?.id?.toString() === (value?.id ?? value)?.toString()\n                            }\n                            placeholder="Select a category"\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label="Category"\n                                    margin="normal"\n                                    variant="outlined"\n                                    error={!!errors.category}\n                                    helperText={errors.category?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            </Box>\n        </Create>\n    );\n};\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            create: PostCreate,\n        },\n    ],\n});\nrender(<RefineMuiDemo />);\n')))}g.isMDXComponent=!0},6830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={},p=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/default-value-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",title:"default-value-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/default-value-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{}},u={},c=[],d={toc:c},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport {\n    Autocomplete,\n    useAutocomplete,\n    TextField,\n} from "@pankod/refine-mui";\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\nconst PostCreate: React.FC = () => {\n    \n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n        // highlight-next-line\n        defaultValue: 11,\n    });\n\n    return (\n        <Autocomplete\n            {...autocompleteProps}\n            getOptionLabel={(item) => item.title}\n            isOptionEqualToValue={(option, value) =>\n                value === undefined || option?.id?.toString() === (value?.id ?? value)?.toString()\n            }\n            placeholder="Select a category"\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label="Category"\n                    margin="normal"\n                    variant="outlined"\n                    required\n                />\n            )}\n        />\n    );\n};\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            create: PostCreate,\n        },\n    ],\n});\nrender(<RefineMuiDemo />);\n')))}g.isMDXComponent=!0},66369:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>C,frontMatter:()=>d,metadata:()=>g,toc:()=>f});n(37953);var r=n(58860),o=n(59021),a=n(6830),i=n(31793),l=n(13933),p=n(59409);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const d={title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/v3/packages/mui/src/hooks/useAutocomplete/index.ts"},m=void 0,g={unversionedId:"api-reference/mui/hooks/useAutocomplete/index",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index",title:"useAutocomplete",description:"useAutocomplete hook allows you to manage Material UI `` component when records in a resource needs to be used as select options.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/index.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{title:"useAutocomplete",siderbar_label:"useAutocomplete",source:"https://github.com/refinedev/refine/blob/v3/packages/mui/src/hooks/useAutocomplete/index.ts"},sidebar:"someSidebar",previous:{title:"Material UI API",permalink:"/docs/3.xx.xx/api-reference/mui"},next:{title:"useDataGrid",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useDataGrid"}},y={},f=[{value:"Client-side filtering",id:"client-side-filtering",level:4},{value:"<code>metaData</code>",id:"metadata",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to ensure <code>defaultValue</code> is included in the options?",id:"how-to-ensure-defaultvalue-is-included-in-the-options",level:3},{value:"Can I create the options manually?",id:"can-i-create-the-options-manually",level:3},{value:"How do I use it with <code>CRUD</code> components and <code>useForm</code>?",id:"how-do-i-use-it-with-crud-components-and-useform",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2}],h=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",t)},v=h("DocThumbsUpDownFeedbackWidget"),b=h("PropTag"),x=h("PropsTable"),N=h("CodeSandboxExample"),O={toc:f},w="wrapper";function C(e){var{components:t}=e,n=c(e,["components"]);return(0,r.yg)(w,u(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){s(e,t,n[t])}))}return e}({},O,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)(v,{id:"onsearch",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook allows you to manage Material UI ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/"},(0,r.yg)("inlineCode",{parentName:"a"},"<Autocomplete>"))," component when records in a resource needs to be used as select options."),(0,r.yg)("p",null,"This hook uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook for fetching data. ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useList/"},"Refer to useList hook for details. \u2192")),(0,r.yg)("admonition",{title:"DERIVATIVES",type:"info-tip"},(0,r.yg)("p",{parentName:"admonition"},"If you're looking for a complete select library, refine has out-of-the-box support for the libraries below:"),(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"refine's ",(0,r.yg)("inlineCode",{parentName:"li"},"useSelect")," (for Headless users) - ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/core/hooks/useSelect/"},"Documentation")," - ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/examples/core/useSelect"},"Example")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://ant.design/components/select"},"Ant Design Select")," (for Ant Design users) - ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/antd/hooks/field/useSelect"},"Documentation")," - ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/examples/field/useSelect"},"Example")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://mantine.dev/core/select/"},"Mantine Select")," (for Mantine users) - ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/api-reference/mantine/hooks/useSelect"},"Documentation"),"\n:::")),(0,r.yg)("h2",{parentName:"admonition",id:"basic-usage"},"Basic Usage"),(0,r.yg)("p",{parentName:"admonition"},"Here is a basic example of how to use ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook."),(0,r.yg)(o.default,{mdxType:"BasicUsageLivePreview"}),(0,r.yg)("h2",{parentName:"admonition",id:"realtime-updates"},"Realtime Updates"),(0,r.yg)("blockquote",{parentName:"admonition"},(0,r.yg)("p",{parentName:"blockquote"},"This feature is only available if you use a ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider"},"Live Provider"))),(0,r.yg)("p",{parentName:"admonition"},"When ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook is mounted, it passes some parameters (",(0,r.yg)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," etc.) to the ",(0,r.yg)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"liveProvider"),".\nIt is useful when you want to subscribe to the live updates."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"liveProvider")," documentation for more information ","\u2192")),(0,r.yg)("h2",{parentName:"admonition",id:"properties"},"Properties"),(0,r.yg)("h3",{parentName:"admonition",id:"resource-"},(0,r.yg)("inlineCode",{parentName:"h3"},"resource")," ",(0,r.yg)(b,{required:!0,mdxType:"PropTag"})),(0,r.yg)("p",{parentName:"admonition"},"It will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. The parameter is usually used as an API endpoint path. It all depends on how to handle the ",(0,r.yg)("inlineCode",{parentName:"p"},"resource")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method. See the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/data-provider#creating-a-data-provider"},"creating a data provider")," section for an example of how resources are handled."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  resource: "categories",\n});\n')),(0,r.yg)("h3",{parentName:"admonition",id:"sort"},(0,r.yg)("inlineCode",{parentName:"h3"},"sort")),(0,r.yg)("p",{parentName:"admonition"},"It allows to show the options in the desired order. ",(0,r.yg)("inlineCode",{parentName:"p"},"sort")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send sort query parameters to the API."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudsorting"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"CrudSorting")," interface for more information ","\u2192")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  sort: [\n    {\n      field: "title",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.yg)(l.default,{mdxType:"SortLivePreview"}),(0,r.yg)("h3",{parentName:"admonition",id:"filters"},(0,r.yg)("inlineCode",{parentName:"h3"},"filters")),(0,r.yg)("p",{parentName:"admonition"},"It is used to show options by filtering them. ",(0,r.yg)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. It is used to send filter query parameters to the API."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")," interface for more information ","\u2192")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  filter: [\n    {\n      field: "isActive",\n      operator: "eq",\n      value: true,\n    },\n  ],\n});\n')),(0,r.yg)("h3",{parentName:"admonition",id:"defaultvalue"},(0,r.yg)("inlineCode",{parentName:"h3"},"defaultValue")),(0,r.yg)("p",{parentName:"admonition"},"Allows to make options selected by default. Adds extra options to ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>")," component. In some cases like there are many entries for the ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>")," and pagination is required, ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," may not be present in the current visible options and this can break the ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>")," component. To avoid such cases, A seperate ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany")," query is sent to the backend with the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," and appended to the options of ",(0,r.yg)("inlineCode",{parentName:"p"},"<select>"),", ensuring the default values exist in the current options array. Since it uses ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany")," to query the necessary data, the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," can be a single value or an array of values like the following:"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  defaultValue: 1, // or [1, 2]\n});\n")),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useMany/"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"useMany")," documentation for detailed usage. ","\u2192")),(0,r.yg)("h3",{parentName:"admonition",id:"debounce"},(0,r.yg)("inlineCode",{parentName:"h3"},"debounce")),(0,r.yg)("p",{parentName:"admonition"},"It allows us to ",(0,r.yg)("inlineCode",{parentName:"p"},"debounce")," the ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," function."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  debounce: 500,\n});\n")),(0,r.yg)("h3",{parentName:"admonition",id:"queryoptions"},(0,r.yg)("inlineCode",{parentName:"h3"},"queryOptions")),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,r.yg)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"useQuery")," documentation for more information ","\u2192")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  queryOptions: {\n    retry: 3,\n  },\n});\n")),(0,r.yg)("h3",{parentName:"admonition",id:"pagination"},(0,r.yg)("inlineCode",{parentName:"h3"},"pagination")),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter. It is used to send pagination query parameters to the API."),(0,r.yg)("h4",{parentName:"admonition",id:"current"},(0,r.yg)("inlineCode",{parentName:"h4"},"current")),(0,r.yg)("p",{parentName:"admonition"},"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    current: 2,\n  },\n});\n")),(0,r.yg)("h4",{parentName:"admonition",id:"pagesize"},(0,r.yg)("inlineCode",{parentName:"h4"},"pageSize")),(0,r.yg)("p",{parentName:"admonition"},"You can pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,r.yg)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  pagination: {\n    pageSize: 20,\n  },\n});\n")),(0,r.yg)("h3",{parentName:"admonition",id:"haspagination"},(0,r.yg)("inlineCode",{parentName:"h3"},"hasPagination")),(0,r.yg)("blockquote",{parentName:"admonition"},(0,r.yg)("p",{parentName:"blockquote"},"Default: ",(0,r.yg)("inlineCode",{parentName:"p"},"false"))),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"hasPagination")," will be passed to the ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.yg)("inlineCode",{parentName:"p"},"useList")," hook. It is used to determine whether to use server-side pagination or not."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  hasPagination: false,\n});\n")),(0,r.yg)("h3",{parentName:"admonition",id:"defaultvaluequeryoptions"},(0,r.yg)("inlineCode",{parentName:"h3"},"defaultValueQueryOptions")),(0,r.yg)("p",{parentName:"admonition"},"When the ",(0,r.yg)("inlineCode",{parentName:"p"},"defaultValue")," property is given, the ",(0,r.yg)("inlineCode",{parentName:"p"},"useMany")," data hook is called for the selected records. With this property, you can change the options of this query. If not given, the values given in ",(0,r.yg)("inlineCode",{parentName:"p"},"queryOptions")," will be used."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  resource: "categories",\n  defaultValueQueryOptions: {\n    onSuccess: (data) => {\n      console.log("triggers when on query return on success");\n    },\n  },\n});\n')),(0,r.yg)("h3",{parentName:"admonition",id:"onsearch"},(0,r.yg)("inlineCode",{parentName:"h3"},"onSearch")),(0,r.yg)("p",{parentName:"admonition"},"It allows us to ",(0,r.yg)("inlineCode",{parentName:"p"},"AutoComplete")," the ",(0,r.yg)("inlineCode",{parentName:"p"},"options"),"."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#crudfilters"},"Refer to the ",(0,r.yg)("inlineCode",{parentName:"a"},"CrudFilters")," interface for more information ","\u2192")),(0,r.yg)(p.default,{mdxType:"OnSearchLivePreview"})),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," is used, it will override the existing ",(0,r.yg)("inlineCode",{parentName:"p"},"filters"),".\n:::")),(0,r.yg)("h4",{id:"client-side-filtering"},"Client-side filtering"),(0,r.yg)(v,{id:"client-side-filtering",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Sometimes, you may want to filter the options on the client-side. You can do this by passing ",(0,r.yg)("inlineCode",{parentName:"p"},"onSearch")," function as ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined"),". This will disable the server-side filtering and will filter the options on the client-side."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'// highlight-next-line\nimport { createFilterOptions } from "@pankod/refine-mui";\n\nconst { autocompleteProps } = useAutocomplete({\n  resource: "categories",\n});\n\n// highlight-start\nconst filterOptions = createFilterOptions({\n  matchFrom: "start",\n  stringify: (option: any) => option.title,\n});\n// highlight-end\n\n<Autocomplete\n  {...autocompleteProps}\n  getOptionLabel={(item) => item.title}\n  // highlight-start\n  onInputChange={(event, value) => {}}\n  filterOptions={filterOptions}\n  // highlight-end\n  isOptionEqualToValue={(option, value) =>\n    value === undefined ||\n    option?.id?.toString() === (value?.id ?? value)?.toString()\n  }\n  placeholder="Select a category"\n  renderInput={(params) => (\n    <TextField\n      {...params}\n      label="Category"\n      margin="normal"\n      variant="outlined"\n      required\n    />\n  )}\n/>;\n'))),(0,r.yg)("h3",{id:"metadata"},(0,r.yg)("inlineCode",{parentName:"h3"},"metaData")),(0,r.yg)(v,{id:"metadata",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/general-concepts/#metadata"},(0,r.yg)("inlineCode",{parentName:"a"},"metaData"))," is used following two purposes:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"To pass additional information to data provider methods."),(0,r.yg)("li",{parentName:"ul"},"Generate GraphQL queries using plain JavaScript Objects (JSON). Please refer ",(0,r.yg)("a",{parentName:"li",href:"/docs/3.xx.xx/advanced-tutorials/data-provider/graphql/#edit-page"},"GraphQL")," for more information.")),(0,r.yg)("p",null,"In the following example, we pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.yg)("inlineCode",{parentName:"p"},"metaData")," object to the ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  // highlight-start\n  metaData: {\n    headers: { "x-meta-data": "true" },\n  },\n  // highlight-end\n});\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    hasPagination,\n    sort,\n    filters,\n    // highlight-next-line\n    metaData,\n  }) => {\n    // highlight-next-line\n    const headers = metaData?.headers ?? {};\n    const url = `${apiUrl}/${resource}`;\n    //...\n    //...\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers });\n    return {\n      data,\n    };\n  },\n  //...\n};\n'))),(0,r.yg)("h3",{id:"dataprovidername"},(0,r.yg)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.yg)(v,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"If there is more than one ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,r.yg)("inlineCode",{parentName:"p"},"dataProviderName")," prop. It is useful when you have a different data provider for different resources."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  dataProviderName: "second-data-provider",\n});\n'))),(0,r.yg)("h3",{id:"successnotification"},(0,r.yg)("inlineCode",{parentName:"h3"},"successNotification")),(0,r.yg)(v,{id:"autocompletereturnvalues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(v,{id:"successnotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider/"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data is fetched successfully, ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," can call ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: "Success with no errors",\n      type: "success",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"errornotification"},(0,r.yg)("inlineCode",{parentName:"h3"},"errorNotification")),(0,r.yg)(v,{id:"errornotification",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/notification-provider/"},(0,r.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"After data fetching is failed, ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," will call ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.yg)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a error notification. With this prop, you can customize the error notification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: "Error",\n      type: "error",\n    };\n  },\n});\n'))),(0,r.yg)("h3",{id:"livemode"},(0,r.yg)("inlineCode",{parentName:"h3"},"liveMode")),(0,r.yg)(v,{id:"livemode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider/"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,'Determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.\nFor more information about live mode, please check ',(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime")," page."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'useAutocomplete({\n  liveMode: "auto",\n});\n'))),(0,r.yg)("h3",{id:"onliveevent"},(0,r.yg)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,r.yg)(v,{id:"onliveevent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider/"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"The callback function that is executed when new events from a subscription are arrived."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"useAutocomplete({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n"))),(0,r.yg)("h3",{id:"liveparams"},(0,r.yg)("inlineCode",{parentName:"h3"},"liveParams")),(0,r.yg)(v,{id:"liveparams",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider/"},(0,r.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.yg)("p",null,"Params to pass to liveProvider's ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method.")),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-to-ensure-defaultvalue-is-included-in-the-options"},"How to ensure ",(0,r.yg)("inlineCode",{parentName:"h3"},"defaultValue")," is included in the options?"),(0,r.yg)(v,{id:"how-to-ensure-defaultvalue-is-included-in-the-options",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"In some cases we only have ",(0,r.yg)("inlineCode",{parentName:"p"},"id"),", it may be necessary to show it selected in the selection box. This hook sends the request via ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useMany/"},(0,r.yg)("inlineCode",{parentName:"a"},"useMany")),", gets the data and mark as seleted."),(0,r.yg)(a.default,{mdxType:"DefaultValueLivePreview"})),(0,r.yg)("h3",{id:"can-i-create-the-options-manually"},"Can I create the options manually?"),(0,r.yg)(v,{id:"can-i-create-the-options-manually",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You can create a new ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," object with ",(0,r.yg)("inlineCode",{parentName:"p"},"queryResult"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const { autocompleteProps, queryResult } = useAutocomplete();\n\nconst options = queryResult.data?.data.map((item) => ({\n  title: item.title,\n  value: item.id,\n}));\n\nreturn <Autocomplete {...autocompleteProps} options={options || []} />;\n"))),(0,r.yg)("h3",{id:"how-do-i-use-it-with-crud-components-and-useform"},"How do I use it with ",(0,r.yg)("inlineCode",{parentName:"h3"},"CRUD")," components and ",(0,r.yg)("inlineCode",{parentName:"h3"},"useForm"),"?"),(0,r.yg)(v,{id:"how-do-i-use-it-with-crud-components-and-useform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(i.default,{mdxType:"CrudLivePreview"}),(0,r.yg)("p",null,"The use of ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," with ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/packages/documentation/react-hook-form/useForm/"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," is demonstrated in the code above. You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"useAutocomplete")," hook independently of the ",(0,r.yg)("inlineCode",{parentName:"p"},"useForm")," hook."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"By default, refine does the search using the ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/core/hooks/data/useDelete/"},(0,r.yg)("inlineCode",{parentName:"a"},"useList"))," hook and passes it to the search parameter. If you get a problem you should check your ",(0,r.yg)("inlineCode",{parentName:"p"},"getList")," function in your Data Provider. If you want to change this behavior to make client-side filtering, you can examine ",(0,r.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/react-autocomplete/#search-as-you-type"},"this")," documentation."))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(v,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(x,{module:"@pankod/refine-mui/useAutocomplete",mdxType:"PropsTable"})),(0,r.yg)("h3",{id:"return-values"},"Return values"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"autocompleteProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Material UI Autocomplete props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#autocompletereturnvalues"},(0,r.yg)("inlineCode",{parentName:"a"},"AutoCompleteReturnValues")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"queryResult"),(0,r.yg)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultValueQueryResult"),(0,r.yg)("td",{parentName:"tr",align:null},"Result of the query of a ",(0,r.yg)("inlineCode",{parentName:"td"},"defaultValue")," record"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultValueQueryOnSuccess"),(0,r.yg)("td",{parentName:"tr",align:null},"Default value onSuccess method"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void"))))),(0,r.yg)("blockquote",null,(0,r.yg)("h4",{parentName:"blockquote",id:"autocompletereturnvalues"},"AutoCompleteReturnValues"),(0,r.yg)("table",{parentName:"blockquote"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"options"),(0,r.yg)("td",{parentName:"tr",align:null},"Array of options"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"TData"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"loading"),(0,r.yg)("td",{parentName:"tr",align:null},"Loading state"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"onInputChange"),(0,r.yg)("td",{parentName:"tr",align:null},"Callback fired when the input value changes"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(event: React.SyntheticEvent, value: string, reason: string) => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"filterOptions"),(0,r.yg)("td",{parentName:"tr",align:null},"Determines the filtered options to be rendered on search."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(options: TData, state: object) => TData"))))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(v,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(N,{path:"field-material-ui-use-autocomplete",mdxType:"CodeSandboxExample"})))}C.isMDXComponent=!0},59409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={},p=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/on-search-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",title:"on-search-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/on-search-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{}},u={},c=[],d={toc:c},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport {\n    Autocomplete,\n    useAutocomplete,\n    TextField,\n} from "@pankod/refine-mui";\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\nconst PostCreate: React.FC = () => {\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n        // highlight-start\n        onSearch: (value) => [\n            {\n                field: "title",\n                operator: "contains",\n                value,\n            }\n        ]\n        // highlight-end\n    });\n\n    return (\n        <Autocomplete\n            {...autocompleteProps}\n            getOptionLabel={(item) => item.title}\n            isOptionEqualToValue={(option, value) =>\n                value === undefined || option?.id?.toString() === (value?.id ?? value)?.toString()\n            }\n            placeholder="Select a category"\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label="Category"\n                    margin="normal"\n                    variant="outlined"\n                    required\n                />\n            )}\n        />\n    );\n};\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            create: PostCreate,\n        },\n    ],\n});\nrender(<RefineMuiDemo />);\n')))}g.isMDXComponent=!0},13933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={},p=void 0,s={unversionedId:"api-reference/mui/hooks/useAutocomplete/sort-live-preview",id:"version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview",title:"sort-live-preview",description:"",source:"@site/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview.md",sourceDirName:"api-reference/mui/hooks/useAutocomplete",slug:"/api-reference/mui/hooks/useAutocomplete/sort-live-preview",permalink:"/docs/3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/mui/hooks/useAutocomplete/sort-live-preview.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1710225736,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{}},u={},c=[],d={toc:c},m="wrapper";function g(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport {\n    Autocomplete,\n    useAutocomplete,\n    TextField,\n    Button,\n} from "@pankod/refine-mui";\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\nconst PostCreate: React.FC = () => {\n    const [order, setOrder] = React.useState<"asc" | "desc">("asc");\n    const { autocompleteProps } = useAutocomplete<ICategory>({\n        resource: "categories",\n        // highlight-start\n        sort: [\n            {\n                field: "title",\n                order,\n            }\n        ]\n        // highlight-end\n    });\n\n    return (\n        <>\n            <Autocomplete\n                {...autocompleteProps}\n                getOptionLabel={(item) => item.title}\n                isOptionEqualToValue={(option, value) =>\n                    value === undefined || option?.id?.toString() === (value?.id ?? value)?.toString()\n                }\n                placeholder="Select a category"\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label="Category"\n                        margin="normal"\n                        variant="outlined"\n                        required\n                    />\n                )}\n            />\n            <Button \n                onClick={() => setOrder(order === "asc" ? "desc" : "asc")} \n                variant="contained" \n                size="small"\n            >Toggle Order</Button>\n        </>\n    );\n};\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            create: PostCreate,\n        },\n    ],\n});\nrender(<RefineMuiDemo />);\n')))}g.isMDXComponent=!0}}]);