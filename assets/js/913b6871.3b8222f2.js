"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[19056],{76:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>N,frontMatter:()=>d,metadata:()=>u,toc:()=>g});n(37953);var a=n(58860),o=n(82433),r=n(47191);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const d={title:"Strapi v4",source:"https://github.com/refinedev/refine/tree/main/packages/strapi-v4",swizzle:!0},p=void 0,u={unversionedId:"data/packages/strapi-v4/index",id:"version-4.xx.xx/data/packages/strapi-v4/index",title:"Strapi v4",description:"Refine supports the features that come with Strapi-v4.",source:"@site/versioned_docs/version-4.xx.xx/data/packages/strapi-v4/index.md",sourceDirName:"data/packages/strapi-v4",slug:"/data/packages/strapi-v4/",permalink:"/docs/4.xx.xx/data/packages/strapi-v4/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/data/packages/strapi-v4/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Strapi v4",source:"https://github.com/refinedev/refine/tree/main/packages/strapi-v4",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Simple REST",permalink:"/docs/4.xx.xx/data/packages/simple-rest/"},next:{title:"Supabase",permalink:"/docs/4.xx.xx/data/packages/supabase/"}},m={},g=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"API Parameters",id:"api-parameters",level:2},{value:"Create Collections",id:"create-collections",level:3},{value:"Fields Selection",id:"fields-selection",level:3},{value:"Relations Population",id:"relations-population",level:3},{value:"Relations Population for <code>/me</code> request",id:"relations-population-for-me-request",level:4},{value:"Publication State",id:"publication-state",level:3},{value:"Locale",id:"locale",level:3},{value:"<code>meta</code> Usages",id:"meta-usages",level:2},{value:"Authentication",id:"authentication",level:2},{value:"File Upload",id:"file-upload",level:2},{value:"Server-side form validation",id:"server-side-form-validation",level:2},{value:"Example",id:"example",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",t)},h=c("DocThumbsUpDownFeedbackWidget"),y=c("InstallPackagesCommand"),f=c("CodeSandboxExample"),v={toc:g},b="wrapper";function N(e){var{components:t}=e,n=s(e,["components"]);return(0,a.yg)(b,l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},v,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import axios from "axios";\nconst axiosInstance = axios.create();\naxiosInstance.defaults.headers.common[\n  "Authorization"\n] = `Bearer 6ae3cf664d558bc67d21ddabd0cf5ba0716367cd74c2ceaedf86f0efa09b3fe1605c90ab051fd4961ba03db961273bb2b48b9213ae267013317977f737b4ac8765a2e0bc64e9f275791ccb881117553f589675f5e6ce84d3859511fa124d477209cf1cbbd4fd7f6ddacc77eb4520753e3636446f807629de911eac7afbf60fd4`;\n')),(0,a.yg)("p",null,"Refine supports the features that come with ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html"},"Strapi-v4"),"."),(0,a.yg)("p",null,"A few of the Strapi-v4 API features are as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Authentication"),(0,a.yg)("li",{parentName:"ul"},"Fields Selection"),(0,a.yg)("li",{parentName:"ul"},"Relations Population"),(0,a.yg)("li",{parentName:"ul"},"Publication State"),(0,a.yg)("li",{parentName:"ul"},"Locale")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"meta")," allows us to use the above features in hooks. Thus, we can fetch the data according to the parameters we want."),(0,a.yg)("p",null,"Hooks and components that support ",(0,a.yg)("inlineCode",{parentName:"p"},"meta"),":"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Supported data hooks"),(0,a.yg)("th",{parentName:"tr",align:null},"Supported other hooks"),(0,a.yg)("th",{parentName:"tr",align:null},"Supported components"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-update"},(0,a.yg)("inlineCode",{parentName:"a"},"useUpdate")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,a.yg)("inlineCode",{parentName:"a"},"DeleteButton")," ","\u2192"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-update-many"},(0,a.yg)("inlineCode",{parentName:"a"},"useUpdateMany")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-modal-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useModalForm")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/components/buttons/refresh-button"},(0,a.yg)("inlineCode",{parentName:"a"},"RefreshButton")," ","\u2192"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-delete"},(0,a.yg)("inlineCode",{parentName:"a"},"useDelete")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-drawer-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useDrawerForm")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-delete-many"},(0,a.yg)("inlineCode",{parentName:"a"},"useDeleteMany")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-steps-form"},(0,a.yg)("inlineCode",{parentName:"a"},"useStepsForm")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-create"},(0,a.yg)("inlineCode",{parentName:"a"},"useCreate")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-create-many"},(0,a.yg)("inlineCode",{parentName:"a"},"useCreateMany")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-editable-table"},(0,a.yg)("inlineCode",{parentName:"a"},"useEditableTable")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-list"},(0,a.yg)("inlineCode",{parentName:"a"},"useList")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-simple-list"},(0,a.yg)("inlineCode",{parentName:"a"},"useSimpleList")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-one"},(0,a.yg)("inlineCode",{parentName:"a"},"useOne")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-show"},(0,a.yg)("inlineCode",{parentName:"a"},"useShow")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-many"},(0,a.yg)("inlineCode",{parentName:"a"},"useMany")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/core/hooks/utilities/use-export"},(0,a.yg)("inlineCode",{parentName:"a"},"useExport")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-custom"},(0,a.yg)("inlineCode",{parentName:"a"},"useCustom")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-checkbox-group"},(0,a.yg)("inlineCode",{parentName:"a"},"useCheckboxGroup")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/data/hooks/use-select"},(0,a.yg)("inlineCode",{parentName:"a"},"useSelect")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-radio-group"},(0,a.yg)("inlineCode",{parentName:"a"},"useRadioGroup")," ","\u2192")),(0,a.yg)("td",{parentName:"tr",align:null})))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"There is no need to use ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," for sorting, pagination, and, filters. Sorting, pagination, and, filters will be handled automatically by the strapi-v4 dataProvider.")),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Normally, strapi-v4 backend returns data in the following format:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 1,\n    "attributes": {\n        "title": "My title",\n        "content": "Long content...",\n}\n')),(0,a.yg)("p",{parentName:"admonition"},"However, we can use ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/blob/27a55320ada61a0624ed2f5b29331946334f7727/packages/strapi-v4/src/dataProvider.ts#L80"},"normalizeData")," to customize the data returned by the backend. So, our data will look like:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "title": "My title",\n  "content": "Long content..."\n}\n'))),(0,a.yg)("h2",{id:"setup"},"Setup"),(0,a.yg)(h,{id:"setup",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)(y,{args:"@refinedev/strapi-v4",mdxType:"InstallPackagesCommand"}),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"To make this example more visual, we used the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/antd"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. If you are using Refine headless, you need to provide the components, hooks, or helpers imported from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/antd"},(0,a.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package."))),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(h,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n//highlight-next-line\nimport { DataProvider } from "@refinedev/strapi-v4";\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      //highlight-next-line\n      dataProvider={DataProvider("API_URL")}\n      /* ... */\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,a.yg)("h2",{id:"api-parameters"},"API Parameters"),(0,a.yg)(h,{id:"api-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Let's examine how API parameters that come with Strapi-v4 are used with ",(0,a.yg)("inlineCode",{parentName:"p"},"meta"),". Then, let's see how it is used in the application.")),(0,a.yg)("h3",{id:"create-collections"},"Create Collections"),(0,a.yg)(h,{id:"create-collections",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"We created two collections on ",(0,a.yg)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi")," as ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"categories")," and added a relation between them. For detailed information on how to create a collection, you can check ",(0,a.yg)("a",{parentName:"p",href:"https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html"},"here"),"."),(0,a.yg)(o.A,{defaultValue:"posts",values:[{label:"posts",value:"posts"},{label:"categories",value:"categories"}],mdxType:"Tabs"},(0,a.yg)(r.A,{value:"posts",mdxType:"TabItem"},(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"posts")," has the following fields:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"id")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"title")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"content")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"category")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"createdAt")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"locale")))),(0,a.yg)(r.A,{value:"categories",mdxType:"TabItem"},(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"categories")," has the following fields:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"id")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"title")))))),(0,a.yg)("h3",{id:"fields-selection"},"Fields Selection"),(0,a.yg)(h,{id:"fields-selection",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"To select only some fields, we must specify these fields with `meta``."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#fields-selection"},"Refer to the Fields Selection documentation for detailed information. \u2192")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get only id and title of all posts"',title:!0,only:!0,id:!0,and:!0,of:!0,all:!0,'posts"':!0},'const { tableProps } = useTable<IPost>({\n  meta: {\n    fields: ["id", "title"],\n  },\n});\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all fields of all posts(id, title, category, content ...)"',title:'"Get',all:!0,fields:!0,of:!0,"posts(id,":!0,"title,":!0,"category,":!0,content:!0,'...)"':!0},'const { tableProps } = useTable<IPost>({\n  meta: {\n    fields: "*",\n  },\n});\n')),(0,a.yg)("p",null,"When sending the request, we can specify which fields will come, so we send ",(0,a.yg)("inlineCode",{parentName:"p"},"fields")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," to hooks that we will fetch data from. In this way, you can perform the queries of only the fields you want."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:5173 previewHeight=450px",live:!0,url:"http://localhost:5173",previewHeight:"450px"},'setInitialRoutes(["/posts"]);\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayoutV2, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { DataProvider } from "@refinedev/strapi-v4";\nconst API_URL = "https://api.strapi-v4.refine.dev";\n\n// visible-block-start\n// src/pages/posts/list.tsx\n\nimport { List, EditButton, ShowButton, useTable } from "@refinedev/antd";\nimport { Table, Space } from "antd";\n\nconst PostList = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      // highlight-start\n      fields: ["id", "title"],\n      // highlight-end\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={DataProvider(`${API_URL}/api`, axiosInstance)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayoutV2>\n                  <Outlet />\n                </ThemedLayoutV2>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,a.yg)("h3",{id:"relations-population"},"Relations Population"),(0,a.yg)(h,{id:"relations-population",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"By default, relations are not populated when fetching entries."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"populate")," parameter is used to define which fields will be populated."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest/populating-fields.html#population"},"Refer to the Relations Population documentation for detailed information. \u2192")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all the posts and populate the selected relations"',title:'"Get',all:!0,the:!0,posts:!0,and:!0,populate:!0,selected:!0,'relations"':!0},'const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: ["category", "cover"],\n  },\n});\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all posts and populate all their first-level relations"',title:'"Get',all:!0,posts:!0,and:!0,populate:!0,their:!0,"first-level":!0,'relations"':!0},'const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: "*",\n  },\n});\n')),(0,a.yg)("p",null,"It should be noted that Strapi-V4 allows populating relations more than 1 level."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Get all posts and populate one second-level relation and first-level relation"',title:'"Get',all:!0,posts:!0,and:!0,populate:!0,one:!0,"second-level":!0,relation:!0,"first-level":!0,'relation"':!0},'const { tableProps } = useTable<IPost>({\n  meta: {\n    populate: {\n      category: {\n        populate: ["cover"],\n      },\n      cover: {\n        populate: [""],\n      },\n    },\n  },\n});\n')),(0,a.yg)("p",null,"In order to pull the ",(0,a.yg)("inlineCode",{parentName:"p"},"categories")," related to the posts, we can now show the categories in our list by defining the ",(0,a.yg)("inlineCode",{parentName:"p"},"meta")," ",(0,a.yg)("inlineCode",{parentName:"p"},"populate")," parameter."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:5173 previewHeight=450px",live:!0,url:"http://localhost:5173",previewHeight:"450px"},'setInitialRoutes(["/posts"]);\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayoutV2, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { DataProvider } from "@refinedev/strapi-v4";\nconst API_URL = "https://api.strapi-v4.refine.dev";\n\n// visible-block-start\n// src/pages/posts/list.tsx\n\nimport {\n  List,\n  EditButton,\n  ShowButton,\n  // highlight-start\n  useSelect,\n  FilterDropdown,\n  // highlight-end\n  useTable,\n} from "@refinedev/antd";\nimport {\n  Table,\n  // highlight-next-line\n  Select,\n  Space,\n} from "antd";\n\nconst PostList = () => {\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      fields: ["id", "title"],\n      // highlight-next-line\n      populate: ["category"],\n    },\n  });\n\n  // highlight-start\n  const { selectProps } = useSelect({\n    resource: "categories",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n  // highlight-end\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        {/* highlight-start */}\n        <Table.Column\n          dataIndex={["category", "title"]}\n          title="Category"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        {/* highlight-end */}\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={DataProvider(`${API_URL}/api`, axiosInstance)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayoutV2>\n                  <Outlet />\n                </ThemedLayoutV2>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,a.yg)("h4",{id:"relations-population-for-me-request"},"Relations Population for ",(0,a.yg)("inlineCode",{parentName:"h4"},"/me")," request"),(0,a.yg)(h,{id:"relations-population-for-me-request",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you need to the population for the ",(0,a.yg)("inlineCode",{parentName:"p"},"/me")," request you can use it like this in your ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const strapiAuthHelper = AuthHelper(API_URL + "/api");\n\nstrapiAuthHelper.me("token", {\n  meta: {\n    populate: ["role"],\n  },\n});\n'))),(0,a.yg)("h3",{id:"publication-state"},"Publication State"),(0,a.yg)(h,{id:"publication-state",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"The Draft & Publish feature should be enabled on Strapi.")),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#publication-state"},"Refer to the Publication State documentation for detailed information. \u2192")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"live"),": returns only published entries"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"preview"),": returns draft and published entries"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>({\n  meta: {\n    publicationState: "preview",\n  },\n});\n')),(0,a.yg)("p",null,"We can list the posts separately according to the ",(0,a.yg)("inlineCode",{parentName:"p"},"published")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"draft")," information."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:5173 previewHeight=450px",live:!0,url:"http://localhost:5173",previewHeight:"450px"},'setInitialRoutes(["/posts"]);\nimport { Refine } from "@refinedev/core";\nimport { ThemedLayoutV2, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, Layout } from "antd";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { DataProvider } from "@refinedev/strapi-v4";\nconst API_URL = "https://api.strapi-v4.refine.dev";\n\n// visible-block-start\n// src/pages/posts/list.tsx\n\nimport {\n  List,\n  EditButton,\n  ShowButton,\n  useSelect,\n  FilterDropdown,\n  useTable,\n} from "@refinedev/antd";\nimport {\n  Table,\n  Space,\n  Select,\n  // highlight-start\n  Form,\n  Radio,\n  Tag,\n  // highlight-end\n} from "antd";\n\nconst PostList = () => {\n  // highlight-next-line\n  const [publicationState, setPublicationState] = React.useState("live");\n\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      fields: ["id", "title", "publishedAt"],\n      populate: ["category"],\n      publicationState,\n    },\n  });\n\n  const { selectProps } = useSelect({\n    resource: "categories",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  return (\n    <List>\n      {/* highlight-start */}\n      <Form\n        style={{\n          marginBottom: 16,\n          display: "flex",\n          justifyContent: "center",\n          gap: "16px",\n        }}\n        layout="inline"\n        initialValues={{\n          publicationState,\n        }}\n      >\n        <Form.Item label="Publication State" name="publicationState">\n          <Radio.Group onChange={(e) => setPublicationState(e.target.value)}>\n            <Radio.Button value="live">Published</Radio.Button>\n            <Radio.Button value="preview">Draft and Published</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n      {/* highlight-end */}\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          dataIndex={["category", "title"]}\n          title="Category"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        {/* highlight-start */}\n        <Table.Column\n          dataIndex="publishedAt"\n          title="Status"\n          render={(value) => {\n            return (\n              <Tag color={value ? "green" : "blue"}>\n                {value ? "Published" : "Draft"}\n              </Tag>\n            );\n          }}\n        />\n        {/* highlight-end */}\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={DataProvider(`${API_URL}/api`, axiosInstance)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayoutV2>\n                  <Outlet />\n                </ThemedLayoutV2>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,a.yg)("h3",{id:"locale"},"Locale"),(0,a.yg)(h,{id:"locale",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"To fetch content for a locale, make sure it has been already ",(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/user-docs/latest/settings/managing-global-settings.html#configuring-internationalization-locales"},"added to Strapi in the admin panel"))),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#locale"},"Refer to the Locale documentation for detailed information. \u2192")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>({\n  meta: {\n    locale: "de",\n  },\n});\n')),(0,a.yg)("p",null,"With the local parameter feature, we can fetch posts and categories created according to different languages."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\n\nimport {\n  List,\n  useTable,\n  getDefaultSortOrder,\n  FilterDropdown,\n  useSelect,\n  EditButton,\n  DeleteButton,\n} from "@refinedev/antd";\nimport { Table, Select, Space, Form, Radio, Tag } from "antd";\n\nimport { IPost } from "interfaces";\n\nimport { API_URL } from "../../constants";\n\nexport const PostList: React.FC = () => {\n  //highlight-start\n  const [locale, setLocale] = useState("en");\n  //highlight-end\n  const [publicationState, setPublicationState] = useState("live");\n\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      populate: ["category", "cover"],\n      //highlight-start\n      locale,\n      //highlight-end\n      publicationState,\n    },\n  });\n\n  const { selectProps } = useSelect({\n    resource: "categories",\n    optionLabel: "title",\n    optionValue: "id",\n    //highlight-start\n    meta: { locale },\n    //highlight-end\n  });\n\n  return (\n    <List>\n      <Form\n        layout="inline"\n        //highlight-start\n        initialValues={{\n          locale,\n          publicationState,\n        }}\n        //highlight-end\n      >\n        //highlight-start\n        <Form.Item label="Locale" name="locale">\n          <Radio.Group onChange={(e) => setLocale(e.target.value)}>\n            <Radio.Button value="en">English</Radio.Button>\n            <Radio.Button value="de">Deutsch</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        //highlight-end\n        <Form.Item label="Publication State" name="publicationState">\n          <Radio.Group onChange={(e) => setPublicationState(e.target.value)}>\n            <Radio.Button value="live">Published</Radio.Button>\n            <Radio.Button value="preview">Draft and Published</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n      <br />\n      <Table\n        {...tableProps}\n        rowKey="id"\n        pagination={{\n          ...tableProps.pagination,\n          showSizeChanger: true,\n        }}\n      >\n        <Table.Column\n          dataIndex="id"\n          title="ID"\n          defaultSortOrder={getDefaultSortOrder("id", sorter)}\n          sorter={{ multiple: 3 }}\n        />\n        <Table.Column\n          dataIndex="title"\n          title="Title"\n          defaultSortOrder={getDefaultSortOrder("title", sorter)}\n          sorter={{ multiple: 2 }}\n        />\n        <Table.Column\n          dataIndex={["category", "title"]}\n          title="Category"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        {/* highlight-start */}\n        <Table.Column dataIndex="locale" title="Locale" />\n        {/* highlight-end */}\n        <Table.Column\n          dataIndex="publishedAt"\n          title="Status"\n          render={(value) => {\n            return (\n              <Tag color={value ? "green" : "blue"}>\n                {value ? "Published" : "Draft"}\n              </Tag>\n            );\n          }}\n        />\n        <Table.Column<{ id: string }>\n          title="Actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <DeleteButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:5173 previewHeight=450px",live:!0,url:"http://localhost:5173",previewHeight:"450px"},'setInitialRoutes(["/posts"]);\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\nimport { DataProvider } from "@refinedev/strapi-v4";\nconst API_URL = "https://api.strapi-v4.refine.dev";\nimport { ConfigProvider, Layout } from "antd";\nimport { ThemedLayoutV2, RefineThemes } from "@refinedev/antd";\n\n// visible-block-start\n// src/pages/posts/list.tsx\n\nimport {\n  List,\n  EditButton,\n  ShowButton,\n  useSelect,\n  FilterDropdown,\n  useTable,\n} from "@refinedev/antd";\nimport { Table, Space, Select, Form, Radio, Tag } from "antd";\n\nconst PostList = () => {\n  // highlight-next-line\n  const [locale, setLocale] = React.useState("en");\n  const [publicationState, setPublicationState] = React.useState("live");\n  const { tableProps, sorter } = useTable<IPost>({\n    meta: {\n      fields: ["id", "title", "publishedAt", "locale"],\n      populate: ["category"],\n      locale,\n      publicationState,\n    },\n  });\n\n  const { selectProps } = useSelect({\n    resource: "categories",\n    optionLabel: "title",\n    optionValue: "id",\n    // highlight-next-line\n    meta: { locale },\n  });\n\n  return (\n    <List>\n      <Form\n        style={{\n          marginBottom: 16,\n          display: "flex",\n          justifyContent: "center",\n          gap: "16px",\n        }}\n        layout="inline"\n        initialValues={{\n          // highlight-next-line\n          locale,\n          publicationState,\n        }}\n      >\n        {/* highlight-start */}\n        <Form.Item label="Locale" name="locale">\n          <Radio.Group onChange={(e) => setLocale(e.target.value)}>\n            <Radio.Button value="en">English</Radio.Button>\n            <Radio.Button value="de">Deutsch</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n        {/* highlight-end */}\n        <Form.Item label="Publication State" name="publicationState">\n          <Radio.Group onChange={(e) => setPublicationState(e.target.value)}>\n            <Radio.Button value="live">Published</Radio.Button>\n            <Radio.Button value="preview">Draft and Published</Radio.Button>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          dataIndex={["category", "title"]}\n          title="Category"\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...selectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        <Table.Column\n          dataIndex="publishedAt"\n          title="Status"\n          render={(value) => {\n            return (\n              <Tag color={value ? "green" : "blue"}>\n                {value ? "Published" : "Draft"}\n              </Tag>\n            );\n          }}\n        />\n        {/* highlight-start */}\n        <Table.Column dataIndex="locale" title="Locale" />\n        {/* highlight-end */}\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={DataProvider(`${API_URL}/api`, axiosInstance)}\n          resources={[\n            {\n              name: "posts",\n              list: "/posts",\n            },\n          ]}\n        >\n          <Routes>\n            <Route\n              element={\n                <ThemedLayoutV2>\n                  <Outlet />\n                </ThemedLayoutV2>\n              }\n            >\n              <Route path="posts">\n                <Route index element={<PostList />} />\n              </Route>\n            </Route>\n          </Routes>\n        </Refine>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n\nrender(<App />);\n'))),(0,a.yg)("h2",{id:"meta-usages"},(0,a.yg)("inlineCode",{parentName:"h2"},"meta")," Usages"),(0,a.yg)(h,{id:"meta-usages",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"When creating and editing posts you can use these API parameters in ",(0,a.yg)("inlineCode",{parentName:"p"},"meta"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const { formProps, saveButtonProps, query } = useForm<IPost>({\n  meta: { publicationState: "preview" },\n});\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="EditList.tsx"',title:'"EditList.tsx"'},'const { formProps, saveButtonProps, query } = useForm<IPost>({\n  meta: { populate: ["category", "cover"] },\n});\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CreateList.tsx"',title:'"CreateList.tsx"'},'const { selectProps } = useSelect({\n  meta: { locale: "en" },\n});\n'))),(0,a.yg)("h2",{id:"authentication"},"Authentication"),(0,a.yg)(h,{id:"authentication",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Strapi V4 supports authentication and you can use the Refine's ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," to add authentication to your application."),(0,a.yg)("p",null,"First, we need to create own ",(0,a.yg)("inlineCode",{parentName:"p"},"fetch")," instance to use both ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider"),". We will use ",(0,a.yg)("inlineCode",{parentName:"p"},"axios")," to create the ",(0,a.yg)("inlineCode",{parentName:"p"},"fetch")," instance, however you can use any other library for this."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utils/axios.ts"',title:'"src/utils/axios.ts"'},'import axios from "axios";\n\nexport const axiosInstance = axios.create();\n')),(0,a.yg)("p",null,"Then, we need to give the ",(0,a.yg)("inlineCode",{parentName:"p"},"axiosInstance")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider"),". Create a ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"axiosInstance")," and export it."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/dataProvider.ts"',title:'"src/dataProvider.ts"'},'import { DataProvider } from "@refinedev/strapi-v4";\nimport { axiosInstance } from "./utils/axios";\nimport { API_URL } from "./constants";\n\nexport const dataProvider = DataProvider(`${API_URL}/api`, axiosInstance);\n')),(0,a.yg)("p",null,"Now, we are ready to create the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthHelper } from "@refinedev/strapi-v4";\nimport { type AuthProvider } from "@refinedev/core";\nimport { axiosInstance } from "./utils/axios";\nimport { TOKEN_KEY } from "./constants";\n\nconst authProvider: AuthProvider = {\n  login: async ({ email, password }) => {\n    try {\n      const { data, status } = await strapiAuthHelper.login(email, password);\n      if (status === 200) {\n        localStorage.setItem(TOKEN_KEY, data.jwt);\n\n        // set header axios instance\n        axiosInstance.defaults.headers.common[\n          "Authorization"\n        ] = `Bearer ${data.jwt}`;\n\n        return {\n          success: true,\n          redirectTo: "/",\n        };\n      }\n    } catch (error: any) {\n      const errorObj = error?.response?.data?.message?.[0]?.messages?.[0];\n      return {\n        success: false,\n        error: {\n          message: errorObj?.message || "Login failed",\n          name: errorObj?.id || "Invalid email or password",\n        },\n      };\n    }\n\n    return {\n      success: false,\n      error: {\n        message: "Login failed",\n        name: "Invalid email or password",\n      },\n    };\n  },\n  logout: async () => {\n    localStorage.removeItem(TOKEN_KEY);\n    axiosInstance.defaults.headers.common["Authorization"] = undefined;\n    return {\n      success: true,\n      redirectTo: "/login",\n    };\n  },\n  onError: async (error) => {\n    if (error.response?.status === 401) {\n      return {\n        logout: true,\n      };\n    }\n\n    return { error };\n  },\n  check: async () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (token) {\n      axiosInstance.defaults.headers.common[\n        "Authorization"\n      ] = `Bearer ${token}`;\n      return {\n        authenticated: true,\n      };\n    }\n\n    return {\n      authenticated: false,\n      error: {\n        message: "Authentication failed",\n        name: "Token not found",\n      },\n      logout: true,\n      redirectTo: "/login",\n    };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    if (!token) {\n      return null;\n    }\n\n    const { data, status } = await strapiAuthHelper.me(token);\n    if (status === 200) {\n      const { id, username, email } = data;\n      return {\n        id,\n        username,\n        email,\n      };\n    }\n\n    return null;\n  },\n};\n')),(0,a.yg)("p",null,"After creating the ",(0,a.yg)("inlineCode",{parentName:"p"},"authProvider"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider"),", we need to pass it to the ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { authProvider } from "./authProvider";\nimport { dataProvider } from "./dataProvider";\n\nconst App = () => {\n  return <Refine authProvider={authProvider} dataProvider={dataProvider} />;\n};\n')),(0,a.yg)("p",null,"This is the setup for authentication with Refine. Please refer to the ",(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/authentication/"},"Authentication guide")," for more information about how to use authentication with Refine.")),(0,a.yg)("h2",{id:"file-upload"},"File Upload"),(0,a.yg)(h,{id:"file-upload",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Strapi supports file upload. Below are examples of how to upload files to Strapi."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/plugins/upload#upload-files"},"Refer to the Strapi documentation for more information ","\u2192")),(0,a.yg)(o.A,{defaultValue:"antd",values:[{label:"Ant Design Form",value:"antd"},{label:"React Hook Form",value:"react-hook-form"},{label:"Mantine Form",value:"mantine"}],mdxType:"Tabs"},(0,a.yg)(r.A,{value:"antd",mdxType:"TabItem"},(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"getValueProps")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"mediaUploadMapper")," are helper functions for Ant Design Form."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Edit, useForm } from "@refinedev/antd";\nimport { getValueProps, mediaUploadMapper } from "@refinedev/strapi-v4";\nimport { Form, Upload } from "antd";\n\nimport { TOKEN_KEY, API_URL } from "../../constants";\nimport { IPost } from "../interfaces";\n\nexport const PostEdit: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<IPost>({\n    metaData: { populate: ["cover"] },\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form\n        {...formProps}\n        layout="vertical"\n        onFinish={(values) => {\n          formProps.onFinish?.(mediaUploadMapper(values));\n        }}\n      >\n        <Form.Item label="Cover">\n          <Form.Item\n            name="cover"\n            valuePropName="fileList"\n            getValueProps={(data) => getValueProps(data, API_URL)}\n            noStyle\n          >\n            <Upload.Dragger\n              name="files"\n              action={`${API_URL}/api/upload`}\n              headers={{\n                Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`,\n              }}\n              listType="picture"\n              multiple\n            >\n              <p className="ant-upload-text">Drag & drop a file in this area</p>\n            </Upload.Dragger>\n          </Form.Item>\n        </Form.Item>\n      </Form>\n    </Edit>\n  );\n};\n'))),(0,a.yg)(r.A,{value:"react-hook-form",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport axios from "axios";\nimport { Edit } from "@refinedev/mui";\nimport { Box, Input, Stack, Typography } from "@mui/material";\nimport { LoadingButton } from "@mui/lab";\nimport { HttpError } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport FileUploadIcon from "@mui/icons-material/FileUpload";\n\nimport { ICategory, IPost } from "interfaces";\n\nimport { TOKEN_KEY, API_URL } from "../../constants";\n\nexport const PostEdit: React.FC = () => {\n  const [isUploadLoading, setIsUploadLoading] = useState(false);\n  const [imageURL, setImageURL] = useState("");\n\n  const {\n    saveButtonProps,\n    register,\n    formState: { errors },\n    setValue,\n    setError,\n  } = useForm<IPost, HttpError, IPost & { category: ICategory; cover: any }>();\n\n  const onChangeHandler = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    try {\n      setIsUploadLoading(true);\n\n      const formData = new FormData();\n\n      const target = event.target;\n      const file: File = (target.files as FileList)[0];\n\n      formData.append("files", file);\n\n      const res = await axios.post(`${API_URL}/api/upload`, formData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`,\n        },\n      });\n\n      setImageURL(`${API_URL}${res.data[0].url}`);\n      setValue("cover", res.data[0].id, { shouldValidate: true });\n\n      setIsUploadLoading(false);\n    } catch (error) {\n      setError("cover", { message: "Upload failed. Please try again." });\n      setIsUploadLoading(false);\n    }\n  };\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <Stack\n          direction="row"\n          gap={4}\n          flexWrap="wrap"\n          sx={{ marginTop: "16px" }}\n        >\n          <label htmlFor="images-input">\n            <Input\n              id="images-input"\n              type="file"\n              sx={{ display: "none" }}\n              onChange={onChangeHandler}\n            />\n            <input\n              id="file"\n              {...register("cover", {\n                required: "This field is required",\n              })}\n              type="hidden"\n            />\n            <LoadingButton\n              loading={isUploadLoading}\n              loadingPosition="end"\n              endIcon={<FileUploadIcon />}\n              variant="contained"\n              component="span"\n            >\n              Upload\n            </LoadingButton>\n            <br />\n            {errors.cover && (\n              <Typography variant="caption" color="#fa541c">\n                {errors.cover?.message?.toString()}\n              </Typography>\n            )}\n          </label>\n          {imageURL && (\n            <Box\n              component="img"\n              sx={{\n                maxWidth: 250,\n                maxHeight: 250,\n              }}\n              src={imageURL}\n              alt="Post image"\n            />\n          )}\n        </Stack>\n      </Box>\n    </Edit>\n  );\n};\n'))),(0,a.yg)(r.A,{value:"mantine",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\nimport axios from "axios";\nimport { Edit, useForm } from "@refinedev/mantine";\nimport { Text } from "@mantine/core";\nimport { Dropzone, IMAGE_MIME_TYPE, FileWithPath } from "@mantine/dropzone";\n\nconst API_URL = "http://localhost:1337";\nconst TOKEN_KEY = "strapi-jwt-token";\n\nexport const PostEdit: React.FC = () => {\n  const [isUploadLoading, setIsUploadLoading] = useState(false);\n\n  const { saveButtonProps, setFieldValue } = useForm<any>({\n    initialValues: {\n      title: "",\n      cover: "",\n    },\n  });\n\n  const handleOnDrop = async (files: FileWithPath[]) => {\n    try {\n      setIsUploadLoading(true);\n\n      const formData = new FormData();\n\n      const file = files[0];\n\n      formData.append("files", file);\n\n      const res = await axios.post(`${API_URL}/api/upload`, formData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`,\n        },\n      });\n\n      setFieldValue("cover", res.data[0].id);\n\n      setIsUploadLoading(false);\n    } catch (error) {\n      setIsUploadLoading(false);\n    }\n  };\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <form>\n        <Text mt={8} weight={500} size="sm" color="#212529">\n          Cover\n        </Text>\n        <Dropzone\n          accept={IMAGE_MIME_TYPE}\n          onDrop={handleOnDrop}\n          loading={isUploadLoading}\n        >\n          <Text align="center">Drop images here</Text>\n        </Dropzone>\n      </form>\n    </Edit>\n  );\n};\n'))))),(0,a.yg)("h2",{id:"server-side-form-validation"},"Server-side form validation"),(0,a.yg)(h,{id:"server-side-form-validation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Strapi provides a way to add validation rules to your models. So if you send a request to the server with invalid data, Strapi will return errors for each field that has a validation error."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/backend-customization/models#validations"},"Refer to the Strapi documentation for more information ","\u2192"," ")),(0,a.yg)("p",null,"By default, ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/strapi-v4")," transforms the error response from Strapi into a ",(0,a.yg)("a",{parentName:"p",href:"/docs/core/interface-references#httperror"},(0,a.yg)("inlineCode",{parentName:"a"},"HttpError"))," object. This object contains the following properties:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"statusCode")," - The status code of the response."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," - The error message."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"errors")," - An object containing the validation errors for each field.")),(0,a.yg)("p",null,"Thus, ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm")," will automatically set the error message for each field that has a validation error."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"/docs/guides-concepts/forms/#server-side-validation-"},"Refer to the server-side form validation documentation for more information ","\u2192"," "),".")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)(h,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("admonition",{title:"Demo Credentials",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Username: ",(0,a.yg)("a",{parentName:"p",href:"mailto:demo@refine.dev"},"demo@refine.dev")),(0,a.yg)("p",{parentName:"admonition"},"Password: demodemo")),(0,a.yg)(f,{path:"data-provider-strapi-v4",mdxType:"CodeSandboxExample"})))}N.isMDXComponent=!0}}]);