"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[11157],{88123:(e,n,t)=>{t.d(n,{O:()=>c});var a=t(68835),i=t(37953),r=t(86743),o=t(22938),l=t(62201);const d=({horizontalSize:e,onMouseDown:n})=>i.createElement("div",{className:(0,a.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){s(e,n,t[n])}))}return e}function p(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function m(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const c=e=>"nextjs"===(null==e?void 0:e.template)?i.createElement(f,e):i.createElement(g,e),g=e=>{var n,t,s,c,g,h,{startRoute:f,showNavigator:v,showLineNumbers:b,showOpenInCodeSandbox:N,initialPercentage:C=50,dependencies:w,showReadOnly:x,options:k={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,a.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,a.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,a.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,a.A)("h-full","!gap-0"),"sp-console-header-button":(0,a.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,a.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,a.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:F="react-ts",customSetup:T,files:D,previewOnly:R,layout:O,height:P=420,wrapperClassName:E,className:S,showFiles:B=!1,showConsole:U=!1,hidePreview:q=!1}=e,M=m(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[A,I]=i.useState(!1);i.useEffect((()=>{I(!0)}),[]);const{colorMode:L}=(0,l.G)();var j,W;null!=k||(k={}),null!==(j=(g=k).resizablePanels)&&void 0!==j||(g.resizablePanels=!0),null!==(W=(h=k).editorWidthPercentage)&&void 0!==W||(h.editorWidthPercentage=null!=C?C:50);const V={showTabs:k.showTabs,showLineNumbers:k.showLineNumbers,showInlineErrors:k.showInlineErrors,wrapContent:k.wrapContent,closableTabs:k.closableTabs,initMode:k.initMode,extensions:null===(n=k.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=k.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:k.readOnly,showReadOnly:null!=x?x:k.showReadOnly,additionalLanguages:null===(s=k.codeEditor)||void 0===s?void 0:s.additionalLanguages},G={activeFile:k.activeFile,visibleFiles:k.visibleFiles,recompileMode:k.recompileMode,recompileDelay:k.recompileDelay,autorun:k.autorun,autoReload:k.autoReload,bundlerURL:k.bundlerURL,startRoute:k.startRoute,skipEval:k.skipEval,fileResolver:k.fileResolver,initMode:k.initMode,initModeObserverOptions:k.initModeObserverOptions,externalResources:k.externalResources,logLevel:k.logLevel,classes:k.classes},[z,H]=i.useState(!1),{onHandleMouseDown:K,horizontalSize:$}=(({initialSize:e=50})=>{const[n,t]=i.useState(e),a=i.useRef(null),r=e=>{if(!a.current)return;const n=a.current.parentElement;if(!n)return;const{left:i,width:r}=n.getBoundingClientRect(),o=(e.clientX-i)/r*100,l=Math.min(Math.max(o,25),75);t(l),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},o=()=>{var e;const n=null===(e=a.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),a.current=null)};return i.useEffect((()=>(document.body.addEventListener("mousemove",r),document.body.addEventListener("mouseup",o),()=>{document.body.removeEventListener("mousemove",r),document.body.removeEventListener("mouseup",o)})),[]),{horizontalSize:n,onHandleMouseDown:i.useCallback((e=>{a.current=e.target}),[])}})({initialSize:k.editorWidthPercentage}),Q=!R&&!(null==O?void 0:O.includes("col"));var X,Z,_,J,Y;return i.createElement(i.Fragment,null,i.createElement("div",{className:(0,a.A)("pb-6","refine-sandpack-wrapper",E)},i.createElement("div",{className:(0,a.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",S)},i.createElement(o.l5,u({key:`${F}-${L}-${A}`,customSetup:u({dependencies:w},T),files:D,options:p(u({},G),{classes:p(u({},G.classes),{"sp-layout":(0,a.A)(null===(c=G.classes)||void 0===c?void 0:c["sp-layout"],U&&"!rounded-bl-none !rounded-br-none")})}),template:F,theme:"light"===L?p(u({},r.Zw),{colors:p(u({},r.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):p(u({},r.hc),{colors:p(u({},r.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,a.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},M),i.createElement(o.am,{className:(0,a.A)("col"===O&&"!flex-col","col-reverse"===O&&"!flex-col-reverse")},B&&i.createElement(o.Lm,{autoHiddenFiles:!0,style:{height:null!==(X=k.editorHeight)&&void 0!==X?X:P}}),!R&&i.createElement(o.cW,p(u({},V),{showLineNumbers:b,closableTabs:B,initMode:"lazy",style:p(u({height:null!==(Z=k.editorHeight)&&void 0!==Z?Z:P},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:$,flexShrink:$,flexBasis:0}),{overflow:"hidden"})})),Q?i.createElement(d,{onMouseDown:K,horizontalSize:$}):null,q?null:i.createElement(i.Fragment,null,i.createElement(o.G5,{showOpenInCodeSandbox:N,startRoute:f,showNavigator:null!=v?v:k.showNavigator,showRefreshButton:k.showRefreshButton,style:p(u({display:q?"none":"flex"},(null==O?void 0:O.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-$,flexShrink:100-$,flexBasis:0,width:R?"100%":100-$+"%"}),{gap:0,height:null!==(_=k.editorHeight)&&void 0!==_?_:P})},i.createElement("div",{className:"sp-custom-loading"},i.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,a.A)("w-12","h-12","rounded-full")}))))),U?i.createElement(o.X2,{style:p(u({height:200},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:$,flexShrink:$,flexBasis:0}),{overflow:"hidden"})}):null)),i.createElement("div",{className:(0,a.A)(""),style:{height:Number(null!==(J=k.editorHeight)&&void 0!==J?J:P)+2}}),i.createElement("div",{className:(0,a.A)((null==O?void 0:O.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Y=k.editorHeight)&&void 0!==Y?Y:P)+2}}),i.createElement("div",{className:(0,a.A)(U?"block":"hidden","h-[200px]")})),i.createElement(y,{files:D,dependencies:w}))},y=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return i.createElement("section",{className:"hidden max-w-0 max-h-0"},i.createElement("h6",null,"Code Example"),t.map((n=>i.createElement("div",{"data-filename":n,key:n},i.createElement("pre",null,`// file: ${n} \n`,h(e[n]))))))},h=e=>"string"==typeof e?e:"code"in e?e.code:"",f=e=>{const n={hidePreview:!0,showConsole:!1};return i.createElement(g,p(u({},n,e),{template:"react-ts"}))}},64440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>v,default:()=>E,frontMatter:()=>f,metadata:()=>b,toc:()=>C});var a=t(37953),i=t(58860),r=t(88123);function o(){return a.createElement(r.O,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2"},startRoute:"/products/create",files:{"/App.tsx":{code:l,hidden:!0},"/style.css":{code:d,hidden:!0},"/list.tsx":{code:s,hidden:!0},"/show.tsx":{code:u,hidden:!0},"/create.tsx":{code:p,active:!0},"/edit.tsx":{code:m},"/clone.tsx":{code:c}}})}const l='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes, Navigate, Link, Outlet } from "react-router";\nimport routerProvider from "@refinedev/react-router";\n\nimport "./style.css";\n\nimport { List } from "./list.tsx";\nimport { Show } from "./show.tsx";\nimport { Clone } from "./clone.tsx";\nimport { Edit } from "./edit.tsx";\nimport { Create } from "./create.tsx";\n\nconst Layout = ({ children }) => {\n    return (\n        <div>\n            <div style={{ padding: "10px 0", display: "flex", gap: "10px" }}>\n                <Link to="/products/create">Create Product</Link>\n                <Link to="/products/edit/123">Edit Product #123</Link>\n                <Link to="/products/clone/123">Clone Product #123</Link>\n            </div>\n            <div>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                resources={[\n                    {\n                        name: "products",\n                        list: "/products",\n                        show: "/products/:id",\n                        create: "/products/create",\n                        edit: "/products/edit/:id",\n                        clone: "/products/clone/:id",\n                    }\n                ]}\n            >\n                <Routes>\n                    <Route index element={<Navigate to="/products" />} />\n                    <Route path="/products" element={<Layout><Outlet /></Layout>}>\n                        <Route index element={<List />} />\n                        <Route path="edit/:id" element={<Edit />} />\n                        <Route path="clone/:id" element={<Clone />} />\n                        <Route path="create" element={<Create />} />\n                        <Route path=":id" element={<Show />} />\n                    </Route>\n                </Routes>\n            </Refine>\n        </BrowserRouter>\n    );\n}\n'.trim(),d="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\n".trim(),s='\nimport { useList, BaseKey } from "@refinedev/core";\n\nexport const List: React.FC = () => {\n    const { data, isLoading, isError } = useList<IProduct>({\n        resource: "products",\n        filters: [\n            {\n                field: "id",\n                operator: "gte",\n                value: 120,\n            }\n        ]\n    });\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <ul>\n            {data?.data?.map((product) => (\n                <li key={product.id}>\n                    {product.name}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n'.trim(),u='\nimport { useShow, BaseKey } from "@refinedev/core";\n\nexport const Show: React.FC = () => {\n    const { query: { data, isLoading, isError } } = useShow<IProduct>({\n    });\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h1>{data?.data?.name}</h1>\n            <p>Material: {data?.data?.material}</p>\n            <small>ID: {data?.data?.id}</small>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n'.trim(),p='\nimport React from "react";\nimport { useForm, HttpError, BaseKey } from "@refinedev/core";\n\nexport const Create: React.FC = () => {\n    const { onFinish } = useForm<IProduct, HttpError, FormValues>({\n        resource: "products",\n        action: "create",\n        redirect: "show", // redirect to show page after form submission, defaults to "list"\n    });\n\n    const [values, setValues] = React.useState<FormValues>({ name: "", material: "" });\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        onFinish(values);\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label htmlFor="name">Name</label>\n            <input\n                name="name"\n                placeholder="Name"\n                value={values.name}\n                onChange={(e) => setValues({ ...values, name: e.target.value })}\n            />\n            <label htmlFor="material">Material</label>\n            <input\n                name="material"\n                placeholder="Material"\n                value={values.material}\n                onChange={(e) => setValues({ ...values, material: e.target.value })}\n            />\n            <button type="submit">Submit</button>\n        </form>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n\ninterface FormValues {\n    name?: string;\n    material?: string;\n}\n'.trim(),m='\nimport React from "react";\nimport { useForm, HttpError, BaseKey } from "@refinedev/core";\n\nexport const Edit: React.FC = () => {\n    const { query, formLoading, onFinish } = useForm<IProduct, HttpError, FormValues>({\n        resource: "products",\n        action: "edit",\n        id: "123",\n        redirect: "show", // redirect to show page after form submission, defaults to "list"\n    });\n\n    const defaultValues = query?.data?.data;\n\n    const [values, setValues] = React.useState<FormValues>({\n        name: defaultValues?.name || "",\n        material: defaultValues?.material || "",\n    });\n\n    React.useEffect(() => {\n        setValues({\n            name: defaultValues?.name || "",\n            material: defaultValues?.material || "",\n        });\n    }, [defaultValues]);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        onFinish(values);\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label htmlFor="name">Name</label>\n            <input\n                name="name"\n                placeholder="Name"\n                value={values.name}\n                onChange={(e) => setValues({ ...values, name: e.target.value })}\n            />\n            <label htmlFor="material">Material</label>\n            <input\n                name="material"\n                placeholder="Material"\n                value={values.material}\n                onChange={(e) => setValues({ ...values, material: e.target.value })}\n            />\n            <button type="submit">Submit</button>\n        </form>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n\ninterface FormValues {\n    name?: string;\n    material?: string;\n}\n'.trim(),c='\nimport React from "react";\nimport { useForm, HttpError, BaseKey } from "@refinedev/core";\n\nexport const Clone: React.FC = () => {\n    const { query, formLoading, onFinish } = useForm<IProduct, HttpError, FormValues>({\n        resource: "products",\n        action: "clone",\n        id: "123",\n        redirect: "show", // redirect to show page after form submission, defaults to "list"\n    });\n\n    const defaultValues = query?.data?.data;\n\n    const [values, setValues] = React.useState<FormValues>({\n        name: defaultValues?.name || "",\n        material: defaultValues?.material || "",\n    });\n\n    React.useEffect(() => {\n        setValues({\n            name: defaultValues?.name || "",\n            material: defaultValues?.material || "",\n        });\n    }, [defaultValues]);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        onFinish(values);\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label htmlFor="name">Name</label>\n            <input\n                name="name"\n                placeholder="Name"\n                value={values.name}\n                onChange={(e) => setValues({ ...values, name: e.target.value })}\n            />\n            <label htmlFor="material">Material</label>\n            <input\n                name="material"\n                placeholder="Material"\n                value={values.material}\n                onChange={(e) => setValues({ ...values, material: e.target.value })}\n            />\n            <button type="submit">Submit</button>\n        </form>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n}\n\ninterface FormValues {\n    name?: string;\n    material?: string;\n}\n'.trim();function g(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function y(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function h(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const f={title:"useForm",source:"packages/core/src/hooks/form/useForm.ts"},v=void 0,b={unversionedId:"data/hooks/use-form/index",id:"data/hooks/use-form/index",title:"useForm",description:"A hook that orchestrates Refine's data hooks to create, edit, and clone data. It also provides a set of features to make it easier for users to implement their real world needs and handle edge cases such as redirects, invalidation, auto-save and more.",source:"@site/docs/data/hooks/use-form/index.md",sourceDirName:"data/hooks/use-form",slug:"/data/hooks/use-form/",permalink:"/docs/data/hooks/use-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/data/hooks/use-form/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1753447550,formattedLastUpdatedAt:"Jul 25, 2025",frontMatter:{title:"useForm",source:"packages/core/src/hooks/form/useForm.ts"},sidebar:"mainSidebar",previous:{title:"useTable",permalink:"/docs/data/hooks/use-table/"},next:{title:"useSelect",permalink:"/docs/data/hooks/use-select/"}},N={},C=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"action <RouterBadge />",id:"action-",level:3},{value:"Create",id:"create",level:4},{value:"Edit",id:"edit",level:4},{value:"Clone",id:"clone",level:4},{value:'resource <GuideBadge id="guides-concepts/general-concepts" /> <RouterBadge />',id:"resource--",level:3},{value:"id <RouterBadge />",id:"id-",level:3},{value:'redirect <GuideBadge id="guides-concepts/forms#redirection" /><GlobalConfigBadge />',id:"redirect-",level:3},{value:"onMutationSuccess",id:"onmutationsuccess",level:3},{value:"onMutationError",id:"onmutationerror",level:3},{value:'invalidates <GuideBadge id="guides-concepts/forms#invalidation" />',id:"invalidates-",level:3},{value:'dataProviderName <GlobalConfigBadge description="This property can also be included in the `resource` definition." />',id:"dataprovidername-",level:3},{value:'mutationMode <GuideBadge id="guides-concepts/forms#mutation-modes" /> <GlobalConfigBadge />',id:"mutationmode--",level:3},{value:'successNotification <GuideBadge id="guides-concepts/forms#notifications" />',id:"successnotification-",level:3},{value:'errorNotification <GuideBadge id="guides-concepts/forms#notifications" />',id:"errornotification-",level:3},{value:'meta <GuideBadge id="guides-concepts/general-concepts#meta" description="To learn more about the `meta` and how it works with the data providers, refer to General Concepts guide" />',id:"meta-",level:3},{value:"queryMeta",id:"querymeta",level:3},{value:"mutationMeta",id:"mutationmeta",level:3},{value:"queryOptions",id:"queryoptions",level:3},{value:"createMutationOptions",id:"createmutationoptions",level:3},{value:"updateMutationOptions",id:"updatemutationoptions",level:3},{value:'liveMode <GuideBadge id="guides-concepts/realtime" />',id:"livemode-",level:3},{value:'onLiveEvent <GuideBadge id="guides-concepts/realtime" />',id:"onliveevent-",level:3},{value:"liveParams",id:"liveparams",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:'autoSave <GuideBadge id="guides-concepts/forms#auto-save" />',id:"autosave-",level:3},{value:'optimisticUpdateMap <GuideBadge id="guides-concepts/forms#optimistic-updates" />',id:"optimisticupdatemap-",level:3},{value:"Return Values",id:"return-values",level:2},{value:"onFinish",id:"onfinish",level:3},{value:"onFinishAutoSave",id:"onfinishautosave",level:3},{value:"formLoading",id:"formloading",level:3},{value:"mutation",id:"mutation",level:3},{value:"query",id:"query",level:3},{value:"setId",id:"setid",level:3},{value:'redirect <GuideBadge id="guides-concepts/forms#redirection" />',id:"redirect--1",level:3},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"<del>mutationResult</del> <PropTag deprecated />",id:"mutationresult-",level:3},{value:"<del>queryResult</del> <PropTag deprecated />",id:"queryresult-",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3}],w=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.yg)("div",n)},x=w("DocThumbsUpDownFeedbackWidget"),k=w("RouterBadge"),F=w("GuideBadge"),T=w("GlobalConfigBadge"),D=w("PropTag"),R=w("PropsTable"),O={toc:C},P="wrapper";function E(e){var{components:n}=e,t=h(e,["components"]);return(0,i.yg)(P,y(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){g(e,n,t[n])}))}return e}({},O,t),{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"A hook that orchestrates Refine's data hooks to create, edit, and clone data. It also provides a set of features to make it easier for users to implement their real world needs and handle edge cases such as redirects, invalidation, auto-save and more."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/core";\n\nconst { onFinish, ... } = useForm({ ... });\n')),(0,i.yg)("admonition",{title:"Extended Versions",type:"simple"},(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("inlineCode",{parentName:"p"},"@refinedev/antd"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"@refinedev/mantine")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," packages provide their own extended versions of ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," hook with full support for their respective form implementations including validation, error handling, form values, and more."),(0,i.yg)("p",{parentName:"admonition"},"Refer to their respective documentation for more information and check out the ",(0,i.yg)("a",{parentName:"p",href:"/docs/guides-concepts/forms/"},"Forms in Refine")," guide for detailed information on how to handle forms in Refine."),(0,i.yg)("ul",{parentName:"admonition"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,i.yg)("inlineCode",{parentName:"a"},"@refinedev/antd"),"'s ",(0,i.yg)("inlineCode",{parentName:"a"},"useForm"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/ui-integrations/mantine/hooks/use-form"},(0,i.yg)("inlineCode",{parentName:"a"},"@refinedev/mantine"),"'s ",(0,i.yg)("inlineCode",{parentName:"a"},"useForm"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/docs/packages/list-of-packages"},(0,i.yg)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"),"'s ",(0,i.yg)("inlineCode",{parentName:"a"},"useForm"))))),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)(x,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Basic usage of the ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," hook demonstrates how to use the hook in all three modes, ",(0,i.yg)("inlineCode",{parentName:"p"},"create"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"edit"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone"),"."),(0,i.yg)(o,{mdxType:"BasicUsage"})),(0,i.yg)("h2",{id:"parameters"},"Parameters"),(0,i.yg)("h3",{id:"action-"},"action ",(0,i.yg)(k,{mdxType:"RouterBadge"})),(0,i.yg)(x,{id:"action-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"The action that will be performed with the submission of the form. Can be ",(0,i.yg)("inlineCode",{parentName:"p"},"create"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"edit"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"clone"),". If not specified, it will be determined by the current route or fallback to ",(0,i.yg)("inlineCode",{parentName:"p"},"create"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ action: "create" });\n'))),(0,i.yg)("h4",{id:"create"},"Create"),(0,i.yg)(x,{id:"create",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"create")," action, ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," will follow the flow below:"),(0,i.yg)("p",null,"After form is submitted:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function with the form values."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/hooks/use-create"},(0,i.yg)("inlineCode",{parentName:"a"},"useCreate"))," with the form values."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useCreate")," calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/data-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"dataProvider")),"'s ",(0,i.yg)("inlineCode",{parentName:"li"},"create")," function and returns the response."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function with the response, depending on the response status."),(0,i.yg)("li",{parentName:"ol"},"After a successful mutation, ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will invalidate the queries specified in ",(0,i.yg)("inlineCode",{parentName:"li"},"invalidates")," prop."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function then calls the ",(0,i.yg)("inlineCode",{parentName:"li"},"open")," function of the ",(0,i.yg)("a",{parentName:"li",href:"/docs/notification/notification-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"notificationProvider"))," to inform the user."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," redirects to the ",(0,i.yg)("inlineCode",{parentName:"li"},"list")," page."))),(0,i.yg)("h4",{id:"edit"},"Edit"),(0,i.yg)(x,{id:"edit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," action, ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," will follow the flow below:"),(0,i.yg)("p",null,"When ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," is mounted, it calls ",(0,i.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-one"},(0,i.yg)("inlineCode",{parentName:"a"},"useOne"))," hook to retrieve the record to be edited. The ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," for the record is obtained from the props or the current route."),(0,i.yg)("p",null,"After form is submitted:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function with the form values."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/hooks/use-update"},(0,i.yg)("inlineCode",{parentName:"a"},"useUpdate"))," with the form values."),(0,i.yg)("li",{parentName:"ol"},"If the mutation mode is ",(0,i.yg)("inlineCode",{parentName:"li"},"optimistic")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"undoable"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will update the query cache with the form values immediately after the mutation is triggered."),(0,i.yg)("li",{parentName:"ol"},"If the mutation mode is ",(0,i.yg)("inlineCode",{parentName:"li"},"undoable"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will display a notification with a countdown to undo the mutation."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useUpdate")," calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/data-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"dataProvider")),"'s ",(0,i.yg)("inlineCode",{parentName:"li"},"update")," function and returns the response."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function with the response, depending on the response status."),(0,i.yg)("li",{parentName:"ol"},"If the mutation fails, ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will revert the query cache to the previous values made in step 3."),(0,i.yg)("li",{parentName:"ol"},"After a successful mutation, ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will invalidate the queries specified in ",(0,i.yg)("inlineCode",{parentName:"li"},"invalidates")," prop."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function then calls the ",(0,i.yg)("inlineCode",{parentName:"li"},"open")," function of the ",(0,i.yg)("a",{parentName:"li",href:"/docs/notification/notification-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"notificationProvider"))," to inform the user."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," redirects to the ",(0,i.yg)("inlineCode",{parentName:"li"},"list")," page."))),(0,i.yg)("h4",{id:"clone"},"Clone"),(0,i.yg)(x,{id:"clone",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"When ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," is mounted, it calls ",(0,i.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-one"},(0,i.yg)("inlineCode",{parentName:"a"},"useOne"))," hook to retrieve the record to be cloned. The ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," for the record is obtained from the props or the current route."),(0,i.yg)("p",null,"After form is submitted:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function with the form values."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onFinish")," function calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/hooks/use-create"},(0,i.yg)("inlineCode",{parentName:"a"},"useCreate"))," with the form values."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useUpdate")," calls ",(0,i.yg)("a",{parentName:"li",href:"/docs/data/data-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"dataProvider")),"'s ",(0,i.yg)("inlineCode",{parentName:"li"},"update")," function and returns the response."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," calls ",(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function with the response, depending on the response status."),(0,i.yg)("li",{parentName:"ol"},"After a successful mutation, ",(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," will invalidate the queries specified in ",(0,i.yg)("inlineCode",{parentName:"li"},"invalidates")," prop."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"onSuccess")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"onError")," function then calls the ",(0,i.yg)("inlineCode",{parentName:"li"},"open")," function of the ",(0,i.yg)("a",{parentName:"li",href:"/docs/notification/notification-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"notificationProvider"))," to inform the user."),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("inlineCode",{parentName:"li"},"useForm")," redirects to the ",(0,i.yg)("inlineCode",{parentName:"li"},"list")," page."))),(0,i.yg)("h3",{id:"resource--"},"resource ",(0,i.yg)(F,{id:"guides-concepts/general-concepts",mdxType:"GuideBadge"})," ",(0,i.yg)(k,{mdxType:"RouterBadge"})),(0,i.yg)(x,{id:"resource--",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"The resource name or identifier that will be used for the form. If not specified, it will be determined by the current route."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ resource: "products" });\n'))),(0,i.yg)("h3",{id:"id-"},"id ",(0,i.yg)(k,{mdxType:"RouterBadge"})),(0,i.yg)(x,{id:"id-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"The ID of the record that will be used for the action. If not specified, it will be determined by the current route. Required for ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n  id: 123,\n});\n")),(0,i.yg)("admonition",{title:"Using with explicit resource",type:"simple"},(0,i.yg)("p",{parentName:"admonition"},"If explicit ",(0,i.yg)("inlineCode",{parentName:"p"},"resource")," is provided, ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," must be provided as well to avoid any unexpected API calls."))),(0,i.yg)("h3",{id:"redirect-"},"redirect ",(0,i.yg)(F,{id:"guides-concepts/forms#redirection",mdxType:"GuideBadge"}),(0,i.yg)(T,{mdxType:"GlobalConfigBadge"})),(0,i.yg)(x,{id:"redirect-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"The redirection behavior after the form submission. It can be ",(0,i.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"edit"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"show"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"create"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),". By default it will be ",(0,i.yg)("inlineCode",{parentName:"p"},"list")," or whatever is defined in the Refine's global options."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ redirect: "show" });\n')),(0,i.yg)("admonition",{title:"Router Integration",type:"simple"},(0,i.yg)("p",{parentName:"admonition"},"This will only work if you have ",(0,i.yg)("inlineCode",{parentName:"p"},"routerProvider")," defined in your ",(0,i.yg)("inlineCode",{parentName:"p"},"<Refine>")," component along with the proper ",(0,i.yg)("inlineCode",{parentName:"p"},"resource")," definition with routes and actions."))),(0,i.yg)("h3",{id:"onmutationsuccess"},"onMutationSuccess"),(0,i.yg)(x,{id:"onmutationsuccess",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Callback function to be called after a successful mutation. It will be called with the mutation result and variables."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n    onMutationSuccess: (\n        data, // Mutation result, depending on the action its the response of `useCreate` or `useUpdate`\n        variables, // Variables/form values that were used for the mutation\n        context, // React Query's context for the mutation\n        isAutoSave, // Boolean value indicating if the mutation was triggered by auto-save or not\n    ) => { ... }\n});\n"))),(0,i.yg)("h3",{id:"onmutationerror"},"onMutationError"),(0,i.yg)(x,{id:"onmutationerror",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Callback function to be called after a failed mutation. It will be called with the mutation error and variables."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n    onMutationError: (\n        error, // Mutation error, depending on the action its the error response of `useCreate` or `useUpdate`\n        variables, // Variables/form values that were used for the mutation\n        context, // React Query's context for the mutation\n        isAutoSave, // Boolean value indicating if the mutation was triggered by auto-save or not\n    ) => { ... }\n});\n"))),(0,i.yg)("h3",{id:"invalidates-"},"invalidates ",(0,i.yg)(F,{id:"guides-concepts/forms#invalidation",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"invalidates-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Determines the scope of the invalidation after a successful mutation. Can be array of ",(0,i.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"many"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"detail"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"resourceAll"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"all")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),". By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"create")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions will invalidate ",(0,i.yg)("inlineCode",{parentName:"p"},"list")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"many"),". ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," action will invalidate ",(0,i.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"detail")," queries."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ invalidates: ["list", "many"] });\n'))),(0,i.yg)("h3",{id:"dataprovidername-"},"dataProviderName ",(0,i.yg)(T,{description:"This property can also be included in the `resource` definition.",mdxType:"GlobalConfigBadge"})),(0,i.yg)(x,{id:"dataprovidername-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Name of the data provider to be used in API interactions. Useful when there are more than one data providers defined."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ dataProviderName: "store" });\n'))),(0,i.yg)("h3",{id:"mutationmode--"},"mutationMode ",(0,i.yg)(F,{id:"guides-concepts/forms#mutation-modes",mdxType:"GuideBadge"})," ",(0,i.yg)(T,{mdxType:"GlobalConfigBadge"})),(0,i.yg)(x,{id:"mutationmode--",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Behavior of the mutation, can either be ",(0,i.yg)("inlineCode",{parentName:"p"},"pessimistic"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"optimistic")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"undoable"),". By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"pessimistic")," or whatever is defined in the Refine's global options."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ mutationMode: "optimistic" });\n'))),(0,i.yg)("h3",{id:"successnotification-"},"successNotification ",(0,i.yg)(F,{id:"guides-concepts/forms#notifications",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"successnotification-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,i.yg)("p",null,"Customization options for the notification that will be shown after a successful mutation."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  // Can also be a static object if you don\'t need to access the data, values or resource.\n  // By setting it to `false`, you can disable the notification.\n  successNotification: (data, values, resource) => {\n    return {\n      message: `Successfully created ${data.title}`,\n      description: "good job!",\n      type: "success",\n    };\n  },\n});\n'))),(0,i.yg)("h3",{id:"errornotification-"},"errorNotification ",(0,i.yg)(F,{id:"guides-concepts/forms#notifications",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"errornotification-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,i.yg)("p",null,"Customization options for the notification that will be shown after a failed mutation."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  // Can also be a static object if you don\'t need to access the data, values or resource.\n  // By setting it to `false`, you can disable the notification.\n  errorNotification: (error, values, resource) => {\n    return {\n      message: `Failed to create ${values.title}`,\n      description: error.message,\n      type: "error",\n    };\n  },\n});\n'))),(0,i.yg)("h3",{id:"meta-"},"meta ",(0,i.yg)(F,{id:"guides-concepts/general-concepts#meta",description:"To learn more about the `meta` and how it works with the data providers, refer to General Concepts guide",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"meta-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Additional information that will be passed to the data provider. Can be used to handle special cases in the data provider, generating GraphQL queries or handling additional parameters in the redirection routes."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ meta: { headers: { "x-greetings": "hello world" } } });\n'))),(0,i.yg)("h3",{id:"querymeta"},"queryMeta"),(0,i.yg)(x,{id:"querymeta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Meta data values to be used in the internal ",(0,i.yg)("inlineCode",{parentName:"p"},"useOne")," call for the ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions. These values will take precedence over the ",(0,i.yg)("inlineCode",{parentName:"p"},"meta")," values."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ queryMeta: { headers: { "x-greetings": "hello mars" } } });\n'))),(0,i.yg)("h3",{id:"mutationmeta"},"mutationMeta"),(0,i.yg)(x,{id:"mutationmeta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Meta data values to be used in the internal ",(0,i.yg)("inlineCode",{parentName:"p"},"useCreate")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"useUpdate")," calls for form submissions. These values will take precedence over the ",(0,i.yg)("inlineCode",{parentName:"p"},"meta")," values."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ mutationMeta: { headers: { "x-greetings": "hello pluto" } } });\n'))),(0,i.yg)("h3",{id:"queryoptions"},"queryOptions"),(0,i.yg)(x,{id:"queryoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Options to be used in the internal ",(0,i.yg)("inlineCode",{parentName:"p"},"useOne")," call for the ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n  queryOptions: { retry: 3 },\n});\n"))),(0,i.yg)("h3",{id:"createmutationoptions"},"createMutationOptions"),(0,i.yg)(x,{id:"createmutationoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Options to be used in the internal ",(0,i.yg)("inlineCode",{parentName:"p"},"useCreate")," call for the ",(0,i.yg)("inlineCode",{parentName:"p"},"create")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n  createMutationOptions: { retry: 3 },\n});\n"))),(0,i.yg)("h3",{id:"updatemutationoptions"},"updateMutationOptions"),(0,i.yg)(x,{id:"updatemutationoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Options to be used in the internal ",(0,i.yg)("inlineCode",{parentName:"p"},"useUpdate")," call for the ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," action."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n  updateMutationOptions: { retry: 3 },\n});\n"))),(0,i.yg)("h3",{id:"livemode-"},"liveMode ",(0,i.yg)(F,{id:"guides-concepts/realtime",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"livemode-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,i.yg)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,i.yg)("p",null,"Behavior of how to handle received real-time updates, can be ",(0,i.yg)("inlineCode",{parentName:"p"},"auto"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"manual")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"off"),". By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"auto")," or whatever is defined in the Refine's global options."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({ liveMode: "auto" });\n'))),(0,i.yg)("h3",{id:"onliveevent-"},"onLiveEvent ",(0,i.yg)(F,{id:"guides-concepts/realtime",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"onliveevent-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A callback function that will be called when a related real-time event is received."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n"))),(0,i.yg)("h3",{id:"liveparams"},"liveParams"),(0,i.yg)(x,{id:"liveparams",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Additional parameters to be used in the ",(0,i.yg)("inlineCode",{parentName:"p"},"liveProvider"),"'s ",(0,i.yg)("inlineCode",{parentName:"p"},"subscribe")," method."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'useForm({\n  liveParams: {\n    foo: "bar",\n  },\n});\n'))),(0,i.yg)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,i.yg)(x,{id:"overtimeoptions",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A set of options to be used for the overtime loading state. Useful when the API is slow to respond and a visual feedback is needed to indicate that the request is still in progress. ",(0,i.yg)("inlineCode",{parentName:"p"},"overtimeOptions")," accept ",(0,i.yg)("inlineCode",{parentName:"p"},"interval")," as ",(0,i.yg)("inlineCode",{parentName:"p"},"number")," to determine the ticking intervals and ",(0,i.yg)("inlineCode",{parentName:"p"},"onInterval")," to be called on each tick. ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," also returns ",(0,i.yg)("inlineCode",{parentName:"p"},"overtime")," object with ",(0,i.yg)("inlineCode",{parentName:"p"},"elapsedTime")," value that can be used for the feedback."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useForm({\n  interval: 1000,\n  onInterval(elapsedTime) {\n    console.log(elapsedTime);\n  },\n});\n"))),(0,i.yg)("h3",{id:"autosave-"},"autoSave ",(0,i.yg)(F,{id:"guides-concepts/forms#auto-save",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"autosave-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Auto-save behavior of the form. Can have ",(0,i.yg)("inlineCode",{parentName:"p"},"enabled")," to toggle auto-save, ",(0,i.yg)("inlineCode",{parentName:"p"},"debounce")," to set the debounce interval for saving and ",(0,i.yg)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," to invalidate the queries specified in ",(0,i.yg)("inlineCode",{parentName:"p"},"invalidates")," prop on unmount. This feature is only available for the ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," action. By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"autoSave")," is disabled."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { onFinishAutoSave } = useForm({\n  autoSave: {\n    enabled: true, // default is false\n    debounce: 2000, // debounce interval for auto-save, default is 1000\n    invalidateOnUnmount: true, // whether to invalidate the queries on unmount, default is false\n  },\n});\n")),(0,i.yg)("admonition",{title:"Auto-save Implementation",type:"simple"},(0,i.yg)("p",{parentName:"admonition"},"Core implementation of the ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," hook doesn't provide out of the box auto-save functionality since it doesn't have access to the form values but it provides the necessary props and callbacks to implement it."),(0,i.yg)("p",{parentName:"admonition"},"Extended versions of ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," (such as the one in ",(0,i.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form"),") provides auto-save functionality out of the box."))),(0,i.yg)("h3",{id:"optimisticupdatemap-"},"optimisticUpdateMap ",(0,i.yg)(F,{id:"guides-concepts/forms#optimistic-updates",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"optimisticupdatemap-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"optimistic")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"undoable")," mutation modes, ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," will automatically update the query cache with the form values immediately after the mutation is triggered. This behavior can be customized for each query set (",(0,i.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"many")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"detail")," queries) using ",(0,i.yg)("inlineCode",{parentName:"p"},"optimisticUpdateMap"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"useForm({\n    optimisticUpdateMap: {\n        // A boolean value can also be used to enable/disable the optimistic updates for the query set.\n        list: (\n            previous, // Previous query data\n            variables, // Variables used in the query\n            id, // Record id\n        ) => { ... },\n        many: (\n            previous, // Previous query data\n            variables, // Variables used in the query\n            id, // Record id\n        ) => { ... },\n        detail: (\n            previous, // Previous query data\n            variables, // Variables used in the query\n        ) => { ... },\n    }\n})\n"))),(0,i.yg)("h2",{id:"return-values"},"Return Values"),(0,i.yg)("h3",{id:"onfinish"},"onFinish"),(0,i.yg)(x,{id:"onfinish",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A function to call to trigger the mutation. Depending on the action, it will trigger the mutation of ",(0,i.yg)("inlineCode",{parentName:"p"},"useCreate")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"useUpdate")," hooks."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { onFinish } = useForm({ ... });\n\nreturn (\n    <form onSubmit={() => onFinish(values)}>\n        { /* ... */ }\n    </form>\n);\n"))),(0,i.yg)("h3",{id:"onfinishautosave"},"onFinishAutoSave"),(0,i.yg)(x,{id:"onfinishautosave",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A function to call to trigger the auto-save mutation. It will trigger the mutation of ",(0,i.yg)("inlineCode",{parentName:"p"},"useUpdate")," hook. This will not trigger the ",(0,i.yg)("inlineCode",{parentName:"p"},"formLoading")," state."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { onFinishAutoSave } = useForm({ ... });\n\nReact.useEffect(() => {\n    // trigger auto-save on form values change, it will be debounced by the `autoSave.debounce` value\n    onFinishAutoSave(values);\n}, [values]);\n"))),(0,i.yg)("h3",{id:"formloading"},"formLoading"),(0,i.yg)(x,{id:"formloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A boolean value indicating the loading state of the form. It will reflect the loading status of the mutation or the query in ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { formLoading } = useForm({ ... });\n"))),(0,i.yg)("h3",{id:"mutation"},"mutation"),(0,i.yg)(x,{id:"mutation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"Result of the mutation triggered by calling ",(0,i.yg)("inlineCode",{parentName:"p"},"onFinish"),". Depending on the action, it will be the result of ",(0,i.yg)("inlineCode",{parentName:"p"},"useCreate")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"useUpdate")," hooks."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { mutation: { data, error, isLoading } } = useForm({ ... });\n"))),(0,i.yg)("h3",{id:"query"},"query"),(0,i.yg)(x,{id:"query",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"clone")," actions, result of the query of a record. It will be the result of ",(0,i.yg)("inlineCode",{parentName:"p"},"useOne")," hook."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { query: { data, error, isLoading } } = useForm({ ... });\n"))),(0,i.yg)("h3",{id:"setid"},"setId"),(0,i.yg)(x,{id:"setid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A setter function to set the ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," value. Useful when you want to change the ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," value after the form is mounted."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { setId } = useForm({ ... });\n\nconst onItemSelect = (id) => {\n    setId(id);\n};\n"))),(0,i.yg)("h3",{id:"redirect--1"},"redirect ",(0,i.yg)(F,{id:"guides-concepts/forms#redirection",mdxType:"GuideBadge"})),(0,i.yg)(x,{id:"redirect--1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"A function to handle custom redirections, it accepts ",(0,i.yg)("inlineCode",{parentName:"p"},"redirect")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," parameters. ",(0,i.yg)("inlineCode",{parentName:"p"},"redirect")," can be ",(0,i.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"edit"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"show"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"create")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),". ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," is the record id if needed in the specified ",(0,i.yg)("inlineCode",{parentName:"p"},"redirect")," route."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'const { redirect } = useForm({ ... });\n\nredirect("show", 123);\n'))),(0,i.yg)("h3",{id:"overtime"},"overtime"),(0,i.yg)(x,{id:"overtime",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"An object with ",(0,i.yg)("inlineCode",{parentName:"p"},"elapsedTime")," value that can be used for the overtime loading feedback."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { overtime: { elapsedTime } } = useForm({ ... });\n"))),(0,i.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,i.yg)(x,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"An object with ",(0,i.yg)("inlineCode",{parentName:"p"},"data"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"error")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," values that can be used for the auto-save feedback. ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," will be the result of the auto-save mutation, ",(0,i.yg)("inlineCode",{parentName:"p"},"error")," will be the error of the auto-save mutation and ",(0,i.yg)("inlineCode",{parentName:"p"},"status")," will be the status of the auto-save mutation."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"const { autoSaveProps: { data, error, status } } = useForm({ ... });\n"))),(0,i.yg)("h3",{id:"mutationresult-"},(0,i.yg)("del",{parentName:"h3"},"mutationResult")," ",(0,i.yg)(D,{deprecated:!0,mdxType:"PropTag"})),(0,i.yg)(x,{id:"mutationresult-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"This prop is deprecated and will be removed in the future versions. Use ",(0,i.yg)("a",{parentName:"p",href:"#mutation"},(0,i.yg)("inlineCode",{parentName:"a"},"mutation"))," instead.")),(0,i.yg)("h3",{id:"queryresult-"},(0,i.yg)("del",{parentName:"h3"},"queryResult")," ",(0,i.yg)(D,{deprecated:!0,mdxType:"PropTag"})),(0,i.yg)(x,{id:"queryresult-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("p",null,"This prop is deprecated and will be removed in the future versions. Use ",(0,i.yg)("a",{parentName:"p",href:"#query"},(0,i.yg)("inlineCode",{parentName:"a"},"query"))," instead.")),(0,i.yg)("h2",{id:"api-reference"},"API Reference"),(0,i.yg)("h3",{id:"properties"},"Properties"),(0,i.yg)(x,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)(R,{module:"@refinedev/core/useForm",mdxType:"PropsTable"}),(0,i.yg)("admonition",{title:"Global Configuration",type:"simple"},(0,i.yg)("p",{parentName:"admonition"},"These props have default values in ",(0,i.yg)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,i.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,i.yg)("inlineCode",{parentName:"a"},"<Refine />"))," component. ",(0,i.yg)("inlineCode",{parentName:"p"},"useForm")," will use what is passed to ",(0,i.yg)("inlineCode",{parentName:"p"},"<Refine />")," as default but a local value will override it."))),(0,i.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,i.yg)(x,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Property"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"),(0,i.yg)("th",{parentName:"tr",align:null},"Type"),(0,i.yg)("th",{parentName:"tr",align:null},"Default"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,i.yg)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ","[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]"),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]"),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TError"),(0,i.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ","[",(0,i.yg)("inlineCode",{parentName:"td"},"HttpError"),"][httperror]"),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"HttpError"),"][httperror]"),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"HttpError"),"][httperror]")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,i.yg)("td",{parentName:"tr",align:null},"Values for params."),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"{}")),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TData"),(0,i.yg)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,i.yg)("inlineCode",{parentName:"td"},"select")," function. Extends ","[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]",". If not specified, the value of ",(0,i.yg)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TResponse"),(0,i.yg)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ","[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]",". If not specified, the value of ",(0,i.yg)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"BaseRecord"),"][baserecord]"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"TData"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TResponseError"),(0,i.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ","[",(0,i.yg)("inlineCode",{parentName:"td"},"HttpError"),"][httperror]",". If not specified, the value of ",(0,i.yg)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,i.yg)("td",{parentName:"tr",align:null},"[",(0,i.yg)("inlineCode",{parentName:"td"},"HttpError"),"][httperror]"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"TError")))))),(0,i.yg)("h3",{id:"return-values-1"},"Return values"),(0,i.yg)(x,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Property"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"),(0,i.yg)("th",{parentName:"tr",align:null},"Type"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"onFinish"),(0,i.yg)("td",{parentName:"tr",align:null},"Triggers the mutation"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"(values: TVariables) => Promise<CreateResponse<TData>")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"UpdateResponse<TData>")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"void"),">")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"query"),(0,i.yg)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,i.yg)("inlineCode",{parentName:"a"},"QueryObserverResult<TData, TError>")))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"mutation"),(0,i.yg)("td",{parentName:"tr",align:null},"Result of the mutation triggered by calling ",(0,i.yg)("inlineCode",{parentName:"td"},"onFinish")),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"https://tanstack.com/query/v4/docs/framework/react/reference/useMutation"},(0,i.yg)("inlineCode",{parentName:"a"},"UseMutationResult<T>")))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"formLoading"),(0,i.yg)("td",{parentName:"tr",align:null},"Loading state of form request"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"id"),(0,i.yg)("td",{parentName:"tr",align:null},"Record id for ",(0,i.yg)("inlineCode",{parentName:"td"},"clone")," and ",(0,i.yg)("inlineCode",{parentName:"td"},"create")," action"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,i.yg)("inlineCode",{parentName:"a"},"BaseKey")))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"setId"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"id")," setter"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,i.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"undefined>>"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"redirect"),(0,i.yg)("td",{parentName:"tr",align:null},"Redirect function for custom redirections"),(0,i.yg)("td",{parentName:"tr",align:null},"(redirect: ",(0,i.yg)("inlineCode",{parentName:"td"},'"list"'),"|",(0,i.yg)("inlineCode",{parentName:"td"},'"edit"'),"|",(0,i.yg)("inlineCode",{parentName:"td"},'"show"'),"|",(0,i.yg)("inlineCode",{parentName:"td"},'"create"'),"|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"false")," ,idFromFunction?: ",(0,i.yg)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,i.yg)("inlineCode",{parentName:"a"},"BaseKey")),"|",(0,i.yg)("inlineCode",{parentName:"td"},"undefined"),") => ",(0,i.yg)("inlineCode",{parentName:"td"},"data"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"overtime"),(0,i.yg)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,i.yg)("td",{parentName:"tr",align:null},"Auto save props"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,i.yg)("inlineCode",{parentName:"td"},'"success" }')))))))}E.isMDXComponent=!0}}]);