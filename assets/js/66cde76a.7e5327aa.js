"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[66769],{58860:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),c=o,g=d["".concat(l,".").concat(c)]||d[c]||m[c]||a;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},39738:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>N,frontMatter:()=>i,metadata:()=>p,toc:()=>d});t(37953);var r=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const i={id:"useStepsForm",title:"useStepsForm"},l=void 0,p={unversionedId:"api-reference/antd/hooks/form/useStepsForm",id:"version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm",title:"useStepsForm",description:"useStepsForm hook allows you to split your form under an Ant Design based Steps component and provides you with a few useful functionalities that will help you manage your form.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useStepsForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useStepsForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1711532055,formattedLastUpdatedAt:"Mar 27, 2024",frontMatter:{id:"useStepsForm",title:"useStepsForm"},sidebar:"someSidebar",previous:{title:"useModalForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useModalForm"},next:{title:"useImport",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/import/useImport"}},u={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>defaultCurrent</code>",id:"defaultcurrent",level:3},{value:"<code>total</code>",id:"total",level:3},{value:"<code>isBackValidate</code>",id:"isbackvalidate",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>stepsProps</code>",id:"stepsprops",level:3},{value:"<code>current</code>",id:"current",level:4},{value:"<code>onChange</code>",id:"onchange",level:4},{value:"<code>current</code>",id:"current-1",level:3},{value:"<code>gotoStep</code>",id:"gotostep",level:3},{value:"<code>submit</code>",id:"submit",level:3},{value:"<code>defaultFormValuesLoading</code>",id:"defaultformvaluesloading",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Return Values",id:"return-values-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},c=m("DocThumbsUpDownFeedbackWidget"),g=m("Tabs"),y=m("TabItem"),f=m("PropsTable"),h=m("CodeSandboxExample"),b={toc:d},v="wrapper";function N(e){var{components:n}=e,t=s(e,["components"]);return(0,r.yg)(v,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},b,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { useMany } from "@pankod/refine-core";\n\nimport {\n  List,\n  Table,\n  TextField,\n  useTable,\n  Space,\n  EditButton,\n  Select as AntdSelect,\n  useStepsForm as useStepsFormAntd,\n  useSelect as useSelectAntd,\n  Input as AntdInput,\n  Form as AntdForm,\n  Steps as AntdSteps,\n  SaveButton as AntdSaveButton,\n  Edit as AntdEdit,\n  Create as AntdCreate,\n  Button as AntdButton,\n} from "@pankod/refine-antd";\n\nconst PostList = () => {\n  const { tableProps } = useTable<IPost>();\n\n  const categoryIds =\n    tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title="Title" />\n        <Table.Column\n          dataIndex={["category", "id"]}\n          title="Category"\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return (\n              <TextField\n                value={data?.data.find((item) => item.id === value)?.title}\n              />\n            );\n          }}\n        />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n\nconst PostEdit = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsFormAntd();\n\n  const { selectProps: categorySelectProps } = useSelectAntd({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <AntdForm.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect {...categorySelectProps} />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </AntdForm.Item>\n    </>,\n    <>\n      <AntdForm.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput.TextArea />\n      </AntdForm.Item>\n    </>,\n  ];\n\n  return (\n    <AntdEdit\n      footerButtons={\n        <>\n          {current > 0 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </AntdButton>\n          )}\n          {current < formList.length - 1 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </AntdButton>\n          )}\n          {current === formList.length - 1 && (\n            <AntdSaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <AntdSteps {...stepsProps}>\n        <AntdSteps.Step title="About Post" />\n        <AntdSteps.Step title="Content" />\n      </AntdSteps>\n\n      <AntdForm {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </AntdForm>\n    </AntdEdit>\n  );\n};\n\nconst PostCreate = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsFormAntd();\n\n  const { selectProps: categorySelectProps } = useSelectAntd({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <AntdForm.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect {...categorySelectProps} />\n      </AntdForm.Item>\n      <AntdForm.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdSelect\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </AntdForm.Item>\n    </>,\n    <>\n      <AntdForm.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <AntdInput.TextArea />\n      </AntdForm.Item>\n    </>,\n  ];\n\n  return (\n    <AntdCreate\n      footerButtons={\n        <>\n          {current > 0 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </AntdButton>\n          )}\n          {current < formList.length - 1 && (\n            <AntdButton\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </AntdButton>\n          )}\n          {current === formList.length - 1 && (\n            <AntdSaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <AntdSteps {...stepsProps}>\n        <AntdSteps.Step title="About Post" />\n        <AntdSteps.Step title="Content" />\n      </AntdSteps>\n\n      <AntdForm {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </AntdForm>\n    </AntdCreate>\n  );\n};\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook allows you to split your form under an Ant Design based ",(0,r.yg)("a",{parentName:"p",href:"https://ant.design/components/steps/"},"Steps")," component and provides you with a few useful functionalities that will help you manage your form."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook is extended from ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," under the hood. This means that you can use all the functionalities of ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," in your ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),".")),(0,r.yg)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.yg)(c,{id:"basic-usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"We'll do two examples, one for creating and one for editing a post. Let's see how ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,r.yg)(g,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,r.yg)(y,{value:"create",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport React from "react";\nimport { IResourceComponentsProps, HttpError } from "@pankod/refine-core";\n\nimport {\n  Create,\n  Form,\n  Input,\n  Select,\n  Button,\n  SaveButton,\n  useSelect,\n  useStepsForm,\n  Steps,\n} from "@pankod/refine-antd";\n\nconst { Step } = Steps;\n\nconst PostCreatePage: React.FC<IResourceComponentsProps> = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n      <Form.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input.TextArea />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n\n      <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </Form>\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreatePage,\n      edit: PostEdit,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,r.yg)(y,{value:"edit",mdxType:"TabItem"},(0,r.yg)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { IResourceComponentsProps, HttpError } from "@pankod/refine-core";\n\nimport {\n  Edit,\n  Form,\n  Input,\n  Select,\n  Button,\n  SaveButton,\n  useSelect,\n  useStepsForm,\n  Steps,\n} from "@pankod/refine-antd";\n\nconst { Step } = Steps;\n\nconst PostEditPage: React.FC<IResourceComponentsProps> = () => {\n  const {\n    current,\n    gotoStep,\n    stepsProps,\n    formProps,\n    saveButtonProps,\n    queryResult,\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const postData = queryResult?.data?.data;\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n    defaultValue: postData?.category.id,\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n      <Form.Item\n        label="Status"\n        name="status"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select\n          options={[\n            {\n              label: "Published",\n              value: "published",\n            },\n            {\n              label: "Draft",\n              value: "draft",\n            },\n            {\n              label: "Rejected",\n              value: "rejected",\n            },\n          ]}\n        />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Content"\n        name="content"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input.TextArea />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Edit\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton {...saveButtonProps} />\n          )}\n        </>\n      }\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n        {formList[current]}\n      </Form>\n    </Edit>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreate,\n      edit: PostEditPage,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n')))),(0,r.yg)("p",null,"For the sake of simplicity, in this example we're going to build a Post ",(0,r.yg)("inlineCode",{parentName:"p"},'"create"')," form that consists of only a ",(0,r.yg)("inlineCode",{parentName:"p"},"title")," and a relational ",(0,r.yg)("inlineCode",{parentName:"p"},"category")," field."),(0,r.yg)("p",null,"To split your form items under a ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component, first import and use ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport { useStepsForm } from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n  const {\n    current,\n    gotoStep,\n    stepsProps,\n    formProps,\n    saveButtonProps,\n    queryResult,\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  return null;\n};\n\ninterface ICategory {\n  id: number;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n  category: {\n    id: ICategory["id"];\n  };\n}\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," is generic over the type form data to help you type check your code."),(0,r.yg)("p",null,"This hook returns a set of useful values to render steps form. Given ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," value, you should have a way to render your form items conditionally with this index value. You can use an array to achieve this."),(0,r.yg)("p",null,"Here, each item of ",(0,r.yg)("inlineCode",{parentName:"p"},"formList")," corresponds to one step in form:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n  useStepsForm,\n  useSelect,\n  Form,\n  Input,\n  Select,\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n  const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n    useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  // highlight-start\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n  // highlight-end\n\n  return null;\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Since ",(0,r.yg)("inlineCode",{parentName:"p"},"category")," is a relational data, we use ",(0,r.yg)("inlineCode",{parentName:"p"},"useSelect")," to fetch its data."),(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/field/useSelect/"},"Refer to ",(0,r.yg)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage. ","\u2192"))),(0,r.yg)("br",null),(0,r.yg)("p",null,"You should use ",(0,r.yg)("inlineCode",{parentName:"p"},"stepsProps")," on ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component, ",(0,r.yg)("inlineCode",{parentName:"p"},"formProps")," on the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Form>")," component respectively. And as the last step, you should render the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component besides the form like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n  useStepsForm,\n  useSelect,\n  Form,\n  Input,\n  Select,\n  // highlight-start\n  Create,\n  Steps,\n  // highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n  const {\n    current,\n    gotoStep,\n    stepsProps,\n    formProps,\n    saveButtonProps,\n    queryResult,\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      // highlight-start\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical">\n        {formList[current]}\n      </Form>\n      // highlight-end\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("admonition",{title:"Important",type:"danger"},(0,r.yg)("p",{parentName:"admonition"},"Make sure to add as much ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps.Step>")," components as the number of steps in the ",(0,r.yg)("inlineCode",{parentName:"p"},"formList")," array.")),(0,r.yg)("br",null),(0,r.yg)("p",null,"To help users navigate between steps in the form, you can use action buttons. Your navigation buttons should use the ",(0,r.yg)("inlineCode",{parentName:"p"},"gotoStep")," function that was previously returned from the ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," hook."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n  useStepsForm,\n  useSelect,\n  Form,\n  Input,\n  Select,\n  Create,\n  Steps,\n  // highlight-start\n  Button,\n  SaveButton,\n  // highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n  const {\n    current,\n    gotoStep,\n    stepsProps,\n    formProps,\n    saveButtonProps,\n    queryResult,\n    submit,\n  } = useStepsForm<IPost, HttpError, IPost>();\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  const formList = [\n    <>\n      <Form.Item\n        label="Title"\n        name="title"\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>,\n    <>\n      <Form.Item\n        label="Category"\n        name={["category", "id"]}\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      >\n        <Select {...categorySelectProps} />\n      </Form.Item>\n    </>,\n  ];\n\n  return (\n    <Create\n      // highlight-start\n      footerButtons={\n        <>\n          {current > 0 && (\n            <Button\n              onClick={() => {\n                gotoStep(current - 1);\n              }}\n            >\n              Previous\n            </Button>\n          )}\n          {current < formList.length - 1 && (\n            <Button\n              onClick={() => {\n                gotoStep(current + 1);\n              }}\n            >\n              Next\n            </Button>\n          )}\n          {current === formList.length - 1 && (\n            <SaveButton\n              {...saveButtonProps}\n              style={{ marginRight: 10 }}\n              onClick={() => submit()}\n            />\n          )}\n        </>\n      }\n      // highlight-end\n    >\n      <Steps {...stepsProps}>\n        <Step title="About Post" />\n        <Step title="Content" />\n      </Steps>\n      <Form {...formProps} layout="vertical">\n        {formList[current]}\n      </Form>\n    </Create>\n  );\n};\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)(c,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"All ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," props also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm/#properties"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."))),(0,r.yg)("h3",{id:"defaultcurrent"},(0,r.yg)("inlineCode",{parentName:"h3"},"defaultCurrent")),(0,r.yg)(c,{id:"defaultcurrent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Default: ",(0,r.yg)("inlineCode",{parentName:"p"},"0"))),(0,r.yg)("p",null,"Sets the default starting step number. Counting starts from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  defaultCurrent: 2,\n});\n"))),(0,r.yg)("h3",{id:"total"},(0,r.yg)("inlineCode",{parentName:"h3"},"total")),(0,r.yg)(c,{id:"total",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Maximum number of steps. ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," cannot go beyond this number."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  total: 3,\n});\n"))),(0,r.yg)("h3",{id:"isbackvalidate"},(0,r.yg)("inlineCode",{parentName:"h3"},"isBackValidate")),(0,r.yg)(c,{id:"isbackvalidate",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Default: ",(0,r.yg)("inlineCode",{parentName:"p"},"false"))),(0,r.yg)("p",null,"When is ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", validates a form fields when the user navigates to a previous step."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n  isBackValidate: true,\n});\n")),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"return-values"},"Return Values"),(0,r.yg)(c,{id:"return-values",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"All ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.yg)("a",{parentName:"p",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm/#return-values"},(0,r.yg)("inlineCode",{parentName:"a"},"useForm"))," docs."))),(0,r.yg)("h3",{id:"stepsprops"},(0,r.yg)("inlineCode",{parentName:"h3"},"stepsProps")),(0,r.yg)(c,{id:"stepsprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The props needed by the ",(0,r.yg)("inlineCode",{parentName:"p"},"<Steps>")," component.")),(0,r.yg)("h4",{id:"current"},(0,r.yg)("inlineCode",{parentName:"h4"},"current")),(0,r.yg)(c,{id:"current",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Current step, counting from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("h4",{id:"onchange"},(0,r.yg)("inlineCode",{parentName:"h4"},"onChange")),(0,r.yg)(c,{id:"onchange",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Callback function that is trigger when the current step of the form changes. The function takes in one argument, ",(0,r.yg)("inlineCode",{parentName:"p"},"currentStep"),", which is a number representing the index of the current step.")),(0,r.yg)("h3",{id:"current-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"current")),(0,r.yg)(c,{id:"current-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Current step, counting from ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("h3",{id:"gotostep"},(0,r.yg)("inlineCode",{parentName:"h3"},"gotoStep")),(0,r.yg)(c,{id:"gotostep",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"Is a function that allows you to programmatically change the current step of a form.\nIt takes in one argument, step, which is a number representing the index of the step you want to navigate to.")),(0,r.yg)("h3",{id:"submit"},(0,r.yg)("inlineCode",{parentName:"h3"},"submit")),(0,r.yg)(c,{id:"submit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"A function that can submit the form. It's useful when you want to submit the form manually.")),(0,r.yg)("h3",{id:"defaultformvaluesloading"},(0,r.yg)("inlineCode",{parentName:"h3"},"defaultFormValuesLoading")),(0,r.yg)(c,{id:"defaultformvaluesloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," is ",(0,r.yg)("inlineCode",{parentName:"p"},'"edit"')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'"clone"'),", ",(0,r.yg)("inlineCode",{parentName:"p"},"useStepsForm")," will fetch the data from the API and set it as default values. This prop is ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," when the data is being fetched."),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,r.yg)(c,{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"You may need to modify the form data before it is sent to the API."),(0,r.yg)("p",null,"For example, Let's send the values we received from the user in two separate inputs, ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,r.yg)("inlineCode",{parentName:"p"},"fullName"),". We can do this by overriding the ",(0,r.yg)("inlineCode",{parentName:"p"},"submit")," function."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},"// --\nuseStepsForm({\n  submit: (formValues) => {\n    // highlight-start\n    const data = {\n      fullName: `${formValues.name} ${formValues.surname}`,\n      age: formValues.age,\n      city: formValues.city,\n    };\n    onFinish(data as any);\n    // highlight-end\n  },\n});\n// --\n")),(0,r.yg)("br",null)),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(c,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(f,{module:"@pankod/refine-antd/useStepsForm",mdxType:"PropsTable"}),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,r.yg)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,r.yg)("strong",{parentName:"p"},"<",(0,r.yg)("a",{parentName:"strong",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,r.yg)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,r.yg)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,r.yg)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," used. If ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"create"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,r.yg)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). if ",(0,r.yg)("inlineCode",{parentName:"p"},"action")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,r.yg)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,r.yg)("inlineCode",{parentName:"p"},"list"),"."))),(0,r.yg)("h3",{id:"return-values-1"},"Return Values"),(0,r.yg)(c,{id:"return-values-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Key"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"stepsProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design steps props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://ant.design/components/steps/#API"},(0,r.yg)("inlineCode",{parentName:"a"},"StepsProps")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"current"),(0,r.yg)("td",{parentName:"tr",align:null},"Current step, counting from 0."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"gotoStep"),(0,r.yg)("td",{parentName:"tr",align:null},"Go to the target step"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(step: number) => void"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"formProps"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/antd/hooks/form/useForm/#formprops"},(0,r.yg)("inlineCode",{parentName:"a"},"FormProps")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"form"),(0,r.yg)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,r.yg)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,r.yg)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"submit"),(0,r.yg)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void")))))),(0,r.yg)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.yg)(c,{id:"type-parameters",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Desription"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TData"),(0,r.yg)("td",{parentName:"tr",align:null},"Result data of the query that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.yg)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TError"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.yg)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"TVariables"),(0,r.yg)("td",{parentName:"tr",align:null},"Values for params."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{}")))))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)(c,{id:"example",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(h,{path:"form-antd-use-steps-form",mdxType:"CodeSandboxExample"})))}N.isMDXComponent=!0}}]);