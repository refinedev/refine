"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[17543],{58860:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>h});var o=n(37953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>u});n(37953);var o=n(58860);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={title:"A Comprehensive Guide of React Unit Testing",description:"We'll learn how to unit test our component down to hooks and Context.",slug:"react-unit-testing",authors:"chidume_nnamdi",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-05-26-react-unit-testing/social-2.png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/react-unit-testing",source:"@site/blog/2024-08-05-react-unit-testing.md",title:"A Comprehensive Guide of React Unit Testing",description:"We'll learn how to unit test our component down to hooks and Context.",date:"2024-08-05T00:00:00.000Z",formattedDate:"August 5, 2024",tags:[{label:"react",permalink:"/blog/tags/react"}],readingTime:23.915,hasTruncateMarker:!1,authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],frontMatter:{title:"A Comprehensive Guide of React Unit Testing",description:"We'll learn how to unit test our component down to hooks and Context.",slug:"react-unit-testing",authors:"chidume_nnamdi",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-05-26-react-unit-testing/social-2.png",hide_table_of_contents:!1},prevItem:{title:"Next.js 13.4's Server Actions and Data Fetching",permalink:"/blog/next-js-server-actions-and-data-fetching"},nextItem:{title:"Creating responsive tooltips in React with react-tooltip",permalink:"/blog/react-tooltip"},relatedPosts:[{title:"Framer Motion React Animations",description:"We'll walk you through the features and functionalities of Framer Motion.",permalink:"/blog/framer-motion",formattedDate:"June 20, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:15.475,date:"2024-06-20T00:00:00.000Z"},{title:"How to create a notification provider with react-toastify",description:"We'll create a custom notification provider in a Refine application using react-toastify.",permalink:"/blog/react-toastify",formattedDate:"August 9, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:14.655,date:"2024-08-09T00:00:00.000Z"},{title:"How to use Material UI Modal",description:"We'll learn how to use Material UI Modal to create a popup window that can display important information or facilitate user input.",permalink:"/blog/material-ui-modal",formattedDate:"December 30, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:14.315,date:"2024-12-30T00:00:00.000Z"}],authorPosts:[{title:"Using SVGs in React",description:"Let's talk about React SVG and how it makes the process of adding and handling images on modern websites more versatile and fun.",permalink:"/blog/react-svg",formattedDate:"January 7, 2025",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:15.405,date:"2025-01-07T00:00:00.000Z"},{title:"Error Boundaries in React -  Handling Errors Gracefully",description:"We'll see how to handle errors in React using Error Boundaries and how to use the react-error-boundary library to handle errors in React.",permalink:"/blog/react-error-boundaries",formattedDate:"September 9, 2024",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:16.74,date:"2024-09-09T00:00:00.000Z"},{title:"Svelte vs React Comparison",description:"We will compare the optimal performance of React and Svelte",permalink:"/blog/svelte-vs-react",formattedDate:"December 8, 2022",authors:[{name:"Chidume Nnamdi",title:"Software Engineer",url:"https://github.com/philipszdavido",imageURL:"https://github.com/philipszdavido.png",key:"chidume_nnamdi"}],readingTime:9.225,date:"2022-12-08T00:00:00.000Z"}]},c={authorsImageUrls:[void 0]},u=[{value:"Introduction",id:"introduction",level:2},{value:"Setting up a testing environment",id:"setting-up-a-testing-environment",level:2},{value:"Writing unit tests for React components",id:"writing-unit-tests-for-react-components",level:2},{value:"State and props of the components",id:"state-and-props-of-the-components",level:2},{value:"Mocking function calls",id:"mocking-function-calls",level:2},{value:"Testing React hooks",id:"testing-react-hooks",level:2},{value:"Testing asynchronous operations",id:"testing-asynchronous-operations",level:2},{value:"Testing React Context API",id:"testing-react-context-api",level:2},{value:"Testing React Router",id:"testing-react-router",level:2},{value:"Snapshot testing",id:"snapshot-testing",level:2},{value:"Profiling with the React Profiler",id:"profiling-with-the-react-profiler",level:3},{value:"Using Performance Tools",id:"using-performance-tools",level:3},{value:"Accessibility Testing",id:"accessibility-testing",level:2},{value:"Ensuring Accessible Components",id:"ensuring-accessible-components",level:3},{value:"Writing Tests for ARIA Roles and Properties",id:"writing-tests-for-aria-roles-and-properties",level:3},{value:"Keyboard Navigation Testing",id:"keyboard-navigation-testing",level:3},{value:"Conclusion",id:"conclusion",level:2}],m={toc:u},d="wrapper";function h(e){var{components:t}=e,n=r(e,["components"]);return(0,o.yg)(d,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){a(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"This article was last updated on August 05, 2024 to add sections for Accessibility Testing and Custom Hooks Testing.")),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"Unit testing is a crucial step in the software development process, where developers meticulously examine the smallest functional components, known as units, to ensure their proper functioning. This process involves thorough testing conducted by software developers, and occasionally by QA personnel, as an integral part of the development lifecycle."),(0,o.yg)("p",null,"Unit testing helps us have faith and strong faith at that, that our software works well and in the most bizarre use cases. Users would not want bug-ridden software. Once users find glitches and bugs in software, they lose hope and if the bugs and glitches are not fixed immediately they might abandon the software altogether. So we see that bugs contribute a lot to how software progress in the market."),(0,o.yg)("p",null,"Sometimes, it's difficult to test and cover all use cases before the software is deployed, but unit testing helps us test different independent units of our software. Making sure that they are working correctly and will stand the test of time."),(0,o.yg)("p",null,"Let's see an example of how unit testing is important. Let's say we have a ",(0,o.yg)("inlineCode",{parentName:"p"},"add")," function in an application that we use in our calculator application. This ",(0,o.yg)("inlineCode",{parentName:"p"},"add")," function accepts two parameters, and these parameters should be a number. Now, in the real world, users might input words and characters or even symbols, this will cause our application to glitch because we did not know that users might enter inputs other than numbers. But with unit testing of the ",(0,o.yg)("inlineCode",{parentName:"p"},"add")," function before deployment, we would have caught this and refactored the ",(0,o.yg)("inlineCode",{parentName:"p"},"add")," function to handle these scenarios."),(0,o.yg)("p",null,"So we see how unit testing is very crucial in the software development of any application. So in that unit testing has been a must in companies, developers must write tests in any feature they build in their application otherwise the software will be deemed a risk. Nobody wants to lose customers."),(0,o.yg)("p",null,"So many unit testing tools have sprung up in recent years making unit testing in the React framework very easy. In addition, almost all programming has testing frameworks or tools built for them. The popular ones are JUnit, PHUnit, Jasmine, Mocha, etc."),(0,o.yg)("p",null,"In this article, we will learn all about unit testing in the Reactjs framework. We will learn how to unit test our component down to hooks and Context."),(0,o.yg)("h2",{id:"setting-up-a-testing-environment"},"Setting up a testing environment"),(0,o.yg)("p",null,"Let's create a new React project."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-sh"},"create-react-app test-prj\ncd test-prj\n")),(0,o.yg)("p",null,"The testing tools that we will use are ",(0,o.yg)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," and ",(0,o.yg)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro/"},"React Testing Library"),"."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Jest"),": This is a popular testing library built by Facebook. It has simple APIs that make testing very easy."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"React Testing Library"),": This is a testing built on-top DOM Testing Library that gives us the power to test React components. It comes with React project scaffolded with the ",(0,o.yg)("inlineCode",{parentName:"li"},"create-react-app")," tool, if it is not present you can install it using ",(0,o.yg)("inlineCode",{parentName:"li"},"npm install --save-dev @testing-library/react"),".")),(0,o.yg)("p",null,"To install Jest we run the command: ",(0,o.yg)("inlineCode",{parentName:"p"},"npm install --save-dev jest"),"."),(0,o.yg)("p",null,'The next question is "Where do we write the test?"'),(0,o.yg)("p",null,"Tests are written in ",(0,o.yg)("inlineCode",{parentName:"p"},"js/ts")," files, but the ",(0,o.yg)("inlineCode",{parentName:"p"},".js/ts")," are preceded with ",(0,o.yg)("inlineCode",{parentName:"p"},".test")," so that Jest and React Testing Library can pick them up because that is the only we tell the testing libraries that those are our test files. So our test file for the ",(0,o.yg)("inlineCode",{parentName:"p"},"add")," function will be ",(0,o.yg)("inlineCode",{parentName:"p"},"add.test.js"),"."),(0,o.yg)("p",null,"To run the test files, we will have to add a ",(0,o.yg)("inlineCode",{parentName:"p"},"test")," section to the ",(0,o.yg)("inlineCode",{parentName:"p"},"scripts")," section in our ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,o.yg)("p",null,"Now, when we run the command: ",(0,o.yg)("inlineCode",{parentName:"p"},"npm run test")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"yarn run test"),", Jest will search and collect all files with ",(0,o.yg)("inlineCode",{parentName:"p"},".test.*js|ts|tsx|tsx")," in their names and run them in a testing environment."),(0,o.yg)("p",null,"We can group the test files under a folder called ",(0,o.yg)("inlineCode",{parentName:"p"},"__tests__"),". Jest we look for the folders in your application and run the ",(0,o.yg)("inlineCode",{parentName:"p"},".test.*js|ts|tsx|tsx")," in them."),(0,o.yg)("h2",{id:"writing-unit-tests-for-react-components"},"Writing unit tests for React components"),(0,o.yg)("p",null,"We will learn how to test a basic React component."),(0,o.yg)("p",null,'Let\'s write a component that renders "Hello World" and test that the component actually renders the popular greeting:'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nconst HelloWorld = () => {\n  return <div>Hello World</div>;\n};\n\nexport default HelloWorld;\n')),(0,o.yg)("p",null,"Now, we will create a test file ",(0,o.yg)("inlineCode",{parentName:"p"},"HelloWorld.test.js"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'test(\'renders "Hello World" text\', () => {\n  const { getByText } = render(<HelloWorld />);\n  const helloWorldElement = getByText("Hello World");\n  expect(helloWorldElement).toBeInTheDocument();\n});\n')),(0,o.yg)("p",null,"In this test case, we render the ",(0,o.yg)("inlineCode",{parentName:"p"},"HelloWorld")," component using the ",(0,o.yg)("inlineCode",{parentName:"p"},"render")," function provided by React Testing Library. We then use the ",(0,o.yg)("inlineCode",{parentName:"p"},"getByText"),' function to retrieve the element that contains the "Hello World" text. Finally, we use the ',(0,o.yg)("inlineCode",{parentName:"p"},"toBeInTheDocument")," matcher to check if the element is present in the rendered component."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"render")," function is used to render the component in a DOM, this is similar to the DOM in the browser. Once this is done we can then test the component using DOM API-like functions provided by the React Testing Library."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"getByText")," function searches the rendered DOM for the string passed to it."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"toBeInTheDocument")," function is used to test if the DOM object it was called exists in the DOM."),(0,o.yg)("p",null,"We can assign a ",(0,o.yg)("inlineCode",{parentName:"p"},"test-id")," to elements in our component so we can pinpoint them directly by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"getTestById")," function provided by React Testing Library."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nconst HelloWorld = () => {\n  return <div data-testid="hello-world">Hello World</div>;\n};\n\nexport default HelloWorld;\n')),(0,o.yg)("p",null,"See the use of ",(0,o.yg)("inlineCode",{parentName:"p"},"data-testid")," property in the ",(0,o.yg)("inlineCode",{parentName:"p"},"div")," element there. To get the ",(0,o.yg)("inlineCode",{parentName:"p"},"div")," element, we will call the ",(0,o.yg)("inlineCode",{parentName:"p"},"getByTestId")," function passing in the value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"data-testid")," to the function: ",(0,o.yg)("inlineCode",{parentName:"p"},'getByTestId("hello-world")'),". This returns the HTMLElement instance of the ",(0,o.yg)("inlineCode",{parentName:"p"},"div")," element and then we can test the ",(0,o.yg)("inlineCode",{parentName:"p"},"Hello World")," text node using the ",(0,o.yg)("inlineCode",{parentName:"p"},"textContent")," DOM property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport HelloWorld from "./HelloWorld";\n\ntest(\'renders "Hello World" text using getByTestId\', () => {\n  const { getByTestId } = render(<HelloWorld />);\n  const helloWorldElement = getByTestId("hello-world");\n  expect(helloWorldElement).toBeInTheDocument();\n  expect(helloWorldElement.textContent).toBe("Hello World");\n});\n')),(0,o.yg)("p",null,"We use ",(0,o.yg)("inlineCode",{parentName:"p"},"getByTestId('hello-world')")," to query the element with the ",(0,o.yg)("inlineCode",{parentName:"p"},"data-testid"),' attribute set to "hello-world". Then, we assert that the element is in the document and verify its ',(0,o.yg)("inlineCode",{parentName:"p"},"textContent"),' to be "Hello World" using the ',(0,o.yg)("inlineCode",{parentName:"p"},"toBe")," matcher."),(0,o.yg)("p",null,"Now, let's move over to testing and firing events in components."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Test firing events")),(0,o.yg)("p",null,"Let's say we have a Counter application that updates the DOM with the click of a button:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState } from "react";\n\nconst Counter = ({ count }) => {\n  const [increment, setIncrement] = useState(0);\n\n  const handleIncrement = () => {\n    setIncrement(increment + 1);\n  };\n\n  return (\n    <div>\n      <p>Increment: {increment}</p>\n      <button onClick={handleIncrement}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\n')),(0,o.yg)("p",null,"Now, we have a state ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," that holds the state of the application, and it is displayed in the DOM. The ",(0,o.yg)("inlineCode",{parentName:"p"},"Increment")," button when clicked increases the state ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," by one. So let's write a test for this component to make sure that the ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," state is increased when the ",(0,o.yg)("inlineCode",{parentName:"p"},"Increment")," button is clicked."),(0,o.yg)("p",null,"So, to test this we will need to somehow fire a ",(0,o.yg)("inlineCode",{parentName:"p"},"click")," event on the ",(0,o.yg)("inlineCode",{parentName:"p"},"Increment")," button, but how can we do this? We will see below."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render, fireEvent } from "@testing-library/react";\nimport Counter from "./Counter";\n\ntest("increments count on button click", () => {\n  const { getByText } = render(<Counter />);\n  const incrementElement = getByText("Increment: 0");\n  const buttonElement = getByText("Increment");\n\n  fireEvent.click(buttonElement);\n\n  expect(incrementElement.textContent).toBe("Increment: 1");\n});\n')),(0,o.yg)("p",null,"React Testing Library has a ",(0,o.yg)("inlineCode",{parentName:"p"},"click()")," method set to the DOM instance of an element that simulates the ",(0,o.yg)("inlineCode",{parentName:"p"},"click")," event as if it was actually clicked by a user."),(0,o.yg)("p",null,"See that we got the DOM instance of the button by calling this ",(0,o.yg)("inlineCode",{parentName:"p"},"getByText('Increment')"),", then we called the ",(0,o.yg)("inlineCode",{parentName:"p"},"click()")," method on its instance, this will fire the click event on the button causing the ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," state to be increased by one, then we will thereafter to see if the state was really updated."),(0,o.yg)("p",null,"See in the last line, we got the text node of the div element and expect it to be ",(0,o.yg)("inlineCode",{parentName:"p"},"Increment: 1"),"."),(0,o.yg)("p",null,"Now, let's move over to testing states and props in components."),(0,o.yg)("h2",{id:"state-and-props-of-the-components"},"State and props of the components"),(0,o.yg)("p",null,"This entails testing that the current value of a state is updated correctly when an action is executed."),(0,o.yg)("p",null,"Let's say we have a state:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState } from "react";\n\nconst Counter = ({ count }) => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>\n        Count: <span data-testid="count">{count}</span>\n      </p>\n      <button data-testid="button" onClick={increment}>\n        Increment\n      </button>\n    </div>\n  );\n};\n\nexport default Counter;\n')),(0,o.yg)("p",null,"We have a state ",(0,o.yg)("inlineCode",{parentName:"p"},"count"),", and it is displayed in the DOM in the ",(0,o.yg)("inlineCode",{parentName:"p"},"p")," element. The ",(0,o.yg)("inlineCode",{parentName:"p"},"Increment")," button when clicked increments the state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," by 1 and this in turn makes the component re-render and displayed the updated value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state."),(0,o.yg)("p",null,"Let's write a test that ensures that the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state is updated when the ",(0,o.yg)("inlineCode",{parentName:"p"},"setCount")," is called."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render, fireEvent } from "@testing-library/react";\nimport Counter from "./Counter";\n\ntest("increments count on button click", () => {\n  const { getByText } = render(<Counter />);\n  const countElement = getByTestId("count");\n  const buttonElement = getByTestId("button");\n\n  fireEvent.click(buttonElement);\n\n  expect(incrementElement.textContent).toBe("1");\n});\n')),(0,o.yg)("p",null,"We are now familiar with what is being done here. We expect the last code to pass because after the button has been clicked the state ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," should be incremented to 1."),(0,o.yg)("p",null,"Let's test for ",(0,o.yg)("inlineCode",{parentName:"p"},"props")," passed to a component. We know that props are attributes passed to components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState } from "react";\n\nconst Counter = ({ count }) => {\n  return (\n    <div>\n      <p>\n        Count: <span data-testid="count">{count}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Counter;\n')),(0,o.yg)("p",null,"We have this component expecting a value to be passed to it via ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," attribute in its props object. So now let's write a test for it to make sure a ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," attribute passed to the ",(0,o.yg)("inlineCode",{parentName:"p"},"Counter")," component is displayed."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport Counter from "./Counter";\n\ntest("increments count on button click", () => {\n  const { getByText } = render(<Counter count={9} />);\n  const countElement = getByTestId("count");\n\n  expect(incrementElement.textContent).toBe("9");\n});\n')),(0,o.yg)("p",null,"Here, we rendered the ",(0,o.yg)("inlineCode",{parentName:"p"},"Counter")," component passing a value of 9 via its ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," props. Then, we got hold of the ",(0,o.yg)("inlineCode",{parentName:"p"},"p")," element where the props will be rendered. Then, we expect it to be the value 9."),(0,o.yg)("h2",{id:"mocking-function-calls"},"Mocking function calls"),(0,o.yg)("p",null,"During testing, we might not really want an actual function to be called based on some factors. For example, the function might have a number of calls set on it. The only way to go about this is to mock that function, ie, to create a dumb version function of that actual function. We do this in Jest by calling the ",(0,o.yg)("inlineCode",{parentName:"p"},"fn()")," API. This creates a mock function and returns it."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"const mockFn = jest.fn();\n")),(0,o.yg)("p",null,"We can then test the number of times the function was called, and the return value of the function, and also Jest provides in an array the arguments passed to the function each time it was called."),(0,o.yg)("p",null,"Let's see an example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"const Test = ({ done }) => {\n  return (\n    <div>\n      <button onClick={done}>Call DONE</button>\n    </div>\n  );\n};\n")),(0,o.yg)("p",null,"We have a simple component here, it accepts a function in its props object via ",(0,o.yg)("inlineCode",{parentName:"p"},"done")," property. This ",(0,o.yg)("inlineCode",{parentName:"p"},"done")," props function is called when the ",(0,o.yg)("inlineCode",{parentName:"p"},"Call DONE")," button is clicked. Now, we want to test the component to see if the ",(0,o.yg)("inlineCode",{parentName:"p"},"done")," props passed to the component is called when the ",(0,o.yg)("inlineCode",{parentName:"p"},"Call DONE")," button is clicked. To test this we will need to pass a mock function to the ",(0,o.yg)("inlineCode",{parentName:"p"},"done")," props of the component. Let's see below how we can do it:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport Test from "./Test";\n\ntest("test mock function props is called", () => {\n  const fn = jest.fn();\n  const { getByText } = render(<Test done={fn} />);\n  const button = getByText("Call DONE");\n  button.click();\n\n  expect(fn.mock.calls).toBe(1);\n\n  button.click();\n  expect(fn.mock.calls).toBe(2);\n});\n')),(0,o.yg)("p",null,"We created a mock function ",(0,o.yg)("inlineCode",{parentName:"p"},"fn")," by calling the ",(0,o.yg)("inlineCode",{parentName:"p"},"fn()")," function from the ",(0,o.yg)("inlineCode",{parentName:"p"},"jest")," object. We passed the mock function to the ",(0,o.yg)("inlineCode",{parentName:"p"},"Test")," component in a ",(0,o.yg)("inlineCode",{parentName:"p"},"done")," attribute. Next, we got the handle of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Call DONE")," button and fire a click event on it. This will call the mock function once, that's why in the next line we expect the mocked function to be called once. Next, we fired the click event, and this time we expected the function to be called again."),(0,o.yg)("h2",{id:"testing-react-hooks"},"Testing React hooks"),(0,o.yg)("p",null,"Now, we will test React custom hooks. In testing React hooks we will be verifying the behavior and state changes of a component that uses hooks. Let's say we have a custom hook called ",(0,o.yg)("inlineCode",{parentName:"p"},"useCounter")," that manages a counter value and provides functions to increment and decrement it:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\n\nconst useCounter = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const decrement = () => {\n    setCount((prevCount) => prevCount - 1);\n  };\n\n  return { count, increment, decrement };\n};\n\nexport default useCounter;\n')),(0,o.yg)("p",null,"The above custom hook gives us the ability to handle our ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state from one place. It returns the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state, the ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," function, and the ",(0,o.yg)("inlineCode",{parentName:"p"},"decrement")," function. We will destructure all these inside the component and use it to manage and manipulate the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state."),(0,o.yg)("p",null,"Now, let's write a test case for this custom hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { renderHook, act } from "@testing-library/react-hooks";\nimport useCounter from "./useCounter";\n\ntest("should increment and decrement counter correctly", () => {\n  const { result } = renderHook(() => useCounter());\n\n  const { count, increment, decrement } = result.current;\n\n  expect(count).toBe(0);\n\n  act(() => {\n    increment();\n  });\n\n  expect(count).toBe(1);\n\n  act(() => {\n    decrement();\n  });\n\n  expect(count).toBe(0);\n});\n')),(0,o.yg)("p",null,"In this test case, we use the ",(0,o.yg)("inlineCode",{parentName:"p"},"renderHook")," function from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@testing-library/react-hooks")," package to render the ",(0,o.yg)("inlineCode",{parentName:"p"},"useCounter")," hook. The ",(0,o.yg)("inlineCode",{parentName:"p"},"result")," object from ",(0,o.yg)("inlineCode",{parentName:"p"},"renderHook")," gives us access to the current state and functions returned by the hook. The ",(0,o.yg)("inlineCode",{parentName:"p"},"result")," is an object that contains a property called ",(0,o.yg)("inlineCode",{parentName:"p"},"current"),". The value of this ",(0,o.yg)("inlineCode",{parentName:"p"},"current")," is an object that contains the return value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"useCounter")," hook. From this ",(0,o.yg)("inlineCode",{parentName:"p"},"current")," object we destructured all the objects returned by the ",(0,o.yg)("inlineCode",{parentName:"p"},"useCounter")," hook."),(0,o.yg)("p",null,"We assert that the initial value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state is 0. Then, we use the ",(0,o.yg)("inlineCode",{parentName:"p"},"act")," function to perform actions on the hook. Within ",(0,o.yg)("inlineCode",{parentName:"p"},"act"),", we call the ",(0,o.yg)("inlineCode",{parentName:"p"},"increment")," function and assert that the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state is incremented to 1. Similarly, we call the ",(0,o.yg)("inlineCode",{parentName:"p"},"decrement")," function and verify that the ",(0,o.yg)("inlineCode",{parentName:"p"},"count")," state is decremented to 0."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"act")," function is used to wrap asynchronous or state-updating code that affects React components. It ensures that all state updates are properly processed and reflected in the component before making assertions."),(0,o.yg)("p",null,"You see how easy it is to test custom hooks using the ",(0,o.yg)("inlineCode",{parentName:"p"},"renderHook")," function, we had no need of using the custom hook inside of a component just to test it."),(0,o.yg)("h2",{id:"testing-asynchronous-operations"},"Testing asynchronous operations"),(0,o.yg)("p",null,"Asynchronous operations involve handling promises, asynchronous functions, and async/await syntax. The most common example of an async operation in a React component is the fetching of data over HTTP. HTTP calls are async operations in the sense that it does not stop the flow of the code execution, instead, it is executed in parallel with the main code."),(0,o.yg)("p",null,"Let's see a component that on render makes an HTTP call to an endpoint and then renders the result of the fetch."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState, useEffect } from "react";\n\nconst AsyncComponent = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch("https://api.example.com/data");\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return <div>{data ? data.message : "Loading..."}</div>;\n};\n\nexport default AsyncComponent;\n')),(0,o.yg)("p",null,"This component fetches data from ",(0,o.yg)("inlineCode",{parentName:"p"},"https://api.example.com/data")," and renders it. Now, we want to test this component but we don't want the component to make an actual HTTP call to the endpoint. So what do we do? We have to mock the ",(0,o.yg)("inlineCode",{parentName:"p"},"fetch")," call. Also, the ",(0,o.yg)("inlineCode",{parentName:"p"},"fetch")," call is an async op, what do we do? The React Testing Library has a function ",(0,o.yg)("inlineCode",{parentName:"p"},"waitFor"),", this function waits for an async operation to complete before the code execution flow resumes. We can pass a callback to it, that executes after the async operation completes."),(0,o.yg)("p",null,"Let's see below:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render, waitFor } from "@testing-library/react";\nimport AsyncComponent from "./AsyncComponent";\n\ntest("renders fetched data after async call", async () => {\n  const mockData = { message: "Test Message" };\n\n  // Mock the fetch API\n  jest.spyOn(window, "fetch").mockImplementation(() =>\n    Promise.resolve({\n      json: () => Promise.resolve(mockData),\n    }),\n  );\n\n  const { getByText } = render(<AsyncComponent />);\n\n  // Assert that "Loading..." is initially rendered\n  expect(getByText("Loading...")).toBeInTheDocument();\n\n  // Wait for the async operation to complete\n  await waitFor(() => {\n    expect(getByText(mockData.message)).toBeInTheDocument();\n  });\n\n  // Restore the original fetch implementation\n  window.fetch.mockRestore();\n});\n')),(0,o.yg)("p",null,"In this test case:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"A mock data object ",(0,o.yg)("inlineCode",{parentName:"li"},"mockData")," is defined to simulate the data returned from the API."),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("inlineCode",{parentName:"li"},"fetch")," function is mocked using ",(0,o.yg)("inlineCode",{parentName:"li"},"jest.spyOn")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"mockImplementation"),". It returns a resolved promise that resolves to an object with a ",(0,o.yg)("inlineCode",{parentName:"li"},"json")," function that, in turn, resolves to ",(0,o.yg)("inlineCode",{parentName:"li"},"mockData"),"."),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("inlineCode",{parentName:"li"},"render")," function is used to render the ",(0,o.yg)("inlineCode",{parentName:"li"},"AsyncComponent"),"."),(0,o.yg)("li",{parentName:"ul"},'The initial rendering displays "Loading...", which is verified using ',(0,o.yg)("inlineCode",{parentName:"li"},"expect")," and ",(0,o.yg)("inlineCode",{parentName:"li"},"getByText"),"."),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("inlineCode",{parentName:"li"},"waitFor")," function from ",(0,o.yg)("inlineCode",{parentName:"li"},"@testing-library/react")," is used to wait for the asynchronous operation to complete. Within the callback of ",(0,o.yg)("inlineCode",{parentName:"li"},"waitFor"),", we assert that the fetched data (",(0,o.yg)("inlineCode",{parentName:"li"},"mockData.message"),") is rendered in the component."),(0,o.yg)("li",{parentName:"ul"},"Finally, the original implementation of ",(0,o.yg)("inlineCode",{parentName:"li"},"fetch")," is restored using ",(0,o.yg)("inlineCode",{parentName:"li"},"window.fetch.mockRestore()")," to ensure other tests are not affected.")),(0,o.yg)("p",null,"By using ",(0,o.yg)("inlineCode",{parentName:"p"},"await")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"waitFor"),", you can test and assert the behavior of asynchronous operations in our React components. It allows us to verify that the correct data is fetched and rendered after the asynchronous operation is completed."),(0,o.yg)("h2",{id:"testing-react-context-api"},"Testing React Context API"),(0,o.yg)("p",null,"In testing React Context API, we will verify that the components correctly consume and provide values from the context."),(0,o.yg)("p",null,"Let's say we have a context called ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeContext")," that provides a theme value to consuming components:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { createContext, useContext } from "react";\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const theme = "light";\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n')),(0,o.yg)("p",null,"We created a global context here that passes down a theme down to its children. The ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeProvider")," does that, see how encloses the children element between its tag. We created a custom hook that we can use to get the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeContext"),", see that it utilizes the ",(0,o.yg)("inlineCode",{parentName:"p"},"useContext")," hook from React to consume the ",(0,o.yg)("inlineCode",{parentName:"p"},"theme")," value from the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeContext"),". It returns the current value of the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeContext"),"."),(0,o.yg)("p",null,"Now, let's write a test case for a component that consumes the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeContext")," using the ",(0,o.yg)("inlineCode",{parentName:"p"},"useTheme")," hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport { ThemeProvider, useTheme } from "./ThemeContext";\n\nconst ThemeConsumer = () => {\n  const theme = useTheme();\n  return <div>{theme}</div>;\n};\n\ntest("renders theme value from the context", () => {\n  const { getByText } = render(\n    <ThemeProvider>\n      <ThemeConsumer />\n    </ThemeProvider>,\n  );\n\n  expect(getByText("light")).toBeInTheDocument();\n});\n')),(0,o.yg)("p",null,"Here, we rendered the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeConsumer")," component wrapped within the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeProvider")," to provide the theme value."),(0,o.yg)("p",null,"Next, we used the ",(0,o.yg)("inlineCode",{parentName:"p"},"getByText")," function to query the DOM for the rendered text. We expect to have a text node with the value ",(0,o.yg)("inlineCode",{parentName:"p"},"light")," in the DOM because the ",(0,o.yg)("inlineCode",{parentName:"p"},"ThemeConsumer")," must have gotten the theme value and rendered it."),(0,o.yg)("p",null,"Next, let's see how we can test routing in React."),(0,o.yg)("h2",{id:"testing-react-router"},"Testing React Router"),(0,o.yg)("p",null,"Its quite tricky how this can be done but believe me it's very easy and straightforward. To test React Router, all we have to do is to load a particular URL and verify that the associated component is rendered on the DOM."),(0,o.yg)("p",null,"Let's say we have two routes: ",(0,o.yg)("inlineCode",{parentName:"p"},"/home")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"/about")," in our application and ",(0,o.yg)("inlineCode",{parentName:"p"},"/home")," route is mapped to ",(0,o.yg)("inlineCode",{parentName:"p"},"Home")," component and the ",(0,o.yg)("inlineCode",{parentName:"p"},"/about")," route is mapped to the ",(0,o.yg)("inlineCode",{parentName:"p"},"About")," component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Home.js"',title:'"Home.js"'},"// Home.js\nconst Home = () => {\n  return <div>This is the Home component</div>;\n};\n\nexport default Home;\n\n// About.js\nconst About = () => {\n  return <div>This is the About component</div>;\n};\n\nexport default About;\n")),(0,o.yg)("p",null,"Let's set up the routing:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.js"',title:'"App.js"'},'import React from "react";\nimport { BrowserRouter as Router, Route, Link, Switch } from "react-router-dom";\nimport Home from "./Home";\nimport About from "./About";\n\nconst App = () => {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to="/home">Home</Link>\n          </li>\n          <li>\n            <Link to="/about">About</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Switch>\n        <Route exact path="/home" component={Home} />\n        <Route path="/about" component={About} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n')),(0,o.yg)("p",null,"Now, let's write the test cases:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.test.js"',title:'"App.test.js"'},'import React from "react";\nimport { render, screen } from "@testing-library/react";\nimport { BrowserRouter as Router } from "react-router-dom";\nimport App from "./App";\n\ntest("renders home component when visiting the home route", () => {\n  render(\n    <Router initialEntries={["/home"]}>\n      <App />\n    </Router>,\n  );\n\n  expect(screen.getByText("This is the Home component")).toBeInTheDocument();\n});\n\ntest("renders about component when visiting the about route", () => {\n  render(\n    <Router initialEntries={["/about"]}>\n      <App />\n    </Router>,\n  );\n\n  expect(screen.getByText("This is the About component")).toBeInTheDocument();\n});\n')),(0,o.yg)("p",null,"You understand the trick we did there. See that in the first ",(0,o.yg)("inlineCode",{parentName:"p"},"render"),", we rendered our ",(0,o.yg)("inlineCode",{parentName:"p"},"App")," component enclosed by the ",(0,o.yg)("inlineCode",{parentName:"p"},"Router")," component and passed the URL ",(0,o.yg)("inlineCode",{parentName:"p"},"/home")," to it. Now, according to our route mapping, this is supposed to render the ",(0,o.yg)("inlineCode",{parentName:"p"},"Home")," component, and the component will render the text ",(0,o.yg)("inlineCode",{parentName:"p"},"This is the Home component")," in the DOM."),(0,o.yg)("p",null,"So in the next line, we expect to see the text ",(0,o.yg)("inlineCode",{parentName:"p"},"This is the Home component")," in the DOM. Easy."),(0,o.yg)("p",null,"To test for the ",(0,o.yg)("inlineCode",{parentName:"p"},"/about")," route, we did the same thing, but this time we passed ",(0,o.yg)("inlineCode",{parentName:"p"},"/about")," URL, so we know that the ",(0,o.yg)("inlineCode",{parentName:"p"},"About")," will be rendered this time and we ",(0,o.yg)("inlineCode",{parentName:"p"},"expect")," to have ",(0,o.yg)("inlineCode",{parentName:"p"},"This is the About component")," text node in the DOM."),(0,o.yg)("p",null,"These test cases verify that the components ",(0,o.yg)("inlineCode",{parentName:"p"},"Home")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"About")," are rendered correctly based on the route configuration."),(0,o.yg)("h2",{id:"snapshot-testing"},"Snapshot testing"),(0,o.yg)("p",null,"Snapshot testing is quite different from what we have seen in this article. This type of testing is classified as output comparison testing. In the case of React component snapshot testing, the UI of the component is taken first and saved, then on subsequent testing, a current snapshot of the component is taken and compared with the previous snapshot to check for changes that may cause breaks."),(0,o.yg)("p",null,"Let's see an example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nconst Button = ({ text, onClick }) => {\n  return (\n    <button onClick={onClick} className="button">\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n')),(0,o.yg)("p",null,"To create a snapshot test for this component, you can write a test case using the ",(0,o.yg)("inlineCode",{parentName:"p"},"toMatchSnapshot")," matcher:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport Button from "./Button";\n\ntest("Button component matches snapshot", () => {\n  const { asFragment } = render(<Button text="Click me" onClick={() => {}} />);\n  expect(asFragment()).toMatchSnapshot();\n});\n')),(0,o.yg)("p",null,"Here, the ",(0,o.yg)("inlineCode",{parentName:"p"},"render")," function renders the ",(0,o.yg)("inlineCode",{parentName:"p"},"Button")," component with some props. The ",(0,o.yg)("inlineCode",{parentName:"p"},"asFragment")," function is then used to retrieve the rendered component as a snapshot."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"toMatchSnapshot")," matcher compares the rendered output with the previously saved snapshot. If a snapshot doesn't exist, Jest creates a new one. If a snapshot exists and there are no changes, the test passes. If there are differences between the snapshot and the current output, Jest highlights the differences and the test fails."),(0,o.yg)("p",null,"When you run this test for the first time, Jest will create a snapshot file (e.g., ",(0,o.yg)("inlineCode",{parentName:"p"},"Button.test.js.snap"),") containing the rendered output. On subsequent test runs, Jest compares the rendered output with the snapshot and reports any changes."),(0,o.yg)("p",null,"If you intentionally make changes to the component's output and want to update the snapshot, you can run Jest with the ",(0,o.yg)("inlineCode",{parentName:"p"},"--updateSnapshot")," flag to update the snapshot file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"jest --updateSnapshot\n")),(0,o.yg)("p",null,"##\xa0Testing Performance with React Profiler"),(0,o.yg)("p",null,"I wanted to add some performance testing to our React app. This will help us ensure that our components are not only functional, but also performant."),(0,o.yg)("h3",{id:"profiling-with-the-react-profiler"},"Profiling with the React Profiler"),(0,o.yg)("p",null,"React Profiler is a tool to measure the performance of React components. To identify performance bottlenecks and optimize our components accordingly."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { Profiler } from "react";\nimport { render } from "@testing-library/react";\nimport MyComponent from "./MyComponent";\n\nconst onRenderCallback = (\n  id, // the "id" prop of the Profiler tree that has just committed\n  phase, // either "mount" (if the tree just mounted) or "update" (if it re-rendered)\n  actualDuration, // time spent rendering the committed update\n  baseDuration, // estimated time to render the entire subtree without memoization\n  startTime, // when React began rendering this update\n  commitTime, // when React committed this update\n  interactions, // the Set of interactions belonging to this update\n) => {\n  console.log({\n    id,\n    phase,\n    actualDuration,\n    baseDuration,\n    startTime,\n    commitTime,\n    interactions,\n  });\n};\n\ntest("measures performance of MyComponent", () => {\n  render(\n    <Profiler id="MyComponent" onRender={onRenderCallback}>\n      <MyComponent />\n    </Profiler>,\n  );\n});\n')),(0,o.yg)("p",null,"In this example, we wrap ",(0,o.yg)("inlineCode",{parentName:"p"},"MyComponent")," inside a ",(0,o.yg)("inlineCode",{parentName:"p"},"Profiler")," giving it an ",(0,o.yg)("inlineCode",{parentName:"p"},"onRenderCallback")," function to log performance metrics so that we may pinpoint potential trouble spots."),(0,o.yg)("h3",{id:"using-performance-tools"},"Using Performance Tools"),(0,o.yg)("p",null,"We can use performance tools to analyze and optimize our React components effectively. Here are a couple:"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"React DevTools Profiler")),(0,o.yg)("p",null,"The Profiler tab in React DevTools allows developers to record and analyze component performance during real time. This helps locate components that are re-rendering too frequently or take an excessively long time to render."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Lighthouse:")," Lighthouse is an open-source automatic tool for increasing web page quality. It gives access to all the performance metrics and suggests changes you need to make."),(0,o.yg)("h2",{id:"accessibility-testing"},"Accessibility Testing"),(0,o.yg)("h3",{id:"ensuring-accessible-components"},"Ensuring Accessible Components"),(0,o.yg)("p",null,"The final expected outcome is that every component should be largely accessible in order to provide a great user experience for all, including those with disabilities. Here's a general outline and code samples of what we will cover:"),(0,o.yg)("p",null,"Ensuring Accessible Components We can automatically find and fix accessibility issues on components with the use of tooling like Axe. Axe is an engine used to run accessibility tests on web pages and other HTML interfaces."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport { axe, toHaveNoViolations } from "jest-axe";\n\nexpect.extend(toHaveNoViolations);\n\nconst MyComponent = () => (\n  <div>\n    <h1>Hello, World!</h1>\n    <button>Click Me</button>\n  </div>\n);\n\ntest("should have no accessibility violations", async () => {\n  const { container } = render(<MyComponent />);\n  const results = await axe(container);\n  expect(results).toHaveNoViolations();\n});\n')),(0,o.yg)("p",null,"Here, we are using the axe library to check our component for accessibility issues. The toHaveNoViolations matcher helps us assert that there are no accessibility violations in our component."),(0,o.yg)("h3",{id:"writing-tests-for-aria-roles-and-properties"},"Writing Tests for ARIA Roles and Properties"),(0,o.yg)("p",null,"Writing Tests for ARIA Roles and Properties ARIA (Accessible Rich Internet Applications) roles and properties help make content on the web more accessible to people with disabilities. Test your components' correct use of ARIA attributes."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render } from "@testing-library/react";\nimport "@testing-library/jest-dom/extend-expect";\n\nconst AriaComponent = () => (\n  <div>\n    <button aria-label="Close">X</button>\n  </div>\n);\n\ntest("button should have correct aria-label", () => {\n  const { getByLabelText } = render(<AriaComponent />);\n  const button = getByLabelText("Close");\n  expect(button).toBeInTheDocument();\n});\n')),(0,o.yg)("p",null,"In this example we are using the aria-label attribute in order that the button is accessibly labeled. We then use the @testing-library/react getByLabelText to test that the button is accessible by its ARIA label."),(0,o.yg)("h3",{id:"keyboard-navigation-testing"},"Keyboard Navigation Testing"),(0,o.yg)("p",null,"Simulating keyboard events and verifying focus management ensures that users can navigate our application using the keyboard."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { render, fireEvent } from "@testing-library/react";\nimport "@testing-library/jest-dom/extend-expect";\n\nconst KeyboardComponent = () => (\n  <div>\n    <button>First Button</button>\n    <button>Second Button</button>\n  </div>\n);\n\ntest("should navigate buttons using keyboard", () => {\n  const { getByText } = render(<KeyboardComponent />);\n  const firstButton = getByText("First Button");\n  const secondButton = getByText("Second Button");\n\n  firstButton.focus();\n  expect(firstButton).toHaveFocus();\n\n  fireEvent.keyDown(document, { key: "Tab" });\n  expect(secondButton).toHaveFocus();\n});\n')),(0,o.yg)("p",null,"In this test, we simulate pressing the Tab key to shift focus from the first button to the second button. We use the ",(0,o.yg)("inlineCode",{parentName:"p"},"fireEvent")," function of ",(0,o.yg)("inlineCode",{parentName:"p"},"@testing-library/react")," for simulating keyboard events and use the ",(0,o.yg)("inlineCode",{parentName:"p"},"toHaveFocus")," matcher for verification of focus management."),(0,o.yg)("h2",{id:"conclusion"},"Conclusion"),(0,o.yg)("p",null,"We covered a lot in this article. We started with introducing unit testing in software development as a whole. Then, next, we learned how to set up a testing environment in React project, and from there we installed the testing tools and libraries."),(0,o.yg)("p",null,"Further down, we learned how to write tests for basic React components, how to fire events on elements in a testing env, and how to test states and props. We advanced a little, exploring deep concepts, we learned how to test React Context-powered components, Routing system, and snapshot testing."))}h.isMDXComponent=!0}}]);