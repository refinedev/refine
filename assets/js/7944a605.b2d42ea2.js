"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[78415],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>u});var i=n(37953);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),g=a,u=m["".concat(s,".").concat(g)]||m[g]||c[g]||r;return n?i.createElement(u,o(o({ref:t},p),{},{components:n})):i.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},97718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>m});n(37953);var i=n(58860);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={title:"Material UI Grid System in React",description:"We'll discover the Material UI Grid system with React examples",slug:"material-ui-grid",authors:"doro_onome",tags:["material-ui","react","css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/social-2.png",hide_table_of_contents:!1},s=void 0,d={permalink:"/blog/material-ui-grid",source:"@site/blog/2024-05-22-mui-grid.md",title:"Material UI Grid System in React",description:"We'll discover the Material UI Grid system with React examples",date:"2024-05-22T00:00:00.000Z",formattedDate:"May 22, 2024",tags:[{label:"material-ui",permalink:"/blog/tags/material-ui"},{label:"react",permalink:"/blog/tags/react"},{label:"css",permalink:"/blog/tags/css"}],readingTime:14.595,hasTruncateMarker:!1,authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],frontMatter:{title:"Material UI Grid System in React",description:"We'll discover the Material UI Grid system with React examples",slug:"material-ui-grid",authors:"doro_onome",tags:["material-ui","react","css"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/social-2.png",hide_table_of_contents:!1},prevItem:{title:"5 Most Common useState Mistakes React Developers Often Make",permalink:"/blog/common-usestate-mistakes-and-how-to-avoid"},nextItem:{title:"Form Schema Validation with Zod and React Hook Form",permalink:"/blog/zod-typescript"},relatedPosts:[{title:"How to use Material UI Select in React",description:"We'll discover the Material UI select component with examples",permalink:"/blog/material-ui-select-component",formattedDate:"December 20, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:10.94,date:"2024-12-20T00:00:00.000Z"},{title:"A Complete Human Resources (HR) App Built with Refine",description:"The Refine HR App showcases how to build efficient, enterprise-grade HR management solutions using Refine.js and modern technologies.",permalink:"/blog/human-resources-application",formattedDate:"November 21, 2024",authors:[{name:"Necati \xd6zmen",title:"Head of Growth at Refine",url:"https://github.com/necatiozmen",description:"Feeling Irie",github:"https://github.com/necatiozmen",twitter:"https://twitter.com/necatiozmen3",linkedin:"https://www.linkedin.com/in/necatiozmen/",imageURL:"https://github.com/necatiozmen.png",key:"necati"}],readingTime:2.9,date:"2024-11-21T00:00:00.000Z"},{title:"Next.js vs React - A Beginner's Guide",description:"We briefly run through the innovation driven differences between React and Next.js in rendering behavior, routing, data fetching, backend API development and app configuration.",permalink:"/blog/next-js-vs-react",formattedDate:"October 17, 2024",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:24.44,date:"2024-10-17T00:00:00.000Z"}],authorPosts:[{title:"A Guide on Material UI AutoComplete in React",description:"We'll discover the Material UI AutoComplete component with examples",permalink:"/blog/material-ui-autocomplete-component",formattedDate:"July 3, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:18.89,date:"2024-07-03T00:00:00.000Z"},{title:"How to use Material UI Tooltip",description:"We'll discover the Material UI Tooltip component with examples",permalink:"/blog/material-ui-tooltip-component",formattedDate:"November 29, 2022",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:8.54,date:"2022-11-29T00:00:00.000Z"},{title:"Material UI button in React",description:"A complete guide on using Material UI button in a React app",permalink:"/blog/mui-button-in-react",formattedDate:"December 10, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:11.355,date:"2024-12-10T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},m=[{value:"Introduction",id:"introduction",level:2},{value:"What is Material UI?",id:"what-is-material-ui",level:2},{value:"What is Material UI DataGrid component?",id:"what-is-material-ui-datagrid-component",level:2},{value:"MUI DataGrid Component Essential Features:",id:"mui-datagrid-component-essential-features",level:3},{value:"Getting Started with Material UI Grid",id:"getting-started-with-material-ui-grid",level:2},{value:"How to use Material UI Grid in your React project?",id:"how-to-use-material-ui-grid-in-your-react-project",level:2},{value:"Containers and Items",id:"containers-and-items",level:3},{value:"Spacing",id:"spacing",level:3},{value:"Fluid Grids",id:"fluid-grids",level:3},{value:"Basic Fluid Grids",id:"basic-fluid-grids",level:3},{value:"Fluid Grids with multiple breakpoints",id:"fluid-grids-with-multiple-breakpoints",level:3},{value:"Auto Layout",id:"auto-layout",level:3},{value:"Nested Grids",id:"nested-grids",level:3},{value:"Building a simple Blog Page UI with Material UI Grid",id:"building-a-simple-blog-page-ui-with-material-ui-grid",level:2},{value:"The <code>&lt;MainFeaturedPost/&gt;</code> Component",id:"the-mainfeaturedpost-component",level:3},{value:"<code>&lt;FeaturedPost/&gt;</code> component",id:"featuredpost-component",level:3},{value:"The <code>&lt;Blog/&gt;</code> Component",id:"the-blog-component",level:3},{value:"When to use Material UI DataGrid Component?",id:"when-to-use-material-ui-datagrid-component",level:2},{value:"Material UI Grid Drawbacks",id:"material-ui-grid-drawbacks",level:2},{value:"Negative Margin",id:"negative-margin",level:3},{value:"white-space no-wrap",id:"white-space-no-wrap",level:3},{value:"direction: column | column-reverse",id:"direction-column--column-reverse",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:m},g="wrapper";function u(e){var{components:t}=e,n=o(e,["components"]);return(0,i.yg)(g,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){a(e,t,n[t])}))}return e}({},c,n),{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},(0,i.yg)("em",{parentName:"strong"},"This article was last updated on Nov 18, 2024 to add more information, use cases on Material UI DataGrid component."))),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"A grid layout is a set of measurements used to position elements or components on a page based on successive columns and rows. With the daily demand for responsive web design, using grids in web applications has become a necessity. It is almost impossible to assemble a web layout without incorporating a grid system. Grid layouts significantly increase any web application's aesthetic value and user experience."),(0,i.yg)("p",null,"Material UI comes with its grid system that helps developers create a responsive grid layout that adjusts to any screen size or orientation, ensuring consistency across layouts. This article will deeply explore ",(0,i.yg)("strong",{parentName:"p"},"Material UI Grid"),", its features, implementations, and limitations in any React application."),(0,i.yg)("p",null,"Steps we'll cover:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#what-is-material-ui"},"What is Material UI?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#what-is-material-ui-datagrid-component"},"What is Material UI DataGrid component?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#getting-started-with-material-ui-grid"},"Getting Started with Material UI Grid")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#how-to-use-material-ui-grid-in-your-react-project"},"How to use Material UI Grid in your React project?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#building-a-simple-blog-page-ui-with-material-ui-grid"},"Building a simple Blog Page UI with Material UI Grid")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#when-to-use-material-ui-datagrid-component"},"When to use Material UI DataGrid Component?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#material-ui-grid-drawbacks"},"Material UI Grid Drawbacks"))),(0,i.yg)("h2",{id:"what-is-material-ui"},"What is Material UI?"),(0,i.yg)("p",null,"Material UI is a free and open-source library based on ",(0,i.yg)("a",{parentName:"p",href:"https://material.io/design"},"Material Design"),". It provides predefined and customizable React UI components to help with web development. More developers have incorporated Material UI into their projects over the years because it simplifies and speeds up the web design process."),(0,i.yg)("p",null,"Material UI provides different categories of components, including Navigation components, Input components, Data Display components, Feedback components, Layout components, e.t.c. The Material UI Grid is a perfect example of the Layout components."),(0,i.yg)("p",null,"Install the Material UI library as a dependency in your project's ",(0,i.yg)("inlineCode",{parentName:"p"},"package.json")," with the following command:"),(0,i.yg)("p",null,"Use npm\n",(0,i.yg)("inlineCode",{parentName:"p"},"npm install @mui/material @emotion/react @emotion/styled")),(0,i.yg)("p",null,"Use yarn\n",(0,i.yg)("inlineCode",{parentName:"p"},"npm install @mui/material @emotion/react @emotion/styled")),(0,i.yg)("h2",{id:"what-is-material-ui-datagrid-component"},"What is Material UI DataGrid component?"),(0,i.yg)("p",null,"The Material-UI DataGrid is designed to be a powerful and flexible solution for data tables in React applications. It's built with Material-UI (MUI) and comes with an expanded set of functionality for rendering, managing, and working with tabular data in a React application."),(0,i.yg)("h3",{id:"mui-datagrid-component-essential-features"},"MUI DataGrid Component Essential Features:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Data Presentation"),": Effectively visualize large datasets via virtualization. Customizable columns, rows, and cells for more personal displays. ",(0,i.yg)("strong",{parentName:"p"},"Sorting and Filtering"),": Columns support sorting in ascending or descending order. Filters that allow you to see only the rows containing certain criteria."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Pagination"),": Pagination controls to easily navigate back and forth through long lists."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Selection"),": Can choose a row and cell, single and multi-selection."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Editing"),": One-click cell editing allowing entries for data directly within the table."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Aggregation and Grouping"),": Aggregate data and group rows on columns to be able to visualize summaries."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Customizable Look"),": Advanced theming opportunities to harmonize with the visual style and experience of your application."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Responsive and Accessible"),": Responsive design to fit the screen properly. Accessibility features to make sure it is user-friendly for everyone. Spacing: Easily integrate with backend services for data retrieving, updating, and management."),(0,i.yg)("h2",{id:"getting-started-with-material-ui-grid"},"Getting Started with Material UI Grid"),(0,i.yg)("p",null,"The Material Design's grid system is visually balanced based on a 12-column grid layout. It provides a container that allows visual consistency across different screen sizes and viewports. You can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid />")," component to implement Material Design\u2019s grid system in your React application."),(0,i.yg)("p",null,"When using Material UI Grid:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Item widths are set in percentages to ensure the layouts are adaptive to all screen sizes."),(0,i.yg)("li",{parentName:"ul"},"You can create space between individual grid items with ",(0,i.yg)("inlineCode",{parentName:"li"},"padding")),(0,i.yg)("li",{parentName:"ul"},"The grid has five breakpoints: ",(0,i.yg)("inlineCode",{parentName:"li"},"xs"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"sm"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"md"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"lg"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"xl"),"."),(0,i.yg)("li",{parentName:"ul"},"The breakpoint can be assigned an value that indicates how many of the 12 columns are occupied by the component when it reaches that width.")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note that"),": The ",(0,i.yg)("inlineCode",{parentName:"p"},"Grid />")," component employs ",(0,i.yg)("a",{parentName:"p",href:"https://www.w3.org/TR/css-flexbox-1/"},"Flexbox properties")," for greater flexibility."),(0,i.yg)("h2",{id:"how-to-use-material-ui-grid-in-your-react-project"},"How to use Material UI Grid in your React project?"),(0,i.yg)("p",null,"To get started, import the ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid />")," component into your project like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import Grid from "@mui/material/Grid2";\nor;\nimport { Grid } from "@mui/material";\n')),(0,i.yg)("h3",{id:"containers-and-items"},"Containers and Items"),(0,i.yg)("p",null,"Typically, Material UI Grid provides two types of layouts; ",(0,i.yg)("inlineCode",{parentName:"p"},"containers")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"items"),". The ",(0,i.yg)("inlineCode",{parentName:"p"},"container")," prop provides the CSS properties of a flex container to the ",(0,i.yg)("inlineCode",{parentName:"p"},"Grid />")," component, and the ",(0,i.yg)("inlineCode",{parentName:"p"},"item")," prop provides the CSS properties of a flex child."),(0,i.yg)("p",null,"The items need to be wrapped in a container:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import Grid from "@mui/material/Grid2";\n\nreturn (\n  <>\n    {/* A flexbox container represented in an Material UI Grid container */}\n    <Grid container>\n      Container\n      {/* A Child grid container */}\n      <Grid>\n        <div>A flex item</div> {/* A simple flex item */}\n      </Grid>\n    </Grid>\n  </>\n);\n')),(0,i.yg)("h3",{id:"spacing"},"Spacing"),(0,i.yg)("p",null,"To create space between grid child items, you can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"spacing")," prop that accompanies the ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid />")," component. Any positive number and including decimals can be used as the ",(0,i.yg)("inlineCode",{parentName:"p"},"spacing")," value."),(0,i.yg)("p",null,"Consider the code below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import React, { useState } from "react";\nimport Grid from "@mui/material/Grid2";\nimport FormControlLabel from "@mui/material/FormControlLabel";\nimport RadioGroup from "@mui/material/RadioGroup";\nimport Radio from "@mui/material/Radio";\nimport Paper from "@mui/material/Paper";\nimport { Camera } from "@mui/icons-material";\n\n//create our style\nconst styles = {\n  paper: {\n    height: 100,\n    width: 100,\n    color: "#808080",\n  },\n\n  radio: {\n    backgroundColor: "#808080",\n    color: "#fff",\n  },\n};\n\nconst MUIspacing = () => {\n  //Make our variable for spacing. The default value is 0.\n  const [spacing, setSpacing] = useState(0);\n\n  //When executed, change the value of the spacing Hook to the value specified.\n  const changeSpacing = (e) => {\n    setSpacing(Number(e.target.value));\n  };\n  return (\n    <div>\n      <div>\n        {/* User will determine spacing according to their preference*/}\n        <Grid container spacing={spacing}>\n          {/*Rethreeder 3 empty black boxes as items of this container*/}\n          {[0, 1, 2].map((value) => (\n            <Grid key={value}>\n              <Camera style={styles.paper} />\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n      <div>\n        <Paper>\n          <div>\n            {/* Show user\'s chosen spacing value*/}\n            {spacing}\n            <RadioGroup\n              name="spacing"\n              aria-label="spacing"\n              value={spacing.toString()}\n              onChange={changeSpacing}\n              row\n              style={styles.radio}\n            >\n              {/*Create a form with multiple spacing values. */}\n              {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((value) => (\n                <FormControlLabel\n                  key={value}\n                  value={value.toString()}\n                  control={<Radio />}\n                  label={value.toString()}\n                />\n              ))}\n            </RadioGroup>\n          </div>\n        </Paper>\n      </div>\n    </div>\n  );\n};\n\nexport default MUIspacing;\n')),(0,i.yg)("p",null,"The code above showcases a dynamic change of the ",(0,i.yg)("inlineCode",{parentName:"p"},"spacing")," prop value. There are three grid elements(camera icons), each interactively spaced with every click of a radio button that corresponds with the ",(0,i.yg)("inlineCode",{parentName:"p"},"spacing")," value."),(0,i.yg)("p",null,"Here\u2019s the result:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/spacing.gif",alt:"spacing1"}),(0,i.yg)("br",null),(0,i.yg)("h3",{id:"fluid-grids"},"Fluid Grids"),(0,i.yg)("p",null,"Fluid Grids in Material UI use column widths and breakpoints to scale grid items and resize content within them. We can create layouts for different screen sizes using the ",(0,i.yg)("inlineCode",{parentName:"p"},"size")," prop on the grid items."),(0,i.yg)("h3",{id:"basic-fluid-grids"},"Basic Fluid Grids"),(0,i.yg)("p",null,"Basic Fluid Grids provide column widths that are represented with integer values from 1 to 12. They are applicable at any breakpoint and indicate how many columns the component occupies. A value assigned to a breakpoint applies to all preset width modifications."),(0,i.yg)("p",null,"Here\u2019s a simple illustration of how to use Basic Fluid Grids in Material UI."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport Box from "@mui/material/Box";\nimport Grid from "@mui/material/Grid2";\nimport "../App.css";\n\nconst BasicGrid = () => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      {/* Setting up the Fluid Grid system */}\n      <Grid container spacing={2}>\n        <Grid\n          size={{\n            xs: 6,\n          }}\n        >\n          <div className="grid-elements">xs=6</div>\n        </Grid>\n        <Grid\n          size={{\n            xs: 6,\n          }}\n        >\n          <div className="grid-elements">xs=6</div>\n        </Grid>\n        <Grid\n          size={{\n            xs: 8,\n          }}\n        >\n          <div className="grid-elements">xs=4</div>\n        </Grid>\n        <Grid\n          size={{\n            xs: 4,\n          }}\n        >\n          <div className="grid-elements">xs=8</div>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default BasicGrid;\n')),(0,i.yg)("p",null,"Here\u2019s the result;"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/fluid.gif",alt:"fluid"}),(0,i.yg)("br",null),(0,i.yg)("h3",{id:"fluid-grids-with-multiple-breakpoints"},"Fluid Grids with multiple breakpoints"),(0,i.yg)("p",null,"Components may be defined with multiple widths, causing the layout to change at the defined breakpoint. Width values assigned to larger breakpoints precede those assigned to smaller ones.\nFor example with the prop ",(0,i.yg)("inlineCode",{parentName:"p"},"size={{ xs: 6, md: 8 }}"),", the component will take up half of the 12-column grid (6 columns) when the viewport is 600px or wider, and it will fill all 12 columns on smaller screens."),(0,i.yg)("p",null,"Consider the code below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Box from "@mui/material/Box";\nimport Grid from "@mui/material/Grid2";\n\nconst ComplexFluidGrid = () => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={2}>\n        <Grid item xs={6} md={8}>\n          <div className="grid-elements">xs=6 md=8</div>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <div className="grid-elements">xs=6 md=4</div>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <div className="grid-elements">xs=6 md=4</div>\n        </Grid>\n        <Grid item xs={6} md={8}>\n          <div className="grid-elements">xs=6 md=8</div>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ComplexFluidGrid;\n')),(0,i.yg)("br",null),(0,i.yg)("p",null,"The code above is a simple Material UI Grid system with four grid children elements. The elements are set to take space according to a 3:1 ratio when the screen size is 600 px or greater and a 2:2 percentage when the screen size is 600px or less."),(0,i.yg)("p",null,"Here\u2019s the result:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/fluidGrid.gif",alt:"fluidGrid"}),(0,i.yg)("br",null),(0,i.yg)("br",null),(0,i.yg)("div",null,(0,i.yg)("a",{href:"https://github.com/refinedev/refine"},(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/github-support-banner.png",alt:"github support banner"}))),(0,i.yg)("h3",{id:"auto-layout"},"Auto Layout"),(0,i.yg)("p",null,"The auto-layout feature allows grid items to auto-resize and occupy available space without specifying the item\u2019s width. You can set the width for an item and have all others resize to fit."),(0,i.yg)("p",null,"Consider the code below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Box from "@mui/material/Box";\nimport Grid from "@mui/material/Grid2";\n\nconst AutoGrid = () => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={3}>\n        <Grid size="grow">\n          <div className="grid-elements">xs</div>\n        </Grid>\n        <Grid\n          size={{\n            xs: 6,\n          }}\n        >\n          <div className="grid-elements">xs=6</div>\n        </Grid>\n        <Grid size="grow">\n          <div className="grid-elements">xs</div>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default AutoGrid;\n')),(0,i.yg)("br",null),(0,i.yg)("p",null,"The code above depicts three grid elements. The middle element is set to take half the screen's width while the other two dynamically take the space remaining on either side."),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/autoLayout.gif",alt:"autoLayout"}),(0,i.yg)("br",null),(0,i.yg)("h3",{id:"nested-grids"},"Nested Grids"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid container />")," that renders as a direct child inside another ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid container />")," is a nested grid that inherits its columns and spacing from the top level. This allows you to create complex layouts with multiple grid items."),(0,i.yg)("p",null,"Consider the code below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Box from "@mui/material/Box";\nimport Grid from "@mui/material/Grid2";\n\nfunction NestedGrid() {\n  return (\n    <React.Fragment>\n      <Grid\n        size={{\n          xs: 4,\n        }}\n      >\n        <div className="grid-elements">Grid Element</div>\n      </Grid>\n      <Grid\n        size={{\n          xs: 4,\n        }}\n      >\n        <div className="grid-elements">Grid Element</div>\n      </Grid>\n      <Grid\n        size={{\n          xs: 4,\n        }}\n      >\n        <div className="grid-elements">Grid Element</div>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default function NestedGridGroup() {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={1}>\n        <Grid container spacing={3}>\n          <NestedGrid />\n        </Grid>\n        <Grid container spacing={3}>\n          <NestedGrid />\n        </Grid>\n        <Grid container spacing={3}>\n          <NestedGrid />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n')),(0,i.yg)("br",null),(0,i.yg)("p",null,"The code above showcases a nested Material UI Grid system. The ",(0,i.yg)("inlineCode",{parentName:"p"},"<FrontRow />")," component is a grid setup called inside another ",(0,i.yg)("inlineCode",{parentName:"p"},"<Grid />")," component multiple times to produce a result like this:"),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/nestedGrid.gif",alt:"nestedGrid"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"building-a-simple-blog-page-ui-with-material-ui-grid"},"Building a simple Blog Page UI with Material UI Grid"),(0,i.yg)("p",null,"Material UI Grid assists developers with the measurements needed to create a more easily responsive UI. This can be depicted in a simple Blog Page layout created with React and Material UI. Material UI Grid is used in three app components; ",(0,i.yg)("inlineCode",{parentName:"p"},"Blog"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"FeaturedPost"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"MainFeaturedPost"),"."),(0,i.yg)("h3",{id:"the-mainfeaturedpost-component"},"The ",(0,i.yg)("inlineCode",{parentName:"h3"},"<MainFeaturedPost/>")," Component"),(0,i.yg)("p",null,"This component contains all the elements in the blog layout's main featured post section."),(0,i.yg)("p",null,"Study the code:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Paper from "@mui/material/Paper";\nimport Typography from "@mui/material/Typography";\nimport Grid from "@mui/material/Grid2";\nimport Box from "@mui/material/Box";\n\nfunction MainFeaturedPost(props) {\n  const { post } = props;\n\n  return (\n    <Paper\n      sx={{\n        position: "relative",\n        backgroundColor: "grey.800",\n        color: "#fff",\n        mb: 4,\n        backgroundSize: "cover",\n        backgroundRepeat: "no-repeat",\n        backgroundPosition: "center",\n        backgroundImage: `url(${post.image})`,\n      }}\n    >\n      {\n        <img\n          style={{ display: "none" }}\n          src="https://refine.ams3.cdn.digitaloceanspaces.comundefined"\n          alt={post.imageText}\n        />\n      }\n      <Box\n        sx={{\n          position: "absolute",\n          top: 0,\n          bottom: 0,\n          right: 0,\n          left: 0,\n          backgroundColor: "rgba(0,0,0,.3)",\n        }}\n      />\n      <Grid container>\n        <Grid\n          size={{\n            md: 6,\n          }}\n        >\n          <Box\n            sx={{\n              position: "relative",\n              p: { xs: 3, md: 6 },\n              pr: { md: 0 },\n            }}\n          >\n            <Typography component="h3" variant="h2">\n              {post.title}\n            </Typography>\n            <Typography variant="h5" color="inherit" paragraph>\n              {post.description}\n            </Typography>\n            {post.linkText}\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default MainFeaturedPost;\n')),(0,i.yg)("h3",{id:"featuredpost-component"},(0,i.yg)("inlineCode",{parentName:"h3"},"<FeaturedPost/>")," component"),(0,i.yg)("p",null,"This component holds the elements in the Blog page layout featured posts section. There are two of them, and they are set the share the available screen space in a 3:6 ratio when the viewport is 600px or more. They are also set to stack on top of each other when the viewport is 600px or less."),(0,i.yg)("p",null,"Study the code below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport Typography from "@mui/material/Typography";\nimport Grid from "@mui/material/Grid2";\nimport Card from "@mui/material/Card";\nimport CardActionArea from "@mui/material/CardActionArea";\nimport CardContent from "@mui/material/CardContent";\nimport CardMedia from "@mui/material/CardMedia";\n\nfunction FeaturedPost(props) {\n  const { post } = props;\n\n  return (\n    <Grid\n      size={{\n        xs: 12,\n        md: 6,\n      }}\n    >\n      <CardActionArea component="a" href="#">\n        <Card sx={{ display: "flex" }}>\n          <CardContent sx={{ flex: 1 }}>\n            <Typography component="h2" variant="h5">\n              {post.title}\n            </Typography>\n            <Typography variant="subtitle1" color="text.secondary">\n              {post.date}\n            </Typography>\n            <Typography variant="subtitle1" paragraph>\n              {post.description}\n            </Typography>\n            <Typography variant="subtitle1" color="primary">\n              Continue reading...\n            </Typography>\n          </CardContent>\n          <CardMedia\n            component="img"\n            sx={{ width: 160, display: { xs: "none", sm: "block" } }}\n            image={post.image}\n            alt={post.imageLabel}\n          />\n        </Card>\n      </CardActionArea>\n    </Grid>\n  );\n}\n\nexport default FeaturedPost;\n')),(0,i.yg)("h3",{id:"the-blog-component"},"The ",(0,i.yg)("inlineCode",{parentName:"h3"},"<Blog/>")," Component"),(0,i.yg)("p",null,"This component handles housing and displays the other components with the ",(0,i.yg)("strong",{parentName:"p"},"Material UI grid"),"."),(0,i.yg)("p",null,"Here\u2019s the code for the Blog component:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport CssBaseline from "@mui/material/CssBaseline";\nimport Grid from "@mui/material/Grid2";\nimport Container from "@mui/material/Container";\nimport { createTheme, ThemeProvider } from "@mui/material/styles";\nimport Header from "./Header";\nimport MainFeaturedPost from "./MainFeaturedPost";\nimport FeaturedPost from "./FeaturedPost";\n\nconst sections = [\n  { title: "Technology", url: "#" },\n  { title: "Design", url: "#" },\n  { title: "Culture", url: "#" },\n  { title: "Business", url: "#" },\n  { title: "Politics", url: "#" },\n  { title: "Opinion", url: "#" },\n  { title: "Science", url: "#" },\n  { title: "Health", url: "#" },\n  { title: "Style", url: "#" },\n  { title: "Travel", url: "#" },\n];\n\nconst mainFeaturedPost = {\n  title: "Title of a longer featured blog post",\n  description:\n    "Multiple lines of text that form the lede, informing new readers quickly and efficiently about what\'s most interesting in this post\'s contents.",\n  image: "https://source.unsplash.com/random",\n  imageText: "main image description",\n  linkText: "Continue reading\u2026",\n};\n\nconst featuredPosts = [\n  {\n    title: "Featured post",\n    date: "Nov 12",\n    description:\n      "This is a wider card with supporting text below as a natural lead-in to additional content.",\n    image: "https://source.unsplash.com/random",\n    imageLabel: "Image Text",\n  },\n  {\n    title: "Post title",\n    date: "Nov 11",\n    description:\n      "This is a wider card with supporting text below as a natural lead-in to additional content.",\n    image: "https://source.unsplash.com/random",\n    imageLabel: "Image Text",\n  },\n];\n\nconst theme = createTheme();\n\nexport default function Blog() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth="lg">\n        <Header title="Blog" sections={sections} />\n        <main>\n          <MainFeaturedPost post={mainFeaturedPost} />\n          <Grid container spacing={4}>\n            {featuredPosts.map((post) => (\n              <FeaturedPost key={post.title} post={post} />\n            ))}\n          </Grid>\n        </main>\n      </Container>\n    </ThemeProvider>\n  );\n}\n')),(0,i.yg)("br",null),(0,i.yg)("p",null,"We have a simple Blog Layout created with React and Material UI."),(0,i.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-09-18-mui-grid/featuredPost.gif",alt:"featuredPost"}),(0,i.yg)("br",null),(0,i.yg)("h2",{id:"when-to-use-material-ui-datagrid-component"},"When to use Material UI DataGrid Component?"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Making Lots of Data Understandable")),(0,i.yg)("p",null,"Material UI DataGrid has the capability to render a huge amount of data and is efficient in rendering performance."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Data Wrangling"),"\nIf your application needs advanced data-handling features, such as sorting, filtering, pagination, or grouping, Material UI DataGrid natively supports this."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Editable Data Tables"),"\nMaterial UI DataGrid features many cell-editing features, which work great when you need to let your users interact and edit the data right inside the table.\nThe tables are very flexible and expandable.\nIf you need to make a table that is highly configurable and extensible by design, Material UI DataGrid allows you to change the components' look and behavior to match your app design."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Integrating with Backend Services:"),"\nWhen you need to integrate the table to backend services for fetching, updating, and committing data, Material UI DataGrid API provides robust support for data sources and changes."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Data-heavy Tables"),"\nMaterial UI DataGrid comes with out-of-the-box features like column resizing, reordering, pinning, and virtualization."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Accessibility:"),"\nFor those times when you need a data grid that is accessible by WAI-ARIA standards, MUI DataGrid comes accessibility-featured and baked right in, out of the box."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Examples of Use Cases")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Admin Dashboards:")," Display user data, product lists, and sales data, among others, allowing the data to be sorted and filtered."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Reporting Tools:")," The tools to be used in reporting complex datasets containing different groupings and aggregations."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Content Management Systems:")," Inline editing and batch processes for managing articles, user comments, user roles, and more."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Project Management Apps:")," Real-time updated lists of tasks and tables which indicate project details and resource allocation."),(0,i.yg)("h2",{id:"material-ui-grid-drawbacks"},"Material UI Grid Drawbacks"),(0,i.yg)("p",null,"Some of the drawbacks of using ",(0,i.yg)("strong",{parentName:"p"},"Material UI Grid")," include:"),(0,i.yg)("h3",{id:"negative-margin"},"Negative Margin"),(0,i.yg)("p",null,"Material UI employs a negative margin to create space between grid items. This could result in unexpected behaviors. To apply a background color, for example, you must use ",(0,i.yg)("inlineCode",{parentName:"p"},"display: flex;")," on the parent grid element."),(0,i.yg)("h3",{id:"white-space-no-wrap"},"white-space no-wrap"),(0,i.yg)("p",null,"On flex items, the default setting is ",(0,i.yg)("inlineCode",{parentName:"p"},"min-width: auto"),". This causes a positioning conflict when the child uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"white-space: nowrap"),". You can set ",(0,i.yg)("inlineCode",{parentName:"p"},"min-width: 0")," to ensure that the item stays within the container.\nIn practice, you can set the ",(0,i.yg)("inlineCode",{parentName:"p"},"zeroMinWidth")," property as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"<Grid item xs zeroMinWidth>\n  <Typography noWrap>\n </Grid>\n")),(0,i.yg)("h3",{id:"direction-column--column-reverse"},"direction: column | column-reverse"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},'direction="column"')," and ",(0,i.yg)("inlineCode",{parentName:"p"},'direction="column-reverse"')," containers do not support the ",(0,i.yg)("inlineCode",{parentName:"p"},"size={{ xs, sm, md , lg ,xl }}")," prop. These breakpoints are primarily concerned with controlling width and have no effect on height within column containers."),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"This article covered ",(0,i.yg)("strong",{parentName:"p"},"Material UI Grid"),", its features, application and installment inside any React application. We also further explored the Material UI Grid functionalities in a simple Blog post Layout. Despite the limitations enlisted above, Material UI Grid aids developers in creating a responsive and interactive web user interface. I hope this article becomes valuable to you."))}u.isMDXComponent=!0}}]);