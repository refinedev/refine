"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[19307],{58860:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var a=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||g[u]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(37953);var a=n(58860);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const l={title:"refine vs Blitz.js",description:"We will take a closer look at how to set both up, what are their internal builds, how they handle the data sources, how to implement the CRUD functionality, add authentication, and how to deploy them to production.",slug:"react-admin-frameworks-refine-vs-blitz-js",authors:"madars_biss",tags:["refine","comparison"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2FGroup%20821%20(1).png",hide_table_of_contents:!1},s="React Refine vs Blitz comparison",p={permalink:"/blog/react-admin-frameworks-refine-vs-blitz-js",source:"@site/blog/2023-03-15-refine-vs-blitzjs.md",title:"refine vs Blitz.js",description:"We will take a closer look at how to set both up, what are their internal builds, how they handle the data sources, how to implement the CRUD functionality, add authentication, and how to deploy them to production.",date:"2023-03-15T00:00:00.000Z",formattedDate:"March 15, 2023",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"comparison",permalink:"/blog/tags/comparison"}],readingTime:18.935,hasTruncateMarker:!1,authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],frontMatter:{title:"refine vs Blitz.js",description:"We will take a closer look at how to set both up, what are their internal builds, how they handle the data sources, how to implement the CRUD functionality, add authentication, and how to deploy them to production.",slug:"react-admin-frameworks-refine-vs-blitz-js",authors:"madars_biss",tags:["refine","comparison"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2FGroup%20821%20(1).png",hide_table_of_contents:!1},prevItem:{title:"Building a React Admin Dashboard with Refine",permalink:"/blog/building-react-admin-dashboard"},nextItem:{title:"Announcing the Release of Refine v4!",permalink:"/blog/refine-v4-announcement"},relatedPosts:[{title:"Top 6 Free Online Code Editors and IDEs with Pros and Cons",description:"We'll compare the best online IDEs and code editors for web development. We'll also look at the pros and cons of each.",permalink:"/blog/6-best-online-code-editors-comparison",formattedDate:"November 11, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:22.655,date:"2024-11-11T00:00:00.000Z"},{title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",permalink:"/blog/refine-react-ant-design-admin-panel-framework",formattedDate:"February 21, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:12.565,date:"2022-02-21T00:00:00.000Z"},{title:"The Important Differences between URI VS URL",description:"We'll be looking at the differences between URI and URL, and how they are used in web development.",permalink:"/blog/uri-vs-url",formattedDate:"September 18, 2024",authors:[{name:"Deborah Emeni",title:"Software Engineer",url:"https://github.com/debemenitammy",imageURL:"https://github.com/debemenitammy.png",key:"deborah_emeni"}],readingTime:14.455,date:"2024-09-18T00:00:00.000Z"}],authorPosts:[{title:"refine vs RedwoodJS",description:"We will compare two open source React frameworks, that can be used to build CRUD applications",permalink:"/blog/refine-vs-redwood-js",formattedDate:"January 23, 2023",authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],readingTime:26.61,date:"2023-01-23T00:00:00.000Z"},{title:"Creating a React search bar and content filtering components",description:"Article about how to create Search bar and filter component in React",permalink:"/blog/react-search-bar-and-filtering",formattedDate:"June 24, 2024",authors:[{name:"Madars Bi\u0161s",title:"Software Developer",url:"https://github.com/madzadev",imageURL:"https://github.com/madzadev.png",key:"madars_biss"}],readingTime:20.625,date:"2024-06-24T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},c=[{value:"About frameworks",id:"about-frameworks",level:2},{value:"Refine",id:"refine",level:3},{value:"Blitz",id:"blitz",level:3},{value:"Installation guide",id:"installation-guide",level:2},{value:"Refine",id:"refine-1",level:3},{value:"Blitz",id:"blitz-1",level:3},{value:"Internal structure",id:"internal-structure",level:2},{value:"Refine",id:"refine-2",level:3},{value:"Blitz",id:"blitz-2",level:3},{value:"Data providers",id:"data-providers",level:2},{value:"Refine",id:"refine-3",level:3},{value:"Blitz",id:"blitz-3",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Refine",id:"refine-4",level:3},{value:"Blitz",id:"blitz-4",level:3},{value:"Creating pages",id:"creating-pages",level:2},{value:"Refine",id:"refine-5",level:3},{value:"Blitz",id:"blitz-5",level:3},{value:"CRUD functionality",id:"crud-functionality",level:2},{value:"Refine",id:"refine-6",level:3},{value:"Blitz",id:"blitz-6",level:3},{value:"Testing CRUD",id:"testing-crud",level:2},{value:"Refine",id:"refine-7",level:3},{value:"Blitz",id:"blitz-7",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Refine",id:"refine-8",level:3},{value:"Blitz",id:"blitz-8",level:3},{value:"Conclusion",id:"conclusion",level:2}],g={toc:c},u="wrapper";function h(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(u,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"React is a popular library for creating dynamic and interactive user interfaces. Many frameworks have emerged from React to avoid the repetitive process of creating CRUD operations and other features for full-stack applications."),(0,a.yg)("p",null,"In this article, we will review two common solutions - ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"Refine")," and ",(0,a.yg)("a",{parentName:"p",href:"https://blitzjs.com/"},"Blitz"),". By providing an advanced set of tools and features, both aim to speed up and simplify the process of developing React apps."),(0,a.yg)("p",null,"We will take a closer look at how to set both up, what are their internal builds, how they handle the data sources, how to implement the CRUD functionality, add authentication, and how to deploy them to production."),(0,a.yg)("h2",{id:"about-frameworks"},"About frameworks"),(0,a.yg)("h3",{id:"refine"},"Refine"),(0,a.yg)("p",null,"Refine is a React-based framework, that is specifically designed to speed up the creation of data-intensive applications. It is an ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"open-source")," project, meaning everyone can access and contribute the code."),(0,a.yg)("p",null,"By its core nature, it is a headless framework that is based on a collection of hooks, components, and providers. The core is fully decoupled from the UI and business logic, meaning users have a fully flexible environment."),(0,a.yg)("p",null,"The Refine framework was created in 2021 and has witnessed rapid growth and attracted an active community around it since then. As of the time of the writing, the framework has already reached around 8K GitHub stars."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677092225_920x262.png",alt:"react-admin"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz"},"Blitz"),(0,a.yg)("p",null,"Blitz is a full-stack web framework built on top of NextJS, which means it preserves many of the core features like server-side rendering, static site generation, and automatic code splitting."),(0,a.yg)("p",null,"Furthermore, it is the NextJS toolkit that provides the necessary pieces to create feature-rich applications, adding features like authentication, a type-safe API layer, and many more."),(0,a.yg)("p",null,"Blitz is also an ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/blitz-js/blitz"},"open-source")," project that allows users to access the code and allows to contribute. Their community has generated a lot of impact as well, and has grown rapidly over time since the creation in 2020:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677092225_920x263.png",alt:"react-admin"})),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"installation-guide"},"Installation guide"),(0,a.yg)("h3",{id:"refine-1"},"Refine"),(0,a.yg)("p",null,"Refine comes with the project starter tool, which allows users to set up a fully working environment in minutes."),(0,a.yg)("p",null,"Run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"npm create refine-app@latest crud-refine"),". That will start the CLI wizard that will ask you to configure the project. For the purpose of this tutorial, pick the values as shown below:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2FScreenshot%202023-03-15%20at%2016.51.01.png",alt:"react-admin"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"The installation process should not take more than a minute."),(0,a.yg)("p",null,"Once it's done change the working directory to the newly created project by ",(0,a.yg)("inlineCode",{parentName:"p"},"cd crud-refine")," and run ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run dev")," to start up the developer server."),(0,a.yg)("p",null,"That should automatically open up a new browser window. If it's not, navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," manually and you will be presented with the Refine welcome screen:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677092501_1482x833.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz-1"},"Blitz"),(0,a.yg)("p",null,"To set up the Blitz app, the user must first install the Blitz CLI. You can do this by executing the command ",(0,a.yg)("inlineCode",{parentName:"p"},"npm install -g blitz")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"yarn global add blitz")," in your terminal."),(0,a.yg)("p",null,"Next, run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"blitz new crud-blitz"),". This will start the terminal CLI wizard asking you to configure the project. For the purpose of this tutorial pick the values as shown below:"),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677319716_906x107.png",alt:"react-admin"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"After that change the working directory to the newly created project by running ",(0,a.yg)("inlineCode",{parentName:"p"},"cd crud-blitz")," and start the development server by running ",(0,a.yg)("inlineCode",{parentName:"p"},"blitz dev"),"."),(0,a.yg)("p",null,"Finally, open your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000"),". This should present you with a Blitz welcome screen:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677319885_1892x926.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"internal-structure"},"Internal structure"),(0,a.yg)("h3",{id:"refine-2"},"Refine"),(0,a.yg)("p",null,"Refine file structure is as simple as it gets and they provide users with all the flexibility they would want to build upon. The main building block for the whole app is the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder."),(0,a.yg)("p",null,"It comes with the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Refine } from "@refinedev/core";\nimport { useNotificationProvider } from "@refinedev/antd";\nimport "@refinedev/antd/dist/reset.css";\n\nimport { useAuth0 } from "@auth0/auth0-react";\nimport routerBindings, {\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport axios from "axios";\nimport { BrowserRouter } from "react-router-dom";\n\nfunction App() {\n  const { isLoading, user, logout, getIdTokenClaims } = useAuth0();\n\n  if (isLoading) {\n    return <span>loading...</span>;\n  }\n\n  const authProvider: AuthProvider = {\n    login: async () => {\n      return {\n        success: true,\n      };\n    },\n    logout: async () => {\n      logout({ returnTo: window.location.origin });\n      return {\n        success: true,\n      };\n    },\n    onError: async (error) => {\n      console.error(error);\n      return { error };\n    },\n    check: async () => {\n      try {\n        const token = await getIdTokenClaims();\n        if (token) {\n          axios.defaults.headers.common = {\n            Authorization: `Bearer ${token.__raw}`,\n          };\n          return {\n            authenticated: true,\n          };\n        } else {\n          return {\n            authenticated: false,\n            error: {\n              message: "Check failed",\n              name: "Token not found",\n            },\n            redirectTo: "/login",\n            logout: true,\n          };\n        }\n      } catch (error: any) {\n        return {\n          authenticated: false,\n          error: new Error(error),\n          redirectTo: "/login",\n          logout: true,\n        };\n      }\n    },\n    getPermissions: async () => null,\n    getIdentity: async () => {\n      if (user) {\n        return {\n          ...user,\n          avatar: user.picture,\n        };\n      }\n      return null;\n    },\n  };\n\n  return (\n    <Refine\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      notificationProvider={useNotificationProvider}\n      Layout={Layout}\n      ReadyPage={ReadyPage}\n      catchAll={<ErrorComponent />}\n      routerProvider={routerProvider}\n      authProvider={authProvider}\n      LoginPage={Login}\n    />\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"First, the main ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," component and the necessary helper components like ",(0,a.yg)("inlineCode",{parentName:"p"},"Layout"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ReadyPage")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ErrorComponent")," are imported. Then the style sheet file, providers for data and router, and auth components are imported."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"App")," function first the auth logic is handled, and then in the render block, all of the imported helper components and providers are passed to the main ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," component as props."),(0,a.yg)("p",null,"To display the result on the screen, all of the exported content from ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," is imported and rendered to the DOM in the ",(0,a.yg)("inlineCode",{parentName:"p"},"index.tsx")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import React from "react";\nimport { createRoot } from "react-dom/client";\nimport { Auth0Provider } from "@auth0/auth0-react";\n\nimport reportWebVitals from "./reportWebVitals";\nimport App from "./App";\n\nconst container = document.getElementById("root") as HTMLElement;\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain="your-auth0-domain-address"\n      clientId="your-auth0-clientId"\n      redirectUri={window.location.origin}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n);\n')),(0,a.yg)("p",null,"Notice, that the ",(0,a.yg)("inlineCode",{parentName:"p"},"App")," component is wrapped into ",(0,a.yg)("inlineCode",{parentName:"p"},"Auth0Provider")," so that the authentication could be accessed throughout the whole app."),(0,a.yg)("h3",{id:"blitz-2"},"Blitz"),(0,a.yg)("p",null,"Blitz offers a more complicated, framework-like file structure, where there are already pre-defined ways how to handle and separate common concepts related to full-stack applications."),(0,a.yg)("p",null,"The file structure looks as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plaintext"},"\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 LoginForm.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 SignupForm.tsx\n\u2502   \u2502   \u251c\u2500\u2500 mutations/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 changePassword.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 forgotPassword.test.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 forgotPassword.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 logout.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 resetPassword.test.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 resetPassword.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 signup.ts\n\u2502   \u2502   \u2514\u2500\u2500 validations.ts\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Form.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 LabeledTextField.tsx\n\u2502   \u2502   \u2514\u2500\u2500 layouts/\n\u2502   \u2502       \u2514\u2500\u2500 Layout.tsx\n\u2502   \u251c\u2500\u2500 users/\n\u2502   \u2502   \u251c\u2500\u2500 hooks/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 useCurrentUser.ts\n\u2502   \u2502   \u2514\u2500\u2500 queries/\n\u2502   \u2502       \u2514\u2500\u2500 getCurrentUser.ts\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 rpc/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 [[...blitz]].ts\n\u2502   \u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 forgot-password.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 signup.tsx\n\u2502   \u2502   \u251c\u2500\u2500 _app.tsx\n\u2502   \u2502   \u251c\u2500\u2500 _document.tsx\n\u2502   \u2502   \u251c\u2500\u2500 404.tsx\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx\n\u2502   \u251c\u2500\u2500 blitz-client.ts\n\u2502   \u2514\u2500\u2500 blitz-server.ts\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 schema.prisma\n\u2502   \u2514\u2500\u2500 seeds.ts\n\u251c\u2500\u2500 integrations/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 favicon.ico*\n\u2502   \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 test/\n    \u2514\u2500\u2500 setup.ts\n    \u2514\u2500\u2500 utils.tsx\n")),(0,a.yg)("p",null,"The project structure is divided into multiple main blocks - ",(0,a.yg)("inlineCode",{parentName:"p"},"src"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"db"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"integrations"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"public")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"test"),"."),(0,a.yg)("p",null,"The core app code is featured in ",(0,a.yg)("inlineCode",{parentName:"p"},"src"),", which is further divided in ",(0,a.yg)("inlineCode",{parentName:"p"},"auth")," consisting of the components and mutations for authentication, ",(0,a.yg)("inlineCode",{parentName:"p"},"core")," for form and layout components, ",(0,a.yg)("inlineCode",{parentName:"p"},"users")," for hooks and queries to handle the users and ",(0,a.yg)("inlineCode",{parentName:"p"},"pages"),", where all the new API and routes would be created."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"db")," folder includes all the necessary configuration, schema, and migration files for the database of your project."),(0,a.yg)("p",null,"If you use some third-party libraries or code, it's a great practice to separate them from the rest of the code. Blitz has reserved the ",(0,a.yg)("inlineCode",{parentName:"p"},"integrations")," folder for that purpose."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"public")," folder is for all the media assets and files that are served statically from the app's root URL."),(0,a.yg)("p",null,"There is also a dedicated ",(0,a.yg)("inlineCode",{parentName:"p"},"test")," folder for tests that comes with setup and utility files to help you get started."),(0,a.yg)("h2",{id:"data-providers"},"Data providers"),(0,a.yg)("h3",{id:"refine-3"},"Refine"),(0,a.yg)("p",null,"Refine comes with a fake data provider that is perfect for testing or creating some pages where you would need some placeholder data."),(0,a.yg)("p",null,"It is a simple REST API endpoint that contains sample data about users, posts, products, categories, etc., and can be accessed via ",(0,a.yg)("a",{parentName:"p",href:"http://api.fake-rest.refine.dev"},"api.fake-rest.refine.dev"),"."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677175406_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"If we click on any of the routes in the user interface, we can see that each of them contains JSON data. For example, the ",(0,a.yg)("inlineCode",{parentName:"p"},"/products")," endpoint holds samples in the following format:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677181479_1896x806.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"In order to use the data provider in the Refine project, the user needs to pass it to the ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'<Refine\n  dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n  // ...\n/>\n')),(0,a.yg)("p",null,"If you followed the instructions for the installation wizard, it should already be set up by Refine automatically."),(0,a.yg)("h3",{id:"blitz-3"},"Blitz"),(0,a.yg)("p",null,"Blitz framework does not come with its own data provider, but the great thing is that during the installation it configures the SQLite database, which is more than enough for testing and experimentation."),(0,a.yg)("p",null,"The database configuration is available in the ",(0,a.yg)("inlineCode",{parentName:"p"},"schema.prisma")," file. You will find it in the ",(0,a.yg)("inlineCode",{parentName:"p"},"db")," folder in the app root. It includes the database configuration and models used in the app:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plaintext"},'datasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\nmodel User {\n  id             Int      @id @default(autoincrement())\n  createdAt      DateTime @default(now()\n  name           String?\n  email          String   @unique\n}\n\n// ...\n')),(0,a.yg)("p",null,"Another great thing is that with Blitz you can run ",(0,a.yg)("inlineCode",{parentName:"p"},"blitz prisma studio")," to open the web interface in the browser and see all the data in your database."),(0,a.yg)("p",null,"If the UI does not open automatically, navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:5555"},"localhost:5555"),":"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677324951_905x293.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"authentication"},"Authentication"),(0,a.yg)("h3",{id:"refine-4"},"Refine"),(0,a.yg)("p",null,"Create a new free ",(0,a.yg)("a",{parentName:"p",href:"https://auth0.com/signup"},"Auth0 account")," and log in."),(0,a.yg)("p",null,"Create a new web application."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677313884_762x678.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"It will give you domain, client ID, and secret ID information."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677315028_1612x846.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Scroll down and add ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," to the allowed URLs list."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677316037_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Next, switch back to your code editor and create a new file ",(0,a.yg)("inlineCode",{parentName:"p"},".env")," in your project root, add the variables ",(0,a.yg)("inlineCode",{parentName:"p"},"REACT_APP_AUTH0_DOMAIN")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"REACT_APP_AUTH0_CLIENT_ID")," and assign the values from the Auth0 dashboard."),(0,a.yg)("p",null,"Next, edit the ",(0,a.yg)("inlineCode",{parentName:"p"},"index.tsx")," file in the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder so it now looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import React from "react";\nimport { createRoot } from "react-dom/client";\nimport { Auth0Provider } from "@auth0/auth0-react";\n\nimport App from "./App";\n\nconst container = document.getElementById("root") as HTMLElement;\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain={process.env.REACT_APP_AUTH0_DOMAIN as string}\n      clientId={process.env.REACT_APP_AUTH0_CLIENT_ID as string}\n      redirectUri={window.location.origin}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n);\n')),(0,a.yg)("p",null,"Now reset the developer server by pressing ",(0,a.yg)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,a.yg)("inlineCode",{parentName:"p"},"C")," on your keyboard and run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run dev")," to start it again. This way the new environment values will take effect."),(0,a.yg)("p",null,"Now open your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," and you should be presented with the login screen:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677316431_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz-4"},"Blitz"),(0,a.yg)("p",null,"The great thing about Blitz is it already has the authentication views for signup and login. It has also configured the database for it, so you don't have to worry about creating separate models and running migrations for that."),(0,a.yg)("p",null,"The signup page should be available at ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/auth/signup"},"localhost:3000/auth/signup"),":"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677324951_905x294.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"The login page should be available at ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/auth/login"},"localhost:3000/auth/login"),":"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677324973_905x371.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Create a new account and sign up, so we have a user record in the SQLite database and you can log in to access the pages we will build further."),(0,a.yg)("h2",{id:"creating-pages"},"Creating pages"),(0,a.yg)("h3",{id:"refine-5"},"Refine"),(0,a.yg)("p",null,"Creating new pages in Refine is really simple thanks to its built-in command ",(0,a.yg)("inlineCode",{parentName:"p"},"create-resource"),". Since it's targeted at CRUD apps, the user is allowed to choose what type of pages to generate via flags ",(0,a.yg)("inlineCode",{parentName:"p"},"list"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"create"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"show"),"."),(0,a.yg)("p",null,"To get an overall insight into how the new pages are created in Refine, we will first create a page that lists the content. Run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run refine create-resource products -- --actions list")," in your terminal."),(0,a.yg)("p",null,"Navigate back to your project file tree and you will notice that a new folder ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," was created. Inside it, there is a route-specific folder ",(0,a.yg)("inlineCode",{parentName:"p"},"products")," that includes files ",(0,a.yg)("inlineCode",{parentName:"p"},"index.ts")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"list.tsx"),"."),(0,a.yg)("p",null,"Open up the ",(0,a.yg)("inlineCode",{parentName:"p"},"list.tsx")," file and you will notice Refine has even designed the ",(0,a.yg)("inlineCode",{parentName:"p"},"Inferencer")," component that will automatically help you to design the views for resources based on the data structure:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { GetListResponse } from "@pankod/refine-core";\nimport { AntdInferencer } from "@pankod/refine-inferencer/antd";\n\nexport const ProductsList = () => {\n  return <AntdInferencer />;\n};\n')),(0,a.yg)("p",null,"Also notice the newly created list page was automatically imported and passed in as ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," prop in the ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," component in ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'<Refine\n  dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n  notificationProvider={useNotificationProvider}\n  Layout={Layout}\n  ReadyPage={ReadyPage}\n  catchAll={<ErrorComponent />}\n  routerProvider={routerProvider}\n  authProvider={authProvider}\n  LoginPage={Login}\n  resources={[\n    {\n      name: "products",\n      list: ProductsList,\n    },\n  ]}\n/>\n')),(0,a.yg)("p",null,"Now open your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/products"},"localhost:3000/products"),". You should be presented with the page that lists data from the ",(0,a.yg)("inlineCode",{parentName:"p"},"/products")," route from the Refine's built-in data provider:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677175220_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz-5"},"Blitz"),(0,a.yg)("p",null,"Blitz does not come with the ",(0,a.yg)("inlineCode",{parentName:"p"},"Inferencer")," component that would create a default view to display the data, so we will create a custom page."),(0,a.yg)("p",null,"If you have previously worked with NextJS, you will notice that the page system is the same. For a new page, you need to create a new ",(0,a.yg)("inlineCode",{parentName:"p"},".tsx")," file inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," folder and it will become a new route."),(0,a.yg)("p",null,"To test it out, create a new file ",(0,a.yg)("inlineCode",{parentName:"p"},"greet.tsx")," and include the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"const Greet = () => {\n  return (\n    <div>\n      <h1>Hello from Blitz!</h1>\n      <p>This is a custom Greetings page!</p>\n    </div>\n  );\n};\n\nexport default Greet;\n")),(0,a.yg)("p",null,"Now open your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/greet"},"localhost:3000/greet")," and you should be presented with the rendered content of the newly created page:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677343984_905x228.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"crud-functionality"},"CRUD functionality"),(0,a.yg)("h3",{id:"refine-6"},"Refine"),(0,a.yg)("p",null,"Refine has thought out how to make the CRUD operations as easy as possible. Run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"npm run refine create-resource posts"),"."),(0,a.yg)("p",null,"This will create a new page for the ",(0,a.yg)("inlineCode",{parentName:"p"},"/posts")," route from the data provider, but since we did not provide any flags of what specific operations to support, all of the CRUD operations will be available."),(0,a.yg)("p",null,"This means that after running the command Refine created a new folder inside ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," called ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," and populated it with files ",(0,a.yg)("inlineCode",{parentName:"p"},"index.ts"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"list.tsx"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"create.tsx"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"edit.tsx")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"show.tsx"),"."),(0,a.yg)("p",null,"Now, open up your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/posts"},"localhost:3000/posts"),"."),(0,a.yg)("p",null,"You should be able to see all of the data coming from the ",(0,a.yg)("inlineCode",{parentName:"p"},"/posts")," route, but this time you will notice there are action buttons to create, read, update, and delete the records:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677183011_1900x924.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz-6"},"Blitz"),(0,a.yg)("p",null,"To demonstrate the CRUD functionality and how simple it is to implement one in the Blitz, we will be building a to-do application that will allow us to create, read, update, and delete daily tasks."),(0,a.yg)("p",null,"Run the command ",(0,a.yg)("inlineCode",{parentName:"p"},"blitz generate all todo name:string"),". That will create the necessary model, query, mutations, and page routes. We also passed in the ",(0,a.yg)("inlineCode",{parentName:"p"},"string")," type for the to-do task values."),(0,a.yg)("p",null,"Similarly to the Refine scaffold, Blitz took care of creating separate files for the create, read, update, and delete operations for the to-do tasks."),(0,a.yg)("p",null,"To test it out, restart your developer server by pressing ",(0,a.yg)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,a.yg)("inlineCode",{parentName:"p"},"C")," on your keyboard and then run ",(0,a.yg)("inlineCode",{parentName:"p"},"blitz dev"),". Then open your browser and navigate to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/todos"},"localhost:3000/todos"),"."),(0,a.yg)("p",null,"This will display the landing of the crud page asking you to create the first task since we currently do not have any data in our database:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677344355_905x146.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"testing-crud"},"Testing CRUD"),(0,a.yg)("h3",{id:"refine-7"},"Refine"),(0,a.yg)("p",null,'To create a record click on the "Create" button in the top right corner.'),(0,a.yg)("p",null,"This will open up a form with empty fields, allowing you to enter the values and save a new record."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677280697_1895x924.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"To read an already existing record click on the eye icon on the right of each record."),(0,a.yg)("p",null,"It will open up the record with all the values in read-only mode."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677280864_1898x923.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"In order to update an existing record, click on the pencil icon next to the eye icon."),(0,a.yg)("p",null,"This will open up the form with all the values editable."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677281365_1897x921.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"To delete the post, click on the bin icon next to the eye icon. It will also display a confirmation popup to make sure you are not deleting the record by mistake."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677313540_1897x923.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"blitz-7"},"Blitz"),(0,a.yg)("p",null,'To create a new task click on "Create Todo". It will open up an empty form, where you can give the name of the task.'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677344456_909x264.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"To read the created record navigate to the tasks list and click on the specific task. This will open up the selected record in read-only mode."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677344456_909x265.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,'In order to edit the existing record open it and click on the "Edit" button. That will allow you to change the title of the created to-do task.'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677346371_906x354.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,'To delete the task open it and click on the "Delete" button.'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677346469_908x313.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"deployment"},"Deployment"),(0,a.yg)("h3",{id:"refine-8"},"Refine"),(0,a.yg)("p",null,"First, make sure you have a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/"},"GitHub account"),". If you do not have one, make sure to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/signup"},"create one")," for free."),(0,a.yg)("p",null,"Next, sign in and create a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/new"},"new repository"),"."),(0,a.yg)("p",null,"Now switch back to your code editor and run the following commands to push the code to the newly created repository:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plaintext"},"git remote add origin https://github.com/username/crud-refine.git\ngit branch -M main\ngit push -u origin main\n")),(0,a.yg)("p",null,"After the code is pushed switch back to the GitHub repository and you should see all the code being pushed:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677316914_1872x857.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"To make sure your app is deployed in production and accessible online you will also have to deploy it to some hosting provider like ",(0,a.yg)("a",{parentName:"p",href:"https://vercel.com"},"Vercel"),"."),(0,a.yg)("p",null,"First, create a new ",(0,a.yg)("a",{parentName:"p",href:"https://vercel.com/signup"},"free account")," if you already do not have one and log in."),(0,a.yg)("p",null,'Then create a new project by selecting the option Import from Git. Find your GitHub project in the list and click "Import".'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677317074_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Vercel will automatically configure everything for you, all you have to do is manually add the environmental keys and values from the ",(0,a.yg)("inlineCode",{parentName:"p"},".env")," file:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677317283_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Once that's done, click on Deploy and after the deployment process is done you will be given a live access link to your project."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677319480_1920x929.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"The last thing for you to do is to switch back to Auth0 and change the allowed URLs to the deployment URL given by the Vercel (previously those values were set to ",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000"),")."),(0,a.yg)("h3",{id:"blitz-8"},"Blitz"),(0,a.yg)("p",null,"We will use ",(0,a.yg)("a",{parentName:"p",href:"https://render.com"},"Render"),", which will allow us to deploy the app and the database."),(0,a.yg)("p",null,"First, change the database provider to PostgreSQL. To do that open ",(0,a.yg)("inlineCode",{parentName:"p"},"schema.prisma")," file and change the data source as shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},'datasource db {\n  provider = "postgres"\n  url      = env("DATABASE_URL")\n}\n\n// ...\n')),(0,a.yg)("p",null,"Then delete the ",(0,a.yg)("inlineCode",{parentName:"p"},"db/migrations")," folder so there is no previous migration history and no ",(0,a.yg)("inlineCode",{parentName:"p"},".lock")," file for the database type."),(0,a.yg)("p",null,"Then, create a new file ",(0,a.yg)("inlineCode",{parentName:"p"},"render.yaml")," in your project root and include the following configuration settings:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"services:\n  - type: web\n    name: crud-blitz\n    env: node\n    plan: free\n    buildCommand: npm i --prod=false &&\n      blitz prisma generate &&\n      blitz build &&\n      blitz prisma migrate deploy\n\n    startCommand: blitz start -p ${PORT}\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        fromDatabase:\n          name: crud-blitz-db\n          property: connectionString\n      - key: SESSION_SECRET_KEY\n        generateValue: true\n\ndatabases:\n  - name: crud-blitz-db\n    plan: free\n")),(0,a.yg)("p",null,"Now push the code to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com"},"GitHub"),"."),(0,a.yg)("p",null,"Create a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/signup"},"free account")," if you already do not have one and log in."),(0,a.yg)("p",null,"Next, create a ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/new"},"new repository"),"."),(0,a.yg)("p",null,"Switch back to your code editor and run the following commands in your terminal:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plaintext"},"git remote add origin https://github.com/username/crud-blitz.git\ngit branch -M main\ngit push -u origin main\n")),(0,a.yg)("p",null,"Then switch back to GitHub and you will find everything synced up."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677348358_1876x865.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Next, create a ",(0,a.yg)("a",{parentName:"p",href:"https://dashboard.render.com/register"},"free account")," on Render and log in."),(0,a.yg)("p",null,'Click on "New" and select the "Blueprint" option.'),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677348415_1424x797.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("br",null),(0,a.yg)("p",null,"Next, connect your Github account and find your project in the list."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677348579_1185x763.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("p",null,'Next, give the Blueprint a name and click on "Apply", so Render sets everything up using your ',(0,a.yg)("inlineCode",{parentName:"p"},".yaml")," configuration."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677348636_1323x614.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"The setup might take a few minutes."),(0,a.yg)("p",null,"It will give you the live access link to your project once it's done."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-03-15-refine-vs-blitzjs%2F1677362154_1364x440.png",alt:"react-admin"}),(0,a.yg)("br",null),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"In this article, we compared two React frameworks - Refine and Blitz. Both have TypeScript support by default, are easy to set up, come with CLI commands, and do not require to use specific UI frameworks."),(0,a.yg)("p",null,"Refine has a built-in data provider. This is great for testing and experimenting. Blitz in comparison comes with SQLite and Prisma studio that offers UI to work with data."),(0,a.yg)("p",null,"For data tables, Refine comes with Inferencer which has already structured the data in the easy-to-perceive UI. For Blitz, you will have to build tables, action buttons, and other components yourself."),(0,a.yg)("p",null,"Blitz apps are already set with signup, login, and forgot password views, with the models already create to store users and sessions in the database. For Refine, you will have to create those from the ground up."),(0,a.yg)("p",null,"From the project tree standpoint, Blitz looks more like a framework. For those looking for a high flexibility on how to structure the project, you will have to deal with the fact that most of the flow already follows a certain pattern."),(0,a.yg)("p",null,"Refine is virtually a collection of hooks, components, and providers, therefore users can fully design the app based on their individual needs and follow specific logic patterns based on their business schema."))}h.isMDXComponent=!0}}]);