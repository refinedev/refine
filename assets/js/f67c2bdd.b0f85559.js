"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[65381],{58860:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=o,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},61613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});n(37953);var r=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={title:"Refresh",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/buttons/refresh.tsx"},s=void 0,d={unversionedId:"ui-integrations/shadcn/components/buttons/refresh-button/index",id:"ui-integrations/shadcn/components/buttons/refresh-button/index",title:"Refresh",description:"` uses shadcn/ui's  component and the invalidate method from useInvalidate` under the hood.",source:"@site/docs/ui-integrations/shadcn/components/buttons/refresh-button/index.md",sourceDirName:"ui-integrations/shadcn/components/buttons/refresh-button",slug:"/ui-integrations/shadcn/components/buttons/refresh-button/",permalink:"/docs/ui-integrations/shadcn/components/buttons/refresh-button/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/shadcn/components/buttons/refresh-button/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1758111044,formattedLastUpdatedAt:"Sep 17, 2025",frontMatter:{title:"Refresh",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/buttons/refresh.tsx"},sidebar:"mainSidebar",previous:{title:"List",permalink:"/docs/ui-integrations/shadcn/components/buttons/list-button/"},next:{title:"Show",permalink:"/docs/ui-integrations/shadcn/components/buttons/show-button/"}},p={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"resource",id:"resource",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"onRefresh",id:"onrefresh",level:3},{value:"meta",id:"meta",level:3},{value:"hideText",id:"hidetext",level:3},{value:"accessControl",id:"accesscontrol",level:3},{value:"children",id:"children",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=(g="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",e)});var g;const m={toc:u},y="wrapper";function h(e){var{components:t}=e,n=i(e,["components"]);return(0,r.yg)(y,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<RefreshButton>")," uses shadcn/ui's ",(0,r.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/button"},(0,r.yg)("inlineCode",{parentName:"a"},"<Button>"))," component and the ",(0,r.yg)("inlineCode",{parentName:"p"},"invalidate")," method from ",(0,r.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-invalidate"},(0,r.yg)("inlineCode",{parentName:"a"},"useInvalidate"))," under the hood."),(0,r.yg)("p",null,"It can be useful when you want to refresh the data without navigating to another page."),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)(c,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest add https://ui.refine.dev/r/buttons.json\n")),(0,r.yg)("p",null,"This will add all button components including ",(0,r.yg)("inlineCode",{parentName:"p"},"RefreshButton"),".")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(c,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\nimport { List } from "@/components/refine-ui/views/list";\n\nconst PostList = () => {\n  return (\n    <List>\n      <div className="flex justify-between items-center mb-4">\n        <h1>Posts</h1>\n        <RefreshButton resource="posts" />\n      </div>\n      {/* Your list content */}\n    </List>\n  );\n};\n'))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"resource"},"resource"),(0,r.yg)(c,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"resource")," is used to determine which resource's data will be refreshed. By default, the resource is inferred from the current route."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return <RefreshButton resource="categories" />;\n};\n'))),(0,r.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,r.yg)(c,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used to refresh a specific record's data. If not provided, all data for the resource will be refreshed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return <RefreshButton resource="posts" recordItemId="123" />;\n};\n'))),(0,r.yg)("h3",{id:"onrefresh"},"onRefresh"),(0,r.yg)(c,{id:"onrefresh",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"onRefresh")," callback allows you to do something after the refresh operation is completed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return (\n    <RefreshButton\n      onRefresh={() => {\n        console.log("Data refreshed!");\n      }}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"meta"},"meta"),(0,r.yg)(c,{id:"meta",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It is used to pass additional parameters to the invalidation."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyComponent = () => {\n  return <RefreshButton meta={{ authorId: "10" }} />;\n};\n'))),(0,r.yg)("h3",{id:"hidetext"},"hideText"),(0,r.yg)(c,{id:"hidetext",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"It is used to show and not show the text of the button. When ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", only the button icon is visible."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return <RefreshButton hideText={true} />;\n};\n'))),(0,r.yg)("h3",{id:"accesscontrol"},"accessControl"),(0,r.yg)(c,{id:"accesscontrol",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"This prop can be used to skip access control check with its ",(0,r.yg)("inlineCode",{parentName:"p"},"enabled")," property or to hide the button when the user does not have the permission to access the resource with ",(0,r.yg)("inlineCode",{parentName:"p"},"hideIfUnauthorized")," property. This is relevant only when an ",(0,r.yg)("a",{parentName:"p",href:"/docs/authorization/access-control-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"accessControlProvider"))," is provided to ",(0,r.yg)("a",{parentName:"p",href:"/docs/core/refine-component"},(0,r.yg)("inlineCode",{parentName:"a"},"<Refine/>")),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return (\n    <RefreshButton\n      accessControl={{\n        enabled: true,\n        hideIfUnauthorized: true,\n      }}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"children"},"children"),(0,r.yg)(c,{id:"children",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,'It is used to change the text of the button. By default, the text is "Refresh".'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { RefreshButton } from "@/components/refine-ui/buttons/refresh";\n\nconst MyComponent = () => {\n  return <RefreshButton>Reload Data</RefreshButton>;\n};\n'))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties-1"},"Properties"),(0,r.yg)(c,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"resource")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null},"Inferred from route"),(0,r.yg)("td",{parentName:"tr",align:null},"The resource name or identifier")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"recordItemId")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"BaseKey")," (string or number)"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"If provided, refreshes data for this specific record")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"onRefresh")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void")),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Callback function invoked after refresh operation")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"meta")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Record<string, unknown>")),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Additional metadata to pass to the invalidation")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"hideText")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"false")),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only the icon will be shown")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"accessControl")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ enabled?: boolean; hideIfUnauthorized?: boolean }")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"{ enabled: true, hideIfUnauthorized: false }")),(0,r.yg)("td",{parentName:"tr",align:null},"Configures access control behavior")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"children")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"ReactNode")),(0,r.yg)("td",{parentName:"tr",align:null},"Default text & icon"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom content for the button")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"...rest")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"React.ComponentProps<typeof Button>")),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Other props are passed to the underlying shadcn/ui ",(0,r.yg)("inlineCode",{parentName:"td"},"Button")," component (e.g., ",(0,r.yg)("inlineCode",{parentName:"td"},"variant"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"size"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"className"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"onClick"),")")))),(0,r.yg)("admonition",{title:"External Props",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"It also accepts all props of shadcn/ui ",(0,r.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/button"},"Button"),"."))))}h.isMDXComponent=!0}}]);