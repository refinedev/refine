"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[52883],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>c});var r=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,c=u["".concat(l,".").concat(m)]||u[m]||g[m]||a;return t?r.createElement(c,i(i({ref:n},d),{},{components:t})):r.createElement(c,i({ref:n},d))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},69558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>u});t(37953);var r=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={title:"<AuthPage />",description:"<AuthPage> component from Refine is an authentication page that can be used to login, register, forgot password, and update password.",swizzle:!0,source:"packages/mui/src/components/pages/auth/index.tsx"},l=void 0,p={unversionedId:"ui-integrations/material-ui/components/auth-page/index",id:"version-4.xx.xx/ui-integrations/material-ui/components/auth-page/index",title:"<AuthPage />",description:"<AuthPage> component from Refine is an authentication page that can be used to login, register, forgot password, and update password.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/components/auth-page/index.md",sourceDirName:"ui-integrations/material-ui/components/auth-page",slug:"/ui-integrations/material-ui/components/auth-page/",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/auth-page/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/components/auth-page/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"<AuthPage />",description:"<AuthPage> component from Refine is an authentication page that can be used to login, register, forgot password, and update password.",swizzle:!0,source:"packages/mui/src/components/pages/auth/index.tsx"},sidebar:"mainSidebar",previous:{title:"<ThemedLayout />",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/themed-layout/"},next:{title:"Breadcrumb",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/breadcrumb/"}},d={},u=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"Login",id:"login",level:3},{value:"Register",id:"register",level:3},{value:"ForgotPassword",id:"forgotpassword",level:3},{value:"UpdatePassword",id:"updatepassword",level:3},{value:"Props",id:"props",level:2},{value:"hideForm",id:"hideform",level:3},{value:"providers",id:"providers",level:3},{value:"rememberMe",id:"rememberme",level:3},{value:"loginLink",id:"loginlink",level:3},{value:"registerLink",id:"registerlink",level:3},{value:"forgotPasswordLink",id:"forgotpasswordlink",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"formProps",id:"formprops",level:3},{value:"title",id:"title",level:3},{value:"renderContent",id:"rendercontent",level:3},{value:"mutationVariables",id:"mutationvariables",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties",level:3},{value:"Interface",id:"interface",level:3}],g=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.yg)("div",n)},m=g("DocThumbsUpDownFeedbackWidget"),c=g("PropsTable"),h={toc:u},y="wrapper";function f(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(y,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},h,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component from Refine for ",(0,r.yg)("strong",{parentName:"p"},"Material UI")," contains authentication pages that can be used to login, register, forgot password, and update password."),(0,r.yg)("p",null,"Before using the ",(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component you need to add ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},"authProvider")," that will be used to handle authentication."),(0,r.yg)("admonition",{title:"Good to know",type:"simple"},(0,r.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,r.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,r.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const { default: sharedDataProvider } = RefineSimpleRest;\nconst { useLogout: useLogoutShared } = RefineCore;\nconst { SharedTypography, Button } = MuiMaterial;\n\nwindow.__refineAuthStatus = false;\n\nconst authProvider = {\n  login: async () => {\n    window.__refineAuthStatus = true;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    window.__refineAuthStatus = false;\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: async () => {\n    return {\n      authenticated: window.__refineAuthStatus ? true : false,\n      redirectTo: window.__refineAuthStatus ? undefined : "/login",\n    };\n  },\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => null,\n  getIdentity: async () => null,\n};\n\nsetRefineProps({ Sider: () => null, dataProvider: sharedDataProvider("api") });\n\nconst DashboardPage = () => {\n  const { mutate } = useLogoutShared();\n\n  return (\n    <div\n      style={{\n        width: "100%",\n        maxWidth: "400px",\n        margin: "0 auto",\n        textAlign: "center",\n      }}\n    >\n      <SharedTypography variant="h5">Home Page</SharedTypography>\n      <br />\n      <button\n        onClick={() => {\n          mutate();\n        }}\n      >\n        Logout\n      </button>\n    </div>\n  );\n};\n\nconst GoogleIcon = (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    width="24"\n    height="24"\n    viewBox="0 0 24 24"\n  >\n    <path\n      fill="#4285F4"\n      d="m23.7 12.3-.1-2.3H12.3v4.5h6.4a5.6 5.6 0 0 1-2.4 3.6v3h3.9c2.2-2.1 3.5-5.2 3.5-8.8Z"\n    />\n    <path\n      fill="#34A853"\n      d="M12.3 24c3.2 0 6-1 7.9-3l-3.9-3a7.2 7.2 0 0 1-10.8-3.7h-4v3c2 4 6 6.7 10.8 6.7Z"\n    />\n    <path\n      fill="#FBBC05"\n      d="M5.5 14.3a7 7 0 0 1 0-4.6v-3h-4a11.9 11.9 0 0 0 0 10.7l4-3.1Z"\n    />\n    <path\n      fill="#EA4335"\n      d="M12.3 4.8c1.7 0 3.3.6 4.6 1.8L20.3 3A12 12 0 0 0 1.6 6.6l4 3.1c.9-2.8 3.5-5 6.7-5Z"\n    />\n  </svg>\n);\n\nconst GithubIcon = (\n  <svg\n    xmlns="http://www.w3.org/2000/svg"\n    width="24"\n    height="24"\n    viewBox="0 0 24 24"\n  >\n    <path d="M12 0a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2.2c-3.3.7-4-1.4-4-1.4-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.4 1 .2-.8.5-1.3.8-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.1-.4-.6-1.6.1-3.2 0 0 1-.3 3.3 1.2a11.5 11.5 0 0 1 6 0C17.3 4.7 18.3 5 18.3 5c.7 1.6.2 2.9.1 3.2.8.8 1.3 1.9 1.3 3.2 0 4.6-2.9 5.6-5.5 5.9.4.4.8 1.1.8 2.2v3.3c0 .3.2.7.8.6A12 12 0 0 0 12 0z" />\n  </svg>\n);\n\nconst Wrapper = ({ children }) => {\n  return children;\n};\n')),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)(m,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component can be used like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=600px",live:!0,url:"http://localhost:3000",previewHeight:"600px"},'setInitialRoutes(["/login"]);\n\n// visible-block-start\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport {\n  AuthPage,\n  ThemedLayoutV2,\n  RefineThemes,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles } from "@mui/material";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { authProvider } from "./authProvider";\nimport { DashboardPage } from "./pages/dashboard";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n        <RefineSnackbarProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            authProvider={authProvider}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  </Authenticated>\n                }\n              >\n                <Route index element={<DashboardPage />} />\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                {/* highlight-start */}\n                <Route path="/login" element={<AuthPage type="login" />} />\n                {/* highlight-end */}\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,r.yg)("h2",{id:"types"},"Types"),(0,r.yg)(m,{id:"types",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component has the following types:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#login"},(0,r.yg)("inlineCode",{parentName:"a"},"login"))," - a type of login page and default type."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#register"},(0,r.yg)("inlineCode",{parentName:"a"},"register"))," - a type of registration page."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#forgotpassword"},(0,r.yg)("inlineCode",{parentName:"a"},"forgotPassword"))," - a type of forgot password page."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#updatepassword"},(0,r.yg)("inlineCode",{parentName:"a"},"updatePassword"))," - a type of update password page."))),(0,r.yg)("h3",{id:"login"},"Login"),(0,r.yg)(m,{id:"login",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"login")," will be used as the default type of the ",(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component. The login page will be used to log in to the system."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"hideCode live url=http://localhost:3000/login previewHeight=600px",hideCode:!0,live:!0,url:"http://localhost:3000/login",previewHeight:"600px"},'setInitialRoutes(["/login"]);\n\n// visible-block-start\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport {\n  AuthPage,\n  ThemedLayoutV2,\n  RefineThemes,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles } from "@mui/material";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n        <RefineSnackbarProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            authProvider={authProvider}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  </Authenticated>\n                }\n              >\n                <Route index element={<DashboardPage />} />\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                {/* highlight-next-line */}\n                <Route path="/login" element={<AuthPage />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("p",null,"After form submission, the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider#login-"},(0,r.yg)("inlineCode",{parentName:"a"},"login"))," method of the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'hideCode title="src/authProvider.ts"',hideCode:!0,title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // --\n  login: async ({ email, password, remember, providerName }) => {\n    // You can handle the login process according to your needs.\n\n    // If the process is successful.\n    return {\n      success: true,\n    };\n\n    return {\n      success: false,\n      error: {\n        name: "Login Error",\n        message: "Invalid email or password",\n      },\n    };\n  },\n  // --\n};\n'))),(0,r.yg)("h3",{id:"register"},"Register"),(0,r.yg)(m,{id:"register",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The register page will be used to register new users. You can use the following props for the ",(0,r.yg)("inlineCode",{parentName:"p"},"<AuthPage>")," component when the type is ",(0,r.yg)("inlineCode",{parentName:"p"},'"register"'),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"hideCode live url=http://localhost:3000/register previewHeight=600px",hideCode:!0,live:!0,url:"http://localhost:3000/register",previewHeight:"600px"},'setInitialRoutes(["/register"]);\n\n// visible-block-start\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport {\n  AuthPage,\n  ThemedLayoutV2,\n  RefineThemes,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles } from "@mui/material";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n        <RefineSnackbarProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            authProvider={authProvider}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  </Authenticated>\n                }\n              >\n                <Route index element={<DashboardPage />} />\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                <Route path="/login" element={<AuthPage />} />\n                {/* highlight-next-line */}\n                <Route\n                  path="/register"\n                  element={<AuthPage type="register" />}\n                />\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("p",null,"After form submission, the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider#register"},(0,r.yg)("inlineCode",{parentName:"a"},"register"))," method of the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // --\n  register: async ({ email, password, providerName }) => {\n    // You can handle the register process according to your needs.\n\n    // If the process is successful.\n    return {\n      success: true,\n    };\n\n    return {\n      success: false,\n      error: {\n        name: "Register Error",\n        message: "Invalid email or password",\n      },\n    };\n  },\n  // --\n};\n'))),(0,r.yg)("h3",{id:"forgotpassword"},"ForgotPassword"),(0,r.yg)(m,{id:"forgotpassword",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword")," type is a page that allows users to reset their passwords."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"hideCode live url=http://localhost:3000/forgot-password previewHeight=600px",hideCode:!0,live:!0,url:"http://localhost:3000/forgot-password",previewHeight:"600px"},'setInitialRoutes(["/forgot-password"]);\n\n// visible-block-start\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport {\n  AuthPage,\n  ThemedLayoutV2,\n  RefineThemes,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles } from "@mui/material";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n        <RefineSnackbarProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            authProvider={authProvider}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  </Authenticated>\n                }\n              >\n                <Route index element={<DashboardPage />} />\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                <Route path="/login" element={<AuthPage />} />\n                <Route\n                  path="/register"\n                  element={<AuthPage type="register" />}\n                />\n                {/* highlight-next-line */}\n                <Route\n                  path="/forgot-password"\n                  element={<AuthPage type="forgotPassword" />}\n                />\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("p",null,"After form submission, the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider#forgotpassword"},(0,r.yg)("inlineCode",{parentName:"a"},"forgotPassword"))," method of the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // --\n  forgotPassword: async ({ email }) => {\n    // You can handle the reset password process according to your needs.\n\n    // If process is successful.\n    return {\n      success: true,\n    };\n\n    return {\n      success: false,\n      error: {\n        name: "Forgot Password Error",\n        message: "Invalid email or password",\n      },\n    };\n  },\n  // --\n};\n'))),(0,r.yg)("h3",{id:"updatepassword"},"UpdatePassword"),(0,r.yg)(m,{id:"updatepassword",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"updatePassword")," type is the page used to update the password of the user."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"hideCode live url=http://localhost:3000/update-password previewHeight=600px",hideCode:!0,live:!0,url:"http://localhost:3000/update-password",previewHeight:"600px"},'setInitialRoutes(["/update-password"]);\n\n// visible-block-start\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport {\n  AuthPage,\n  ThemedLayoutV2,\n  RefineThemes,\n  RefineSnackbarProvider,\n} from "@refinedev/mui";\nimport { CssBaseline, GlobalStyles } from "@mui/material";\nimport { ThemeProvider } from "@mui/material/styles";\n\nimport routerProvider, {\n  CatchAllNavigate,\n  NavigateToResource,\n} from "@refinedev/react-router";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router";\n\nimport { authProvider } from "./authProvider";\n\nimport { DashboardPage } from "pages/dashboard";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <ThemeProvider theme={RefineThemes.Blue}>\n        <CssBaseline />\n        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />\n        <RefineSnackbarProvider>\n          <Refine\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            routerProvider={routerProvider}\n            authProvider={authProvider}\n          >\n            <Routes>\n              <Route\n                element={\n                  <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n                    <ThemedLayoutV2>\n                      <Outlet />\n                    </ThemedLayoutV2>\n                  </Authenticated>\n                }\n              >\n                <Route index element={<DashboardPage />} />\n              </Route>\n              <Route\n                element={\n                  <Authenticated fallback={<Outlet />}>\n                    <NavigateToResource />\n                  </Authenticated>\n                }\n              >\n                <Route path="/login" element={<AuthPage />} />\n                <Route\n                  path="/register"\n                  element={<AuthPage type="register" />}\n                />\n                <Route\n                  path="/forgot-password"\n                  element={<AuthPage type="forgotPassword" />}\n                />\n                {/* highlight-next-line */}\n                <Route\n                  path="/update-password"\n                  element={<AuthPage type="updatePassword" />}\n                />\n              </Route>\n            </Routes>\n          </Refine>\n        </RefineSnackbarProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n// visible-block-end\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,r.yg)("p",null,"After form submission, the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider#updatepassword"},(0,r.yg)("inlineCode",{parentName:"a"},"updatePassword"))," method of the ",(0,r.yg)("a",{parentName:"p",href:"/docs/authentication/auth-provider"},(0,r.yg)("inlineCode",{parentName:"a"},"authProvider"))," will be called with the form values."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\n\nconst authProvider: AuthProvider = {\n  // --\n  updatePassword: async ({ password, confirmPassword }) => {\n    // You can handle the update password process according to your needs.\n\n    // If the process is successful.\n    return {\n      success: true,\n    };\n\n    return {\n      success: false,\n      error: {\n        name: "Update Password Error",\n        message: "Invalid email or password",\n      },\n    };\n  },\n  // --\n};\n'))),(0,r.yg)("h2",{id:"props"},"Props"),(0,r.yg)("h3",{id:"hideform"},"hideForm"),(0,r.yg)(m,{id:"hideform",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"When you set ",(0,r.yg)("inlineCode",{parentName:"p"},"hideForm")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", the form will be hidden. You can use this property to show only providers."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      type="login" // or "register"\n      hideForm={true}\n      providers={[\n        {\n          name: "google",\n          icon: GoogleIcon,\n          label: "Sign in with Google",\n        },\n        {\n          name: "github",\n          icon: GithubIcon,\n          label: "Sign in with GitHub",\n        },\n      ]}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"providers"},"providers"),(0,r.yg)(m,{id:"providers",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"providers")," property defines the list of providers used to handle login authentication. ",(0,r.yg)("inlineCode",{parentName:"p"},"providers")," accepts an array of ",(0,r.yg)("inlineCode",{parentName:"p"},"Provider")," type. Check out the ",(0,r.yg)("a",{parentName:"p",href:"#interface"},"Interface")," section for more information. This property is only available for types ",(0,r.yg)("inlineCode",{parentName:"p"},"login")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"register"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      providers={[\n        {\n          name: "google",\n          icon: GoogleIcon,\n          label: "Sign in with Google",\n        },\n        {\n          name: "github",\n          icon: GithubIcon,\n          label: "Sign in with GitHub",\n        },\n      ]}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"rememberme"},"rememberMe"),(0,r.yg)(m,{id:"rememberme",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"rememberMe")," property defines to render your own remember me component or you can pass ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," to don't render it. This property is only available for type ",(0,r.yg)("inlineCode",{parentName:"p"},"login"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      rememberMe={\n        <FormControlLabel\n          sx={{\n            span: {\n              fontSize: "12px",\n              color: "text.secondary",\n            },\n          }}\n          color="secondary"\n          control={<Checkbox size="small" id="rememberMe" />}\n          label="Remember me"\n        />\n      }\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"loginlink"},"loginLink"),(0,r.yg)(m,{id:"loginlink",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"loginLink")," property defines the link to the login page and also you can give a node to render. The default value is ",(0,r.yg)("inlineCode",{parentName:"p"},'"/login"'),". This property is only available for types ",(0,r.yg)("inlineCode",{parentName:"p"},"register")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"forgotPassword"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyRegisterPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      loginLink={\n        <span\n          style={{\n            border: "1px dashed cornflowerblue",\n            padding: 3,\n          }}\n        >\n          <Link to="/login">Login</Link>\n        </span>\n      }\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"registerlink"},"registerLink"),(0,r.yg)(m,{id:"registerlink",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"registerLink")," property defines the link to the registration page and also you can give a node to render. The default value is ",(0,r.yg)("inlineCode",{parentName:"p"},'"/register"'),". This property is only available for type ",(0,r.yg)("inlineCode",{parentName:"p"},"login"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      registerLink={\n        <div\n          style={{\n            border: "1px dashed cornflowerblue",\n            marginTop: 5,\n            padding: 5,\n          }}\n        >\n          <Link to="/register">Register</Link>\n        </div>\n      }\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"forgotpasswordlink"},"forgotPasswordLink"),(0,r.yg)(m,{id:"forgotpasswordlink",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"forgotPasswordLink")," property defines the link to the forgot password page and also you can give a node for it to render. The default value is ",(0,r.yg)("inlineCode",{parentName:"p"},'"/forgot-password"'),". This property is only available for type ",(0,r.yg)("inlineCode",{parentName:"p"},"login"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      forgotPasswordLink={\n        <div\n          style={{\n            border: "1px dashed cornflowerblue",\n            marginTop: 5,\n            padding: 5,\n          }}\n        >\n          <Link to="/register">Forgot Password</Link>\n        </div>\n      }\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,r.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")," uses for passing props to the wrapper component. In the example below you can see that the background color is changed with ",(0,r.yg)("inlineCode",{parentName:"p"},"wrapperProps")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      wrapperProps={{\n        style: {\n          background: "#331049",\n        },\n      }}\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"contentprops"},"contentProps"),(0,r.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"contentProps")," uses for passing props to the content component which is the card component. In the example below you can see that the title, header, and content styles are changed with ",(0,r.yg)("inlineCode",{parentName:"p"},"contentProps"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      contentProps={{\n        title: "Login",\n        headStyle: {\n          background: "cornflowerblue",\n          color: "white",\n        },\n        bodyStyle: {\n          background: "#673ab742",\n        },\n      }}\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"formprops"},"formProps"),(0,r.yg)(m,{id:"formprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"formProps")," uses for passing props to the form component. In the example below you can see that the ",(0,r.yg)("inlineCode",{parentName:"p"},"initialValues")," are changed with ",(0,r.yg)("inlineCode",{parentName:"p"},"formProps")," and also the ",(0,r.yg)("inlineCode",{parentName:"p"},"onSubmit")," function is changed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'const MyLoginPage = () => {\n  return (\n    <AuthPage\n      // highlight-start\n      formProps={{\n        onSubmit: (formValues) => {\n          alert(JSON.stringify(formValues, null, 2));\n        },\n        defaultValues: {\n          email: "test@mail.com",\n        },\n      }}\n      // highlight-end\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"title"},"title"),(0,r.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,"By default, ",(0,r.yg)("inlineCode",{parentName:"p"},"AuthPage")," uses text with icon on top of page. You can use this property to change the default title."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Default text is: Refine Project"),(0,r.yg)("li",{parentName:"ul"},"Default icon is: Refine Logo")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage } from "@refinedev/mui";\nconst MyLoginPage = () => {\n  return <AuthPage type="login" title={<h1>My Title</h1>} />;\n};\n')),(0,r.yg)("p",null,"Or you can customize the title with ",(0,r.yg)("inlineCode",{parentName:"p"},"ThemedTitle")," component."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage, ThemedTitle } from "@refinedev/antd";\nconst MyLoginPage = () => {\n  return (\n    <AuthPage\n      type="login"\n      title={\n        <ThemedTitleV2\n          title="My Title"\n          icon={<img src="https://refine.dev/img/logo.png" />}\n        />\n      }\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"rendercontent"},"renderContent"),(0,r.yg)(m,{id:"rendercontent",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"renderContent")," uses to render the form content and ",(0,r.yg)("a",{parentName:"p",href:"#title"},"title"),". You can use this property to render your own content or ",(0,r.yg)("inlineCode",{parentName:"p"},"renderContent")," gives you default content and title you can use to add some extra elements to the content."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage } from "@refinedev/mui";\n\nconst MyLoginPage = () => {\n  return (\n    <AuthPage\n      contentProps={{\n        style: {\n          width: "400px",\n        },\n      }}\n      renderContent={(content: React.ReactNode, title: React.ReactNode) => {\n        return (\n          <div\n            style={{\n              display: "flex",\n              flexDirection: "column",\n              justifyContent: "center",\n              alignItems: "center",\n            }}\n          >\n            {title}\n            <h1 style={{ color: "white" }}>Extra Header</h1>\n            {content}\n            <h1 style={{ color: "white" }}>Extra Footer</h1>\n          </div>\n        );\n      }}\n    />\n  );\n};\n'))),(0,r.yg)("h3",{id:"mutationvariables"},"mutationVariables"),(0,r.yg)(m,{id:"mutationvariables",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"mutationVariables")," is used to pass additional variables to the ",(0,r.yg)("inlineCode",{parentName:"p"},"authProvider")," methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},'import { AuthPage } from "@refinedev/mui";\n\nconst MyLoginPage = () => {\n  return (\n    <AuthPage\n      type="login" // all other types are also supported.\n      // highlight-start\n      mutationVariables={{\n        foo: "bar",\n        xyz: "abc",\n      }}\n      // highlight-end\n    />\n  );\n};\n\n// all mutation methods are supported.\nconst authProvider = {\n  login: async ({ foo, xyz, ...otherProps }) => {\n    console.log(foo); // bar\n    console.log(xyz); // abc\n    // ...\n  },\n  register: async ({ foo, xyz, ...otherProps }) => {\n    console.log(foo); // bar\n    console.log(xyz); // abc\n    // ...\n  },\n  // ...\n};\n'))),(0,r.yg)("h2",{id:"api-reference"},"API Reference"),(0,r.yg)("h3",{id:"properties"},"Properties"),(0,r.yg)(m,{id:"properties",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)(c,{module:"@refinedev/mui/AuthPage","wrapperProps-type":"[`CardProps`](https://mui.com/material-ui/api/card/#props)","contentProps-type":"[`CardContentProps`](https://mui.com/material-ui/api/card-content/#props)","headerProps-type":"[`CardHeaderProps`](https://mui.com/material-ui/api/card-header/#props)","rememberMe-default":"[`<Checkbox>Remember me</Checkbox>`](/docs/ui-integrations/material-ui/components/auth-page#rememberme)",mdxType:"PropsTable"})),(0,r.yg)("h3",{id:"interface"},"Interface"),(0,r.yg)(m,{id:"interface",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"OAuthProvider",OAuthProvider:!0},"interface OAuthProvider {\n  name: string;\n  icon?: React.ReactNode;\n  label?: string;\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"hideCode",hideCode:!0},'import { UseFormProps } from "@refinedev/react-hook-form";\n\ninterface FormPropsType extends UseFormProps {\n  onSubmit?: (values: any) => void;\n}\n'))))}f.isMDXComponent=!0}}]);