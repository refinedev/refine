"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[18425],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var a=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),g=o,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||r;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},58315:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>y,frontMatter:()=>s,metadata:()=>p,toc:()=>c});t(37953);var a=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with Refine",slug:"react-admin-tutorial",authors:"peter_osah",tags:["refine","react","strapi","tutorial","chakra-ui"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/Group%20818%20(1).png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/react-admin-tutorial",source:"@site/blog/2023-03-03-ra-chakra-tutorial.md",title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with Refine",date:"2023-03-03T00:00:00.000Z",formattedDate:"March 3, 2023",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"react",permalink:"/blog/tags/react"},{label:"strapi",permalink:"/blog/tags/strapi"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"chakra-ui",permalink:"/blog/tags/chakra-ui"}],readingTime:27.285,hasTruncateMarker:!1,authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],frontMatter:{title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with Refine",slug:"react-admin-tutorial",authors:"peter_osah",tags:["refine","react","strapi","tutorial","chakra-ui"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/Group%20818%20(1).png",hide_table_of_contents:!1},prevItem:{title:"Announcing the Release of Refine v4!",permalink:"/blog/refine-v4-announcement"},nextItem:{title:"refine Hackaton Winners",permalink:"/blog/refine-hackathon-winners"},relatedPosts:[{title:"Setting Up the Client App",description:"We'll initialize our Pixels app using Refine and get familiar with the boilerplate code to be created with the create refine-app CLI tool.",permalink:"/blog/refine-pixels-2",formattedDate:"February 15, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:15.07,date:"2023-02-15T00:00:00.000Z"},{title:"Introduction to Mantine UI",description:"Let's explore Mantine UI React Component Library.",permalink:"/blog/mantine-ui-react",formattedDate:"September 9, 2024",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:18.305,date:"2024-09-09T00:00:00.000Z"},{title:"Building a React Admin Dashboard with Refine",description:"We will be building a Complete React CRUD application using Refine and Airtable, a famous backend service to illustrate how you can power your applications with refine.",permalink:"/blog/building-react-admin-dashboard",formattedDate:"April 6, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:37.59,date:"2023-04-06T00:00:00.000Z"}],authorPosts:[{title:"Building components with Radix UI",description:"This post explains with examples how the keyof operator is used to define advanced types in TypeScript.",permalink:"/blog/radix-ui",formattedDate:"November 6, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:15.085,date:"2024-11-06T00:00:00.000Z"},{title:"Tailwind Animations with Examples",description:"Understanding the cleanup function of the useEffect hook in React. Learn how to clean up side effects in React components to prevent memory leaks and improve performance.",permalink:"/blog/tailwind-animations",formattedDate:"November 5, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:8.285,date:"2024-11-05T00:00:00.000Z"},{title:"Framer Motion React Animations",description:"We'll walk you through the features and functionalities of Framer Motion.",permalink:"/blog/framer-motion",formattedDate:"June 20, 2024",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:15.475,date:"2024-06-20T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Benefits of using Refine",id:"benefits-of-using-refine",level:2},{value:"What is Strapi?",id:"what-is-strapi",level:2},{value:"Constituents of A Refine Application",id:"constituents-of-a-refine-application",level:2},{value:"The <code>&lt;Refine/&gt;</code> Component",id:"the-refine-component",level:3},{value:"Data Provider",id:"data-provider",level:4},{value:"Resource",id:"resource",level:4},{value:"Bootstrapping the Refine Application",id:"bootstrapping-the-refine-application",level:2},{value:"Setting AuthProvider",id:"setting-authprovider",level:3},{value:"Using <code>&lt;Authentication&gt;</code> Component",id:"using-authentication-component",level:3},{value:"Implementing CRUD operations on React admin panel",id:"implementing-crud-operations-on-react-admin-panel",level:2},{value:"Listing records",id:"listing-records",level:3},{value:"Handling Relationships",id:"handling-relationships",level:4},{value:"Pagination Of Listed Records",id:"pagination-of-listed-records",level:4},{value:"Viewing a record",id:"viewing-a-record",level:3},{value:"Creating a record",id:"creating-a-record",level:3},{value:"Modifying/Editing records",id:"modifyingediting-records",level:3},{value:"Deleting post record",id:"deleting-post-record",level:3},{value:"Implement sorting of listed records",id:"implement-sorting-of-listed-records",level:3},{value:"Implement filters on listed records",id:"implement-filters-on-listed-records",level:3},{value:"Implementing mutation mode.",id:"implementing-mutation-mode",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2}],u=(g="CodeSandboxExample",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var g;const m={toc:c},h="wrapper";function y(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(h,r(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},m,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"In building data-intensive applications like React admin dashboards and in-house applications, among others, speed, customizability, and performance are of the essence as these applications are pivotal in the management of most businesses and software. This has led developers to opt for solutions like Refine that provide these qualities out of the box.\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"Refine")," is a React-based framework that helps to build data-intensive applications in due time. It does this by providing hooks, providers, and components that provide room for UI customizability, and data management, as well as easy integration with any custom backend APIs and popular backend services like Strapi, Hasura, etc."),(0,a.yg)("p",null,"In this React admin panel tutorial, we will be creating an admin application with Refine that will be built with ",(0,a.yg)("a",{parentName:"p",href:"https://chakra-ui.com/"},"ChakraUI"),", an enterprise-level React component library, and ",(0,a.yg)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi"),", a popular backend service, as its backend provider."),(0,a.yg)("h2",{id:"benefits-of-using-refine"},"Benefits of using Refine"),(0,a.yg)("p",null,"Refine accelerates development by creating a higher abstraction of most functionalities such as routing, data providers, authentication, internationalization, layouts, asynchronous state management, and many others that developers would have to set up from scratch if building the application from the ground up."),(0,a.yg)("p",null,"With Refine, you have the choice to build your application with a custom design (a headless approach) or a UI component library. Refine includes integrations for some component libraries and design systems, like Material UI, Chakra UI, Ant Design, and Mantime."),(0,a.yg)("p",null,"It can also be integrated into any REST or GraphQL backend service and includes out-of-the-box support for popular BAAS (backend as a service) such as NestJs CRUD, Airtable, Strapi, Supabase, and others."),(0,a.yg)("p",null,"A peculiarity of Refine is that it provides a lot of out-of-the-box functionality for rapid development while still allowing for extreme customization. You can build a variety of applications with Refine, and it isn't limited to major use cases like React admin panels, B2B applications, and dashboards. In this React admin tutorial, we will be illustrating how to build a CRUD app with refine."),(0,a.yg)("p",null,"Whether you're a beginner or an experienced developer, this React admin tutorial will walk you through the entire process, step by step, and show you how to integrate Strapi as your backend CMS to create an amazing React admin panel."),(0,a.yg)("h2",{id:"what-is-strapi"},"What is Strapi?"),(0,a.yg)("p",null,"Strapi is a free and open-source headless Content Management System built on Node.js. It allows developers to easily create, manage, and consume content through a customizable API.\nStrapi provides a user-friendly admin panel for content editors to manage content without having to write code, while also providing a flexible content modeling system that can be tailored to fit specific project needs."),(0,a.yg)("h2",{id:"constituents-of-a-refine-application"},"Constituents of A Refine Application"),(0,a.yg)("p",null,"Before delving in to build the CRUD React admin tutorial app, we need to know the constitutes of an Refine application."),(0,a.yg)("h3",{id:"the-refine-component"},"The ",(0,a.yg)("inlineCode",{parentName:"h3"},"<Refine/>")," Component"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/components/refine-config/"},(0,a.yg)("inlineCode",{parentName:"a"},"<Refine/>"))," acts as the entrypoint of the application. it is a component that receives the configurations passed into it as ",(0,a.yg)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"react props"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\n\nimport { PostList, PostCreate, PostEdit, PostShow } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider(API_URL)}\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          create: "/posts/create",\n          edit: "/posts/edit/:id",\n          show: "/posts/show/:id",\n          meta: {\n            canDelete: true,\n          },\n        },\n      ]}\n    >\n      <Routes>\n        <Route index element={<NavigateToResource resource="posts" />} />\n\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n          <Route path="create" element={<PostCreate />} />\n          <Route path="edit/:id" element={<PostEdit />} />\n          <Route path="show/:id" element={<PostShow />} />\n        </Route>\n      </Routes>\n    </Refine>\n  );\n};\n\nexport default App;\n')),(0,a.yg)("p",null,"There are a variety of configurations that can be passed into a Refine application. They are:"),(0,a.yg)("h4",{id:"data-provider"},"Data Provider"),(0,a.yg)("p",null,"Data provider enables a Refine application to connect to an external API or service. A ",(0,a.yg)("inlineCode",{parentName:"p"},"dataProvider")," sends HTTP requests and receives responses via predefined methods."),(0,a.yg)("p",null,"Here is a sample on how to adding a dataProvider to the Refine component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\n// highlight-start\nimport { authProvider, axiosInstance } from "./authProvider";\nimport { DataProvider } from "@refinedev/strapi-v4";\n// highlight-end\n\nfunction App() {\n  return (\n    <Refine\n      // highlight-next-line\n      dataProvider={DataProvider(API_URL + `/api`, axiosInstance)}\n      //...\n    />\n  );\n}\n\nexport default App;\n')),(0,a.yg)("h4",{id:"resource"},"Resource"),(0,a.yg)("p",null,"A ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/guides-concepts/general-concepts/#resource-concept"},"resources")," is a fundamental component of a Refine application. A resource acts as a bridge between the Data/API layer and the Document/Page Layer. A resource enables the application's pages to interact with the API."),(0,a.yg)("p",null,"To create a resource; define our resources and their action paths. This will inform ",(0,a.yg)("strong",{parentName:"p"},"Refine")," to use these paths when generating the breadcrumbs, menus, handling redirections and inferring the current resource and action.\nIn accordance with the path definitions in a resource object, we have to assign a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route />")," for each path and an element to display at that path."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route>")," corresponding to the created actions is defined. It is important to remember that the path specified in the resource definition should match the ",(0,a.yg)("inlineCode",{parentName:"p"},"path")," specified in the route definition."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/routers/react-router-v6/#usage"},"Refer to React Router docs for more information"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { PostList, PostCreate, PostEdit, PostShow } from "pages/posts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      //...\n      // highlight-start\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          create: "/posts/create",\n          edit: "/posts/edit/:id",\n          show: "/posts/show/:id",\n          meta: {\n            canDelete: true,\n          },\n        },\n      ]}\n      // highlight-end\n    >\n      {/* highlight-start */}\n      <Routes>\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n          <Route path="create" element={<PostCreate />} />\n          <Route path="edit/:id" element={<PostEdit />} />\n          <Route path="show/:id" element={<PostShow />} />\n        </Route>\n      </Routes>\n      {/* highlight-end */}\n    </Refine>\n  );\n};\n\nexport default App;\n')),(0,a.yg)("h2",{id:"bootstrapping-the-refine-application"},"Bootstrapping the Refine Application"),(0,a.yg)("p",null,"To create our Refine application for this article, we will use the ",(0,a.yg)("inlineCode",{parentName:"p"},"create refine-app")," wizard."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"create refine-app")," comes with built-in templates for the CRA, Next.js, and Remix environments, allowing you to setup a Refine project quickly. It also provides an array of options for automatically configuring your UI framework, i18n, router, authentication, and data provider settings."),(0,a.yg)("p",null,"In order to use this, execute the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm create refine-app@latest <name of your application>\n")),(0,a.yg)("p",null,"You will be directed to the CLI wizard after running the command. To complete the CLI wizard, select the following options:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"\u2714 Choose a project template \xb7 Refine(Vite)\n\u2714 What would you like to name your project? \xb7 blog-ra-chakra-tutorial\n\u2714 Choose your backend service to connect \xb7 Strapi V4\n\u2714 Do you want to use a UI Framework? \xb7 Chakra UI\n\u2714 Do you want to add example pages? \xb7 No\n\u2714 Do you need i18n (Internationalization) support? \xb7 No\n\u2714 Choose a package manager \xb7 npm\n")),(0,a.yg)("p",null,"When these options are selected, the CLI will bootstrap a Refine application with the Strapi-v4 provider."),(0,a.yg)("p",null,"Following installation, we will execute the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm run dev\n")),(0,a.yg)("p",null,"The Refine application should be up and running after you run the command. To access it, go to ",(0,a.yg)("inlineCode",{parentName:"p"},"http://localhost:5173"),"."),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/welcome.jpg",className:"rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"setting-authprovider"},"Setting AuthProvider"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"create-refine-app")," command generates a new Refine application with a default AuthProvider. If you followed the steps above to create your application using ",(0,a.yg)("inlineCode",{parentName:"p"},"create-react-app"),", you should already have the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/authProvider.ts")," file."),(0,a.yg)("p",null,"It's worth noting that the authProvider's login method is especially important. We'll be using email and password to sign in to our application, so make sure that the login method contains the code provided below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'export const authProvider: AuthProvider = {\n    //highlight-start\n    login: async ({ email, password }) => {\n        const { data, status } = await strapiAuthHelper.login(email, password);\n        //highlight-end\n        if (status === 200) {\n            localStorage.setItem(TOKEN_KEY, data.jwt);\n\n            // set header axios instance\n            axiosInstance.defaults.headers.common = {\n                Authorization: `Bearer ${data.jwt}`,\n            };\n\n            return {\n                success: true,\n                redirectTo: "/",\n            };\n        }\n        return {\n            success: false,\n            error: {\n                message: "Login Error",\n                name: "Invalid email or password",\n            }\n        };\n    },\n    ...\n};\n')),(0,a.yg)("h3",{id:"using-authentication-component"},"Using ",(0,a.yg)("inlineCode",{parentName:"h3"},"<Authentication>")," Component"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/routers/react-router-v6/#basic-usage"},(0,a.yg)("inlineCode",{parentName:"a"},"<Authenticated>"))," component is used to manage authenticated routes. This component leverages the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/hooks/authentication/useIsAuthenticated/"},(0,a.yg)("inlineCode",{parentName:"a"},"useIsAuthenticated"))," hook to determine the authentication status of the user. It handles redirection and rendering specific elements based on this status through children and ",(0,a.yg)("inlineCode",{parentName:"p"},"fallback")," props."),(0,a.yg)("p",null,"To achieve protected routes, the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Outlet>")," component from ",(0,a.yg)("inlineCode",{parentName:"p"},"react-router-dom")," is utilized, ensuring routes are only accessible when the user is authenticated."),(0,a.yg)("p",null,"To handle scenarios where a user is not authenticated, we've established a ",(0,a.yg)("inlineCode",{parentName:"p"},"/login")," route. This utilizes the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/chakra-ui/components/chakra-auth-page/"},(0,a.yg)("inlineCode",{parentName:"a"},"<AuthPage>"))," component found in Refine UI packages, with the 'type' prop set to \"login\". This configuration effectively renders the login page."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Authenticated, Refine } from "@refinedev/core";\nimport { AuthPage } from "@refinedev/chakra-ui";\nimport { Outlet, Route, Routes } from "react-router-dom";\n\nfunction App() {\n  return (\n    <Refine\n    //...\n    >\n      <Routes>\n        {/* highlight-start */}\n        <Route\n          element={\n            <Authenticated fallback={<CatchAllNavigate to="/login" />}>\n              <ThemedLayoutV2>\n                <Outlet />\n              </ThemedLayoutV2>\n            </Authenticated>\n          }\n        >\n          {/* We will define `resource` routes here. */}\n        </Route>\n        <Route\n          element={\n            <Authenticated fallback={<Outlet />}>\n              <NavigateToResource resource="posts" />\n            </Authenticated>\n          }\n        >\n          <Route path="/login" element={<AuthPage type="login" />} />\n        </Route>\n        {/* highlight-end */}\n        //...\n      </Routes>\n      //...\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/routers/react-router-v6/#navigatetoresource"},(0,a.yg)("inlineCode",{parentName:"a"},"<NavigateToResource>"))," is a basic component to navigate to a resource page. It is useful when you want to navigate to a resource page from the index route of your app."),(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/chakra-ui/components/chakra-ui-themed-layout/"},(0,a.yg)("inlineCode",{parentName:"a"},"<ThemedLayoutV2>")),"component offers a convenient way to integrate both a sidebar and a header into your application. This is a helpful feature if you aim to include these elements in your app's layout.")),(0,a.yg)("h2",{id:"implementing-crud-operations-on-react-admin-panel"},"Implementing CRUD operations on React admin panel"),(0,a.yg)("p",null,"We will implement ",(0,a.yg)("strong",{parentName:"p"},"CRUD")," operations such as listing, creating, and editing records in our React admin tutorial application."),(0,a.yg)("p",null,"In this article, we describe our React admin tutorial app, which is one that can track the list of posts created, as well as have the functionality of viewing a post as well as updating and deleting a post, respectively."),(0,a.yg)("h3",{id:"listing-records"},"Listing records"),(0,a.yg)("p",null,"To display data on the UI, we must create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList/>")," page."),(0,a.yg)("p",null,"To begin, we'll require an interface to interact with the data from the API endpoint."),(0,a.yg)("p",null,"If you don't already have one, we'll create one under the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder called ",(0,a.yg)("inlineCode",{parentName:"p"},"interfaces"),". Then, create a file called ",(0,a.yg)("inlineCode",{parentName:"p"},"index.d.ts")," with the following code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},"export interface IPost {\n  id: number;\n  title: string;\n  content: string;\n  category: any;\n  publishedAt: string;\n  createdAt: string;\n}\n")),(0,a.yg)("p",null,"Next, we create a new folder named ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," under the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder. Under that folder, create a ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," folder and add a ",(0,a.yg)("inlineCode",{parentName:"p"},"list.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code "),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/list.tsx"',title:'"pages/posts/list.tsx"'},'import React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { List, ShowButton, EditButton, DateField } from "@refinedev/chakra-ui";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableContainer,\n  HStack,\n} from "@chakra-ui/react";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { IPost } from "../../interfaces";\n\nexport const PostList = () => {\n  const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n      {\n        id: "id",\n        accessorKey: "id",\n        header: "Id",\n      },\n      {\n        id: "title",\n        accessorKey: "title",\n        header: "Title",\n      },\n      {\n        id: "createdAt",\n        accessorKey: "createdAt",\n        header: "Created At",\n        cell: function render({ getValue }) {\n          return <DateField value={getValue() as string} format="LLL" />;\n        },\n      },\n      {\n        id: "actions",\n        accessorKey: "id",\n        header: "Actions",\n        cell: function render({ getValue }) {\n          return (\n            <HStack>\n              <ShowButton hideText recordItemId={getValue() as string} />\n              <EditButton hideText recordItemId={getValue() as string} />\n            </HStack>\n          );\n        },\n      },\n    ],\n    [],\n  );\n\n  const { getHeaderGroups, getRowModel, setOptions } = useTable({\n    columns,\n  });\n\n  setOptions((prev) => ({\n    ...prev,\n    meta: {\n      ...prev.meta,\n    },\n  }));\n\n  return (\n    <List>\n      <TableContainer whiteSpace="pre-line">\n        <Table variant="simple">\n          <Thead>\n            {getHeaderGroups().map((headerGroup) => (\n              <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <Th key={header.id}>\n                    {!header.isPlaceholder &&\n                      flexRender(\n                        header.column.columnDef.header,\n                        header.getContext(),\n                      )}\n                  </Th>\n                ))}\n              </Tr>\n            ))}\n          </Thead>\n          <Tbody>\n            {getRowModel().rows.map((row) => (\n              <Tr key={row.id}>\n                {row.getVisibleCells().map((cell) => (\n                  <Td key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Td>\n                ))}\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </List>\n  );\n};\n')))),(0,a.yg)("p",null,"In the code above, we use the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/hooks/useTable/"},(0,a.yg)("inlineCode",{parentName:"a"},"useTable()"))," hook from the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package to fetch records from Strapi. the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTable()")," maps the records into rows based on the ",(0,a.yg)("inlineCode",{parentName:"p"},"columns")," variable definition."),(0,a.yg)("p",null,"After this, we need to add a path (",(0,a.yg)("inlineCode",{parentName:"p"},"/posts"),") for the ",(0,a.yg)("inlineCode",{parentName:"p"},"list")," action to our ",(0,a.yg)("inlineCode",{parentName:"p"},"resources")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'function App() {\n  return (\n    <Refine\n      //...\n      // highlight-start\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n        },\n      ]}\n      // highlight-end\n    />\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"For this, we need to create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route>")," with the same path. To do this, we should create a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Route>")," with the same path and provide the ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList>")," component to the ",(0,a.yg)("inlineCode",{parentName:"p"},"element")," prop."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'// highlight-start\nimport { NavigateToResource, Route, Routes } from "@refinedev/react-router";\nimport { PostList } from "./pages/posts/list";\n// highlight-end\n\nfunction App() {\n  return (\n    <Refine\n    //...\n    >\n      <Routes>\n        //...\n        {/* highlight-start */}\n        <Route index element={<NavigateToResource resource="posts" />} />\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n        </Route>\n        {/* highlight-end */}\n        //...\n      </Routes>\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"To avoid encountering an empty screen when going to the homepage, we use the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/routers/react-router-v6/#navigatetoresource"},(0,a.yg)("inlineCode",{parentName:"a"},"<NavigateToResource>"))," component to redirect to the ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," resource."),(0,a.yg)("p",null,"It will prompt you to log in to the app. Since we are using Refine's ",(0,a.yg)("inlineCode",{parentName:"p"},"fake strapi-v4 API"),", Try these credentials:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Username"),": ",(0,a.yg)("a",{parentName:"p",href:"mailto:demo@refine.dev"},"demo@refine.dev"),"\n",(0,a.yg)("strong",{parentName:"p"},"Password"),": demodemo"),(0,a.yg)("p",null,"Check that the URL is routed to /posts and that posts are present."),(0,a.yg)("h4",{id:"handling-relationships"},"Handling Relationships"),(0,a.yg)("p",null,"When retrieving recorda, relations are not populated. Hence, We will use the ",(0,a.yg)("inlineCode",{parentName:"p"},"metaData")," option to populate the Strapi v4 API with relational data (category data in our case)."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/data-providers/strapi-v4/#relations-population"},"Refer to docs for handling relations with strapi")),(0,a.yg)("p",null,"We will populate records with a ",(0,a.yg)("inlineCode",{parentName:"p"},"category id")," field from the ",(0,a.yg)("inlineCode",{parentName:"p"},"/posts")," endpoint with their respective titles. To automatically get ",(0,a.yg)("inlineCode",{parentName:"p"},"category titles")," from the ",(0,a.yg)("inlineCode",{parentName:"p"},"/categories "),"endpoint for each record and display them on our table, we must use Strapi v4's populate feature."),(0,a.yg)("p",null,"We'll use the populate parameter to specify which fields should be filled in. we will assign an array to the populate parameter which will contain the map the values from the ",(0,a.yg)("inlineCode",{parentName:"p"},"/categories")," endpoint to the records with a ",(0,a.yg)("inlineCode",{parentName:"p"},"category id")," on the ",(0,a.yg)("inlineCode",{parentName:"p"},"/posts")," endpoint. The ",(0,a.yg)("inlineCode",{parentName:"p"},"populate")," parameter will be a property of the ",(0,a.yg)("inlineCode",{parentName:"p"},"metaData")," property which is subsequently a property of the ",(0,a.yg)("inlineCode",{parentName:"p"},"refineCoreProps")," object."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'const { getHeaderGroups, getRowModel, setOptions } = useTable({\n  columns,\n  // highlight-start\n  refineCoreProps: {\n    meta: {\n      populate: ["category"],\n    },\n  },\n  // highlight-end\n});\n')),(0,a.yg)("p",null,"To show category field in table, we need to add new column to the ",(0,a.yg)("inlineCode",{parentName:"p"},"PostList")," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'const columns = React.useMemo<GridColumns<IPost>>(\n  () => [\n    // ...\n    {\n      id: "category",\n      accessorKey: "category.title",\n      header: "Category",\n      cell: function render({ getValue }) {\n        return getValue();\n      },\n    },\n    // ...\n  ],\n  [],\n);\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/handling-relationships.jpg",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h4",{id:"pagination-of-listed-records"},"Pagination Of Listed Records"),(0,a.yg)("p",null,"Next, we will add Pagination to our application. In order to achieve this, the ",(0,a.yg)("inlineCode",{parentName:"p"},"usePagination")," hook provides certain functions that handle pagination."),(0,a.yg)("p",null,"Create a new file called ",(0,a.yg)("inlineCode",{parentName:"p"},"pagination.tsx")," under the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder. This file will contain the code for the pagination component."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"current"),": This property holds the current page number obtained from the ",(0,a.yg)("inlineCode",{parentName:"li"},"useTable()")," hook,"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pageCount"),": This property holds the total amount of pages present from the ",(0,a.yg)("inlineCode",{parentName:"li"},"useTable()")," hook,"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"setCurrent()"),": This property sets the current page number to an value. it handles the navigation to either the next page or the previous page.")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code "),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/pagination/index.tsx"',title:'"src/components/pagination/index.tsx"'},'import { FC } from "react";\nimport { HStack, Button, Box } from "@chakra-ui/react";\nimport { IconChevronRight, IconChevronLeft } from "@tabler/icons-react";\nimport { usePagination } from "@refinedev/chakra-ui";\n\nimport { IconButton } from "@chakra-ui/react";\n\ntype PaginationProps = {\n  current: number;\n  pageCount: number;\n  setCurrent: (page: number) => void;\n};\n\nexport const Pagination: FC<PaginationProps> = ({\n  current,\n  pageCount,\n  setCurrent,\n}) => {\n  const pagination = usePagination({\n    current,\n    pageCount,\n  });\n\n  return (\n    <Box display="flex" justifyContent="flex-end">\n      <HStack my="3" spacing="1">\n        {pagination?.prev && (\n          <IconButton\n            aria-label="previous page"\n            onClick={() => setCurrent(current - 1)}\n            disabled={!pagination?.prev}\n            variant="outline"\n          >\n            <IconChevronLeft size="18" />\n          </IconButton>\n        )}\n\n        {pagination?.items.map((page) => {\n          if (typeof page === "string") return <span key={page}>...</span>;\n\n          return (\n            <Button\n              key={page}\n              onClick={() => setCurrent(page)}\n              variant={page === current ? "solid" : "outline"}\n            >\n              {page}\n            </Button>\n          );\n        })}\n        {pagination?.next && (\n          <IconButton\n            aria-label="next page"\n            onClick={() => setCurrent(current + 1)}\n            variant="outline"\n          >\n            <IconChevronRight size="18" />\n          </IconButton>\n        )}\n      </HStack>\n    </Box>\n  );\n};\n')))),(0,a.yg)("p",null,"We'll update the ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList/>")," component with the code below:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code "),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import { Pagination } from "../../components/pagination";\n\nexport const PostList = () => {\n  //...\n  const {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    // highlight-next-line\n    refineCore: { current, pageCount, setCurrent },\n  } = useTable({\n    columns,\n    refineCoreProps: {\n      meta: {\n        populate: ["category"],\n      },\n    },\n  });\n\n  return (\n    <List>\n      ...\n      {/* highlight-start */}\n      <Pagination\n        current={current}\n        pageCount={pageCount}\n        setCurrent={setCurrent}\n      />\n      {/* highlight-end */}\n    </List>\n  );\n};\n')))),(0,a.yg)("h3",{id:"viewing-a-record"},"Viewing a record"),(0,a.yg)("p",null,"To view a record, we will use the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/hooks/show/useShow/"},(0,a.yg)("inlineCode",{parentName:"a"},"useShow()"))," hook, which is included in the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," package.\nThe hook ",(0,a.yg)("inlineCode",{parentName:"p"},"useShow()")," allows you to retrieve the desired record. It uses the ",(0,a.yg)("inlineCode",{parentName:"p"},"getOne")," method from the dataProvider passed to ",(0,a.yg)("inlineCode",{parentName:"p"},"<Refine/>")," as the query function."),(0,a.yg)("p",null,"We'll add a ",(0,a.yg)("inlineCode",{parentName:"p"},"show.tsx")," file in the ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," folder under the ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," folder next, with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code "),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/show.tsx"',title:'"src/pages/posts/show.tsx"'},'import { useOne, useShow } from "@refinedev/core";\nimport { Show, NumberField, TextField, DateField } from "@refinedev/chakra-ui";\nimport { Heading } from "@chakra-ui/react";\n\nexport const PostShow = () => {\n  const { queryResult } = useShow({\n    metaData: {\n      populate: ["category"],\n    },\n  });\n  const { data, isLoading } = queryResult;\n\n  const record = data?.data;\n\n  const { data: categoryData, isLoading: categoryIsLoading } = useOne({\n    resource: "categories",\n    id: record?.category?.id || "",\n    queryOptions: {\n      enabled: !!record,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <Heading as="h5" size="sm" mt={4}>\n        Id\n      </Heading>\n      <NumberField value={record?.id ?? ""} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Title\n      </Heading>\n      <TextField value={record?.title} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Category\n      </Heading>\n\n      {categoryIsLoading ? <>Loading...</> : <>{categoryData?.data?.title}</>}\n\n      <Heading as="h5" size="sm" mt={4}>\n        Content\n      </Heading>\n      <TextField value={record?.content} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Created At\n      </Heading>\n      <DateField value={record?.createdAt} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Published At\n      </Heading>\n      <DateField value={record?.publishedAt} />\n\n      <Heading as="h5" size="sm" mt={4}>\n        Locale\n      </Heading>\n      <TextField value={record?.locale} />\n    </Show>\n  );\n};\n')))),(0,a.yg)("p",null,"After this, we can now add the component ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostShow/>")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"show.tsx")," file to our resource present in the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\nimport {\n  PostList,\n  // highlight-next-line\n  PostShow,\n} from "./pages/posts";\n\nfunction App() {\n  return (\n    <Refine\n      //...\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          // highlight-next-line\n          show: "/posts/show/:id",\n        },\n      ]}\n    >\n      <Routes>\n        //...\n        <Route index element={<NavigateToResource resource="posts" />} />\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n          {/* highlight-start */}\n          <Route path="/posts/show/:id" element={<PostShow />} />\n          {/* highlight-end */}\n        </Route>\n        //...\n      </Routes>\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("p",null,"At this point, the ",(0,a.yg)("inlineCode",{parentName:"p"},"Show")," page looks like this:"),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/show.jpg",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"creating-a-record"},"Creating a record"),(0,a.yg)("p",null,"To create a record, we will use the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," package.\nIt provides the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/examples/form/chakra-ui/useForm/"},(0,a.yg)("inlineCode",{parentName:"a"},"useForm()"))," hook, which includes form validation and handles our form submission request to Strapi."),(0,a.yg)("p",null,"Next, in the ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," folder under the ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," folder, we'll include a ",(0,a.yg)("inlineCode",{parentName:"p"},"create.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import React from "react";\nimport { Create } from "@refinedev/chakra-ui";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Textarea,\n  Select,\n} from "@chakra-ui/react";\nimport { useSelect } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\n\nexport const PostCreate = () => {\n  const {\n    refineCore: { formLoading, queryResult },\n    saveButtonProps,\n    register,\n    resetField,\n    formState: { errors },\n  } = useForm();\n\n  const postsData = queryResult?.data?.data;\n\n  const { options: categoryOptions } = useSelect({\n    resource: "categories",\n    defaultValue: postsData?.category?.id,\n  });\n\n  React.useEffect(() => {\n    resetField("category.id");\n  }, [categoryOptions]);\n\n  return (\n    <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <FormControl mb="3" isInvalid={!!(errors as any)?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          type="text"\n          {...register("title", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.title?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.title}>\n        <FormLabel>Content</FormLabel>\n        <Textarea\n          {...register("content", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.title?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!errors?.category}>\n        <FormLabel>Category</FormLabel>\n        <Select\n          placeholder="Select category"\n          {...register("category.id", {\n            required: "This field is required",\n          })}\n        >\n          {categoryOptions?.map((option) => (\n            <option value={option.value} key={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <FormErrorMessage>\n          {(errors as any)?.category?.id?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n    </Create>\n  );\n};\n')))),(0,a.yg)("p",null,"In the code above, we used the ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," hook to create records. This hook comes from the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/main/packages/react-hook-form"},"(@refinedev/react-hook-form)")," which is a Refine adapter of the ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form")," library. This library allows you to use the ",(0,a.yg)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form")," library with refine. More information about the ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," hook can be obtained ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/react-hook-form/useForm/"},"here"),"."),(0,a.yg)("p",null,"we use methods provided by the ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," hook like ",(0,a.yg)("inlineCode",{parentName:"p"},"register()")," to validate the new post we will add into Strapi.\nThe hooks also provide an object like ",(0,a.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," which accepts the properties shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"{\n    disabled: boolean;\n    onClick: (e: React.BaseSyntheticEvent<object, any, any>) => void;\n}\n")),(0,a.yg)("p",null,"These properties handles the submission of the form action, button loading, and disable states."),(0,a.yg)("p",null,"After this, we can now add the component ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostCreate/>")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"create.tsx")," file to our resource present in the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\nimport {\n  PostList,\n  PostShow,\n  // highlight-next-line\n  PostCreate,\n} from "./pages/posts";\n\nfunction App() {\n  return (\n    <Refine\n      //...\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n          // highlight-next-line\n          create: "/posts/create",\n        },\n      ]}\n    >\n      <Routes>\n        //...\n        <Route index element={<NavigateToResource resource="posts" />} />\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n          <Route path="/posts/show/:id" element={<PostShow />} />\n          {/* highlight-start */}\n          <Route path="/posts/create" element={<PostCreate />} />\n          {/* highlight-end */}\n        </Route>\n        //...\n      </Routes>\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/creating-record-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"modifyingediting-records"},"Modifying/Editing records"),(0,a.yg)("p",null,"For editing a record, we will add an ",(0,a.yg)("inlineCode",{parentName:"p"},"edit.tsx")," file In the ",(0,a.yg)("inlineCode",{parentName:"p"},"posts")," folder under the pages folder and add the code below to the file:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import React from "react";\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Select,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { useSelect } from "@refinedev/core";\n\nexport const PostEdit = () => {\n  const {\n    refineCore: { formLoading, queryResult },\n    saveButtonProps,\n    register,\n    resetField,\n    formState: { errors },\n  } = useForm({\n    refineCoreProps: {\n      meta: {\n        populate: ["category"],\n      },\n    },\n  });\n\n  const postsData = queryResult?.data?.data;\n\n  const { options: categoryOptions } = useSelect({\n    resource: "categories",\n    defaultValue: postsData?.category?.id,\n  });\n\n  React.useEffect(() => {\n    resetField("category.id");\n  }, [categoryOptions]);\n\n  return (\n    <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n      <FormControl mb="3" isInvalid={!!(errors as any)?.id}>\n        <FormLabel>Id</FormLabel>\n        <Input\n          disabled\n          type="number"\n          {...register("id", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.id?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.title}>\n        <FormLabel>Title</FormLabel>\n        <Input\n          type="text"\n          {...register("title", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.title?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.content}>\n        <FormLabel>Content</FormLabel>\n        <Input\n          type="text"\n          {...register("content", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.content?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!errors?.category}>\n        <FormLabel>Category</FormLabel>\n        <Select\n          placeholder="Select category"\n          {...register("category.id", {\n            required: "This field is required",\n          })}\n        >\n          {categoryOptions?.map((option) => (\n            <option value={option.value} key={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <FormErrorMessage>\n          {(errors as any)?.category?.id?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.createdAt}>\n        <FormLabel>Created At</FormLabel>\n        <Input\n          disabled\n          {...register("createdAt", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.createdAt?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.updatedAt}>\n        <FormLabel>Updated At</FormLabel>\n        <Input\n          disabled\n          {...register("updatedAt", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.updatedAt?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.publishedAt}>\n        <FormLabel>Published At</FormLabel>\n        <Input\n          disabled\n          {...register("publishedAt", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.publishedAt?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb="3" isInvalid={!!(errors as any)?.locale}>\n        <FormLabel>Locale</FormLabel>\n        <Input\n          disabled\n          type="text"\n          {...register("locale", {\n            required: "This field is required",\n          })}\n        />\n        <FormErrorMessage>\n          {(errors as any)?.locale?.message as string}\n        </FormErrorMessage>\n      </FormControl>\n    </Edit>\n  );\n};\n')))),(0,a.yg)("p",null,"In the code above, just like in the ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostCreate/>")," component, we use methods provided by the ",(0,a.yg)("inlineCode",{parentName:"p"},"useForm()")," hook like ",(0,a.yg)("inlineCode",{parentName:"p"},"register()")," to validate the new post we will add into Strapi.\nThe hooks also provide an object like ",(0,a.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," which handles the submission of the form action, button loading, and disable states"),(0,a.yg)("p",null,"After this, we can now add the component ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostEdit/>")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"edit.tsx")," file to our resource present in the ",(0,a.yg)("inlineCode",{parentName:"p"},"App.tsx")," file"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\nimport {\n  PostList,\n  PostShow,\n  PostCreate,\n  // highlight-next-line\n  PostEdit,\n} from "./pages/posts";\n\nfunction App() {\n  return (\n    <Refine\n      //...\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n          create: "/posts/create",\n          // highlight-next-line\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <Routes>\n        //...\n        <Route index element={<NavigateToResource resource="posts" />} />\n        <Route path="/posts">\n          <Route index element={<PostList />} />\n          <Route path="/posts/show/:id" element={<PostShow />} />\n          <Route path="/posts/create" element={<PostCreate />} />\n          {/* highlight-start */}\n          <Route path="/posts/edit/:id" element={<PostEdit />} />\n          {/* highlight-end */}\n        </Route>\n        //...\n      </Routes>\n    </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/editing-record-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"deleting-post-record"},"Deleting post record"),(0,a.yg)("p",null,"To delete a record, We'll add a ",(0,a.yg)("strong",{parentName:"p"},"Delete")," button so we'll need to update our ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostList/> "),"component to include the button to the actions row. Add the highlighted lines below to the existing list component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'...\nimport {\n    ShowButton,\n    EditButton,\n    // highlight-next-line\n    DeleteButton,\n} from "@refinedev/chakra-ui";\n\nexport const PostList = () => {\n    //...\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            //...\n            {\n                id: "actions",\n                accessorKey: "id",\n                header: "Actions",\n                cell: function render({ getValue }) {\n                return (\n                    <HStack>\n                        <ShowButton hideText recordItemId={getValue() as string} />\n                        <EditButton hideText recordItemId={getValue() as string} />\n                        { /* highlight-next-line */ }\n                        <DeleteButton hideText recordItemId={getValue() as string} />\n                    </HStack>\n                    );\n                },\n            },\n        ],\n    []\n  );\n  //...\n};\n')),(0,a.yg)("p",null,"Another way to include a delete button on the ",(0,a.yg)("inlineCode",{parentName:"p"},"<PostEdit>")," page. To display the delete button on the edit page and the view page, the ",(0,a.yg)("inlineCode",{parentName:"p"},"canDelete")," prop must be passed to the resource object."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'//...\nfunction App() {\n  return (\n    <Refine\n      //...\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          show: "/posts/show/:id",\n          create: "/posts/create",\n          // highlight-start\n          meta: {\n            canDelete: true,\n          },\n          // highlight-end\n        },\n      ]}\n    />\n  );\n}\n\nexport default App;\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/deleting-record-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"implement-sorting-of-listed-records"},"Implement sorting of listed records"),(0,a.yg)("p",null,"Since the ",(0,a.yg)("inlineCode",{parentName:"p"},"@refinedev/react-table package")," is based on the ",(0,a.yg)("inlineCode",{parentName:"p"},"Tanstack")," Table package, we can add sorting and filtering features to our table."),(0,a.yg)("p",null,"Let's make a ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnSorter/>")," component for our table header. This component will be in charge of changing the table's sorting state.\nwe create a new folder named ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," under the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder. Under that folder, add a ",(0,a.yg)("inlineCode",{parentName:"p"},"ColumnSorter.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code "),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/ColumnSorter.tsx"',title:'"src/components/ColumnSorter.tsx"'},'import { IconButton } from "@chakra-ui/react";\nimport {\n  IconChevronDown,\n  IconSelector,\n  IconChevronUp,\n} from "@tabler/icons-react";\nimport { Column } from "@tanstack/react-table";\n\nexport const ColumnSorter: React.FC<{ column: Column<any, any> }> = ({\n  column,\n}) => {\n  if (!column.getCanSort()) {\n    return null;\n  }\n\n  const sorted = column.getIsSorted();\n\n  const Icon = () => {\n    if (!sorted) {\n      return <IconSelector size={18} />;\n    }\n\n    if (sorted === "asc") {\n      return <IconChevronDown size={18} />;\n    }\n\n    if (sorted === "desc") {\n      return <IconChevronUp size={18} />;\n    }\n\n    return null;\n  };\n\n  return (\n    <IconButton\n      aria-label="Sort"\n      size="xs"\n      onClick={column.getToggleSortingHandler()}\n      style={{\n        transition: "transform 0.25s",\n        transform: `rotate(${sorted === "asc" ? "180" : "0"}deg)`,\n      }}\n      icon={<Icon />}\n    />\n  );\n};\n')))),(0,a.yg)("p",null,"In the code above, the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnSorter/>")," is a simple component that displays a button.\nThe ",(0,a.yg)("inlineCode",{parentName:"p"},"column.getToggleSortingHandler()")," method is called when the user clicks on the button. This method will alter the table's sorting state."),(0,a.yg)("p",null,"Also, we use the ",(0,a.yg)("inlineCode",{parentName:"p"},"column.getCanSort()")," method to determine if the column is sortable. If it is, We will render the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnSorter/>")," component and vice-versa."),(0,a.yg)("p",null,"Once the column is sorted, the ",(0,a.yg)("inlineCode",{parentName:"p"},"IconChevronDown")," icon will be rendered. Otherwise, the ",(0,a.yg)("inlineCode",{parentName:"p"},"IconSelector")," icon will be rendered."),(0,a.yg)("p",null,"Next, we import the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnSorter/>")," component to the list.tsx file located at the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts/")," directory and add the component to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Th/>")," of the table as a child as shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'...\nimport { ColumnSorter } from "../../components/column-sorter";\n\n//...\n<Table variant="simple">\n    <Thead>\n        {getHeaderGroups().map((headerGroup) => (\n            <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                    <Th key={header.id}>\n                        {!header.isPlaceholder &&\n                            flexRender(\n                                header.column.columnDef.header,\n                                header.getContext()\n                            )}\n                        { /* highlight-next-line */}\n                        <ColumnSorter column={header.column} />\n                    </Th>\n                ))}\n            </Tr>\n        ))}\n    </Thead>\n    //...\n</Table>\n')),(0,a.yg)("p",null,"You can set the ",(0,a.yg)("inlineCode",{parentName:"p"},"enableSorting")," property of the column to false in the column definition to disable sorting for the `",(0,a.yg)("strong",{parentName:"p"},"actions")," column, as shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'{\n    id: "actions",\n    accessorKey: "id",\n    header: "Actions",\n    // highlight-next-line\n    enableSorting: false,\n    ...\n},\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/sorting-record-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"implement-filters-on-listed-records"},"Implement filters on listed records"),(0,a.yg)("p",null,"Firstly, Let's make a ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnFilter/>")," component for our table header. This component will handle the filtering of listed records.\nwe create a new folder named ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," under the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder. Under that folder, add a ",(0,a.yg)("inlineCode",{parentName:"p"},"ColumnFilter.tsx")," file with the following code:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show code"),(0,a.yg)("p",null,(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/ColumnFilter.tsx"',title:'"src/components/ColumnFilter.tsx"'},'import React, { useState } from "react";\nimport {\n  Input,\n  Menu,\n  IconButton,\n  MenuButton,\n  MenuList,\n  VStack,\n  HStack,\n} from "@chakra-ui/react";\nimport { IconFilter, IconX, IconCheck } from "@tabler/icons-react";\nimport { Column } from "@tanstack/react-table";\n\nexport const ColumnFilter: React.FC<{ column: Column<any, any> }> = ({\n  column,\n}) => {\n  const [state, setState] = useState(null as null | { value: any });\n\n  if (!column.getCanFilter()) {\n    return null;\n  }\n\n  const open = () =>\n    setState({\n      value: column.getFilterValue(),\n    });\n\n  const close = () => setState(null);\n\n  const change = (value: any) => setState({ value });\n\n  const clear = () => {\n    column.setFilterValue(undefined);\n    close();\n  };\n\n  const save = () => {\n    if (!state) return;\n    column.setFilterValue(state.value);\n    close();\n  };\n\n  const renderFilterElement = () => {\n    const FilterComponent = (column.columnDef?.meta as any)?.filterElement;\n\n    if (!FilterComponent && !!state) {\n      return (\n        <Input\n          borderRadius="md"\n          size="sm"\n          autoComplete="off"\n          value={state.value}\n          onChange={(e) => change(e.target.value)}\n        />\n      );\n    }\n\n    return (\n      <FilterComponent\n        value={state?.value}\n        onChange={(e: any) => change(e.target.value)}\n      />\n    );\n  };\n\n  return (\n    <Menu isOpen={!!state} onClose={close}>\n      <MenuButton\n        onClick={open}\n        as={IconButton}\n        aria-label="Options"\n        icon={<IconFilter size="16" />}\n        variant="ghost"\n        size="xs"\n      />\n      <MenuList p="2">\n        {!!state && (\n          <VStack align="flex-start">\n            {renderFilterElement()}\n            <HStack spacing="1">\n              <IconButton\n                aria-label="Clear"\n                size="sm"\n                colorScheme="red"\n                onClick={clear}\n              >\n                <IconX size={18} />\n              </IconButton>\n              <IconButton\n                aria-label="Save"\n                size="sm"\n                onClick={save}\n                colorScheme="green"\n              >\n                <IconCheck size={18} />\n              </IconButton>\n            </HStack>\n          </VStack>\n        )}\n      </MenuList>\n    </Menu>\n  );\n};\n')))),(0,a.yg)("p",null,"In the code above, ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnFilter/>")," is a button. on clicking the button, a menu will be opened. In the menu exists a filter element of the column that is being rendered. The filter element is an ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input/>")," component in which you can add a value which will be used to subsequently filter the records based on that value."),(0,a.yg)("p",null,"Next, we Import the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnFilter/>")," component to the list.tsx file located at the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/pages/posts/")," directory and add the component to the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Th/>")," of the table just like we did the ",(0,a.yg)("inlineCode",{parentName:"p"},"<ColumnSorter/>")," component."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'...\nimport { ColumnSorter } from "../../components/column-sorter";\n// highlight-next-line\nimport { ColumnFilter } from "../../components/column-filter";\n\n//...\n<Table variant="simple">\n    <Thead>\n        {getHeaderGroups().map((headerGroup) => (\n            <Tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                    <Th key={header.id}>\n                        {!header.isPlaceholder &&\n                            flexRender(\n                                header.column.columnDef.header,\n                                header.getContext()\n                            )}\n                        <ColumnSorter column={header.column} />\n                        { /* highlight-next-line */}\n                        <ColumnFilter column={header.column} />\n                    </Th>\n                ))}\n            </Tr>\n        ))}\n    </Thead>\n    //...\n</Table>\n')),(0,a.yg)("p",null,"We can change the ",(0,a.yg)("inlineCode",{parentName:"p"},"filter"),' operator for columns to "',(0,a.yg)("inlineCode",{parentName:"p"},"contains"),'". The filterOperator is set to ',(0,a.yg)("inlineCode",{parentName:"p"},'"eq"'),' by default. As a result, we changed the filterOperator for specific columns to "',(0,a.yg)("inlineCode",{parentName:"p"},"contains"),'" as shown below:'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'{\n    id: "id",\n    accessorKey: "id",\n    header: "Id",\n    // highlight-start\n    meta: {\n        filterOperator: "eq",\n    },\n    // highlight-end\n},\n{\n    id: "title",\n    accessorKey: "title",\n    header: "Title",\n    // highlight-start\n    meta: {\n        filterOperator: "contains",\n    },\n    // highlight-end\n},\n{\n    id: "category",\n    accessorKey: "category.title",\n    header: "Category",\n    // highlight-start\n    meta: {\n        filterOperator: "contains",\n    },\n    // highlight-end\n    ...\n},\n{\n    id: "createdAt",\n    accessorKey: "createdAt",\n    header: "Created At",\n    ...\n},\n')),(0,a.yg)("p",null,"We can also disable filtering for the ",(0,a.yg)("inlineCode",{parentName:"p"},"actions")," column by setting the column's enableColumnFilter property to false in the column definition, as shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'{\n    id: "actions",\n    accessorKey: "id",\n    header: "Actions",\n    // highlight-next-line\n    enableColumnFilter: false,\n    ...\n},\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/filtering-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h3",{id:"implementing-mutation-mode"},"Implementing mutation mode."),(0,a.yg)("p",null,"Mutation modes controls how side-effects or actions like deletion, creation, updating, etc are applied. Refine provides three mutation modes namely:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"pessimistic: In this mode, UI updates are delayed until the server confirms the mutation."),(0,a.yg)("li",{parentName:"ul"},"undoable: In this mode, UI updates are immediately applied, but the mutation can be reversed."),(0,a.yg)("li",{parentName:"ul"},"optimistic: UI updates are immediately updated before confirmed by server.")),(0,a.yg)("p",null,"We will implement undoable mutation mode. The mutation is applied locally, and redirection and UI updates are performed as soon as the mutation is successful. It then Waits for a configurable amount of time before applying the mutation."),(0,a.yg)("p",null,"During the timeout, the mutation from the notification can be cancelled using an undo button and the UI will revert the changes to its previous state."),(0,a.yg)("p",null,"To enable mutation mode, we will set the ",(0,a.yg)("inlineCode",{parentName:"p"},"mutationMode")," property in the Refine component options property."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nfunction App() {\n  return (\n        <Refine\n            //...\n            options={{\n              syncWithLocation: true,\n              warnWhenUnsavedChanges: true,\n              // highlight-next-line\n              mutationMode: "undoable"\n            }}\n        />\n    );\n}\nexport default App;\n')),(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-03-03-ra-chakra-tutorial/mutationmode-min.gif",className:"border border-gray-100 rounded",alt:"react admin tutorial"}),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"In this article, we covered how to create a React admin panel with refine. We also learned:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"How to bootstrap a Refine application."),(0,a.yg)("li",{parentName:"ul"},"Connecting a Strapiv4 data provider to a Refine application."),(0,a.yg)("li",{parentName:"ul"},"implemented CRUD operations on a Refine application.")),(0,a.yg)("p",null,"If you're looking to build a robust and dynamic admin panel for your web application, then this React admin tutorial is just what you need."),(0,a.yg)("p",null,"This article demonstrates the flexibility that comes with using Refine to create web applications. Refine is a fantastic tool that accelerates development by abstracting many time-consuming tasks, giving the developer more time to focus on the application's core business logic."),(0,a.yg)("p",null,"It also comes with detailed documentation that will get you started. Visit ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/getting-started/overview/"},"here")," to access the documentation."),(0,a.yg)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,a.yg)(u,{path:"blog-ra-chakra-tutorial",mdxType:"CodeSandboxExample"}),(0,a.yg)("hr",null))}y.isMDXComponent=!0}}]);