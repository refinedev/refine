"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[88653],{58860:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>f});var a=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),g=o,f=c["".concat(p,".").concat(g)]||c[g]||m[g]||r;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},24325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});t(37953);var a=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const l={title:"Ref Forwarding with React forwardRef",description:"We discuss in detail how ref forwarding with React forwardRef works.",slug:"react-forwardref",authors:"abdullah_numan",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-06-12-forward-ref/social.png",hide_table_of_contents:!1},p=void 0,s={permalink:"/blog/react-forwardref",source:"@site/blog/2024-06-12-forward-ref.md",title:"Ref Forwarding with React forwardRef",description:"We discuss in detail how ref forwarding with React forwardRef works.",date:"2024-06-12T00:00:00.000Z",formattedDate:"June 12, 2024",tags:[{label:"react",permalink:"/blog/tags/react"}],readingTime:19.785,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Ref Forwarding with React forwardRef",description:"We discuss in detail how ref forwarding with React forwardRef works.",slug:"react-forwardref",authors:"abdullah_numan",tags:["react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2024-06-12-forward-ref/social.png",hide_table_of_contents:!1},prevItem:{title:"CSS Grid vs Flexbox - A brief guide",permalink:"/blog/css-grid-vs-flexbox"},nextItem:{title:"A Guide for Next.js with TypeScript",permalink:"/blog/next-js-with-typescript"},relatedPosts:[{title:"React useMemo Hook Guide with Examples",description:"Improve React app performance with the useMemo() hook.",permalink:"/blog/react-usememo",formattedDate:"September 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:12.855,date:"2024-09-19T00:00:00.000Z"},{title:"A Quick Start Guide to React Suspense",description:"We will discuss how React Suspense works and common use cases",permalink:"/blog/react-suspense-guide",formattedDate:"October 21, 2024",authors:[{name:"Joel Adewole",title:"Web Developer",url:"https://github.com/wolz-codelife",github:"https://github.com/wolz-codelife",linkedin:"https://linkedin.com/in/wolz-codelife",imageURL:"https://github.com/wolz-CODElife.png",key:"joel_adewole"}],readingTime:15.1,date:"2024-10-21T00:00:00.000Z"},{title:"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase",description:"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.",permalink:"/blog/customizable-issue-tracker-with-refine-and-supabase",formattedDate:"November 12, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:17.04,date:"2021-11-12T00:00:00.000Z"}],authorPosts:[{title:"How to Use JavaScript Array Splice",description:"This post is about various uses of the splice() method in JavaScript.",permalink:"/blog/javascript-splice-method",formattedDate:"September 5, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:16.41,date:"2024-09-05T00:00:00.000Z"},{title:"React Memo Guide with Examples",description:"Improve app performance with React.memo().",permalink:"/blog/react-memo-guide",formattedDate:"September 19, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:18.645,date:"2024-09-19T00:00:00.000Z"},{title:"JavaScript Substring Method",description:"We'll learn how to use JavaScript substring method to extract substrings from a parent string.",permalink:"/blog/javascript-substring-method",formattedDate:"December 31, 2024",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:11.29,date:"2024-12-31T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"What is React forwardRef?",id:"what-is-react-forwardref",level:2},{value:"What are <code>ref</code>s in React?",id:"what-are-refs-in-react",level:3},{value:"The JSX <code>ref</code> Attribute",id:"the-jsx-ref-attribute",level:4},{value:"<code>ref</code> Values in React",id:"ref-values-in-react",level:4},{value:"What Does <code>useRef()</code> Do in React ?",id:"what-does-useref-do-in-react-",level:3},{value:"What Does <code>React.createRef()</code> Do in a Class Component",id:"what-does-reactcreateref-do-in-a-class-component",level:3},{value:"Why Ref Forwarding is Needed in React Functional Components",id:"why-ref-forwarding-is-needed-in-react-functional-components",level:3},{value:"How <code>React.forwardRef()</code> Works",id:"how-reactforwardref-works",level:3},{value:"Anatomy of Ref Forwarding with <code>React.forwardRef()</code>: A Video Player Example",id:"anatomy-of-ref-forwarding-with-reactforwardref-a-video-player-example",level:2},{value:"The Parent Component",id:"the-parent-component",level:3},{value:"Using <code>useRef()</code> with <code>React.forwardRef()</code>",id:"using-useref-with-reactforwardref",level:3},{value:"Pass <code>ref</code> Prop of Child Functional Component",id:"pass-ref-prop-of-child-functional-component",level:3},{value:"Controlling <code>ref</code> Target from the Parent",id:"controlling-ref-target-from-the-parent",level:3},{value:"The Child Functional Component with <code>React.forwardRef()</code>",id:"the-child-functional-component-with-reactforwardref",level:3},{value:"React Ref Forwarding: Setting <code>ref</code> Attribute in a Target DOM Element",id:"react-ref-forwarding-setting-ref-attribute-in-a-target-dom-element",level:3},{value:"Forwarding Refs from a React Class Component",id:"forwarding-refs-from-a-react-class-component",level:3},{value:"React forwardRef: Advanced Examples",id:"react-forwardref-advanced-examples",level:2},{value:"Using <code>React.forwardRef()</code> in Higher Order Components",id:"using-reactforwardref-in-higher-order-components",level:3},{value:"<code>React.forwardRef()</code> for Reusable Components",id:"reactforwardref-for-reusable-components",level:3},{value:"React.forwardRef: Benefits &amp; Best Practices",id:"reactforwardref-benefits--best-practices",level:2},{value:"Benefits of using React <code>forwardRef()</code>",id:"benefits-of-using-react-forwardref",level:3},{value:"React.forwardRef(): Use Cases",id:"reactforwardref-use-cases",level:3},{value:"<code>React.forwardRef()</code>: Some Best Practices",id:"reactforwardref-some-best-practices",level:3},{value:"Summary",id:"summary",level:2}],m=(g="Form",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var g;const f={toc:c},u="wrapper";function h(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(u,r(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},f,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"This post is about the ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," utility function in React. We discuss in detail how ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s work in React, why they need to be forwarded in functional components, and how ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," is used to manipulate child DOM elements."),(0,a.yg)("p",null,"React ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," is a utility function that helps convey ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s from a parent component to a child functional component. In a functional component in React, forwarding a parent's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s is important as child functional components by default do not have a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute and do not accept the parent's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," as a prop. ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding from parent to a child functional component, among other uses, especially plays important role in manipulating DOM nodes in the child."),(0,a.yg)("p",null,"In this post, we explore what entails ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," and how this function is used in manipulating DOM elements as well as in higher-order components in React."),(0,a.yg)("p",null,"We first spend time to understand what the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute in a React component stands for, and how to initialize a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value in a parent component using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook and the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method. We expound on why functional React components fail to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop from its parent and demonstrate with examples how the ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," utility addresses this shortcoming. With a ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," example, we examine the internals of how ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding works with the participation of a parent component that initializes a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," handle, a child functional component that acquires it and internally ties one of its DOM node to that handle by setting its ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute."),(0,a.yg)("p",null,"In the latter half of the post, we consider an example of ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding in higher-order components and how ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," is used in building reusable components in robust UI systems like Shadcn/ui. We also cover the benefits of using ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()"),", and some of the associated pitfalls and best practices centered around ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding."),(0,a.yg)("p",null,"Steps we'll cover in this post:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#what-is-react-forwardref"},"What is React forwardRef?")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#anatomy-of-ref-forwarding-with-reactforwardref-a-video-player-example"},"Anatomy of Ref Forwarding with ",(0,a.yg)("inlineCode",{parentName:"a"},"React.forwardRef()"),": A Video Player Example")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#react-forwardref-advanced-examples"},"React forwardRef: Advanced Examples")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#reactforwardref-benefits--best-practices"},"React.forwardRef: Benefits \\& Best Practices"))),(0,a.yg)("h2",{id:"what-is-react-forwardref"},"What is React forwardRef?"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," is a React utility function that allows ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values from a parent component to be availed to a child ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"functional component")),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s are first created using ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"createRef()")," inside the parent. They are then forwarded and picked to manipulate a DOM node rendered inside the child JSX."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," returns a component that can accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop, something the original functional component is not capable of doing. In other words, React ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," enables a functional component to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop and forward it to its internal JSX."),(0,a.yg)("p",null,"For example, in the following code, we are using the ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," API for implementing ",(0,a.yg)("inlineCode",{parentName:"p"},"focus")," on an ",(0,a.yg)("inlineCode",{parentName:"p"},"<input />")," element:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { useRef } from "react";\n\nexport function Form() {\n  const inputRef = useRef(null);\n  const handleClick = () => inputRef.current.focus();\n\n  return (\n    <div className="form">\n      <Input label="Title" ref={inputRef} />\n      <button className="button" onClick={handleClick}>\n        Focus Title Field\n      </button>\n    </div>\n  );\n}\n\nexport const Input = React.forwardRef((props, inputRef) => {\n  const { label, ...otherProps } = props;\n  return (\n    <div className="form-control">\n      <label className="form-label">{label}</label>\n      <input className="form-field" {...otherProps} ref={inputRef} />\n    </div>\n  );\n});\n')),(0,a.yg)("h3",{id:"what-are-refs-in-react"},"What are ",(0,a.yg)("inlineCode",{parentName:"h3"},"ref"),"s in React?"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s in React are understood in two levels: first, the JSX ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute and secondly, ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values initialized by an owner using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook or the ",(0,a.yg)("inlineCode",{parentName:"p"},"createRef()")," method on ",(0,a.yg)("inlineCode",{parentName:"p"},"React"),"."),(0,a.yg)("h4",{id:"the-jsx-ref-attribute"},"The JSX ",(0,a.yg)("inlineCode",{parentName:"h4"},"ref")," Attribute"),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," in React is an attribute assigned to a JSX node. The ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute does not exist in HTML elements and is specific to JSX and React. Thus a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute can be set on JSX elements. It can also be set on a React class component node:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"<input ref={refValue}> // ref attribute set on JSX elements\n\n// OR\n<AClassComponent ref={refValue} /> // ref set on a class component\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[TIP: A ",(0,a.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"ref")," value ties the current node to the value's owner]"),(0,a.yg)("p",{parentName:"admonition"},"The JSX ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute placed on a target component or element gives the ",(0,a.yg)("inlineCode",{parentName:"p"},"refValue")," owner access to the JSX node.\nThe ",(0,a.yg)("inlineCode",{parentName:"p"},"refValue")," is an object with a ",(0,a.yg)("inlineCode",{parentName:"p"},"current")," property. The node is assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"current")," property and can be accessed by the owner via ",(0,a.yg)("inlineCode",{parentName:"p"},"refValue.current"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const refValue = {\n  current: HTMLElement,\n};\n\nconst targetNode = refValue.current;\n")),(0,a.yg)("p",{parentName:"admonition"},"Then intended actions such as event handlers can be implemented on the node as necessary.")),(0,a.yg)("h4",{id:"ref-values-in-react"},(0,a.yg)("inlineCode",{parentName:"h4"},"ref")," Values in React"),(0,a.yg)("p",null,"Secondly, ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values are initialized by an owner. They can be initialized using the ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook or the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method. A ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value is typically initialized or possessed by a parent component. When intended for a target JSX element, it can then get assigned to the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute of the JSX node. Setting a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value to the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute of a JSX node allows the parent component to control it via its DOM APIs."),(0,a.yg)("p",null,"For example, in the following ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component, ",(0,a.yg)("inlineCode",{parentName:"p"},"inputRef")," is set as a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<input />")," element:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import { useRef } from "react";\n\nexport const Input = () => {\n  // highlight-next-line\n  const inputRef = useRef(null);\n\n  // highlight-next-line\n  const handleClick = () => inputRef.current.focus();\n\n  return (\n    <div>\n      <div className="form-control">\n        <label className="form-label">Title</label>\n        // highlight-next-line\n        <input className="form-field" ref={inputRef} />\n      </div>\n      // highlight-next-line\n      <button className="button" onClick={handleClick}>\n        Focus Title Field\n      </button>\n    </div>\n  );\n};\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value is then used to access and manipulate the ",(0,a.yg)("inlineCode",{parentName:"p"},"<input />")," node, i.e. making it ",(0,a.yg)("inlineCode",{parentName:"p"},"focus")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},"handleClick")," function."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[Refs are React ways of getting a DOM element]"),(0,a.yg)("p",{parentName:"admonition"},"React ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s offer an escape hatch to get a handle over a child JSX or DOM nodes. They are React ways of getting a DOM node, something we achieve with ",(0,a.yg)("inlineCode",{parentName:"p"},"document.getElementById()")," in plain JavaScript.")),(0,a.yg)("p",null,"Apart from storing a reference to a JSX or DOM node, a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value can be used to store ",(0,a.yg)("inlineCode",{parentName:"p"},"string"),"s or ",(0,a.yg)("inlineCode",{parentName:"p"},"number"),"s data as well. They can be used for values that represent anything other than component / application state."),(0,a.yg)("admonition",{type:"warning"},(0,a.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[WARNING: Do not use ",(0,a.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"ref"),"s for states]"),(0,a.yg)("p",{parentName:"admonition"},"It is strongly suggested ",(0,a.yg)("strong",{parentName:"p"},"not")," to use ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s for storing component states. This is because ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s do not trigger a re-render. And thus are not updated in the UI.")),(0,a.yg)("h3",{id:"what-does-useref-do-in-react-"},"What Does ",(0,a.yg)("inlineCode",{parentName:"h3"},"useRef()")," Do in React ?"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook is used to initialize a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"'s value (such as ",(0,a.yg)("inlineCode",{parentName:"p"},"inputRef")," above) to be possessed by an owner component. The ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook is used for initializing ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values, particularly in a functional component. As in the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component above:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import { useRef } from "react";\n\nexport function Input() {\n\n    // highlight-next-line\n    const inputRef = useRef(null); // Declaring a ref value\n\n  return (\n        // ...\n  );\n};\n')),(0,a.yg)("p",null,"It is equivalent to the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method that is used for initializing a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value in class components."),(0,a.yg)("h3",{id:"what-does-reactcreateref-do-in-a-class-component"},"What Does ",(0,a.yg)("inlineCode",{parentName:"h3"},"React.createRef()")," Do in a Class Component"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method is used to initialize a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value inside a class component. If we were to use a class component for implementing the same above ",(0,a.yg)("inlineCode",{parentName:"p"},"focus")," functionality, it would be like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { Component } from "react";\n\nexport class Input extends Component {\n  constructor(props) {\n    super(props);\n    // highlight-next-line\n    this.inputClassRef = React.createRef();\n  }\n\n  handleClick = () => {\n    // highlight-next-line\n    this.inputClassRef.current.focus();\n  };\n\n  render() {\n    return (\n      <div>\n        <div className="form-control">\n          <label className="form-label">Title</label>\n          // highlight-next-line\n          <input className="form-field" ref={this.inputClassRef} />\n        </div>\n        // highlight-next-line\n        <button className="button" onClick={this.handleClick}>\n          Focus Title Field\n        </button>\n      </div>\n    );\n  }\n}\n')),(0,a.yg)("p",null,"Notice, that we have used the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method this time to initialize a value for the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute. This is so because the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component now is a class component."),(0,a.yg)("p",null,"It is important to note that, in both the examples above, we haven't applied any ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding. This is because, the ",(0,a.yg)("inlineCode",{parentName:"p"},"<input />")," element is hosted as a direct child of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value owner, so no forwarding is necessary."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding is needed when the target node by default does not get passed the owner's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s, for example when rendered inside a child functional component."),(0,a.yg)("h3",{id:"why-ref-forwarding-is-needed-in-react-functional-components"},"Why Ref Forwarding is Needed in React Functional Components"),(0,a.yg)("p",null,"React adds the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute out-of-the-box in JSX shadow DOM nodes. This happens by setting the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute to DOM elements during component mount. The ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute can be custom-added to React class components as well. Setting a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute is possible because class components and DOM elements have ",(0,a.yg)("strong",{parentName:"p"},"instances"),"."),(0,a.yg)("p",null,"However, React functional components do ",(0,a.yg)("strong",{parentName:"p"},"not")," have instances since they are JavaScript functions. So, a React functional component cannot be assigned a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute. This makes a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value owner associate it to child functional components and any JSX node within them."),(0,a.yg)("p",null,"To overcome this, a child functional component needs to be enabled to accept a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," props and forward the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," ",(0,a.yg)("strong",{parentName:"p"},"values")," of the owner (typically a ",(0,a.yg)("strong",{parentName:"p"},"parent")," component). This is done by wrapping the functional component with the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," function. Doing so gives us an enhanced component that can be passed a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop."),(0,a.yg)("h3",{id:"how-reactforwardref-works"},"How ",(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()")," Works"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," accepts a ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," function as its argument. The ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," function is ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"always"))," a React functional component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const EnhancedComponent = React.forwardRef(render);\n")),(0,a.yg)("p",null,"Wrapping a child functional component with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," returns an enhanced component that can be passed a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop and conveys the accepted ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values to the ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," function's closure. This means the ultimate job of the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," function is to avail the parent's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values to the child functional component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\n\nexport const Input = React.forwardRef((props, inputRef) => {\n  // Use inputRef to set ref attribute of DOM node\n\n  const { label, ...otherProps } = props;\n\n  return (\n    <div>\n      <div className="form-control">\n        <label className="form-label">{label}</label>\n        // highlight-next-line\n        <input className="form-field" {...otherProps} ref={inputRef} />\n      </div>\n    </div>\n  );\n});\n')),(0,a.yg)("p",null,"And then inside the component's JSX, a target node (the ",(0,a.yg)("inlineCode",{parentName:"p"},"<input />")," element above) gets associated with the parent by setting the target's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute to the forwarded value (",(0,a.yg)("inlineCode",{parentName:"p"},"inputRef"),")."),(0,a.yg)("p",null,"In other words, a parent node initializes a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value (such as ",(0,a.yg)("inlineCode",{parentName:"p"},"inputRef"),") somewhere else. A child functional component is wrapped with the ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," function, which conveys the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value to the function's lexical context. The functional component picks the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value and internally associates a subnode of its own by setting the latter's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute to the value. The functional component also accepts its usual ",(0,a.yg)("inlineCode",{parentName:"p"},"props")," object."),(0,a.yg)("p",null,"The returned component then is equipped to be passed a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop when rendered inside the parent:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import { useRef } from "react";\n\nexport function Form() {\n  const inputRef = useRef(null);\n  const handleClick = () => inputRef.current.focus();\n\n  return (\n    <div>\n      // highlight-next-line\n      <Input label="Title" ref={inputRef} /> // The enhanced component now accepts\n      a `ref` prop\n      <button className="button" onClick={handleClick}>\n        Focus Input Field\n      </button>\n    </div>\n  );\n}\n')),(0,a.yg)("h2",{id:"anatomy-of-ref-forwarding-with-reactforwardref-a-video-player-example"},"Anatomy of Ref Forwarding with ",(0,a.yg)("inlineCode",{parentName:"h2"},"React.forwardRef()"),": A Video Player Example"),(0,a.yg)("p",null,"In this section, we elaborate on different aspects of forwarding a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),". We consider a ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," component, that acts as the parent of a child functional component which returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," component after being wrapped with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),"."),(0,a.yg)("h3",{id:"the-parent-component"},"The Parent Component"),(0,a.yg)("p",null,"React ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding involves a parent component that is the owner of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value. The parent in this example is the ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," component, which initializes a ",(0,a.yg)("inlineCode",{parentName:"p"},"videoRef"),". It looks like this:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show VideoPlayer component code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\nimport { Video } from "./video";\n\nexport function VideoPlayer({ source }) {\n  // highlight-next-line\n  const videoRef = React.useRef(null);\n\n  // highlight-start\n  const playVideo = () => videoRef.current.play();\n  const pauseVideo = () => videoRef.current.pause();\n  // highlight-end\n\n  return (\n    <div className="video-player">\n      <Video\n        source={source}\n        // highlight-next-line\n        ref={videoRef}\n      />\n      <div className="video-controls">\n        <button\n          className="video-button"\n          // highlight-next-line\n          onClick={playVideo}\n        >\n          Play\n        </button>\n        <button\n          className="video-button"\n          // highlight-next-line\n          onClick={pauseVideo}\n        >\n          Pause\n        </button>\n      </div>\n    </div>\n  );\n}\n'))),(0,a.yg)("h3",{id:"using-useref-with-reactforwardref"},"Using ",(0,a.yg)("inlineCode",{parentName:"h3"},"useRef()")," with ",(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()")),(0,a.yg)("p",null,"Since we are using a functional component for the parent, we are initializing the ",(0,a.yg)("inlineCode",{parentName:"p"},"videoRef")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()")," hook:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const videoRef = React.useRef(null);\n")),(0,a.yg)("h3",{id:"pass-ref-prop-of-child-functional-component"},"Pass ",(0,a.yg)("inlineCode",{parentName:"h3"},"ref")," Prop of Child Functional Component"),(0,a.yg)("p",null,"Inside JSX, we have to then pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop of the child functional component (",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />"),") to the initialized value:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"return (\n  <Video\n    source={source}\n    // highlight-next-line\n    ref={videoRef}\n  />\n);\n")),(0,a.yg)("p",null,"We expect this to be possible because a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop will be enabled on ",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," thanks to ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),". Normally, the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop here would be non-sense if ",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," is a plain functional component. Since we'll be wrapping ",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," gets recognized as a prop being forwarded internally."),(0,a.yg)("h3",{id:"controlling-ref-target-from-the-parent"},"Controlling ",(0,a.yg)("inlineCode",{parentName:"h3"},"ref")," Target from the Parent"),(0,a.yg)("p",null,"We are also defining two event handlers for controlling the target DOM node (a ",(0,a.yg)("inlineCode",{parentName:"p"},"<video>")," element):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"const playVideo = () => videoRef.current.play();\nconst pauseVideo = () => videoRef.current.pause();\n")),(0,a.yg)("p",null,"The necessity and perhaps the significance of ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding is that we want to control the target from ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"within the parent")),", without passing the event handlers down the DOM tree. Instead, we'd just pass along the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value."),(0,a.yg)("p",null,"This way of control segregates the control-related nodes up the DOM tree from the target node further down. And helps keep the control nodes inside the parent component:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'// Control remains inside the parent <VideoPlayer /> component\n\n<div className="video-controls">\n  <button\n    className="video-button"\n    // highlight-next-line\n    onClick={playVideo}\n  >\n    Play\n  </button>\n  <button\n    className="video-button"\n    // highlight-next-line\n    onClick={pauseVideo}\n  >\n    Pause\n  </button>\n</div>\n')),(0,a.yg)("h3",{id:"the-child-functional-component-with-reactforwardref"},"The Child Functional Component with ",(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()")),(0,a.yg)("p",null,"The most important part of React ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding entails conveying the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute that is passed to the child functional component (",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," inside ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," we saw above). In other words, the child component has to be wrapped with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),". As in the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Video />")," component below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\n\n// highlight-next-line\nexport const Video = React.forwardRef((props, videoRef) => {\n  const { source, ...otherProps } = props;\n\n  return (\n    <video\n      {...otherProps}\n      // highlight-next-line\n      ref={videoRef}\n      width="640"\n      height="360"\n      controls\n      controlslist="play timeline volume"\n    >\n      <source src={source} type="video/mp4" />\n    </video>\n  );\n});\n')),(0,a.yg)("p",null,"Otherwise, ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," gets passed to the child as a regular prop, and its ",(0,a.yg)("inlineCode",{parentName:"p"},"current")," property is unintelligible."),(0,a.yg)("p",null,"Notice, the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," value (",(0,a.yg)("inlineCode",{parentName:"p"},"videoRef"),") is forwarded as a separate argument to the ",(0,a.yg)("inlineCode",{parentName:"p"},"render")," argument of ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),", and we can access it as so."),(0,a.yg)("h3",{id:"react-ref-forwarding-setting-ref-attribute-in-a-target-dom-element"},"React Ref Forwarding: Setting ",(0,a.yg)("inlineCode",{parentName:"h3"},"ref")," Attribute in a Target DOM Element"),(0,a.yg)("p",null,"We have to then set the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute of the target DOM node to the forwarded ",(0,a.yg)("inlineCode",{parentName:"p"},"videoRef")," value:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"<video {...otherProps} ref={videoRef}></video>\n")),(0,a.yg)("p",null,"Setting the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute of the target node allows it to be controlled from the parent component. With this, now, we can trigger ",(0,a.yg)("inlineCode",{parentName:"p"},"playVideo")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pauseVideo")," functions from the ",(0,a.yg)("inlineCode",{parentName:"p"},"Play")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Pause")," buttons that are rendered inside the parent ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," component."),(0,a.yg)("h3",{id:"forwarding-refs-from-a-react-class-component"},"Forwarding Refs from a React Class Component"),(0,a.yg)("p",null,"Notice the parent ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," component. It is currently a functional component. However, the ",(0,a.yg)("strong",{parentName:"p"},"parent")," component involved in ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding does ",(0,a.yg)("strong",{parentName:"p"},"not")," have to be a functional component."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[NOTE: The child must be a functional component, the parent can be a class]"),(0,a.yg)("p",{parentName:"admonition"},"The child component must be functional as ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," is intended to legitimize the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute in the child functional component. But the parent can be a class component also.")),(0,a.yg)("p",null,"Below, we have a React class version of the parent ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," component that uses ",(0,a.yg)("inlineCode",{parentName:"p"},"React.createRef()")," method to initialize ",(0,a.yg)("inlineCode",{parentName:"p"},"videoRef"),", and all ",(0,a.yg)("em",{parentName:"p"},"classy")," stuff we don't use in functional React:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show VideoPlayer class component code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { Component } from "react";\n\nexport default class VideoPlayer extends Component {\n  constructor(props) {\n    super(props);\n    // highlight-next-line\n    this.videoRef = React.createRef();\n  }\n\n  playVideo = () => {\n    this.videoRef?.current?.play();\n  };\n  pauseVideo = () => {\n    this.videoRef?.current?.pause();\n  };\n\n  render() {\n    const { source } = this.props;\n\n    return (\n      <div className="video-player">\n        <Video\n          source={source}\n          // highlight-next-line\n          ref={this?.videoRef}\n        />\n        <div className="video-controls">\n          <button\n            className="video-button"\n            // highlight-next-line\n            onClick={this?.playVideo}\n          >\n            Play\n          </button>\n          <button\n            className="video-button"\n            // highlight-next-line\n            onClick={this?.pauseVideo}\n          >\n            Pause\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n'))),(0,a.yg)("h2",{id:"react-forwardref-advanced-examples"},"React forwardRef: Advanced Examples"),(0,a.yg)("p",null,"In this section, we consider advanced use cases that utilize ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),". We illustrate with an example, how to compose enhanced higher-order components in combination ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),". We also discuss how ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," underpins mission-critical DOM manipulation mechanisms in robust UI libraries like Shadcn/ui and React Hook Form."),(0,a.yg)("h3",{id:"using-reactforwardref-in-higher-order-components"},"Using ",(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()")," in Higher Order Components"),(0,a.yg)("p",null,"Higher-order components, or HOCs, are a React pattern for deriving enhanced versions from an existing component by extending their capabilities. In an HOC, features are added to a stable component by wrapping it inside a functional component that returns the enhanced version."),(0,a.yg)("p",null,"Forwarding ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s using ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," inside a higher order component is a common pattern of adding features to ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," controlled nodes."),(0,a.yg)("p",null,"Below, we extend our ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component by to display error messages using a ",(0,a.yg)("inlineCode",{parentName:"p"},"withErrorMessage()")," HOC:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show `withErrorMessage` HOC and related updates to `",(0,a.yg)(m,{mdxType:"Form"}),"`"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'import React, { useRef } from "react";\n\nexport function Form() {\n  const inputRef = useRef(null);\n  const handleClick = () => inputRef.current.focus();\n\n  return (\n    <div>\n      // highlight-next-line c{" "}\n      <button className="button" onClick={handleClick}>\n        Focus Input Field\n      </button>\n    </div>\n  );\n}\n\nexport const Input = React.forwardRef((props, inputRef) => {\n  const { label, ...otherProps } = props;\n\n  return (\n    <div>\n      <div className="form-control">\n        <label className="form-label">{label}</label>\n        <input className="form-field" {...otherProps} ref={inputRef} />\n      </div>\n    </div>\n  );\n});\n\nconst withErrorMessage = (Component) => {\n  const EnhancedComponent = ({ error, ...props }, ref) => {\n    const hasError = !!error?.message;\n\n    return (\n      <>\n        // highlight-next-line\n        <Component {...props} ref={ref} />\n        {hasError && <div className="error-message">{error?.message}</div>}\n      </>\n    );\n  };\n  // highlight-next-line\n  return React.forwardRef(EnhancedComponent);\n};\n\n// highlight-next-line\nexport const InputWithErrorMessage = withErrorMessage(Input);\n'))),(0,a.yg)("p",null,"Let's break down the ",(0,a.yg)("inlineCode",{parentName:"p"},"withErrorMessage")," component HOC first:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'const withErrorMessage = (Component) => {\n  const EnhancedComponent = ({ error, ...props }, ref) => {\n    const hasError = !!error?.message;\n\n    return (\n      <>\n        <Component {...props} ref={ref} />\n        // highlight-start\n        {hasError && <div className="error-message">{error?.message}</div>}\n        // highlight-end\n      </>\n    );\n  };\n  // highlight-next-line\n  return React.forwardRef(EnhancedComponent);\n};\n\n// highlight-next-line\nexport const InputWithErrorMessage = withErrorMessage(Input);\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"withErrorMessage()")," higher-order component is designed with the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component in mind. It accepts a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarded component as an argument and frames a new ",(0,a.yg)("inlineCode",{parentName:"p"},"EnhanacedComponent")," that is returned with its parent's ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s forwarded: ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef(EnhancedComponent)"),"."),(0,a.yg)("p",null,"The exposed version of ",(0,a.yg)("inlineCode",{parentName:"p"},"EnhancedComponent")," is stored in ",(0,a.yg)("inlineCode",{parentName:"p"},"InputWithErrorMessage"),". It can be passed a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," from its parent and forwarded to ",(0,a.yg)("inlineCode",{parentName:"p"},"EnhancedComponent")," along with its ",(0,a.yg)("inlineCode",{parentName:"p"},"props")," and additional props (",(0,a.yg)("inlineCode",{parentName:"p"},"error")," here). It then adds desired features (the error message ",(0,a.yg)("inlineCode",{parentName:"p"},"div"),") on top of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Component />")," itself."),(0,a.yg)("p",null,"We can now render the ",(0,a.yg)("inlineCode",{parentName:"p"},"<InputWithErrorMessage />")," component with all props passed to the original ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component, including the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},'<InputWithErrorMessage\n  label="Title"\n  error={{ message: "You got an error" }}\n  ref={inputRef}\n/>\n')),(0,a.yg)("p",null,"In addition, we can also pass new props that affect the added features: i.e. the ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," object to display a message. Passing and displaying an error message like this can help ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component integrate with external form management libraries such as React Hook Form to display field errors."),(0,a.yg)("p",null,"Notice, that we did not need to make any change to the original ",(0,a.yg)("inlineCode",{parentName:"p"},"<Input />")," component itself. If its content is stabilized in our codebase, we can leave it as it is. So, the composite HOC derived with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," contributes to code stability, reusability, maintainability, and growth."),(0,a.yg)("h3",{id:"reactforwardref-for-reusable-components"},(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()")," for Reusable Components"),(0,a.yg)("p",null,"Composing robust reusable components with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," helps integrate with third-party libraries. For example, ",(0,a.yg)("a",{parentName:"p",href:"https://www.react-hook-form.com/api/useform/register/"},"React Hook Form")," relies on ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s extensively to internally set ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attributes to form fields by default."),(0,a.yg)("p",null,"Versatile design systems such as ",(0,a.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs"},"Shadcn/ui")," build on top of React Hook Form ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s and make use of ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," to help produce collections of superior UI components."),(0,a.yg)("p",null,"For example, the internal implementation of a ",(0,a.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/input"},"Shadcn/ui ",(0,a.yg)("inlineCode",{parentName:"a"},"<Input />"))," component would look like this:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show Shadcn/ui Input component code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\n\nimport { cn } from "@/lib/utils";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          "border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = "Input";\n\nexport { Input };\n'))),(0,a.yg)("p",null,"Other Shadcn/ui components such as ",(0,a.yg)("inlineCode",{parentName:"p"},"<Form />")," and related subcomponents also use ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," to forward ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s from a parent to a target DOM node. You can check their implementations from the ",(0,a.yg)("a",{parentName:"p",href:"https://ui.shadcn.com/docs/components/form#installation"},(0,a.yg)("inlineCode",{parentName:"a"},"<Form />")," docs here"),"."),(0,a.yg)("h2",{id:"reactforwardref-benefits--best-practices"},"React.forwardRef: Benefits & Best Practices"),(0,a.yg)("p",null,"In this section, we discuss the benefits, use cases, and some best practices centered around ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding in React."),(0,a.yg)("h3",{id:"benefits-of-using-react-forwardref"},"Benefits of using React ",(0,a.yg)("inlineCode",{parentName:"h3"},"forwardRef()")),(0,a.yg)("p",null,"The most obvious benefit of React ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," is that it enables the use of ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s in child functional components by allowing a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop. It also makes the value of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," available to the function's internals. That way, React ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," helps associate descendent DOM nodes to a parent component."),(0,a.yg)("p",null,"Useful consequences of this behavior are:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Child DOM nodes can be targeted with a forwarded ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," value."),(0,a.yg)("li",{parentName:"ul"},"Offers a meaningful React way of targeting DOM nodes, by replacing native JavaScript APIs such as ",(0,a.yg)("inlineCode",{parentName:"li"},"document.getElementById()"),"."),(0,a.yg)("li",{parentName:"ul"},"Parent component can manipulate DOM elements rendered inside a functional component."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s forwarding can be combined with hooks, higher-order functions (HOCs), and render props patterns to compose robust and reusable components.")),(0,a.yg)("h3",{id:"reactforwardref-use-cases"},"React.forwardRef(): Use Cases"),(0,a.yg)("p",null,"React ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," mainly serves the purpose of exposing a DOM node with a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," to a parent. Common use cases involve triggering event-based actions such as:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Focusing a node on an event."),(0,a.yg)("li",{parentName:"ul"},"Scrolling to a node."),(0,a.yg)("li",{parentName:"ul"},"Selecting a text."),(0,a.yg)("li",{parentName:"ul"},"Triggering an animation."),(0,a.yg)("li",{parentName:"ul"},"Triggering custom-defined actions, such as form field validations in React Hook Form-based forms.")),(0,a.yg)("h3",{id:"reactforwardref-some-best-practices"},(0,a.yg)("inlineCode",{parentName:"h3"},"React.forwardRef()"),": Some Best Practices"),(0,a.yg)("p",null,"React ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding is associated with initializing ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s with ",(0,a.yg)("inlineCode",{parentName:"p"},"createRef()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useRef()"),". So, we need to follow the best practices related to them as well as those around ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()"),"."),(0,a.yg)("p",null,"With regards to ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," usage:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We shouldn't overuse ",(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s."),(0,a.yg)("li",{parentName:"ul"},"We should use ",(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s for imperative behaviors such as DOM event handling, animations, and so on."),(0,a.yg)("li",{parentName:"ul"},"Never use ",(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s to replace states for updates that trigger a re-render."),(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s to store mutable values that don't need the JSX to re-render."),(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"ref"),"s as escape hatches that connect to external libraries and browser APIs such as DOM nodes.")),(0,a.yg)("p",null,"While using ",(0,a.yg)("inlineCode",{parentName:"p"},"forwardRef()")," we need to be aware of the pitfalls involved in forwarding ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," values and setting the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Make sure the ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," gets properly initialized in the parent. Use ",(0,a.yg)("inlineCode",{parentName:"li"},"createRef()")," in class components, and ",(0,a.yg)("inlineCode",{parentName:"li"},"useRef()")," in functional components."),(0,a.yg)("li",{parentName:"ul"},"Make sure to pass the ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," prop to the enhanced child functional component returned from ",(0,a.yg)("inlineCode",{parentName:"li"},"React.forwardRef()"),". Otherwise, there is no question of a ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," being forwarded."),(0,a.yg)("li",{parentName:"ul"},"Use the ",(0,a.yg)("inlineCode",{parentName:"li"},"React.forwardRef()")," method with the ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," value accepted as ",(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"the second argument")),", not as part of the ",(0,a.yg)("inlineCode",{parentName:"li"},"props")," object. Use it inside the component."),(0,a.yg)("li",{parentName:"ul"},"Set the target DOM element's ",(0,a.yg)("inlineCode",{parentName:"li"},"ref")," attribute to the forwarded value properly. Edge cases must be managed if they should be set conditionally. Otherwise, the target could be set to ",(0,a.yg)("inlineCode",{parentName:"li"},"null"),".")),(0,a.yg)("h2",{id:"summary"},"Summary"),(0,a.yg)("p",null,"In this post, we discussed in depth how ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," works in React. We touch on the underlying concepts of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," attribute and its values on a JSX node, how it is used to target a DOM node, and how functional components need to be introduced in a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," prop."),(0,a.yg)("p",null,"We delved into ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding with a ",(0,a.yg)("inlineCode",{parentName:"p"},"<VideoPlayer />")," example and investigated how ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," makes it easy to implement custom controls on a ",(0,a.yg)("inlineCode",{parentName:"p"},"<video>")," element by manipulating its DOM APIs from inside a parent component. Later on, with an ",(0,a.yg)("inlineCode",{parentName:"p"},"<InputWithErrorMessage>")," component example, we examined how to write composite higher-order components with ",(0,a.yg)("inlineCode",{parentName:"p"},"ref"),"s forwarded with ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()"),"."),(0,a.yg)("p",null,"In the later part of the post, we explained how ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," helps control DOM APIs of JSX elements needed by third-party libraries like React Hook Form and Shadcn/ui. Finally, we discussed the benefits and use cases of ",(0,a.yg)("inlineCode",{parentName:"p"},"React.forwardRef()")," as well as some best practices to be maintained while implementing ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," forwarding in React."))}h.isMDXComponent=!0}}]);