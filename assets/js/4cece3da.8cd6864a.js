"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7445],{88123:(e,n,t)=>{t.d(n,{O:()=>c});var r=t(68835),o=t(37953),a=t(86743),i=t(59451),s=t(62201);const d=({horizontalSize:e,onMouseDown:n})=>o.createElement("div",{className:(0,r.A)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:n,style:{left:`calc(${e}% - 5px)`}});function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){u(e,n,t[n])}))}return e}function p(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function m(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const c=e=>"nextjs"===(null==e?void 0:e.template)?o.createElement(y,e):o.createElement(f,e),f=e=>{var n,t,u,c,f,h,{startRoute:y,showNavigator:v,showLineNumbers:b,showOpenInCodeSandbox:P,initialPercentage:w=50,dependencies:T,showReadOnly:x,options:N={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.A)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.A)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.A)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.A)("h-full","!gap-0"),"sp-console-header-button":(0,r.A)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.A)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.A)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:I="react-ts",customSetup:R,files:A,previewOnly:F,layout:C,height:k=420,wrapperClassName:L,className:S,showFiles:E=!1,showConsole:B=!1,hidePreview:D=!1}=e,O=m(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[M,q]=o.useState(!1);o.useEffect((()=>{q(!0)}),[]);const{colorMode:j}=(0,s.G)();var U,z;null!=N||(N={}),null!==(U=(f=N).resizablePanels)&&void 0!==U||(f.resizablePanels=!0),null!==(z=(h=N).editorWidthPercentage)&&void 0!==z||(h.editorWidthPercentage=null!=w?w:50);const W={showTabs:N.showTabs,showLineNumbers:N.showLineNumbers,showInlineErrors:N.showInlineErrors,wrapContent:N.wrapContent,closableTabs:N.closableTabs,initMode:N.initMode,extensions:null===(n=N.codeEditor)||void 0===n?void 0:n.extensions,extensionsKeymap:null===(t=N.codeEditor)||void 0===t?void 0:t.extensionsKeymap,readOnly:N.readOnly,showReadOnly:null!=x?x:N.showReadOnly,additionalLanguages:null===(u=N.codeEditor)||void 0===u?void 0:u.additionalLanguages},_={activeFile:N.activeFile,visibleFiles:N.visibleFiles,recompileMode:N.recompileMode,recompileDelay:N.recompileDelay,autorun:N.autorun,autoReload:N.autoReload,bundlerURL:N.bundlerURL,startRoute:N.startRoute,skipEval:N.skipEval,fileResolver:N.fileResolver,initMode:N.initMode,initModeObserverOptions:N.initModeObserverOptions,externalResources:N.externalResources,logLevel:N.logLevel,classes:N.classes},[K,G]=o.useState(!1),{onHandleMouseDown:X,horizontalSize:J}=(({initialSize:e=50})=>{const[n,t]=o.useState(e),r=o.useRef(null),a=e=>{if(!r.current)return;const n=r.current.parentElement;if(!n)return;const{left:o,width:a}=n.getBoundingClientRect(),i=(e.clientX-o)/a*100,s=Math.min(Math.max(i,25),75);t(s),n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const n=null===(e=r.current)||void 0===e?void 0:e.parentElement;n&&(n.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:n,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:N.editorWidthPercentage}),V=!F&&!(null==C?void 0:C.includes("col"));var $,H,Y,Z,Q;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.A)("pb-6","refine-sandpack-wrapper",L)},o.createElement("div",{className:(0,r.A)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",S)},o.createElement(i.l5,l({key:`${I}-${j}-${M}`,customSetup:l({dependencies:T},R),files:A,options:p(l({},_),{classes:p(l({},_.classes),{"sp-layout":(0,r.A)(null===(c=_.classes)||void 0===c?void 0:c["sp-layout"],B&&"!rounded-bl-none !rounded-br-none")})}),template:I,theme:"light"===j?p(l({},a.Zw),{colors:p(l({},a.Zw.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):p(l({},a.hc),{colors:p(l({},a.hc.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.A)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},O),o.createElement(i.am,{className:(0,r.A)("col"===C&&"!flex-col","col-reverse"===C&&"!flex-col-reverse")},E&&o.createElement(i.Lm,{autoHiddenFiles:!0,style:{height:null!==($=N.editorHeight)&&void 0!==$?$:k}}),!F&&o.createElement(i.cW,p(l({},W),{showLineNumbers:b,closableTabs:E,initMode:"lazy",style:p(l({height:null!==(H=N.editorHeight)&&void 0!==H?H:k},(null==C?void 0:C.includes("col"))?{flex:"initial"}:{flexGrow:J,flexShrink:J,flexBasis:0}),{overflow:"hidden"})})),V?o.createElement(d,{onMouseDown:X,horizontalSize:J}):null,D?null:o.createElement(o.Fragment,null,o.createElement(i.G5,{showOpenInCodeSandbox:P,startRoute:y,showNavigator:null!=v?v:N.showNavigator,showRefreshButton:N.showRefreshButton,style:p(l({display:D?"none":"flex"},(null==C?void 0:C.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-J,flexShrink:100-J,flexBasis:0,width:F?"100%":100-J+"%"}),{gap:0,height:null!==(Y=N.editorHeight)&&void 0!==Y?Y:k})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.A)("w-12","h-12","rounded-full")}))))),B?o.createElement(i.X2,{style:p(l({height:200},(null==C?void 0:C.includes("col"))?{flex:"initial"}:{flexGrow:J,flexShrink:J,flexBasis:0}),{overflow:"hidden"})}):null)),o.createElement("div",{className:(0,r.A)(""),style:{height:Number(null!==(Z=N.editorHeight)&&void 0!==Z?Z:k)+2}}),o.createElement("div",{className:(0,r.A)((null==C?void 0:C.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(Q=N.editorHeight)&&void 0!==Q?Q:k)+2}}),o.createElement("div",{className:(0,r.A)(B?"block":"hidden","h-[200px]")})),o.createElement(g,{files:A,dependencies:T}))},g=({files:e,dependencies:n})=>{Object.keys(null!=n?n:{}).map((e=>`${e}@${n[e]}`)).join(", ");const t=Object.keys(null!=e?e:{}).filter((n=>"string"==typeof e[n]||"object"==typeof e[n]&&!0!==e[n].hidden));return o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("h6",null,"Code Example"),t.map((n=>o.createElement("div",{"data-filename":n,key:n},o.createElement("pre",null,`// file: ${n} \n`,h(e[n]))))))},h=e=>"string"==typeof e?e:"code"in e?e.code:"",y=e=>{const n={hidePreview:!0,showConsole:!1};return o.createElement(f,p(l({},n,e),{template:"react-ts"}))}},51842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>Ie,contentTitle:()=>xe,default:()=>Be,frontMatter:()=>Te,metadata:()=>Ne,toc:()=>Re});var r=t(37953),o=t(58860),a=t(88123);function i(){return r.createElement(a.O,{showNavigator:!0,previewOnly:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products",files:{"/App.tsx":{code:d,active:!0},"/pages/products/list.tsx":{code:u},"/pages/products/show.tsx":{code:l},"/pages/products/edit.tsx":{code:p},"/pages/products/create.tsx":{code:m},"/auth-provider.tsx":{code:s,hidden:!0}}})}const s='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),d='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider, AuthPage } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport authProvider from "./auth-provider";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductList } from "./pages/products/list";\nimport { ProductShow } from "./pages/products/show";\nimport { ProductEdit } from "./pages/products/edit";\nimport { ProductCreate } from "./pages/products/create";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            authProvider={authProvider}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n                show: "/products/:id",\n                edit: "/products/:id/edit",\n                create: "/products/create"\n              }\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Routes>\n              <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                <Route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                  <Route path="/products" element={<Outlet />}>\n                      <Route index element={<ProductList />} />\n                      <Route path="create" element={<ProductCreate />} />\n                      <Route path=":id" element={<ProductShow />} />\n                      <Route path=":id/edit" element={<ProductEdit />} />\n                  </Route>\n                  <Route path="*" element={<ErrorComponent />} />\n                </Route>\n              </Route>\n              <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                <Route\n                  path="/login"\n                  element={(\n                    <AuthPage\n                      type="login"\n                      formProps={{\n                        initialValues: {\n                          email: "demo@refine.dev",\n                          password: "demodemo",\n                        },\n                      }}\n                    />\n                  )}\n                />\n                <Route path="/register" element={<AuthPage type="register" />} />\n                <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),u='\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { BaseRecord } from "@refinedev/core";\nimport { Space, Table } from "antd";\nimport React from "react";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n'.trim(),l='\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { useShow } from "@refinedev/core";\nimport { Typography } from "antd";\nimport React from "react";\n\nconst { Title } = Typography;\n\nexport const ProductShow = () => {\n  const { result: product, query: { isLoading } } = useShow();\n\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n'.trim(),p='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductEdit: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n'.trim(),m='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductCreate = () => {\n  const { formProps, saveButtonProps } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function c(){return r.createElement(a.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products",files:{"/App.tsx":{code:g,active:!0},"/pages/products/index.tsx":{code:h},"/pages/products/list.tsx":{code:y},"/pages/products/show.tsx":{code:v},"/pages/products/edit.tsx":{code:b},"/pages/products/create.tsx":{code:P},"/auth-provider.tsx":{code:f,hidden:!0}}})}const f='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),g='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider, AuthPage } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport authProvider from "./auth-provider";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            authProvider={authProvider}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n                show: "/products/:id",\n                edit: "/products/:id/edit",\n                create: "/products/create"\n              }\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Routes>\n              <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                <Route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                  <Route path="/products" element={<Outlet />}>\n                      <Route index element={<ProductList />} />\n                      <Route path="create" element={<ProductCreate />} />\n                      <Route path=":id" element={<ProductShow />} />\n                      <Route path=":id/edit" element={<ProductEdit />} />\n                  </Route>\n                  <Route path="*" element={<ErrorComponent />} />\n                </Route>\n              </Route>\n              <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                <Route path="/login" element={<AuthPage type="login" />} />\n                <Route path="/register" element={<AuthPage type="register" />} />\n                <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),h='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),y='\nimport React from "react";\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n'.trim(),v='\nimport React from "react";\nimport { useShow } from "@refinedev/core";\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { Typography } from "antd";\n\nconst { Title } = Typography;\n\nexport const ProductShow = () => {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n'.trim(),b='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductEdit = () => {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n'.trim(),P='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductCreate = () => {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function w(){return r.createElement(a.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/nextjs-router":"latest",antd:"^5.0.5"},startRoute:"/products",files:{"/pages/_app.tsx":{code:N,active:!0},"/pages/products/index.tsx":{code:I},"/pages/products/[id].tsx":{code:R},"/pages/products/[id]/edit.tsx":{code:A},"/pages/products/create.tsx":{code:F},"/pages/login.tsx":{code:x},"/src/auth-provider.tsx":{code:T,hidden:!0}}})}const T='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),x='\nimport React from "react";\nimport { AuthPage } from "@refinedev/antd";\nimport authProvider from "../src/auth-provider";\n\nimport type { ExtendedNextPage } from "./_app";\n\nconst Login: ExtendedNextPage = () => {\n  return <AuthPage type="login" />;\n};\n\nLogin.noLayout = true;\n\nexport default Login;\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (authenticated) {\n    return {\n      redirect: {\n        destination: "/products",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n'.trim(),N='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayout, useNotificationProvider } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport authProvider from "../src/auth-provider";\n\nexport type ExtendedNextPage = NextPage & {\n  noLayout?: boolean;\n};\n\ntype ExtendedAppProps = AppProps & {\n  Component: ExtendedNextPage;\n};\n\nfunction App({ Component, pageProps }: ExtendedAppProps) {\n  const renderComponent = () => {\n      if (Component.noLayout) {\n          return <Component {...pageProps} />;\n      }\n\n      return (\n          <ThemedLayout>\n              <Component {...pageProps} />\n          </ThemedLayout>\n      );\n  }\n\n  return (\n    <ConfigProvider theme={RefineThemes.Blue}>\n      <AntdApp>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          notificationProvider={useNotificationProvider}\n          authProvider={authProvider}\n          resources={[\n            {\n              name: "products",\n              list: "/products",\n              show: "/products/:id",\n              edit: "/products/:id/edit",\n              create: "/products/create"\n            },\n          ]}\n          options={{ syncWithLocation: true }}\n        >\n          {renderComponent()}\n        </Refine>\n      </AntdApp>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n'.trim(),I='\nimport React from "react";\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nimport authProvider from "../../src/auth-provider";\n\nexport default function ProductList() {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),R='\nimport React from "react";\nimport { useShow } from "@refinedev/core";\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { Typography } from "antd";\n\nimport authProvider from "../../src/auth-provider";\n\nconst { Title } = Typography;\n\nexport default function ProductShow() {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),A='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nimport authProvider from "../../../src/auth-provider";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport default function ProductEdit() {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim(),F='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nimport authProvider from "../../src/auth-provider";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport default function ProductCreate() {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n\n/**\n * Same check can also be done via `<Authenticated />` component.\n * But we\'re using a server-side check for a better UX.\n */\nexport const getServerSideProps = async () => {\n  const { authenticated } = await authProvider.check();\n\n  if (!authenticated) {\n    return {\n      redirect: {\n        destination: "/login",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: {},\n  };\n}\n'.trim();function C(){return r.createElement(a.O,{showNavigator:!0,hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest",antd:"^5.0.5"},startRoute:"/products",files:{"/app/root.tsx":{code:L,active:!0},"/app/routes/_protected.tsx":{code:S},"/app/routes/_protected.products._index.tsx":{code:D},"/app/routes/_protected.products.$id.tsx":{code:O},"/app/routes/_protected.products.$id.edit.tsx":{code:M},"/app/routes/_protected.products.create.tsx":{code:q},"/app/routes/_auth.tsx":{code:E},"/app/routes/_auth.login.tsx":{code:B},"/app/auth-provider.tsx":{code:k,hidden:!0}}})}const k='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),L='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { useNotificationProvider, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, App as AntdApp } from "antd";\n\nimport resetStyle from "@refinedev/antd/dist/reset.css";\n\nimport authProvider from "./auth-provider";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ConfigProvider theme={RefineThemes.Blue}>\n          <AntdApp>\n            <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              authProvider={authProvider}\n              notificationProvider={useNotificationProvider}\n              resources={[\n                {\n                  name: "products",\n                  list: "/products",\n                  show: "/products/:id",\n                  edit: "/products/:id/edit",\n                  create: "/products/create",\n                },\n              ]}\n              options={{ syncWithLocation: true }}\n            >\n              <Outlet />\n            </Refine>\n          </AntdApp>\n        </ConfigProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),S='\nimport { ThemedLayout } from "@refinedev/antd";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\nimport authProvider from "../auth-provider";\n\nexport default function AuthenticatedLayout() {\n    // `<ThemedLayout>` is only applied to the authenticated users\n    return (\n        <ThemedLayout>\n            <Outlet />\n        </ThemedLayout>\n    );\n}\n\n/**\n * We\'re checking if the current session is authenticated.\n * If not, we\'re redirecting the user to the login page.\n * This is applied for all routes that are nested under this layout (_protected).\n */\nexport async function loader({ request }: LoaderFunctionArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (!authenticated) {\n        throw redirect(redirectTo ?? "/login");\n    }\n\n    return {};\n}\n'.trim(),E='\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\nimport { authProvider } from "~/authProvider";\n\nexport default function AuthLayout() {\n    // no layout is applied for the auth routes\n    return <Outlet />;\n}\n\n/**\n * If the current session is authenticated, we\'re redirecting the user to the home page.\n * Alternatively, we could also use the `Authenticated` component inside the `AuthLayout` to handle the redirect.\n * But, server-side redirects are more performant.\n */\nexport async function loader({ request }: LoaderFunctionArgs) {\n    const { authenticated, redirectTo } = await authProvider.check(request);\n\n    if (authenticated) {\n        throw redirect(redirectTo ?? "/");\n    }\n\n    return {};\n}\n'.trim(),B='\nimport { AuthPage } from "@refinedev/antd";\n\nexport default function LoginPage() {\n  return <AuthPage type="login" />;\n}\n\n'.trim(),D='\nimport React from "react";\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport default function ProductList() {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n'.trim(),O='\nimport React from "react";\nimport { useShow } from "@refinedev/core";\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { Typography } from "antd";\n\nconst { Title } = Typography;\n\nexport default function ProductShow() {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n'.trim(),M='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport default function ProductEdit() {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n'.trim(),q='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport default function ProductCreate() {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function j(){return r.createElement(a.O,{showNavigator:!0,initialPercentage:35,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products",files:{"/App.tsx":{code:z,active:!0},"/pages/products/list.tsx":{code:W,hidden:!0},"/auth-provider.tsx":{code:U,hidden:!0}}})}const U='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),z='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport authProvider from "./auth-provider";\nimport { ProductList } from "./pages/products/list";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={useNotificationProvider}\n            authProvider={authProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n              }\n            ]}\n          >\n            <Routes>\n                <Route\n                  // The layout will wrap all the pages inside this route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                    <Route path="/products" element={<ProductList />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),W='\nimport React from "react";\nimport { List, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n      </Table>\n    </List>\n  );\n};\n'.trim();function _(){return r.createElement(a.O,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/nextjs-router":"latest",antd:"^5.0.5"},startRoute:"/products",files:{"/pages/_app.tsx":{code:K,active:!0},"/pages/products/index.tsx":{code:G,hidden:!0}}})}const K='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router/pages";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport { RefineThemes, ThemedLayout, useNotificationProvider } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport "@refinedev/antd/dist/reset.css";\n\nfunction App({ Component, pageProps }: AppProps) {\n    return (\n        <ConfigProvider theme={RefineThemes.Blue}>\n            <AntdApp>\n                <Refine\n                    routerProvider={routerProvider}\n                    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                    notificationProvider={useNotificationProvider}\n                    resources={[\n                        {\n                        name: "products",\n                        list: "/products",\n                        },\n                    ]}\n                >\n                  <ThemedLayout>\n                    <Component {...pageProps} />\n                  </ThemedLayout>\n                </Refine>\n            </AntdApp>\n        </ConfigProvider>\n    );\n}\n\nexport default App;\n'.trim(),G='\nimport React from "react";\nimport { List, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport default function ProductList() {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n      </Table>\n    </List>\n  );\n};\n'.trim();function X(){return r.createElement(a.O,{showNavigator:!0,hidePreview:!0,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest",antd:"^5.0.5"},startRoute:"/products",files:{"/app/root.tsx":{code:J},"/app/routes/_layout.tsx":{code:V,active:!0},"/app/routes/_layout.products._index.tsx":{code:$,hidden:!0}}})}const J='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { useNotificationProvider, RefineThemes } from "@refinedev/antd";\nimport { ConfigProvider, App as AntdApp } from "antd";\n\nimport resetStyle from "@refinedev/antd/dist/reset.css";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ConfigProvider theme={RefineThemes.Blue}>\n          <AntdApp>\n            <Refine\n              routerProvider={routerProvider}\n              dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n              notificationProvider={useNotificationProvider}\n              resources={[\n                {\n                  name: "products",\n                  list: "/products",\n                },\n              ]}\n            >\n              <Outlet />\n            </Refine>\n          </AntdApp>\n        </ConfigProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),V='\nimport { ThemedLayout } from "@refinedev/antd";\nimport { Outlet } from "@remix-run/react";\nimport { LoaderFunctionArgs, redirect } from "@remix-run/node";\n\n/**\n * Routes starting with `_layout` will have their children rendered inside the layout.\n */\nexport default function Layout() {\n    return (\n        <ThemedLayout>\n            <Outlet />\n        </ThemedLayout>\n    );\n}\n'.trim(),$='\nimport React from "react";\nimport { List, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport default function ProductList() {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n      </Table>\n    </List>\n  );\n};\n'.trim();function H(){return r.createElement(a.O,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products",files:{"/App.tsx":{code:Y,hidden:!0},"/pages/products/list.tsx":{code:Z,active:!0},"/pages/products/show.tsx":{code:Q},"/pages/products/edit.tsx":{code:ee},"/pages/products/create.tsx":{code:ne}}})}const Y='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductList } from "./pages/products/list";\nimport { ProductShow } from "./pages/products/show";\nimport { ProductEdit } from "./pages/products/edit";\nimport { ProductCreate } from "./pages/products/create";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n                show: "/products/:id",\n                edit: "/products/:id/edit",\n                create: "/products/create"\n              }\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Routes>\n                <Route\n                    element={\n                    <ThemedLayout>\n                        <Outlet />\n                    </ThemedLayout>\n                    }\n                >\n                    <Route path="/products" element={<Outlet />}>\n                        <Route index element={<ProductList />} />\n                        <Route path="create" element={<ProductCreate />} />\n                        <Route path=":id" element={<ProductShow />} />\n                        <Route path=":id/edit" element={<ProductEdit />} />\n                    </Route>\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),Z='\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\nimport React from "react";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n'.trim(),Q='\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { useShow } from "@refinedev/core";\nimport { Typography } from "antd";\nimport React from "react";\n\nconst { Title } = Typography;\n\nexport const ProductShow = () => {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n'.trim(),ee='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductEdit: React.FC = () => {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n'.trim(),ne='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductCreate = () => {\n  const { formProps, saveButtonProps, formLoading } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps} isLoading={formLoading}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function te(){return r.createElement(a.O,{showNavigator:!0,initialPercentage:40,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/login",files:{"/App.tsx":{code:oe,hidden:!0},"/pages/products.tsx":{code:ae,hidden:!0},"/pages/login.tsx":{code:ie,active:!0},"/pages/register.tsx":{code:se},"/pages/forgot-password.tsx":{code:de},"/pages/reset-password.tsx":{code:ue},"/auth-provider.tsx":{code:re,hidden:!0}}})}const re='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),oe='\nimport React from "react";\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider, AuthPage } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport authProvider from "./auth-provider";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductList } from "./pages/products";\nimport { LoginPage } from "./pages/login";\nimport { RegisterPage } from "./pages/register";\nimport { ForgotPasswordPage } from "./pages/forgot-password";\nimport { ResetPasswordPage } from "./pages/reset-password";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ConfigProvider theme={RefineThemes.Blue}>\n        <AntdApp>\n          <Refine\n            routerProvider={routerProvider}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            authProvider={authProvider}\n            notificationProvider={useNotificationProvider}\n            resources={[\n              {\n                name: "products",\n                list: "/products",\n              }\n            ]}\n            options={{ syncWithLocation: true }}\n          >\n            <Routes>\n              <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                <Route\n                  element={\n                    <ThemedLayout>\n                      <Outlet />\n                    </ThemedLayout>\n                  }\n                >\n                  <Route path="/products" element={<ProductList />} />\n                  <Route path="*" element={<ErrorComponent />} />\n                </Route>\n              </Route>\n              <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                <Route path="/login" element={<LoginPage />} />\n                <Route path="/register" element={<RegisterPage />} />\n                <Route path="/forgot-password" element={<ForgotPasswordPage />} />\n                <Route path="/reset-password" element={<ResetPasswordPage />} />\n                <Route path="*" element={<ErrorComponent />} />\n              </Route>\n            </Routes>\n          </Refine>\n        </AntdApp>\n      </ConfigProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),ae='\nimport React from "react";\nimport { List, useTable } from "@refinedev/antd";\nimport { Space, Table } from "antd";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n      </Table>\n    </List>\n  );\n};\n'.trim(),ie='\nimport { AuthPage } from "@refinedev/antd";\n\nexport const LoginPage = () => {\n    return (\n        <AuthPage\n            type="login"\n            formProps={{\n                initialValues: {\n                  email: "demo@refine.dev",\n                  password: "demodemo",\n                },\n            }}\n        />\n    );\n};\n'.trim(),se='\nimport { AuthPage } from "@refinedev/antd";\n\nexport const RegisterPage = () => {\n    return <AuthPage type="register" />;\n};\n'.trim(),de='\nimport { AuthPage } from "@refinedev/antd";\n\nexport const ForgotPasswordPage = () => {\n    return <AuthPage type="forgotPassword" />;\n};\n'.trim(),ue='\nimport { AuthPage } from "@refinedev/antd";\n\nexport const ResetPasswordPage = () => {\n    return <AuthPage type="resetPassword" />;\n};\n'.trim();function le(){return r.createElement(a.O,{showNavigator:!0,layout:"col",height:320,showOpenInCodeSandbox:!1,dependencies:{"@refinedev/antd":"latest","@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router":"latest","react-router":"^7.0.2",antd:"^5.0.5"},startRoute:"/products",files:{"/App.tsx":{code:fe,hidden:!0},"/theme-provider.tsx":{code:ce,active:!0},"/pages/products/index.tsx":{code:me,hidden:!0},"/pages/products/list.tsx":{code:ge,hidden:!0},"/pages/products/show.tsx":{code:he,hidden:!0},"/pages/products/edit.tsx":{code:ye,hidden:!0},"/pages/products/create.tsx":{code:ve,hidden:!0},"/auth-provider.tsx":{code:pe,hidden:!0}}})}const pe='\nconst authProvider = {\n    login: async ({ username, password }) => {\n      (window as any).authenticated = true;\n      return { success: true };\n    },\n    check: async () => {\n      // auto login at first time\n      if (typeof (window as any).authenticated === "undefined") {\n        (window as any).authenticated = true;\n      }\n      return { authenticated: Boolean((window as any).authenticated) };\n    },\n    logout: async () => {\n      (window as any).authenticated = false;\n      return { success: true };\n    },\n    register: async () => {\n      return { success: true };\n    },\n    forgotPassword: async () => {\n      return { success: true };\n    },\n    resetPassword: async () => {\n      return { success: true };\n    },\n    getIdentity: async () => ({ id: 1, name: "John Doe", avatar: "https://i.pravatar.cc/300"})\n};\n\nexport default authProvider;\n'.trim(),me='\nexport * from "./list";\nexport * from "./show";\nexport * from "./edit";\nexport * from "./create";\n'.trim(),ce='\nimport { ConfigProvider, App } from "antd";\nimport { RefineThemes } from "@refinedev/antd";\n\nexport const ThemeProvider = ({ children }) => (\n    // Available themes: Blue, Purple, Magenta, Red, Orange, Yellow, Green\n    // Change the line below to change the theme\n    <ConfigProvider theme={RefineThemes.Magenta}>\n        <App>\n            {children}\n        </App>\n    </ConfigProvider>\n);\n'.trim(),fe='\nimport { Refine, Authenticated } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider, { NavigateToResource } from "@refinedev/react-router";\nimport { BrowserRouter, Route, Routes, Outlet, Navigate } from "react-router";\n\nimport { ErrorComponent, RefineThemes, ThemedLayout, useNotificationProvider, AuthPage } from "@refinedev/antd";\nimport { App as AntdApp, ConfigProvider } from "antd";\n\nimport authProvider from "./auth-provider";\nimport { ThemeProvider } from "./theme-provider";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { ProductList, ProductShow, ProductEdit, ProductCreate } from "./pages/products";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <ThemeProvider>\n        {/**\n         * This is a small hack to make the sidebar visible in the example on small screens\n        */}\n        <ConfigProvider theme={{\n            token: {\n                screenLG: 600,\n                screenLGMin: 600,\n                screenMDMax: 599,\n                screenMD: 580,\n                screenMDMin: 580,\n                screenSMMax: 579,\n            }\n        }}>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n                authProvider={authProvider}\n                notificationProvider={useNotificationProvider}\n                resources={[\n                {\n                    name: "products",\n                    list: "/products",\n                    show: "/products/:id",\n                    edit: "/products/:id/edit",\n                    create: "/products/create"\n                }\n                ]}\n            >\n                <Routes>\n                <Route element={<Authenticated fallback={<Navigate to="/login" />}><Outlet /></Authenticated>}>\n                    <Route\n                    element={\n                        <ThemedLayout>\n                        <Outlet />\n                        </ThemedLayout>\n                    }\n                    >\n                    <Route path="/products" element={<Outlet />}>\n                        <Route index element={<ProductList />} />\n                        <Route path="create" element={<ProductCreate />} />\n                        <Route path=":id" element={<ProductShow />} />\n                        <Route path=":id/edit" element={<ProductEdit />} />\n                    </Route>\n                    <Route path="*" element={<ErrorComponent />} />\n                    </Route>\n                </Route>\n                <Route element={<Authenticated fallback={<Outlet />}><NavigateToResource resource="products" /></Authenticated>}>\n                    <Route\n                    path="/login"\n                    element={(\n                        <AuthPage\n                        type="login"\n                        formProps={{\n                            initialValues: {\n                            email: "demo@refine.dev",\n                            password: "demodemo",\n                            },\n                        }}\n                        />\n                    )}\n                    />\n                    <Route path="/register" element={<AuthPage type="register" />} />\n                    <Route path="/forgot-password" element={<AuthPage type="forgotPassword" />} />\n                    <Route path="/reset-password" element={<AuthPage type="resetPassword" />} />\n                    <Route path="*" element={<ErrorComponent />} />\n                </Route>\n                </Routes>\n            </Refine>\n          </ConfigProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n};\n'.trim(),ge='\nimport { List, ShowButton, EditButton, useTable } from "@refinedev/antd";\nimport { BaseRecord } from "@refinedev/core";\nimport { Space, Table } from "antd";\nimport React from "react";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable();\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="Id" />\n        <Table.Column dataIndex="name" title="Name" />\n        <Table.Column dataIndex="price" title="Price" />\n        <Table.Column\n          title="Actions"\n          dataIndex="actions"\n          render={(_, record: BaseRecord) => (\n            <Space>\n              <ShowButton hideText size="small" recordItemId={record.id} />\n              <EditButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n'.trim(),he='\nimport { MarkdownField, NumberField, Show, TextField } from "@refinedev/antd";\nimport { useShow } from "@refinedev/core";\nimport { Typography } from "antd";\nimport React from "react";\n\nconst { Title } = Typography;\n\nexport const ProductShow = () => {\n  const { result: product, query: { isLoading } } = useShow();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <NumberField value={product?.id ?? ""} />\n      <Title level={5}>Name</Title>\n      <TextField value={product?.name} />\n      <Title level={5}>Material</Title>\n      <TextField value={product?.material} />\n      <Title level={5}>Description</Title>\n      <MarkdownField value={product?.description} />\n      <Title level={5}>Price</Title>\n      <NumberField value={product?.price ?? ""} />\n    </Show>\n  );\n};\n'.trim(),ye='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Edit, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductEdit: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm();\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n          <Form.Item\n              label="Name"\n              name="name"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Material"\n              name="material"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <Input />\n          </Form.Item>\n          <Form.Item\n              label="Description"\n              name="description"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <TextArea rows={4} />\n          </Form.Item>\n          <Form.Item\n              label="Price"\n              name="price"\n              rules={[\n                  {\n                      required: true,\n                  },\n              ]}\n          >\n              <InputNumber />\n          </Form.Item>\n      </Form>\n  </Edit>\n  );\n};\n'.trim(),ve='\nimport React from "react";\nimport { Typography, Form, Input, InputNumber } from "antd";\nimport { Create, useForm } from "@refinedev/antd";\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nexport const ProductCreate = () => {\n  const { formProps, saveButtonProps } = useForm();\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n            label="Name"\n            name="name"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Material"\n            name="material"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label="Description"\n            name="description"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <TextArea rows={4} />\n        </Form.Item>\n        <Form.Item\n            label="Price"\n            name="price"\n            rules={[\n                {\n                    required: true,\n                },\n            ]}\n        >\n            <InputNumber />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n'.trim();function be(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pe(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function we(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const Te={title:"Introduction"},xe=void 0,Ne={unversionedId:"ui-integrations/ant-design/introduction/index",id:"ui-integrations/ant-design/introduction/index",title:"Introduction",description:"Refine provides an integration package for Ant Design framework. This package provides a set of ready to use components and hooks that connects Refine with Ant Design components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Ant Design package, you will be able to use all the features of Ant Design in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Ant Design components in combination with Refine's features and functionalities.",source:"@site/docs/ui-integrations/ant-design/introduction/index.md",sourceDirName:"ui-integrations/ant-design/introduction",slug:"/ui-integrations/ant-design/introduction/",permalink:"/docs/ui-integrations/ant-design/introduction/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/ant-design/introduction/index.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1756449505,formattedLastUpdatedAt:"Aug 29, 2025",frontMatter:{title:"Introduction"},sidebar:"mainSidebar",previous:{title:"Notification Provider",permalink:"/docs/ui-integrations/shadcn/components/notification-provider/"},next:{title:"<ThemedLayout />",permalink:"/docs/ui-integrations/ant-design/components/themed-layout/"}},Ie={},Re=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Tables",id:"tables",level:2},{value:"Forms",id:"forms",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Predefined Components and Views",id:"predefined-components-and-views",level:2},{value:"Layouts, Menus and Breadcrumbs",id:"layouts-menus-and-breadcrumbs",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Views",id:"views",level:3},{value:"Fields",id:"fields",level:3},{value:"Auth Pages",id:"auth-pages",level:3},{value:"Error Components",id:"error-components",level:3},{value:"Theming",id:"theming",level:2},{value:"Inferencer",id:"inferencer",level:2},{value:"Known Issues",id:"known-issues",level:2}],Ae=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},Fe=Ae("DocThumbsUpDownFeedbackWidget"),Ce=Ae("InstallPackagesCommand"),ke=Ae("Tabs"),Le=Ae("TabItem"),Se={toc:Re},Ee="wrapper";function Be(e){var{components:n}=e,t=we(e,["components"]);return(0,o.yg)(Ee,Pe(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){be(e,n,t[n])}))}return e}({},Se,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Refine provides an integration package for ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/"},"Ant Design")," framework. This package provides a set of ready to use components and hooks that connects Refine with Ant Design components. While Refine's integration offers a set of components and hooks, it is not a replacement for the Ant Design package, you will be able to use all the features of Ant Design in the same way you would use it in a regular React application. Refine's integration only provides components and hooks for an easier usage of Ant Design components in combination with Refine's features and functionalities."),(0,o.yg)(i,{mdxType:"Example"}),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)(Fe,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Installing the package is as simple as just by running the following command without any additional configuration:"),(0,o.yg)(Ce,{args:"@refinedev/antd antd",mdxType:"InstallPackagesCommand"})),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)(Fe,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"We'll wrap our app with the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/config-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"<ConfigProvider />"))," to make sure we have the theme available for our app, then we'll use the layout components to wrap them around our routes. Check out the examples below to see how to use Refine's Ant Design integration."),(0,o.yg)(ke,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(Le,{value:"react-router-dom",label:"React Router",mdxType:"TabItem"},(0,o.yg)(c,{mdxType:"UsageReactRouterDom"})),(0,o.yg)(Le,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)(w,{mdxType:"UsageNextJs"})),(0,o.yg)(Le,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)(C,{mdxType:"UsageRemix"})))),(0,o.yg)("h2",{id:"tables"},"Tables"),(0,o.yg)(Fe,{id:"tables",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine provides a seamless integration with the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/table"},(0,o.yg)("inlineCode",{parentName:"a"},"<Table />"))," component of Ant Design from pagination to sorting and filtering via the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},(0,o.yg)("inlineCode",{parentName:"a"},"useTable"))," hook exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package. This hook is an extension of the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core"),"'s ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,o.yg)("inlineCode",{parentName:"a"},"useTable"))," and provides a set of additional features and transformations to make it work with Ant Design's ",(0,o.yg)("inlineCode",{parentName:"p"},"<Table />")," component without any additional configuration."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import { useTable } from "@refinedev/antd";\nimport { Table } from "antd";\n\nexport const ProductList = () => {\n  // highlight-next-line\n  const { tableProps } = useTable<IProduct>();\n  // `tableProps` contains the necessary props to be passed\n  // to the `<Table />` component of Ant Design\n  // by transforming the values to fit the Ant Design\'s API.\n\n  return (\n    // highlight-next-line\n    <Table {...tableProps} rowKey="id">\n      <Table.Column dataIndex="id" title="ID" />\n      <Table.Column dataIndex="name" title="Name" />\n      <Table.Column dataIndex="price" title="Price" />\n    </Table>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package also provides a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/filter-dropdown"},(0,o.yg)("inlineCode",{parentName:"a"},"<FilterDropdown />"))," component to be used in the filter popover of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Table />")," component. This component makes it easy to apply filters from the Ant Design UI without any additional configuration.")),(0,o.yg)("h2",{id:"forms"},"Forms"),(0,o.yg)(Fe,{id:"forms",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine provides a seamless integration with the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/form"},(0,o.yg)("inlineCode",{parentName:"a"},"<Form />"))," component of Ant Design from validation to submission via the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," hook exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package. This hook is an extension of the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core"),"'s ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-form/"},(0,o.yg)("inlineCode",{parentName:"a"},"useForm"))," and provides a set of additional features and transformations to make it work with Ant Design's ",(0,o.yg)("inlineCode",{parentName:"p"},"<Form />")," component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/create.tsx"',title:'"pages/products/create.tsx"'},'import { useForm, SaveButton } from "@refinedev/antd";\nimport { Form, Input, InputNumber } from "antd";\n\nexport const ProductCreate = () => {\n    // highlight-next-line\n    const { formProps, saveButtonProps } = useForm<IProduct>();\n    // `formProps` contains the necessary props to be passed\n    // to the `<Form />` component of Ant Design\n    // by transforming the values to fit the Ant Design\'s API.\n\n    return (\n        <Form {...formProps} layout="vertical">\n            <Form.Item\n                label="Name"\n                name="name"\n                rules={[{ required: true }]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="Price"\n                name="price"\n                rules={[{ required: true }]}\n            >\n                <InputNumber />\n            </Form.Item>\n            <Form.Item\n                label="Description"\n                name="description"\n                rules={[{ required: true }]}\n            >\n                <Input.TextArea rows={4} />\n            </Form.Item>\n            <SaveButton {...saveButtonProps}>\n        </Form>\n    )\n}\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," also offers hooks to implement different types of forms such as ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-drawer-form"},(0,o.yg)("inlineCode",{parentName:"a"},"useDrawerForm")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-modal-form"},(0,o.yg)("inlineCode",{parentName:"a"},"useModalForm"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-steps-form"},(0,o.yg)("inlineCode",{parentName:"a"},"useStepsForm"))," hooks. Additionally ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-select"},(0,o.yg)("inlineCode",{parentName:"a"},"useSelect")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-checkbox-group"},(0,o.yg)("inlineCode",{parentName:"a"},"useCheckboxGroup"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-radio-group"},(0,o.yg)("inlineCode",{parentName:"a"},"useRadioGroup"))," hooks are also provided to make it easier to implement form fields with relational data. These hooks leverage the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-select"},(0,o.yg)("inlineCode",{parentName:"a"},"useSelect"))," hook from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/core")," package.")),(0,o.yg)("h2",{id:"notifications"},"Notifications"),(0,o.yg)(Fe,{id:"notifications",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Ant Design has its own ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/notification"},"notification system")," which works seamlessly with its UI elements. Refine also provides a seamless integration with Ant Design's notification system and show notifications for related actions and events. This integration is provided by the ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotificationProvider")," hook exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package which can be directly used in the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#notificationprovider"},(0,o.yg)("inlineCode",{parentName:"a"},"notificationProvider"))," prop of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app.tsx"',title:'"app.tsx"'},'import { Refine } from "@refinedev/core";\nimport { useNotificationProvider, RefineThemes } from "@refinedev/antd";\nimport { App as AntdApp } from "antd";\n\nconst App = () => {\n  return (\n    <ConfigProvider theme={RefineThemes.Green}>\n      <AntdApp>\n        <Refine notificationProvider={useNotificationProvider}>\n          {/* ... */}\n        </Refine>\n      </AntdApp>\n    </ConfigProvider>\n  );\n};\n')),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"If you have any configurations in the Ant Design's theme, you should wrap your app with the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/app"},(0,o.yg)("inlineCode",{parentName:"a"},"<App />"))," component to make sure the notifications are also receiving the current theme configuration."))),(0,o.yg)("h2",{id:"predefined-components-and-views"},"Predefined Components and Views"),(0,o.yg)("h3",{id:"layouts-menus-and-breadcrumbs"},"Layouts, Menus and Breadcrumbs"),(0,o.yg)(Fe,{id:"layouts-menus-and-breadcrumbs",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine provides Layout components that can be used to implement a layout for the application. These components are crafted using Ant Design's components and includes Refine's features and functionalities such as navigation menus, headers, authentication, authorization and more."),(0,o.yg)(ke,{wrapContent:!1,mdxType:"Tabs"},(0,o.yg)(Le,{value:"react-router-dom",label:"React Router",mdxType:"TabItem"},(0,o.yg)(j,{mdxType:"LayoutReactRouterDom"})),(0,o.yg)(Le,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.yg)(_,{mdxType:"LayoutNextJs"})),(0,o.yg)(Le,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.yg)(X,{mdxType:"LayoutRemix"}))),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/themed-layout"},(0,o.yg)("inlineCode",{parentName:"a"},"<ThemedLayout />"))," component consists of a header, sider and a content area. The sider have a navigation menu items for the defined resources of Refine, if an authentication provider is present, it will also have a functional logout button. The header contains the app logo and name and also information about the current user if an authentication provider is present."),(0,o.yg)("p",null,"Additionally, Refine also provides a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/breadcrumb"},(0,o.yg)("inlineCode",{parentName:"a"},"<Breadcrumb />"))," component that uses the Ant Design's component as a base and provide appropriate breadcrumbs for the current route. This component is used in the basic views provided by Refine's Ant Design package automatically.")),(0,o.yg)("h3",{id:"buttons"},"Buttons"),(0,o.yg)(Fe,{id:"buttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Ant Design integration offers variety of buttons that are built above the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/button"},(0,o.yg)("inlineCode",{parentName:"a"},"<Button />"))," component of Ant Design and includes many logical functionalities such as;"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Authorization checks"),(0,o.yg)("li",{parentName:"ul"},"Confirmation dialogs"),(0,o.yg)("li",{parentName:"ul"},"Loading states"),(0,o.yg)("li",{parentName:"ul"},"Invalidation"),(0,o.yg)("li",{parentName:"ul"},"Navigation"),(0,o.yg)("li",{parentName:"ul"},"Form actions"),(0,o.yg)("li",{parentName:"ul"},"Import/Export and more.")),(0,o.yg)("p",null,"You can use buttons such as ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton />"))," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton />"))," etc. in your views to provide navigation for the related routes or ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton />"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton />"))," etc. to perform related actions without having to worry about the authorization checks and other logical functionalities."),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<EditButton />")," component is as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/list.tsx"',title:'"pages/products/list.tsx"'},'import { useTable, EditButton } from "@refinedev/antd";\nimport { Table } from "antd";\n\nexport const ProductList = () => {\n  const { tableProps } = useTable<IProduct>();\n\n  return (\n    // highlight-next-line\n    <Table {...tableProps} rowKey="id">\n      <Table.Column dataIndex="id" title="ID" />\n      <Table.Column dataIndex="name" title="Name" />\n      <Table.Column dataIndex="price" title="Price" />\n      <Table.Column\n        title="Actions"\n        dataIndex="actions"\n        render={(_, record) => (\n          // highlight-start\n          <EditButton hideText size="small" recordItemId={record.id} />\n          // highlight-end\n        )}\n      />\n    </Table>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n')),(0,o.yg)("p",null,"The list of provided buttons are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/create-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<CreateButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/show-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ShowButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/clone-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<CloneButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/import-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ImportButton />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/buttons/export-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ExportButton />")))),(0,o.yg)("p",null,"Many of these buttons are already used in the views provided by Refine's Ant Design integration. If you're using the basic view elements provided by Refine, you will have the appropriate buttons placed in your application out of the box.")),(0,o.yg)("h3",{id:"views"},"Views"),(0,o.yg)(Fe,{id:"views",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Views are designed as wrappers around the content of the pages in the application. They are designed to be used within the layouts and provide basic functionalities such as titles based on the resource, breadcrumbs, related actions and authorization checks. Refine's Ant Design integration uses components such as ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/card"},(0,o.yg)("inlineCode",{parentName:"a"},"<Card />"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/space"},(0,o.yg)("inlineCode",{parentName:"a"},"<Space />"))," to provide these views and provides customization options by passing related props to these components."),(0,o.yg)("p",null,"The list of provided views are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/basic-views/list"},(0,o.yg)("inlineCode",{parentName:"a"},"<List />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/basic-views/show"},(0,o.yg)("inlineCode",{parentName:"a"},"<Show />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/basic-views/edit"},(0,o.yg)("inlineCode",{parentName:"a"},"<Edit />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/basic-views/create"},(0,o.yg)("inlineCode",{parentName:"a"},"<Create />")))),(0,o.yg)(H,{mdxType:"BasicViews"})),(0,o.yg)("h3",{id:"fields"},"Fields"),(0,o.yg)(Fe,{id:"fields",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Ant Design also provides field components to render values with appropriate design and format of Ant Design. These components are built on top of respective Ant Design components and also provide logic for formatting of the values. While these components might not always be suitable for your use case, they can be combined or extended to provide the desired functionality."),(0,o.yg)("p",null,"The list of provided field components are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/boolean-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<BooleanField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/date-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<DateField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/email-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<EmailField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/file-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<FileField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/image-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<ImageField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/markdown-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<MarkdownField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/number-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<NumberField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/tag-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<TagField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/text-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<TextField />"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"/docs/ui-integrations/ant-design/components/fields/url-field"},(0,o.yg)("inlineCode",{parentName:"a"},"<UrlField />")))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/products/show.tsx"',title:'"pages/products/show.tsx"'},'import { useShow } from "@refinedev/core";\nimport { Show, TextField, NumberField } from "@refinedev/antd";\nimport { Typography } from "antd";\n\nexport const ProductShow = () => {\n  const {\n    result: product,\n    query: { data, isLoading },\n  } = useShow<IProduct>();\n\n  return (\n    <Show isLoading={isLoading}>\n      <Typography.Title level={5}>Id</Typography.Title>\n      {/* highlight-next-line */}\n      <TextField value={product?.id} />\n\n      <Typography.Title level={5}>Title</Typography.Title>\n      {/* highlight-next-line */}\n      <TextField value={product?.title} />\n\n      <Typography.Title level={5}>Price</Typography.Title>\n      {/* highlight-next-line */}\n      <NumberField\n        value={product?.price}\n        options={{ style: "currency", currency: "USD" }}\n      />\n    </Show>\n  );\n};\n\ninterface IProduct {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n'))),(0,o.yg)("h3",{id:"auth-pages"},"Auth Pages"),(0,o.yg)(Fe,{id:"auth-pages",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Auth pages are designed to be used as the pages of the authentication flow of the application. They offer an out of the box solution for the login, register, forgot password and reset password pages by leveraging the authentication hooks of Refine. Auth page components are built on top of basic Ant Design components such as ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/form"},(0,o.yg)("inlineCode",{parentName:"a"},"<Form />"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/card"},(0,o.yg)("inlineCode",{parentName:"a"},"<Card />"))," etc."),(0,o.yg)("p",null,"The list of types of auth pages that are available in the UI integrations are:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="login" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="register" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="forgot-password" />')),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'<AuthPage type="reset-password" />'))),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/auth-page"},(0,o.yg)("inlineCode",{parentName:"a"},"<AuthPage />"))," component is as follows:"),(0,o.yg)(te,{mdxType:"AuthPage"})),(0,o.yg)("h3",{id:"error-components"},"Error Components"),(0,o.yg)(Fe,{id:"error-components",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Refine's Ant Design integration also provides an ",(0,o.yg)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component that you can use to render a 404 page in your app. While these components does not offer much functionality, they are provided as an easy way to render an error page with a consistent design language."),(0,o.yg)("p",null,"An example usage of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<ErrorComponent />")," component is as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/404.tsx"',title:'"pages/404.tsx"'},'import { ErrorComponent } from "@refinedev/antd";\n\nconst NotFoundPage = () => {\n  return <ErrorComponent />;\n};\n'))),(0,o.yg)("h2",{id:"theming"},"Theming"),(0,o.yg)(Fe,{id:"theming",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Since Refine offers application level components such as layout, sidebar and header and page level components for each action, it is important to have it working with the styling of Ant Design. All components and providers exported from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package will use the current theme of Ant Design without any additional configuration."),(0,o.yg)("p",null,"Additionally, Refine also provides a set of carefully crafted themes for Ant Design which outputs a nice UI with Refine's components with light and dark theme support. These themes are exported as ",(0,o.yg)("inlineCode",{parentName:"p"},"RefineThemes")," object from the ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/antd")," package and can be used in ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/components/config-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"<ConfigProvider />"))," component of Ant Design."),(0,o.yg)(le,{mdxType:"Theming"}),(0,o.yg)("p",null,"To learn more about the theme configuration of Ant Design, please refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://ant.design/docs/react/customize-theme"},"official documentation"),".")),(0,o.yg)("h2",{id:"inferencer"},"Inferencer"),(0,o.yg)(Fe,{id:"inferencer",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can automatically generate views for your resources using ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/inferencer"),". Inferencer exports the ",(0,o.yg)("inlineCode",{parentName:"p"},"AntdListInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"AntdShowInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"AntdEditInferencer"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"AntdCreateInferencer")," components and finally the ",(0,o.yg)("inlineCode",{parentName:"p"},"AntdInferencer")," component, which combines all in one place."),(0,o.yg)("p",null,"To learn more about Inferencer, please refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/components/inferencer"},"Ant Design Inferencer")," docs.")),(0,o.yg)("h2",{id:"known-issues"},"Known Issues"),(0,o.yg)(Fe,{id:"known-issues",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Next.js Pages Router with version 14 and above gives the following error when using ",(0,o.yg)("inlineCode",{parentName:"p"},"@ant-design")," package:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="Compile errors"',title:'"Compile','errors"':!0},"Server Error\nSyntaxError: Unexpected token 'export'\n\nThis error happened while generating the page. Any console logs will be displayed in the terminal window.\nCall Stack\n<unknown>\n/Users/user/Desktop/refine/node_modules/ (ant-design/icons-svg/es/asn/AccountBookFilled.js (3)\n")),(0,o.yg)("p",null,"You can find issue details from the official Ant Design repository:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/ant-design/ant-design/issues/43510"},"https://github.com/ant-design/ant-design/issues/43510")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/ant-design/ant-design/issues/46053"},"https://github.com/ant-design/ant-design/issues/46053")))))}Be.isMDXComponent=!0}}]);