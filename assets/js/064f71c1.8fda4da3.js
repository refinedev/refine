"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[76375],{58860:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>h});var a=t(37953);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},30127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});t(37953);var a=t(58860);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const l={title:"Introduction to Chakra UI",description:"Chakra UI is a comprehensive library of React components made to make creating user interfaces easier. .",slug:"chakra-ui",authors:"samuel_ogunleye",tags:["react","css","chakra-ui"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/social.png",hide_table_of_contents:!1},s=void 0,p={permalink:"/blog/chakra-ui",source:"@site/blog/2024-09-17-chakra-ui.md",title:"Introduction to Chakra UI",description:"Chakra UI is a comprehensive library of React components made to make creating user interfaces easier. .",date:"2024-09-17T00:00:00.000Z",formattedDate:"September 17, 2024",tags:[{label:"react",permalink:"/blog/tags/react"},{label:"css",permalink:"/blog/tags/css"},{label:"chakra-ui",permalink:"/blog/tags/chakra-ui"}],readingTime:19.955,hasTruncateMarker:!1,authors:[{name:"Samuel Ogunleye",title:"Frontend Engineer",imageURL:"https://github.com/Sproff.png",key:"samuel_ogunleye"}],frontMatter:{title:"Introduction to Chakra UI",description:"Chakra UI is a comprehensive library of React components made to make creating user interfaces easier. .",slug:"chakra-ui",authors:"samuel_ogunleye",tags:["react","css","chakra-ui"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/social.png",hide_table_of_contents:!1},prevItem:{title:"The Important Differences between URI VS URL",permalink:"/blog/uri-vs-url"},nextItem:{title:"Top Front-End Frameworks in 2024 Worth Your Time and Effort to Master",permalink:"/blog/best-front-end-frameworks-in-2024"},relatedPosts:[{title:"Create charts using Recharts",description:"We'll explore how to create charts in a Refine project using Recharts.",permalink:"/blog/recharts",formattedDate:"November 5, 2024",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:24.985,date:"2024-11-05T00:00:00.000Z"},{title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with Refine",permalink:"/blog/react-admin-tutorial",formattedDate:"March 3, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:27.285,date:"2023-03-03T00:00:00.000Z"},{title:"How to use Material UI Card Component",description:"We'll discover the Material UI Card component with examples",permalink:"/blog/material-ui-card",formattedDate:"December 26, 2024",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:13.84,date:"2024-12-26T00:00:00.000Z"}],authorPosts:[]},c={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"What is Chakra UI?",id:"what-is-chakra-ui",level:2},{value:"Standout Features of Chakra UI",id:"standout-features-of-chakra-ui",level:2},{value:"Components",id:"components",level:3},{value:"Slider",id:"slider",level:3},{value:"Stepper",id:"stepper",level:3},{value:"Hooks",id:"hooks",level:3},{value:"useClipboard",id:"useclipboard",level:3},{value:"useDisclosure",id:"usedisclosure",level:3},{value:"useTheme",id:"usetheme",level:3},{value:"Theming",id:"theming",level:3},{value:"Creating and Customizing Themes:",id:"creating-and-customizing-themes",level:3},{value:"Integrations",id:"integrations",level:3},{value:"Chakra UI Ecosystem and Plugins",id:"chakra-ui-ecosystem-and-plugins",level:2},{value:"Chakra UI Icons",id:"chakra-ui-icons",level:3},{value:"Chakra UI and Form Libraries",id:"chakra-ui-and-form-libraries",level:3},{value:"Chakra UI with Framer Motion",id:"chakra-ui-with-framer-motion",level:3},{value:"Chakra UI and Storybook",id:"chakra-ui-and-storybook",level:3},{value:"Chakra UI with Tailwind CSS",id:"chakra-ui-with-tailwind-css",level:3},{value:"Chakra UI Pro",id:"chakra-ui-pro",level:3},{value:"Bonus: Testing Chakra Components",id:"bonus-testing-chakra-components",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:d},m="wrapper";function h(e){var{components:n}=e,t=r(e,["components"]);return(0,a.yg)(m,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"This article was last updated on September 17, 2024, to expand usage of Chakra UI.")),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://chakra-ui.com/"},"Chakra UI")," has attracted a lot of attention over the years due to its versatility, ease of use, and customizable approach to integrating into any front-end application."),(0,a.yg)("p",null,"In this article, we\u2019ll look at how Chakra UI can help developers implement a fluid design with its simple configurations."),(0,a.yg)("h2",{id:"what-is-chakra-ui"},"What is Chakra UI?"),(0,a.yg)("p",null,"Chakra UI is a comprehensive library of React components made to make creating user interfaces easier. Chakra UI differs from traditional libraries in that it provides a distinct set of movable elements that put simplicity and adaptability first."),(0,a.yg)("p",null,"Without compromising their ability to customize designs to meet the demands of individual projects, developers can create sleek, modern interfaces with Chakra UI."),(0,a.yg)("p",null,"From buttons and forms to navigation elements, the library offers a wide range of pre-designed components that ensure developers can get started quickly while still allowing for extensive customization."),(0,a.yg)("h2",{id:"standout-features-of-chakra-ui"},"Standout Features of Chakra UI"),(0,a.yg)("p",null,"We'll do a practical application in this section."),(0,a.yg)("h3",{id:"components"},"Components"),(0,a.yg)("p",null,"Developers nowadays don't have the luxury of time to create components like overlays, disclosure, forms, layouts, and many more. Using components in applications is made simple right out of the box with a UI library like Chakra UI."),(0,a.yg)("p",null,"Consider the following scenario: you have a limited amount of time to develop fundamental components like ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider"),", and your team needs to release features in batches. It will be intimidating to write the entire logic from scratch."),(0,a.yg)("h3",{id:"slider"},"Slider"),(0,a.yg)("p",null,"Users can choose from a variety of values by using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider"),". The ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider")," component is useful in scenarios where you have a variety of options on a page and you want the user to choose a specific value and then use that value to perform additional actions. Under the hood, Chakra UI handles stress by providing you with only one state."),(0,a.yg)("p",null,"Create the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," subfolder by going to the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," folder. To use the code below, create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider.tsx")," file and copy and paste it."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport {\n  Box,\n  Slider,\n  SliderFilledTrack,\n  SliderMark,\n  SliderThumb,\n  SliderTrack,\n  Text,\n} from "@chakra-ui/react";\nimport { useState } from "react";\n\nexport const SliderComp = () => {\n  const [sliderValue, setSliderValue] = useState(50);\n\n  const labelStyles = {\n    mt: "2",\n    ml: "-2.5",\n    fontSize: "1.5rem",\n  };\n\n  return (\n    <Box>\n      <Text fontSize="2rem">1. Slider Component</Text>\n      <Box py="2rem">\n        <Slider\n          aria-label="slider-comp"\n          onChange={(val) => setSliderValue(val)}\n        >\n          <SliderMark value={0} {...labelStyles}>\n            0%\n          </SliderMark>\n          <SliderMark value={50} {...labelStyles}>\n            50%\n          </SliderMark>\n          <SliderMark value={100} {...labelStyles}>\n            100%\n          </SliderMark>\n          <SliderTrack>\n            <SliderFilledTrack bg="brand.green100" />\n          </SliderTrack>\n          <SliderThumb />\n        </Slider>\n        <Text mt="4rem" fontWeight="700">\n          Selected Value: {sliderValue}%\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"The code above controls how the user interacts with the slider by retaining the states of each selected percentage. The ",(0,a.yg)("inlineCode",{parentName:"p"},"useState")," listens for changes around the ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider")," and then displays the selected value to the user."),(0,a.yg)("p",null,"Then, in the ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," folder, copy and paste this code into the ",(0,a.yg)("inlineCode",{parentName:"p"},"page.tsx"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="app/page.tsx"',title:'"app/page.tsx"'},'import { SliderComp } from "@/components/Slider";\nimport { Box } from "@chakra-ui/react";\n\nconst Home = () => {\n  return (\n    <Box bg="brand.white200" p="3rem">\n      <SliderComp />\n    </Box>\n  );\n};\nexport default Home;\n')),(0,a.yg)("p",null,"This calls\xa0the ",(0,a.yg)("inlineCode",{parentName:"p"},"SliderComp")," and displays it on the browser."),(0,a.yg)("p",null,"The output can be seen below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/1.gif",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"stepper"},"Stepper"),(0,a.yg)("p",null,"Stepper is most commonly found in form applications, data collection, and onboarding processes. It is a widely used component because it provides a smooth user experience."),(0,a.yg)("p",null,"It's also a new feature in Chakra UI due to its high demand, revealing that creating such a component from scratch is a lot of work because one will end up with a lot of states(previous and current) to maintain in an application."),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder and create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Stepper.tsx")," file. Copy and paste the code below."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Show Stepper.tsx"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import {\n  Box,\n  Button,\n  Flex,\n  Stack,\n  Step,\n  StepIcon,\n  StepIndicator,\n  StepSeparator,\n  StepStatus,\n  Stepper,\n  Text,\n  useSteps,\n} from "@chakra-ui/react";\nimport { useState } from "react";\n\nconst ContactInfo = () => {\n  return (\n    <Box py="2rem">\n      <Text>I\'m Samuel Ogunleye.</Text>\n      <Text>\n        Frontend Engineer, as well as a Technical Writer. A big fan of\n        open-source software.\n      </Text>\n    </Box>\n  );\n};\n\nconst Stacks = () => {\n  return (\n    <Box>\n      <Text py="2rem">\n        I love JavaScript, TypeScript, and Next.js \u2013 all aspects of frontend\n        development!\n      </Text>\n    </Box>\n  );\n};\n\nconst Final = () => {\n  return (\n    <Box>\n      <Text py="2rem">Any other information?</Text>\n    </Box>\n  );\n};\n\nconst steps = [\n  { title: "Contact", description: ContactInfo },\n  { title: "Stacks", description: Stack },\n  { title: "Final", description: Final },\n];\n\nexport const StepperComp = () => {\n  const { activeStep } = useSteps({\n    index: 1,\n    count: steps.length,\n  });\n\n  const [currentStep, setCurrentStep] = useState<number>(activeStep);\n\n  const handleNextClick = () => {\n    setCurrentStep((prevStep) => (prevStep < 3 ? prevStep + 1 : prevStep));\n  };\n\n  const handlePreviousClick = () => {\n    setCurrentStep((prevStep) => (prevStep > 1 ? prevStep - 1 : prevStep));\n  };\n\n  return (\n    <Box mt="5rem">\n      <Text fontSize="2rem">2. Stepper Component</Text>\n      <Stack py="2rem">\n        <Stepper size="lg" colorScheme="green" index={currentStep} gap="2rem">\n          {steps.map((step, idx) => {\n            return (\n              <Step key={idx}>\n                {step.title}\n                <StepIndicator>\n                  <StepStatus complete={<StepIcon />} />\n                </StepIndicator>\n                <StepSeparator />\n              </Step>\n            );\n          })}\n        </Stepper>\n        <Box>\n          {currentStep === 1 ? (\n            <ContactInfo />\n          ) : currentStep === 2 ? (\n            <Stacks />\n          ) : (\n            <Final />\n          )}\n        </Box>\n\n        <Flex columnGap="2rem">\n          <Button\n            onClick={handlePreviousClick}\n            bg="brand.green100"\n            color="brand.white100"\n            fontSize="1.3rem"\n            py="1.8rem"\n            cursor={currentStep === 1 ? "not-allowed" : "pointer"}\n          >\n            Previous\n          </Button>\n\n          <Button\n            onClick={handleNextClick}\n            bg="brand.green100"\n            color="brand.white100"\n            fontSize="1.3rem"\n            py="1.8rem"\n            cursor={currentStep === 3 ? "not-allowed" : "pointer"}\n          >\n            Next\n          </Button>\n        </Flex>\n      </Stack>\n    </Box>\n  );\n};\n'))),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"ContactInfo"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Stacks"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"Final")," components contain basic information about a user that will be dynamically rendered inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"StepperComp")," component."),(0,a.yg)("p",null,"StepperComp: This is the main component that contains all of the minor components (",(0,a.yg)("inlineCode",{parentName:"p"},"ContactInfo"),",\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"Stacks"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"Final"),"). It is the component that will be exported to the ",(0,a.yg)("inlineCode",{parentName:"p"},"page.tsx")," file within the ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," folder\xa0in order to be rendered to the browser."),(0,a.yg)("p",null,"useSteps: ",(0,a.yg)("inlineCode",{parentName:"p"},"useSteps")," has a built-in state that keeps track of all the logic for us."),(0,a.yg)("p",null,"useState: An additional state was added to handle the ",(0,a.yg)("inlineCode",{parentName:"p"},"Previous")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Next")," buttons, allowing the user to navigate through each stepper information that is used inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"handlePreviousClick")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"handleNextClick")," functions."),(0,a.yg)("p",null,"steps: This variable stores each ",(0,a.yg)("inlineCode",{parentName:"p"},"Stepper"),"'s data and is dynamically rendered based on the ",(0,a.yg)("inlineCode",{parentName:"p"},"currentStep")," state."),(0,a.yg)("p",null,"The output can be seen below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/2.gif",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"Building a stepper component from scratch can be a real headache. The complexity of handling various states makes it a difficult task to create a custom solution tailored to your needs."),(0,a.yg)("p",null,"With Chakra UI, you get the flexibility to leverage and extend existing components that seamlessly handle all the complicated logic behind the scenes."),(0,a.yg)("h3",{id:"hooks"},"Hooks"),(0,a.yg)("p",null,"If you've been coding for a while and have encountered the complexity of React logic firsthand, especially dealing with operations within classes, you'll truly appreciate the revolutionary introduction of React hooks."),(0,a.yg)("p",null,"With the increasing shift from classes to hooks, UI libraries like Chakra UI have made writing logic a breeze. Let\u2019s explore some of the available hooks in Chakra UI."),(0,a.yg)("h3",{id:"useclipboard"},"useClipboard"),(0,a.yg)("p",null,"This is a hook that allows a user to copy any content to the clipboard."),(0,a.yg)("p",null,"Let's use our ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider")," component once more. Remember that there is a state that keeps track of how the user selects any value on the ",(0,a.yg)("inlineCode",{parentName:"p"},"Slider"),". Let's now add the ability to copy the selected stored value to the clipboard."),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder and create a ",(0,a.yg)("inlineCode",{parentName:"p"},"SliderWithClipboard.tsx")," file. Copy and paste the code below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport {\n  Box,\n  Button,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  Flex,\n  Slider,\n  SliderFilledTrack,\n  SliderMark,\n  SliderThumb,\n  SliderTrack,\n  Text,\n  useClipboard,\n} from "@chakra-ui/react";\nimport { useEffect, useState } from "react";\n\nexport const SliderWithClipboardComp = () => {\n  const [sliderValue, setSliderValue] = useState(50);\n  const { onCopy, setValue, hasCopied } = useClipboard("");\n\n  const labelStyles = {\n    mt: "2",\n    ml: "-2.5",\n    fontSize: "1.5rem",\n  };\n\n  useEffect(() => {\n    setValue(String(`${sliderValue}%`));\n  }, [sliderValue, setValue]);\n\n  return (\n    <Box mt="5rem">\n      <Text fontSize="2rem">3. Slider With Clipboard Component</Text>\n      <Box py="2rem">\n        <Slider\n          aria-label="slider-comp"\n          onChange={(val) => setSliderValue(val)}\n        >\n          <SliderMark value={0} {...labelStyles}>\n            0%\n          </SliderMark>\n          <SliderMark value={50} {...labelStyles}>\n            50%\n          </SliderMark>\n          <SliderMark value={100} {...labelStyles}>\n            100%\n          </SliderMark>\n          <SliderTrack>\n            <SliderFilledTrack bg="brand.green100" />\n          </SliderTrack>\n          <SliderThumb />\n        </Slider>\n        <Flex mt="4rem" columnGap="1rem">\n          <Text fontWeight="700">Selected Value: {sliderValue}%</Text>\n          <Button\n            fontSize="1.5rem"\n            bg="brand.green100"\n            color="brand.white100"\n            onClick={onCopy}\n          >\n            {hasCopied ? "Copied!" : "Copy"}\n          </Button>\n        </Flex>\n        <Editable placeholder="Paste here" mt=".5rem">\n          <EditablePreview\n            border="1px solid"\n            borderColor="brand.green100"\n            borderRadius="1rem"\n            p=".5rem 1rem"\n            w="10%"\n          />\n          <EditableInput _focus={{ boxShadow: "none" }} />\n        </Editable>\n      </Box>\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"To achieve the copy functionality, the ",(0,a.yg)("inlineCode",{parentName:"p"},"useClipboard")," hook was added to the existing Slider component. It provides properties destructured from the ",(0,a.yg)("inlineCode",{parentName:"p"},"useClipboard")," hook, such as ",(0,a.yg)("inlineCode",{parentName:"p"},"setValue"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"onCopy"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"hasCopied"),"."),(0,a.yg)("p",null,"The setValue function is used within a ",(0,a.yg)("inlineCode",{parentName:"p"},"useEffect")," to track and set the current ",(0,a.yg)("inlineCode",{parentName:"p"},"sliderValue")," whenever a change occurs."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Editable")," component previews what was copied from the clipboard."),(0,a.yg)("p",null,"The output can be seen below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/3.gif",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"usedisclosure"},"useDisclosure"),(0,a.yg)("p",null,"This\xa0is another type of hook that helps in triggering the action of modals. It is very simple to use because it makes use of readily available components that handle everything under the hood for us."),(0,a.yg)("p",null,"Creating modals without using prebuilt components involves tracking several user events."),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder and create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Disclosure.tsx")," file. Copy and paste the code below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport {\n  Box,\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Text,\n  useDisclosure,\n} from "@chakra-ui/react";\n\nexport const DisclosureComp = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <Box mt="5rem">\n      <Text fontSize="2rem">4. Disclosure Component</Text>\n      <Button\n        onClick={onOpen}\n        fontSize="1.3rem"\n        bg="brand.green100"\n        color="brand.white100"\n        p="1.8rem 2rem"\n        mt=".5rem"\n      >\n        View Profile\n      </Button>\n      <Drawer placement="bottom" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader\n            borderBottomWidth=".2rem"\n            borderBottomColor="brand.green100"\n            fontSize="1.8rem"\n          >\n            Basic Information\n          </DrawerHeader>\n          <DrawerBody py="2rem">\n            <Text>Name: Samuel</Text>\n            <Text py="1rem">Title: Frontend Engineer</Text>\n            <Text>Language: JavaScript, TypeScript</Text>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"The code above returns three values: ",(0,a.yg)("inlineCode",{parentName:"p"},"isOpen"),"\xa0which indicates whether the modal is open, ",(0,a.yg)("inlineCode",{parentName:"p"},"onOpen"),"\xa0which indicates a function to open the modal, and ",(0,a.yg)("inlineCode",{parentName:"p"},"onClose")," which indicates a function to close the modal."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Drawer")," component handles the rest of the display because it has some logic attached to it that works behind the scenes. This handles some heavylifting that users ought to do."),(0,a.yg)("p",null,"The output can be seen below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/4.gif",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"usetheme"},"useTheme"),(0,a.yg)("p",null,"This hook provides you with the ability to alter the ",(0,a.yg)("inlineCode",{parentName:"p"},"theme")," object. There may be times when you need to change the colors or fonts in an application on a global scale; the ",(0,a.yg)("inlineCode",{parentName:"p"},"theme")," object allows you to customize to your needs."),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," folder and create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Theme.tsx")," file. Copy and paste the code below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport { Box, Text, useTheme } from "@chakra-ui/react";\n\nexport const ThemeComp = () => {\n  const theme = useTheme();\n  // console.log("theme", theme);\n\n  const customStyle = {\n    background: theme.colors.black,\n    color: theme.colors.brand.white100,\n    fontSize: theme.fontSizes.lg,\n  };\n\n  return (\n    <Box mt="5rem">\n      <Text fontSize="2rem">5. Theme Component</Text>\n      <Box\n        py="2rem"\n        bg="brand.green100"\n        color="brand.white100"\n        p="1rem"\n        rounded="lg"\n        // style={customStyle}\n      >\n        <Text>This text is styled using the color from the theme.</Text>\n        <Text py="2rem">\n          This text is styled using the color from the theme.\n        </Text>\n        <Text>This text is styled using the color from the theme.</Text>\n      </Box>\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"console.log")," in the above\xa0code displays all of the application's configurations. It provides complete access to what your application entails. Take a look at the ",(0,a.yg)("inlineCode",{parentName:"p"},"console.log")," result below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/5.png",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"customStyle")," variable is used to modify our app's existing configurations. Look at the output below before making any changes."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/6.png",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("p",null,"Now, let's uncomment the ",(0,a.yg)("inlineCode",{parentName:"p"},"styles prop - styles={customStyle}")," and look at the new output below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/7.png",alt:"chakra ui"})),(0,a.yg)("br",null),"The background color, the text color, and the font size have all been modified.",(0,a.yg)("p",null,"Doesn't it look good? That's the power of the ",(0,a.yg)("inlineCode",{parentName:"p"},"useTheme")," hook!"),(0,a.yg)("h3",{id:"theming"},"Theming"),(0,a.yg)("p",null,"Theming is an important aspect of an application; it can be referred to as the application's design system because it involves you having configurations for fonts, colors, and anything else you can think of."),(0,a.yg)("h3",{id:"creating-and-customizing-themes"},"Creating and Customizing Themes:"),(0,a.yg)("p",null,"We'll take a hands-on approach here, demonstrating how to create and customize Chakra UI themes. In our application, we'll be\xa0changing the colors and typography."),(0,a.yg)("p",null,"This configuration structure may differ depending on the developers' knowledge of code architecture."),(0,a.yg)("p",null,"Navigate to ",(0,a.yg)("inlineCode",{parentName:"p"},"styles"),"\xa0folder\xa0and you'll see that the configuration was done when you cloned the repo at the start of the application."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"globals.css")," is a file in the ",(0,a.yg)("inlineCode",{parentName:"p"},"styles")," folder where you can put your CSS styles. Only the font used in our application was imported in our application."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'@import url("https://fonts.googleapis.com/css2?family=Andika:wght@400;700&family=Nunito:wght@300;400;500;600;700;800;900&display=swap");\n\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"themes")," is a subfolder inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"styles")," folder. There are files named index.ts and ",(0,a.yg)("inlineCode",{parentName:"p"},"global.ts")," inside the themes folder, as well as another folder called the foundation folder."),(0,a.yg)("p",null,"To manage all of the colors we will be using in the application, a ",(0,a.yg)("inlineCode",{parentName:"p"},"color.ts")," file was made and placed inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"foundation")," folder."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'const customColors = {\n  brand: {\n    white100: "rgba(255, 255, 255, 1)",\n    white200: "rgba(255, 253, 248, 1)",\n    dark100: "rgba(41, 42, 47, 1)",\n    dark200: "rgba(25, 28, 45, 1)",\n    green100: "rgba(69, 205, 129, 1)",\n  },\n};\n\nexport { customColors };\n')),(0,a.yg)("p",null,"The global configuration for the ",(0,a.yg)("inlineCode",{parentName:"p"},"fontFamily")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"fontSize")," used throughout the body of the ",(0,a.yg)("inlineCode",{parentName:"p"},"HTML")," is contained in the global.ts file."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'const globalStyles = {\n  global: {\n    html: {\n      fontSize: "62.5%",\n      scrollBehavior: "smooth !important",\n    },\n    body: {\n      fontFamily: "\'Poppins\', sans-serif",\n      fontSize: "1.6rem",\n    },\n  },\n};\n\nexport { globalStyles };\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"index.ts")," file acts as a bridge, linking all of the separated config files via the ",(0,a.yg)("inlineCode",{parentName:"p"},"extendTheme")," function. It overrides the application's default theme."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { extendTheme } from "@chakra-ui/react";\nimport { customColors as colors } from "@/styles/themes/foundation/colors";\nimport { globalStyles as styles } from "@/styles/themes/global";\n\nconst customTheme = extendTheme({\n  colors,\n  styles,\n});\n\nexport { customTheme };\n')),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," folder to find the ",(0,a.yg)("inlineCode",{parentName:"p"},"providers.tsx")," file. This is where the ",(0,a.yg)("inlineCode",{parentName:"p"},"customTheme")," is now registered within the ",(0,a.yg)("inlineCode",{parentName:"p"},"ChakraProvider"),", making it available to all ",(0,a.yg)("inlineCode",{parentName:"p"},"components")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"pages")," globally."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport { customTheme } from "@/styles/themes";\nimport { ChakraProvider } from "@chakra-ui/react";\nimport "@/styles/globals.css";\n\nexport const Providers = ({ children }: { children: React.ReactNode }) => {\n  return <ChakraProvider theme={customTheme}>{children}</ChakraProvider>;\n};\n')),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},"Implementing dark mode\nYou may be aware of the popular\xa0trend of users switching from dark to light mode on their themes. To demonstrate how it can be utilized in an application, let's build a basic component.")),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"app")," folder and create a ",(0,a.yg)("inlineCode",{parentName:"p"},"DarkModeToggle.tsx")," file. Copy and paste the code below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'"use client";\n\nimport {\n  Box,\n  Button,\n  Text,\n  useColorMode,\n  useColorModeValue,\n} from "@chakra-ui/react";\n\nexport const DarkModeToggleComp = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const bgValue = useColorModeValue("brand.green100", "brand.dark100");\n  const colorValue = useColorModeValue("brand.dark100", "brand.green100");\n\n  return (\n    <Box mt="5rem">\n      <Text p="2rem" bg={bgValue} fontSize="2rem" color={colorValue}>\n        6. Dark Mode Toggle Component\n      </Text>\n      <Box p="2rem" bg={bgValue}>\n        <Text color={colorValue}>Change my color please :)</Text>\n      </Box>\n      <Button\n        mt="1rem"\n        fontSize="1.5rem"\n        py="1.8rem"\n        bg={bgValue}\n        color={colorValue}\n        onClick={toggleColorMode}\n      >\n        Toggle {colorMode === "light" ? "Dark" : "Light"}\n      </Button>\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"useColorMode")," hook makes it simple to control the light or dark color mode in our application. This makes it easy for developing dynamic user interfaces that change based on the preferences of the user."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"UseColorModeValue")," lets you change particular elements like font sizes, colors, and backgrounds. It works inside the specific\xa0component. It accepts two arguments(first and second) which are ",(0,a.yg)("inlineCode",{parentName:"p"},"lightModeValue")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"darkModeValue")," respectively."),(0,a.yg)("p",null,"The output can be seen below."),(0,a.yg)("div",{className:"centered-image"},(0,a.yg)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-12-19-chakra-ui/8.gif",alt:"chakra ui"})),(0,a.yg)("br",null),(0,a.yg)("h3",{id:"integrations"},"Integrations"),(0,a.yg)("p",null,"The most fascinating feature of Chakra UI is its compatibility with various other frameworks. It allows us to utilize all of the features, including hooks and components, while combining them with the capabilities of the framework."),(0,a.yg)("p",null,"Refine offers a dedicated integration package for the Chakra UI framework, which includes a collection of ready-to-use components and hooks designed to seamlessly link Refine with Chakra UI elements."),(0,a.yg)("p",null,"Refer to Chakra UI docs in Refine ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/ui-integrations/chakra-ui/introduction/"},"here"),"."),(0,a.yg)("p",null,"Refer to complete tutorial on how to integrate Chakra UI with Refine ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/introduction/select-framework/"},"here"),"."),(0,a.yg)("p",null,"Let's look at ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine"),", a React-based framework as a usecase. We will build another simple app from scratch."),(0,a.yg)("p",null,"Open your terminal, copy and paste the code below."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"npm create refine-app@latest\n")),(0,a.yg)("p",null,'Choosing "Chakra UI" as your UI framework will automatically install all necessary dependencies and create a starter template for you.'),(0,a.yg)("p",null,"Here is an example component that uses ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Chakra UI")," together."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'import { Box, Flex } from "@chakra-ui/react";\nimport { DateField, List, TagField, TextField } from "@refinedev/chakra-ui";\nimport { useList } from "@refinedev/core";\n\ntype ProductProps = {\n  id: number;\n  title: string;\n  status: string;\n  publishedAt: string;\n  status_color: string;\n};\n\nexport const RefineWithChakraUIComp = () => {\n  const { data, isLoading } = useList<ProductProps>({\n    resource: "posts",\n  });\n  const posts = data?.data;\n\n  return (\n    <Box>\n      {isLoading ? (\n        <TextField p="2rem" value="Fetching posts..." />\n      ) : (\n        <List title="7. Refine With Chakra UI">\n          {posts?.slice(0, 6).map((item) => (\n            <Box\n              key={item.id}\n              bg="brand.white200"\n              border="1px solid"\n              borderColor="brand.green100"\n              borderRadius="1rem"\n              mb="1rem"\n              overflow="hidden"\n              p="1rem"\n            >\n              <Flex>\n                <TextField fontWeight="700" mr="1rem" value="Title:" />\n                <TextField value={item.title} />\n              </Flex>\n\n              <Flex>\n                <TextField fontWeight="700" mr="1rem" value="Status:" />\n                <TagField\n                  bg={item.status_color}\n                  color="brand.white100"\n                  value={item.status}\n                />\n              </Flex>\n              <Flex>\n                <TextField fontWeight="700" mr="1rem" value="Published Date:" />\n                <DateField value={item.publishedAt} />{" "}\n              </Flex>\n            </Box>\n          ))}\n        </List>\n      )}\n    </Box>\n  );\n};\n')),(0,a.yg)("p",null,"In the above code, we created a simple application that makes use of ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," features such as ",(0,a.yg)("inlineCode",{parentName:"p"},"DateField"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"List"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"TagField"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"TextField")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"useList"),"."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"DateField"),": This component manages data formatting without the need for an additional library such as ",(0,a.yg)("inlineCode",{parentName:"p"},"moment.js")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"day.js"),". It handles it without any further logic."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"List"),": This acts as a layout and provides default spacing for components like ",(0,a.yg)("inlineCode",{parentName:"p"},"TextField"),". It allows for the addition of a ",(0,a.yg)("inlineCode",{parentName:"p"},"title prop")," that can take any value."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"TagField"),": This acts as a ",(0,a.yg)("inlineCode",{parentName:"p"},"Tag"),", providing a default wrapper for text and the ability to add extra customization such as colors."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"TextField"),": It functions as text, allowing you to render any text."),(0,a.yg)("p",null,"One interesting feature is how the data retrieval process was set up using the ",(0,a.yg)("a",{parentName:"p",href:"https://refine.dev/docs/core/hooks/data/use-list/"},(0,a.yg)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"useList"),": This is a hook that ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," provides out of the box when using their framework. It allows us to dynamically fetch data while also allowing us to filter, sort, and paginate any data retrieved from an API."),(0,a.yg)("p",null,"Under the hood, it uses ",(0,a.yg)("inlineCode",{parentName:"p"},"react-query"),", which, by convention, requires a significant amount of setup and configuration in an app before it can function properly. However, because it has been handled by ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine"),", we can utilize hooks like ",(0,a.yg)("inlineCode",{parentName:"p"},"useList")," without doing complex configurations."),(0,a.yg)("p",null,"This differentiates ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," and makes it reliable because it provides a user with two options: the flexibility of using any external UI library or the flexibility of utilizing the ",(0,a.yg)("inlineCode",{parentName:"p"},"hook")," and other features in ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," in a single application."),(0,a.yg)("p",null,"It has two destructured properties: ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"isLoading"),". ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," is the result of an API call, and ",(0,a.yg)("inlineCode",{parentName:"p"},"isLoading")," helps in rendering useful information to the user before the results are available. This has the standard ",(0,a.yg)("inlineCode",{parentName:"p"},"react-query")," features."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"resource")," argument in ",(0,a.yg)("inlineCode",{parentName:"p"},"useList")," points to the name ",(0,a.yg)("inlineCode",{parentName:"p"},'"posts"'),". This comes from the root layer of our application where ",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," was configured."),(0,a.yg)("p",null,"As you can see from the above output, using\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"Refine")," components and hooks makes everything function exactly the same way."),(0,a.yg)("p",null,'Here is the humanized version of the "Chakra UI Ecosystem and Plugins" section:'),(0,a.yg)("h2",{id:"chakra-ui-ecosystem-and-plugins"},"Chakra UI Ecosystem and Plugins"),(0,a.yg)("p",null,"Chakra UI has a strong backbone, but it also integrates very well with several plugins and tools that can make development even faster and more powerful. Here are some key things worth knowing:"),(0,a.yg)("h3",{id:"chakra-ui-icons"},"Chakra UI Icons"),(0,a.yg)("p",null,"Chakra includes, by default, an installed icon set, but we can extend it very easily by integrating it with ",(0,a.yg)("strong",{parentName:"p"},"React Icons")," or any other icon library. This will open up a lot of flexibility for using icons in our components."),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import { FaHome } from "react-icons/fa";\nimport { Icon } from "@chakra-ui/react";\n\n<Icon as={FaHome} boxSize={6} />;\n')),(0,a.yg)("p",null,"By doing this, we can easily use any popular icon set."),(0,a.yg)("h3",{id:"chakra-ui-and-form-libraries"},"Chakra UI and Form Libraries"),(0,a.yg)("p",null,"Chakra UI works very well with form management libraries like ",(0,a.yg)("strong",{parentName:"p"},"Formik")," and ",(0,a.yg)("strong",{parentName:"p"},"React Hook Form"),". These libraries make it easier for us to handle things such as form validation, form submissions, and managing state, while their components fit well with Chakra's styling."),(0,a.yg)("p",null,"Here is how you can use Chakra UI with Formik:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import { Formik, Form, Field } from "formik";\nimport { Button, Input } from "@chakra-ui/react";\n\n<Formik\n  initialValues={{ name: "" }}\n  onSubmit={(values) => {\n    console.log(values);\n  }}\n>\n  <Form>\n    <Field name="name">\n      {({ field }) => <Input {...field} placeholder="Name" />}\n    </Field>\n    <Button type="submit">Submit</Button>\n  </Form>\n</Formik>;\n')),(0,a.yg)("p",null,"Another good choice is ",(0,a.yg)("strong",{parentName:"p"},"React Hook Form"),", which also ties in nicely with Chakra's components."),(0,a.yg)("h3",{id:"chakra-ui-with-framer-motion"},"Chakra UI with Framer Motion"),(0,a.yg)("p",null,"Chakra UI has built-in support for the powerful animation library ",(0,a.yg)("strong",{parentName:"p"},"Framer Motion"),", making it super easy to create smooth animations and transitions for any Chakra UI component."),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import { motion } from "framer-motion";\nimport { Box } from "@chakra-ui/react";\n\nconst MotionBox = motion(Box);\n\n<MotionBox\n  animate={{ scale: 1.2 }}\n  transition={{ duration: 0.5 }}\n  bg="blue.500"\n  p={5}\n>\n  Animated Box\n</MotionBox>;\n')),(0,a.yg)("p",null,"This integration enables us to add animations without much extra code or setup."),(0,a.yg)("h3",{id:"chakra-ui-and-storybook"},"Chakra UI and Storybook"),(0,a.yg)("p",null,"Storybook works especially well to construct UI components in isolation, and Chakra UI plays along perfectly. We can document and test each Chakra component within Storybook, making it easier to build and showcase reusable components."),(0,a.yg)("p",null,"By installing ",(0,a.yg)("strong",{parentName:"p"},"@chakra-ui/storybook-addon"),", we get Chakra's theme and components set directly in Storybook:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @chakra-ui/storybook-addon\n")),(0,a.yg)("p",null,"Once installed, we can start creating or developing components through Storybook while maintaining Chakra UI's styling system."),(0,a.yg)("h3",{id:"chakra-ui-with-tailwind-css"},"Chakra UI with Tailwind CSS"),(0,a.yg)("p",null,"While Chakra UI has its own design system, it can also be combined with ",(0,a.yg)("strong",{parentName:"p"},"Tailwind CSS")," if we need utility-based styles. Using both approaches together is not very common, but some developers do like combining Chakra components with Tailwind utility classes for added flexibility."),(0,a.yg)("h3",{id:"chakra-ui-pro"},"Chakra UI Pro"),(0,a.yg)("p",null,"Chakra UI has a paid version called ",(0,a.yg)("strong",{parentName:"p"},"Chakra UI Pro"),", which contains pre-built, ready-to-use templates for things like dashboards and e-commerce sites. This saves a lot of development time if you need high-quality, ready-made components and layouts."),(0,a.yg)("h2",{id:"bonus-testing-chakra-components"},"Bonus: Testing Chakra Components"),(0,a.yg)("p",null,"Well, what I have been looking into is the testing of Chakra UI components. In fact, it is quite easy. We can test his components like regular React components using ",(0,a.yg)("strong",{parentName:"p"},"React Testing Library")," and ",(0,a.yg)("strong",{parentName:"p"},"Jest"),". It is cool to know that Chakra will handle lots of styling and accessibility out of the box, and we just have to check how the components behave."),(0,a.yg)("p",null,"Here is a simple example of how one might test a Chakra UI button:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import { render, screen } from "@testing-library/react";\nimport { Button } from "@chakra-ui/react";\n\ntest("renders Chakra UI button", () => {\n  render(<Button>Click me</Button>);\n  // check if the button is in document\n  const buttonElement = screen.getByText(/click me/i);\n  expect(buttonElement).toBeInTheDocument();\n});\n')),(0,a.yg)("p",null,"For this example, we are rendering, using ",(0,a.yg)("strong",{parentName:"p"},"React Testing Library"),", a button and checking if it's on the page with the text \"Click me.\" Chakra's styling does not impact how we test it, working just like testing any React component."),(0,a.yg)("p",null,"We can also test interactions. For example, let's say we want to test that a button calls a function when clicked:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'import { render, screen, fireEvent } from "@testing-library/react";\nimport { Button } from "@chakra-ui/react";\n\ntest("calls onClick when button is clicked", () => {\n  let handleClick = jest.fn();\n  render(<Button onClick={handleClick}>Click me</Button>);\n\n  const buttonElement = screen.getByText(/click me/i);\n  // Simulate click\n  fireEvent.click(buttonElement);\n\n  // Check if handleClick was called\n  expect(handleClick).toHaveBeenCalledTimes(1);\n});\n')),(0,a.yg)("p",null,"Here we make use of ",(0,a.yg)("strong",{parentName:"p"},"fireEvent")," to simulate a button click and ensure it calls the ",(0,a.yg)("inlineCode",{parentName:"p"},"onClick")," function."),(0,a.yg)("p",null,"For more involved components\u2014like modals or forms\u2014we do the exact same thing: render the component, perform whatever interaction with that component (actually opening the modal in this case), and assert whatever we expect to happen ends up happening."),(0,a.yg)("h2",{id:"conclusion"},"Conclusion"),(0,a.yg)("p",null,"By the end of this article, you should have a good understanding of how Chakra UI works, why it\u2019s significant in web applications, and how to integrate it with a React-based framework such as Refine."))}h.isMDXComponent=!0}}]);