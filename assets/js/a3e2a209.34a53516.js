"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[87230],{58860:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>m});var a=n(37953);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=o,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||r;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},50904:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>p});n(37953);var a=n(58860);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const s={title:"<AutoSaveIndicator />",description:"<AutoSaveIndicator /> component shows `autoSave` status on edit actions.",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/form/auto-save-indicator.tsx"},c=void 0,u={unversionedId:"ui-integrations/shadcn/components/auto-save-indicator/index",id:"ui-integrations/shadcn/components/auto-save-indicator/index",title:"<AutoSaveIndicator />",description:"<AutoSaveIndicator /> component shows `autoSave` status on edit actions.",source:"@site/docs/ui-integrations/shadcn/components/auto-save-indicator/index.md",sourceDirName:"ui-integrations/shadcn/components/auto-save-indicator",slug:"/ui-integrations/shadcn/components/auto-save-indicator/",permalink:"/docs/ui-integrations/shadcn/components/auto-save-indicator/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/docs/ui-integrations/shadcn/components/auto-save-indicator/index.md",tags:[],version:"current",lastUpdatedBy:"\xd6zg\xfcr Ak\xe7a",lastUpdatedAt:1758111044,formattedLastUpdatedAt:"Sep 17, 2025",frontMatter:{title:"<AutoSaveIndicator />",description:"<AutoSaveIndicator /> component shows `autoSave` status on edit actions.",source:"https://github.com/refinedev/refine/tree/main/packages/refine-ui/registry/new-york/refine-ui/form/auto-save-indicator.tsx"},sidebar:"mainSidebar",previous:{title:"<ErrorComponent />",permalink:"/docs/ui-integrations/shadcn/components/error-component/"},next:{title:"Notification Provider",permalink:"/docs/ui-integrations/shadcn/components/notification-provider/"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuring Auto-Save Behavior",id:"configuring-auto-save-behavior",level:2},{value:"Customizing the Appearance",id:"customizing-the-appearance",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"AutoSaveIndicator",id:"autosaveindicator",level:3}],d=(g="DocThumbsUpDownFeedbackWidget",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var g;const m={toc:p},y="wrapper";function f(e){var{components:t}=e,n=i(e,["components"]);return(0,a.yg)(y,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"When you're editing data in admin panels, users want to know if their changes are being saved. The ",(0,a.yg)("inlineCode",{parentName:"p"},"<AutoSaveIndicator />")," component shows exactly that - it gives your users clear visual feedback about auto-save operations happening in the background."),(0,a.yg)("p",null,'This component automatically displays different states like "Saving...", "Saved", or error messages with appropriate icons, so users always know what\'s happening with their data. It\'s particularly useful in edit forms where you want to reassure users that their work isn\'t lost.'),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)(d,{id:"installation",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"Add the Auto Save Indicator component to your project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx shadcn@latest add https://ui.refine.dev/r/auto-save-indicator.json\n")),(0,a.yg)("p",null,"This will install the component with its dependencies:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"@refinedev/core")," - For Refine integration"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"lucide-react")," - For status icons"))),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)(d,{id:"usage",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"The most common use case is adding auto-save feedback to your edit forms. Here's how to set it up with React Hook Form:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/react-hook-form";\nimport { AutoSaveIndicator } from "@/components/refine-ui/form/auto-save-indicator";\nimport {\n  EditView,\n  EditViewHeader,\n} from "@/components/refine-ui/views/edit-view";\n\nexport default function EditPost() {\n  const {\n    refineCore: { onFinish, autoSaveProps },\n    ...form\n  } = useForm({\n    refineCoreProps: {\n      autoSave: {\n        enabled: true,\n        debounce: 1000, // Auto-save after 1 second of inactivity\n      },\n    },\n  });\n\n  return (\n    <EditView />\n      <EditViewHeader\n        title="Edit Post"\n        actionsSlot={<AutoSaveIndicator {...autoSaveProps} />}\n      />\n      {/* Your form fields here */}\n    </EditView>\n  );\n}\n')),(0,a.yg)("p",null,'That\'s it! The indicator will automatically show "Saving..." when the user makes changes, "Saved" when the operation completes, or error messages if something goes wrong.')),(0,a.yg)("h2",{id:"configuring-auto-save-behavior"},"Configuring Auto-Save Behavior"),(0,a.yg)(d,{id:"configuring-auto-save-behavior",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"You can customize how auto-save works by configuring the ",(0,a.yg)("inlineCode",{parentName:"p"},"autoSave")," options:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const {\n  refineCore: { autoSaveProps },\n  ...form\n} = useForm({\n  refineCoreProps: {\n    autoSave: {\n      enabled: true,\n      debounce: 1000, // Wait 1 second after user stops typing\n      invalidateOnUnmount: true, // Refresh data when component unmounts\n      onMutationSuccess: (data) => {\n        // Custom success handler\n        console.log("Auto-save successful:", data);\n      },\n      onMutationError: (error) => {\n        // Custom error handler\n        console.error("Auto-save failed:", error);\n      },\n    },\n  },\n});\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"debounce")," setting is particularly important - it prevents the component from saving on every keystroke, which would create too many API calls.")),(0,a.yg)("h2",{id:"customizing-the-appearance"},"Customizing the Appearance"),(0,a.yg)(d,{id:"customizing-the-appearance",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("p",null,"If you want to change how the status messages look, you can provide custom elements:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'const customElements = {\n  success: <span className="text-green-600">\u2713 Changes saved</span>,\n  error: <span className="text-red-600">\u26a0 Save failed - try again</span>,\n  loading: <span className="text-blue-600">Saving your changes...</span>,\n};\n\n<AutoSaveIndicator {...autoSaveProps} elements={customElements} />;\n')),(0,a.yg)("p",null,"This is useful when you want to match your app's specific design language or provide more detailed messaging.")),(0,a.yg)("h2",{id:"api-reference"},"API Reference"),(0,a.yg)("h3",{id:"autosaveindicator"},"AutoSaveIndicator"),(0,a.yg)(d,{id:"autosaveindicator",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Prop"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"status")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},'"loading" \\| "success" \\| "error" \\| "idle"')),(0,a.yg)("td",{parentName:"tr",align:null},"Current auto-save status")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"elements")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AutoSaveIndicatorElements")),(0,a.yg)("td",{parentName:"tr",align:null},"Optional custom elements for each state")))),(0,a.yg)("p",null,"The component automatically handles the different status states:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"loading")," - Shows while saving is in progress"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"success")," - Briefly displays when save completes"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"error")," - Shows when save operation fails"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"idle")," - Component is hidden (no active operation)"))))}f.isMDXComponent=!0}}]);