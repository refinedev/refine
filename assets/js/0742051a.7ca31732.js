"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[65473],{58860:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>R});var o=n(37953);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,R=p["".concat(u,".").concat(m)]||p[m]||c[m]||r;return n?o.createElement(R,a(a({ref:t},d),{},{components:n})):o.createElement(R,a({ref:t},d))}));function R(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},63938:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>y,frontMatter:()=>s,metadata:()=>l,toc:()=>p});n(37953);var o=n(58860);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const s={title:"Edit",swizzle:!0},u=void 0,l={unversionedId:"ui-integrations/material-ui/components/basic-views/edit/index",id:"version-4.xx.xx/ui-integrations/material-ui/components/basic-views/edit/index",title:"Edit",description:"` provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a `.",source:"@site/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/components/basic-views/edit/index.md",sourceDirName:"ui-integrations/material-ui/components/basic-views/edit",slug:"/ui-integrations/material-ui/components/basic-views/edit/",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/basic-views/edit/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/main/documentation/versioned_docs/version-4.xx.xx/ui-integrations/material-ui/components/basic-views/edit/index.md",tags:[],version:"4.xx.xx",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1755000415,formattedLastUpdatedAt:"Aug 12, 2025",frontMatter:{title:"Edit",swizzle:!0},sidebar:"mainSidebar",previous:{title:"Create",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/basic-views/create/"},next:{title:"List",permalink:"/docs/4.xx.xx/ui-integrations/material-ui/components/basic-views/list/"}},d={},p=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"resource",id:"resource",level:3},{value:"saveButtonProps",id:"savebuttonprops",level:3},{value:"canDelete and deleteButtonProps",id:"candelete-and-deletebuttonprops",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"mutationMode",id:"mutationmode",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:"breadcrumb",id:"breadcrumb",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",t)},m=c("DocThumbsUpDownFeedbackWidget"),R=c("PropsTable"),g={toc:p},h="wrapper";function y(e){var{components:t}=e,n=a(e,["components"]);return(0,o.yg)(h,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){i(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>")),"."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport { TextField, Autocomplete, Box } from "@mui/material";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nconst SampleEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const samplesData = query?.data?.data;\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: "categories",\n    defaultValue: samplesData?.category?.id,\n  });\n\n  return (\n    <Edit saveButtonProps={saveButtonProps}>\n      <Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          {...register("id", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.id}\n          helperText={(errors as any)?.id?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="number"\n          label="Id"\n          name="id"\n          disabled\n        />\n        <TextField\n          {...register("title", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="text"\n          label="Title"\n          name="title"\n        />\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ""\n                );\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<SampleEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(m,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows the addition of titles inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>"),' component. If you don\'t pass title props it uses "Edit" prefix and singular resource name by default. For example, for the ',(0,o.yg)("inlineCode",{parentName:"p"},"/posts/edit"),' resource, it will be "Edit post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Typography } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit title={<Typography variant="h5">Custom Title</Typography>}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(m,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="posts" recordItemId={123}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<CustomPage />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"savebuttonprops"},"saveButtonProps"),(0,o.yg)(m,{id:"savebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component has a save button that submits the form by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," property:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit saveButtonProps={{ size: "small" }}>\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"candelete-and-deletebuttonprops"},"canDelete and deleteButtonProps"),(0,o.yg)(m,{id:"candelete-and-deletebuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," allows us to add the delete button inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component. If the resource has the ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," property, Refine adds the delete button by default. If you want to customize this button you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," property like the code below."),(0,o.yg)("p",null,"When clicked on, the delete button executes the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,o.yg)("inlineCode",{parentName:"a"},"useDelete"))," method provided by the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"dataProvider")),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostEdit: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Edit\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      deleteButtonProps={{ size: "small" }}\n      /* highlight-end */\n      saveButtonProps={{ size: "small" }}\n    >\n      <p>Rest of your page here</p>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="/posts/edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(m,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL, like when its used on a custom page, modal or drawer."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Edit resource="posts" recordItemId={123}>\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="/posts/edit/:id" element={<CustomPage />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"mutationmode"},"mutationMode"),(0,o.yg)(m,{id:"mutationmode",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"Determines which mode mutation will have while executing ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/edit/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport { TextField, Autocomplete, Box } from "@mui/material";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nconst SampleEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: { query },\n    register,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const samplesData = query?.data?.data;\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: "categories",\n    defaultValue: samplesData?.category?.id,\n  });\n\n  return (\n    <Edit\n      saveButtonProps={saveButtonProps}\n      canDelete\n      // highlight-next-line\n      mutationMode="undoable"\n    >\n      <Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          {...register("id", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.id}\n          helperText={(errors as any)?.id?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="number"\n          label="Id"\n          name="id"\n          disabled\n        />\n        <TextField\n          {...register("title", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="text"\n          label="Title"\n          name="title"\n        />\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ""\n                );\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<SampleEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(m,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Edit } from "@refinedev/mui";\n\n// highlight-start\nconst PostEdit = () => {\n  return <Edit dataProviderName="other">...</Edit>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(m,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Button } from "@mui/material";\nimport { useBack } from "@refinedev/core";\n\nconst BackButton = () => {\n  const goBack = useBack();\n\n  return <Button onClick={goBack}>BACK!</Button>;\n};\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-next-line\n      goBack={<BackButton />}\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(m,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Edit\n      // highlight-next-line\n      isLoading={loading}\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb"},"breadcrumb"),(0,o.yg)(m,{id:"breadcrumb",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/mui")," package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, Breadcrumb } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,o.yg)(m,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the wrapper of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      wrapperProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(m,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"contentprops"},"contentProps"),(0,o.yg)(m,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the content of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      contentProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>{" "}\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(m,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, refreshButtonProps, listButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,'If "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button variant="contained">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"refreshButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, ListButton, RefreshButton } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtons={({ refreshButtonProps, listButtonProps }) => (\n        <>\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n          {listButtonProps && (\n            <ListButton {...listButtonProps} meta={{ foo: "bar" }} />\n          )}\n          <Button variant="contained">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(m,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      headerButtonProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://mui.com/material-ui/api/box/"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Material UI ","\u2192")))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(m,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," at the footer."),(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, saveButtonProps, deleteButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("p",null,"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-deletebuttonprops"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button variant="contained">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"saveButtonProps")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/save-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<SaveButton>"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/material-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit, SaveButton, DeleteButton } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  return (\n    <Edit\n      // highlight-start\n      footerButtons={({ saveButtonProps, deleteButtonProps }) => (\n        <>\n          <Button type="primary">Custom Button</Button>\n          <SaveButton {...saveButtonProps} hideText />\n          {deleteButtonProps && (\n            <DeleteButton {...deleteButtonProps} hideText />\n          )}\n        </>\n      )}\n      // highlight-end\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      initialRoutes={["/posts", "/posts/edit/123"]}\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(m,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=320px url=http://localhost:3000/posts/edit/123",live:!0,disableScroll:!0,previewHeight:"320px",url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostEdit: React.FC = () => {\n  return (\n    <Edit\n      // highlight-start\n      footerButtonProps={{\n        sx: {\n          backgroundColor: "lightsteelblue",\n        },\n      }}\n      // highlight-end\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button variant="contained">Custom Button</Button>\n        </>\n      )}\n    >\n      <span>Rest of your page here</span>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<PostEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,o.yg)(m,{id:"autosaveprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can use the auto save feature of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"autoSaveProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123",live:!0,url:"http://localhost:3000/posts/edit/123"},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { Edit, useAutocomplete } from "@refinedev/mui";\nimport { TextField, Autocomplete, Box } from "@mui/material";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nconst SampleEdit = () => {\n  const {\n    saveButtonProps,\n    refineCore: {\n      query,\n      // highlight-next-line\n      autoSaveProps,\n    },\n    register,\n    control,\n    formState: { errors },\n  } = useForm({\n    // highlight-start\n    refineCoreProps: {\n      autoSave: {\n        enabled: true,\n      },\n    },\n    // highlight-end\n  });\n\n  const samplesData = query?.data?.data;\n\n  const { autocompleteProps: categoryAutocompleteProps } = useAutocomplete({\n    resource: "categories",\n    defaultValue: samplesData?.category?.id,\n  });\n\n  return (\n    <Edit\n      saveButtonProps={saveButtonProps}\n      // highlight-next-line\n      autoSaveProps={autoSaveProps}\n    >\n      <Box\n        component="form"\n        sx={{ display: "flex", flexDirection: "column" }}\n        autoComplete="off"\n      >\n        <TextField\n          {...register("id", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.id}\n          helperText={(errors as any)?.id?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="number"\n          label="Id"\n          name="id"\n          disabled\n        />\n        <TextField\n          {...register("title", {\n            required: "This field is required",\n          })}\n          error={!!(errors as any)?.title}\n          helperText={(errors as any)?.title?.message}\n          margin="normal"\n          fullWidth\n          slotProps={{\n            InputLabelProps: { shrink: true },\n          }}\n          type="text"\n          label="Title"\n          name="title"\n        />\n        <Controller\n          control={control}\n          name="category"\n          rules={{ required: "This field is required" }}\n          // eslint-disable-next-line\n          defaultValue={null as any}\n          render={({ field }) => (\n            <Autocomplete\n              {...categoryAutocompleteProps}\n              {...field}\n              onChange={(_, value) => {\n                field.onChange(value);\n              }}\n              getOptionLabel={(item) => {\n                return (\n                  categoryAutocompleteProps?.options?.find(\n                    (p) => p?.id?.toString() === item?.id?.toString(),\n                  )?.title ?? ""\n                );\n              }}\n              isOptionEqualToValue={(option, value) =>\n                value === undefined ||\n                option?.id?.toString() === (value?.id ?? value)?.toString()\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label="Category"\n                  margin="normal"\n                  variant="outlined"\n                  error={!!(errors as any)?.category?.id}\n                  helperText={(errors as any)?.category?.id?.message}\n                  required\n                />\n              )}\n            />\n          )}\n        />\n      </Box>\n    </Edit>\n  );\n};\n// visible-block-end\n\nrender(\n  <ReactRouter.BrowserRouter>\n    <RefineMuiDemo\n      resources={[\n        {\n          name: "posts",\n          list: "/posts",\n          edit: "/posts/edit/:id",\n        },\n      ]}\n    >\n      <ReactRouter.Routes>\n        <ReactRouter.Route\n          path="/posts"\n          element={\n            <div style={{ padding: 16 }}>\n              <ReactRouter.Outlet />\n            </div>\n          }\n        >\n          <ReactRouter.Route\n            index\n            element={\n              <div>\n                <p>This page is empty.</p>\n                <RefineMui.EditButton recordItemId="123">\n                  Edit Item 123\n                </RefineMui.EditButton>\n              </div>\n            }\n          />\n          <ReactRouter.Route path="edit/:id" element={<SampleEdit />} />\n        </ReactRouter.Route>\n      </ReactRouter.Routes>\n    </RefineMuiDemo>\n  </ReactRouter.BrowserRouter>,\n);\n'))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"properties-1"},"Properties"),(0,o.yg)(m,{id:"properties-1",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(R,{module:"@refinedev/mui/Edit","wrapperProps-type":"[`CardProps`](https://mui.com/material-ui/api/card/#props)","contentProps-type":"[`CardContentProps`](https://mui.com/material-ui/api/card-content/#props)","headerProps-type":"[`CardHeaderProps`](https://mui.com/material-ui/api/card-header/#props)","headerButtons-default":"[`ListButton`](/docs/ui-integrations/material-ui/components/buttons/list-button/) and [`RefreshButton`](/docs/ui-integrations/material-ui/components/buttons/refresh-button/)","headerButtonProps-type":"[`BoxProps`](https://mui.com/material-ui/api/box/#props)","deleteButtonProps-type":"[`DeleteButtonProps`](/docs/ui-integrations/material-ui/components/buttons/delete-button)","saveButtonProps-type":"[`SaveButtonProps`](/docs/ui-integrations/material-ui/components/buttons/save-button/)","footerButtons-default":"[`SaveButton`](/docs/ui-integrations/material-ui/components/buttons/save-button/) and [`DeleteButton`](/docs/ui-integrations/material-ui/components/buttons/delete-button/)","footerButtonsProps-type":"[`CardActionsProps`](https://mui.com/material-ui/api/card-actions/#props)","breadcrumb-default":"[`<Breadcrumb/>`](/docs/ui-integrations/material-ui/components/breadcrumb)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"})))}y.isMDXComponent=!0}}]);